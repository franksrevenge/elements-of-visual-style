(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{182:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(192);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(52).default\nvar update = add(\"265da9ba\", content, true, {\"sourceMap\":false});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/ZWRlNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUEwVjtBQUNoWCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLEVBQTBEO0FBQzVFLDZDQUE2QyxrQkFBa0IiLCJmaWxlIjoiMTgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIyNjVkYTliYVwiLCBjb250ZW50LCB0cnVlLCB7XCJzb3VyY2VNYXBcIjpmYWxzZX0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///182\n")},191:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(182);\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/MWMxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBdWEsQ0FBZ0IsdWVBQUcsRUFBQyIsImZpbGUiOiIxOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///191\n")},192:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(51)(false);\n// Module\nexports.push([module.i, ".container{margin:0 auto;min-height:100vh;display:flex;justify-content:center;align-items:center;text-align:center}.title{font-family:Quicksand,Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;display:block;font-weight:300;font-size:100px;color:#35495e;letter-spacing:1px}.subtitle{font-weight:300;font-size:42px;color:#526488;word-spacing:5px;padding-bottom:15px}.links{padding-top:15px}.wrapper{display:flex}.wrapper canvas{width:90%;margin-bottom:20pt;box-shadow:1px 2px 3px 0 rgba(0,0,0,.15)}.wrapper .container{margin-left:14rem;padding-top:1rem;max-width:720px}.wrapper .options.card{opacity:.4;margin-top:3rem;transition:all .2s}.wrapper .options.card:hover{opacity:1}.wrapper .sidebar{height:100vh;background:#5f6363;left:0;top:0;position:fixed;padding-left:10px;padding-right:10px;width:14rem;border-right:4px solid #727777;z-index:1000;box-shadow:0 0 5px 0 rgba(0,0,0,.5);display:block;overflow:auto}.wrapper .sidebar .toggle-sidebar{display:none}.wrapper .sidebar a.nav-link{color:#fff;padding:.25rem 1rem;transition:all .1s}.wrapper .sidebar a.nav-link.active{background-color:hsla(0,0%,100%,.07)!important;font-weight:500}.wrapper .sidebar .nav-pills .nav-link.active{background-color:hsla(0,0%,100%,.125);border:2px solid rgba(0,0,0,.1);font-weight:700}.wrapper .sidebar a.nav-link:hover{background-color:hsla(0,0%,100%,.03)}.wrapper .sidebar li.nav-item{text-align:left}.wrapper .sidebar h3{color:hsla(0,0%,100%,.4);margin-bottom:0;line-height:125%;padding:0;font-size:200%;margin-top:.5rem}.wrapper .sidebar h3.main{margin-bottom:1rem;color:hsla(0,0%,100%,.9);font-size:260%}@media (max-width:640px){.wrapper .sidebar{width:1rem;transition:all .3s;overflow:visible;overflow:initial}.wrapper .sidebar a.nav-link,.wrapper .sidebar h3{white-space:nowrap}.wrapper .sidebar *{opacity:0;pointer-events:none;transition:opacity .3s}.wrapper .sidebar button.toggle-sidebar{display:block;position:absolute;opacity:1;right:-1.25rem;transition:all .3s;top:50%;transform:translateY(-50%);background-color:#3f4242;border:0;color:#fff;border-radius:3px;height:3rem;text-align:center;margin-left:1rem;margin-right:1rem;line-height:0;pointer-events:auto}.wrapper .sidebar .toggle-sidebar.backdrop{background:transparent;opacity:1;display:block;position:absolute;top:0;left:0;width:2rem;height:100vh;margin:0;padding:0;pointer-events:auto;transition:background-color .3s,left .3s,width 0s .3s,-webkit-backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s .3s,backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s .3s,backdrop-filter .3s,-webkit-backdrop-filter .3s}.wrapper .container{margin-left:1rem}.wrapper.sidebar-active .sidebar{width:14rem}.wrapper.sidebar-active .sidebar *{opacity:1;pointer-events:auto}.wrapper.sidebar-active .sidebar button.toggle-sidebar{right:-1.66rem;transform:translateY(-50%) rotate(180deg)}.wrapper.sidebar-active .sidebar .toggle-sidebar.backdrop{background:rgba(0,0,0,.1);opacity:1;width:100vw;left:14rem;-webkit-backdrop-filter:blur(5px) grayscale(.65);backdrop-filter:blur(5px) grayscale(.65);transition:background-color .3s,left .3s,width 0s,-webkit-backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s,backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s,backdrop-filter .3s,-webkit-backdrop-filter .3s}}", ""]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/YWY0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxjQUFjLGNBQWMsaUJBQWlCLGFBQWEsdUJBQXVCLG1CQUFtQixrQkFBa0IsT0FBTyx1SEFBdUgsY0FBYyxnQkFBZ0IsZ0JBQWdCLGNBQWMsbUJBQW1CLFVBQVUsZ0JBQWdCLGVBQWUsY0FBYyxpQkFBaUIsb0JBQW9CLE9BQU8saUJBQWlCLFNBQVMsYUFBYSxnQkFBZ0IsVUFBVSxtQkFBbUIseUNBQXlDLG9CQUFvQixrQkFBa0IsaUJBQWlCLGdCQUFnQix1QkFBdUIsV0FBVyxnQkFBZ0IsbUJBQW1CLDZCQUE2QixVQUFVLGtCQUFrQixhQUFhLG1CQUFtQixPQUFPLE1BQU0sZUFBZSxrQkFBa0IsbUJBQW1CLFlBQVksK0JBQStCLGFBQWEsb0NBQW9DLGNBQWMsY0FBYyxrQ0FBa0MsYUFBYSw2QkFBNkIsV0FBVyxvQkFBb0IsbUJBQW1CLG9DQUFvQywrQ0FBK0MsZ0JBQWdCLDhDQUE4QyxzQ0FBc0MsZ0NBQWdDLGdCQUFnQixtQ0FBbUMscUNBQXFDLDhCQUE4QixnQkFBZ0IscUJBQXFCLHlCQUF5QixnQkFBZ0IsaUJBQWlCLFVBQVUsZUFBZSxpQkFBaUIsMEJBQTBCLG1CQUFtQix5QkFBeUIsZUFBZSx5QkFBeUIsa0JBQWtCLFdBQVcsbUJBQW1CLGlCQUFpQixpQkFBaUIsa0RBQWtELG1CQUFtQixvQkFBb0IsVUFBVSxvQkFBb0IsdUJBQXVCLHdDQUF3QyxjQUFjLGtCQUFrQixVQUFVLGVBQWUsbUJBQW1CLFFBQVEsMkJBQTJCLHlCQUF5QixTQUFTLFdBQVcsa0JBQWtCLFlBQVksa0JBQWtCLGlCQUFpQixrQkFBa0IsY0FBYyxvQkFBb0IsMkNBQTJDLHVCQUF1QixVQUFVLGNBQWMsa0JBQWtCLE1BQU0sT0FBTyxXQUFXLGFBQWEsU0FBUyxVQUFVLG9CQUFvQixrRkFBa0YsMEVBQTBFLHNHQUFzRyxvQkFBb0IsaUJBQWlCLGlDQUFpQyxZQUFZLG1DQUFtQyxVQUFVLG9CQUFvQix1REFBdUQsZUFBZSwwQ0FBMEMsMERBQTBELDBCQUEwQixVQUFVLFlBQVksV0FBVyxpREFBaUQseUNBQXlDLDhFQUE4RSxzRUFBc0UsbUdBQW1HIiwiZmlsZSI6IjE5Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvbnRhaW5lcnttYXJnaW46MCBhdXRvO21pbi1oZWlnaHQ6MTAwdmg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3RleHQtYWxpZ246Y2VudGVyfS50aXRsZXtmb250LWZhbWlseTpRdWlja3NhbmQsU291cmNlIFNhbnMgUHJvLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFNlZ29lIFVJLFJvYm90byxIZWx2ZXRpY2EgTmV1ZSxBcmlhbCxzYW5zLXNlcmlmO2Rpc3BsYXk6YmxvY2s7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtc2l6ZToxMDBweDtjb2xvcjojMzU0OTVlO2xldHRlci1zcGFjaW5nOjFweH0uc3VidGl0bGV7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtc2l6ZTo0MnB4O2NvbG9yOiM1MjY0ODg7d29yZC1zcGFjaW5nOjVweDtwYWRkaW5nLWJvdHRvbToxNXB4fS5saW5rc3twYWRkaW5nLXRvcDoxNXB4fS53cmFwcGVye2Rpc3BsYXk6ZmxleH0ud3JhcHBlciBjYW52YXN7d2lkdGg6OTAlO21hcmdpbi1ib3R0b206MjBwdDtib3gtc2hhZG93OjFweCAycHggM3B4IDAgcmdiYSgwLDAsMCwuMTUpfS53cmFwcGVyIC5jb250YWluZXJ7bWFyZ2luLWxlZnQ6MTRyZW07cGFkZGluZy10b3A6MXJlbTttYXgtd2lkdGg6NzIwcHh9LndyYXBwZXIgLm9wdGlvbnMuY2FyZHtvcGFjaXR5Oi40O21hcmdpbi10b3A6M3JlbTt0cmFuc2l0aW9uOmFsbCAuMnN9LndyYXBwZXIgLm9wdGlvbnMuY2FyZDpob3ZlcntvcGFjaXR5OjF9LndyYXBwZXIgLnNpZGViYXJ7aGVpZ2h0OjEwMHZoO2JhY2tncm91bmQ6IzVmNjM2MztsZWZ0OjA7dG9wOjA7cG9zaXRpb246Zml4ZWQ7cGFkZGluZy1sZWZ0OjEwcHg7cGFkZGluZy1yaWdodDoxMHB4O3dpZHRoOjE0cmVtO2JvcmRlci1yaWdodDo0cHggc29saWQgIzcyNzc3Nzt6LWluZGV4OjEwMDA7Ym94LXNoYWRvdzowIDAgNXB4IDAgcmdiYSgwLDAsMCwuNSk7ZGlzcGxheTpibG9jaztvdmVyZmxvdzphdXRvfS53cmFwcGVyIC5zaWRlYmFyIC50b2dnbGUtc2lkZWJhcntkaXNwbGF5Om5vbmV9LndyYXBwZXIgLnNpZGViYXIgYS5uYXYtbGlua3tjb2xvcjojZmZmO3BhZGRpbmc6LjI1cmVtIDFyZW07dHJhbnNpdGlvbjphbGwgLjFzfS53cmFwcGVyIC5zaWRlYmFyIGEubmF2LWxpbmsuYWN0aXZle2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDEwMCUsLjA3KSFpbXBvcnRhbnQ7Zm9udC13ZWlnaHQ6NTAwfS53cmFwcGVyIC5zaWRlYmFyIC5uYXYtcGlsbHMgLm5hdi1saW5rLmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMCwwJSwxMDAlLC4xMjUpO2JvcmRlcjoycHggc29saWQgcmdiYSgwLDAsMCwuMSk7Zm9udC13ZWlnaHQ6NzAwfS53cmFwcGVyIC5zaWRlYmFyIGEubmF2LWxpbms6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjpoc2xhKDAsMCUsMTAwJSwuMDMpfS53cmFwcGVyIC5zaWRlYmFyIGxpLm5hdi1pdGVte3RleHQtYWxpZ246bGVmdH0ud3JhcHBlciAuc2lkZWJhciBoM3tjb2xvcjpoc2xhKDAsMCUsMTAwJSwuNCk7bWFyZ2luLWJvdHRvbTowO2xpbmUtaGVpZ2h0OjEyNSU7cGFkZGluZzowO2ZvbnQtc2l6ZToyMDAlO21hcmdpbi10b3A6LjVyZW19LndyYXBwZXIgLnNpZGViYXIgaDMubWFpbnttYXJnaW4tYm90dG9tOjFyZW07Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjkpO2ZvbnQtc2l6ZToyNjAlfUBtZWRpYSAobWF4LXdpZHRoOjY0MHB4KXsud3JhcHBlciAuc2lkZWJhcnt3aWR0aDoxcmVtO3RyYW5zaXRpb246YWxsIC4zcztvdmVyZmxvdzp2aXNpYmxlO292ZXJmbG93OmluaXRpYWx9LndyYXBwZXIgLnNpZGViYXIgYS5uYXYtbGluaywud3JhcHBlciAuc2lkZWJhciBoM3t3aGl0ZS1zcGFjZTpub3dyYXB9LndyYXBwZXIgLnNpZGViYXIgKntvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOm9wYWNpdHkgLjNzfS53cmFwcGVyIC5zaWRlYmFyIGJ1dHRvbi50b2dnbGUtc2lkZWJhcntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO29wYWNpdHk6MTtyaWdodDotMS4yNXJlbTt0cmFuc2l0aW9uOmFsbCAuM3M7dG9wOjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKTtiYWNrZ3JvdW5kLWNvbG9yOiMzZjQyNDI7Ym9yZGVyOjA7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjNweDtoZWlnaHQ6M3JlbTt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tbGVmdDoxcmVtO21hcmdpbi1yaWdodDoxcmVtO2xpbmUtaGVpZ2h0OjA7cG9pbnRlci1ldmVudHM6YXV0b30ud3JhcHBlciAuc2lkZWJhciAudG9nZ2xlLXNpZGViYXIuYmFja2Ryb3B7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtvcGFjaXR5OjE7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MnJlbTtoZWlnaHQ6MTAwdmg7bWFyZ2luOjA7cGFkZGluZzowO3BvaW50ZXItZXZlbnRzOmF1dG87dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zcyxsZWZ0IC4zcyx3aWR0aCAwcyAuM3MsLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXIgLjNzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsbGVmdCAuM3Msd2lkdGggMHMgLjNzLGJhY2tkcm9wLWZpbHRlciAuM3M7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zcyxsZWZ0IC4zcyx3aWR0aCAwcyAuM3MsYmFja2Ryb3AtZmlsdGVyIC4zcywtd2Via2l0LWJhY2tkcm9wLWZpbHRlciAuM3N9LndyYXBwZXIgLmNvbnRhaW5lcnttYXJnaW4tbGVmdDoxcmVtfS53cmFwcGVyLnNpZGViYXItYWN0aXZlIC5zaWRlYmFye3dpZHRoOjE0cmVtfS53cmFwcGVyLnNpZGViYXItYWN0aXZlIC5zaWRlYmFyICp7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmF1dG99LndyYXBwZXIuc2lkZWJhci1hY3RpdmUgLnNpZGViYXIgYnV0dG9uLnRvZ2dsZS1zaWRlYmFye3JpZ2h0Oi0xLjY2cmVtO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpIHJvdGF0ZSgxODBkZWcpfS53cmFwcGVyLnNpZGViYXItYWN0aXZlIC5zaWRlYmFyIC50b2dnbGUtc2lkZWJhci5iYWNrZHJvcHtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjEpO29wYWNpdHk6MTt3aWR0aDoxMDB2dztsZWZ0OjE0cmVtOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoNXB4KSBncmF5c2NhbGUoLjY1KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpIGdyYXlzY2FsZSguNjUpO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsbGVmdCAuM3Msd2lkdGggMHMsLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXIgLjNzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsbGVmdCAuM3Msd2lkdGggMHMsYmFja2Ryb3AtZmlsdGVyIC4zczt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjNzLGxlZnQgLjNzLHdpZHRoIDBzLGJhY2tkcm9wLWZpbHRlciAuM3MsLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXIgLjNzfX1cIiwgXCJcIl0pO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///192\n')},193:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./pages/index.vue?vue&type=template&id=9e2d06aa&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"wrapper",class:{\'sidebar-active\': _vm.sidebarActive}},[_c(\'b-nav\',{staticClass:"sidebar",attrs:{"pills":"","vertical":"","align":"left"}},[_vm._l((_vm.sidebarItems),function(item,key,index){return [(item.type === \'title\')?_c(\'h3\',{key:item.id || ("sidebar-title-" + index),staticClass:"subtitle",class:item.classes},[_vm._v(_vm._s(item.title))]):_c(\'b-nav-item\',{key:item.id || ("sidebar-nav-item-" + index),class:item.classes,attrs:{"active":_vm.activeItem === item.id},on:{"click":function($event){return _vm.menuSelect(item)}}},[_vm._v(_vm._s(item.title))])]}),_vm._v(" "),_c(\'div\',{staticClass:"toggle-sidebar backdrop",on:{"click":function($event){return _vm.toggleSidebar()}}}),_vm._v(" "),_c(\'button\',{staticClass:"toggle-sidebar",on:{"click":function($event){return _vm.toggleSidebar()}}},[_vm._v("▶")])],2),_vm._v(" "),_c(\'div\',{ref:"appContainer",staticClass:"container"})],1)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./pages/index.vue?vue&type=template&id=9e2d06aa&\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(56);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(36);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(58);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(57);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js\nvar vue_class_component_esm = __webpack_require__(181);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js\nvar vue_runtime_esm = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/main/index.vue?vue&type=template&id=f9ce48cc&\nvar mainvue_type_template_id_f9ce48cc_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar mainvue_type_template_id_f9ce48cc_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'h1\',{staticClass:"title"},[_vm._v("\\n      JS-VFX\\n    ")]),_vm._v(" "),_c(\'div\',[_c(\'p\',[_vm._v("Pure JavaScript visual effects implemented with HTML5 "),_c(\'code\',[_vm._v("canvas")]),_vm._v(".")]),_vm._v(" "),_c(\'p\',[_vm._v("No dependencies, no WebGL, just pure, unadulterated code written from the ground up.")]),_vm._v(" "),_c(\'p\',[_vm._v("Check out the source at "),_c(\'a\',{attrs:{"href":"https://github.com/salieri/js-vfx","target":"_blank"}},[_vm._v("GitHub")]),_vm._v(".")])])])])}]\n\n\n// CONCATENATED MODULE: ./components/main/index.vue?vue&type=template&id=f9ce48cc&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/main/index.vue?vue&type=script&lang=js&\n\n\n\n\n\nvar _class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar mainvue_type_script_lang_js_Main = Object(vue_class_component_esm["a" /* default */])(_class =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(Main, _Vue);\n\n  function Main() {\n    Object(classCallCheck["a" /* default */])(this, Main);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Main).apply(this, arguments));\n  }\n\n  return Main;\n}(vue_runtime_esm["default"])) || _class;\n\n/* harmony default export */ var mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_Main);\n// CONCATENATED MODULE: ./components/main/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(41);\n\n// CONCATENATED MODULE: ./components/main/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_f9ce48cc_render,\n  mainvue_type_template_id_f9ce48cc_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var main = (component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bilinear-interpolator/index.vue?vue&type=template&id=1d0dee2e&\nvar bilinear_interpolatorvue_type_template_id_1d0dee2e_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar bilinear_interpolatorvue_type_template_id_1d0dee2e_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"480","height":"360"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Bilinear Interpolation")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Bilinear_interpolation"}},[_vm._v("bilinear interpolation")]),_vm._v(".")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue?vue&type=template&id=1d0dee2e&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./components/apps/vue-wrapper.js\n\n\n\n\n\n\n\n\nvar _dec, vue_wrapper_class, _temp;\n\n\n\nvar vue_wrapper_VueWrapper = (_dec = Object(vue_class_component_esm["a" /* default */])(), _dec(vue_wrapper_class = (_temp =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(VueWrapper, _Vue);\n\n  function VueWrapper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, VueWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(VueWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "interval", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "intervalFrequency", 25);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "startTime", new Date());\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(VueWrapper, [{\n    key: "mounted",\n    value: function mounted() {\n      this.start();\n    }\n  }, {\n    key: "beforeDestroy",\n    value: function beforeDestroy() {\n      this.stop();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      this.interval = null;\n      this.app = null;\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      throw new Error(\'Not implemented\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      throw new Error(\'Not implemented\');\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      var _this2 = this;\n\n      this.stop();\n      this.app = this.instantiateApp();\n\n      if (this.intervalFrequency === 0) {\n        return;\n      }\n\n      this.interval = setInterval(function () {\n        var app = _this2.app;\n\n        if (!app) {\n          return;\n        }\n\n        if (app.isDrawing() === true || app.isPaused() === true) {\n          return;\n        }\n\n        _this2.tick();\n      }, this.intervalFrequency);\n    }\n  }]);\n\n  return VueWrapper;\n}(vue_runtime_esm["default"]), _temp)) || vue_wrapper_class);\n/* harmony default export */ var vue_wrapper = (vue_wrapper_VueWrapper);\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(186);\n\n// CONCATENATED MODULE: ./lib/core/helper.js\n\nvar Helper = {\n  /**\n   * @param {Event} event\n   * @param {String} elementID\n   *\n   * @link http://stackoverflow.com/a/5932203/844771\n   * @author Ryan Artecona\n   * @public\n   */\n  getCanvasCoordinates: function getCanvasCoordinates(event, elementID) {\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var canvasX = 0;\n    var canvasY = 0;\n    var element = Helper.getElement(elementID);\n    var initialEl = element;\n\n    do {\n      totalOffsetX += element.offsetLeft - element.scrollLeft;\n      totalOffsetY += element.offsetTop - element.scrollTop;\n      element = element.offsetParent;\n    } while (element);\n\n    canvasX = event.pageX - totalOffsetX;\n    canvasY = event.pageY - totalOffsetY;\n\n    if (initialEl && initialEl.clientWidth && initialEl.clientHeight && initialEl.width && initialEl.height) {\n      canvasX *= initialEl.width / initialEl.clientWidth;\n      canvasY *= initialEl.height / initialEl.clientHeight;\n    }\n\n    return {\n      x: canvasX,\n      y: canvasY\n    };\n  },\n\n  /**\n   * @param {String} elementType Type of element\n   * @param {String} [elementID] Element ID\n   * @returns {Element}\n   * @public\n   */\n  createElement: function createElement(elementType, elementID) {\n    var element = document.createElement(elementType);\n\n    if (elementID) {\n      element.setAttribute(\'id\', elementID);\n    }\n\n    return element;\n  },\n\n  /**\n   * @param {Element} element\n   * @public\n   */\n  removeElement: function removeElement(element) {\n    element.parentNode.removeChild(element);\n  },\n\n  /**\n   * @param {String} elementID Element ID\n   * @public\n   */\n  getElement: function getElement(elementID) {\n    return document.getElementById(elementID);\n  },\n\n  /**\n   * @param {Object} object\n   * @returns {Object}\n   * @public\n   */\n  extend: function extend(object) {\n    return lodash["merge"]({}, object);\n  },\n\n  /**\n   * Load data from URL\n   * @param {String} url\n   * @param {Function} successFunction\n   * @param {Function} [errorFunction]\n   * @public\n   */\n  load: function load(url, successFunction, errorFunction) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\'get\', url);\n\n    xhr.onload = function () {\n      return successFunction(xhr.response, xhr.statusText, xhr);\n    };\n\n    xhr.onerror = function () {\n      return errorFunction(xhr.statusText, xhr);\n    };\n\n    xhr.send();\n  },\n\n  /**\n   * Create an empty two dimensional array\n   *\n   * @param {int} sizeA\n   * @param {int} sizeB\n   * @returns {Array}\n   * @public\n   */\n  create2DArray: function create2DArray(sizeA, sizeB) {\n    var a = new Array(sizeA);\n\n    for (var i = 0; i < sizeA; i++) {\n      a[i] = new Array(sizeB);\n    }\n\n    return a;\n  }\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js\nvar es6_typed_uint8_clamped_array = __webpack_require__(183);\n\n// CONCATENATED MODULE: ./lib/core/color.js\n\n\nvar color_Color =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|Color} [r=0]\n   * @param {int} [g=0]\n   * @param {int} [b=0]\n   * @param {int} [a=255]\n   */\n  function Color(r, g, b, a) {\n    Object(classCallCheck["a" /* default */])(this, Color);\n\n    if (r instanceof Color) {\n      this.set(r);\n    } else {\n      this.r = r || 0;\n      this.g = g || 0;\n      this.b = b || 0;\n      this.a = a || 255;\n    }\n  }\n  /**\n   * @param {int|Color} [r=0]\n   * @param {int} [g=0]\n   * @param {int} [b=0]\n   * @param {int} [a=255]\n   */\n\n\n  Object(createClass["a" /* default */])(Color, [{\n    key: "set",\n    value: function set(r, g, b, a) {\n      if (r instanceof Color) {\n        this.r = r.r;\n        this.g = r.g;\n        this.b = r.b;\n        this.a = r.a;\n      } else {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a || 255;\n      }\n    }\n    /**\n     * @param {NormalizedColor} normalizedColor\n     */\n\n  }, {\n    key: "getNormalizedColor",\n    value: function getNormalizedColor(normalizedColor) {\n      normalizedColor.r = this.r / 255;\n      normalizedColor.g = this.g / 255;\n      normalizedColor.b = this.b / 255;\n      normalizedColor.a = this.a / 255;\n    }\n    /**\n     * @param {Color} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "add",\n    value: function add(color, skipSafety) {\n      this.r = this.r + color.r;\n      this.g = this.g + color.g;\n      this.b = this.b + color.b;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(color, skipSafety) {\n      this.r = this.r - color.r;\n      this.g = this.g - color.g;\n      this.b = this.b - color.b;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} color\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(color) {\n      var tmpR = color.r;\n      var tmpG = color.g;\n      var tmpB = color.b;\n      var tmpA = color.a;\n      color.r = this.r;\n      this.r = tmpR;\n      color.g = this.g;\n      this.g = tmpG;\n      color.b = this.b;\n      this.b = tmpB;\n      color.a = this.a;\n      this.a = tmpA;\n    }\n    /**\n     * @param {Color|NormalizedColor} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "multiply",\n    value: function multiply(color, skipSafety) {\n      this.r = color.r * this.r;\n      this.g = color.g * this.g;\n      this.b = color.b * this.b;\n      this.a = color.a * this.a;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {float|int|number} value\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(value, skipSafety) {\n      this.r = this.r * value;\n      this.g = this.g * value;\n      this.b = this.b * value;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {int|float|number} divisor\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "divideByVal",\n    value: function divideByVal(divisor, skipSafety) {\n      this.r = this.r / divisor;\n      this.g = this.g / divisor;\n      this.b = this.b / divisor;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} colorA\n     * @param {Color} colorB\n     * @param {int} stepCount\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "interpolate",\n    value: function interpolate(colorA, colorB, stepCount, skipSafety) {\n      this.r = (colorB.r - colorA.r) / stepCount;\n      this.g = (colorB.g - colorA.g) / stepCount;\n      this.b = (colorB.b - colorA.b) / stepCount;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n  }, {\n    key: "round",\n    value: function round() {\n      this.r = Math.round(this.r);\n      this.g = Math.round(this.g);\n      this.b = Math.round(this.b);\n      this.a = Math.round(this.a);\n    }\n  }, {\n    key: "clamp",\n    value: function clamp() {\n      this.r = Math.max(Math.min(this.r, 255), 0);\n      this.g = Math.max(Math.min(this.g, 255), 0);\n      this.b = Math.max(Math.min(this.b, 255), 0);\n      this.a = Math.max(Math.min(this.a, 255), 0);\n    }\n  }]);\n\n  return Color;\n}();\n// CONCATENATED MODULE: ./lib/core/virtual-surface.js\n\n\n\n\nvar virtual_surface_VirtualSurface =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int} width\n   * @param {int} height\n   * @param {Uint8ClampedArray} [data]\n   */\n  function VirtualSurface(width, height, data) {\n    Object(classCallCheck["a" /* default */])(this, VirtualSurface);\n\n    var doClear = false;\n\n    if (!data) {\n      data = new Uint8ClampedArray(width * height * 4);\n      doClear = true;\n    }\n\n    this.data = data;\n    this.width = width;\n    this.height = height;\n\n    if (doClear) {\n      this.clear();\n    }\n  }\n\n  Object(createClass["a" /* default */])(VirtualSurface, [{\n    key: "getWidth",\n\n    /**\n     * @returns {int}\n     */\n    value: function getWidth() {\n      return this.width;\n    }\n    /**\n     * @returns {int}\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.height;\n    }\n    /**\n     * @returns {Uint8ClampedArray}\n     * @public\n     */\n\n  }, {\n    key: "getData",\n    value: function getData() {\n      return this.data;\n    }\n    /**\n     * @param {Point2D} pos\n     * @param {Color} destColor\n     * @public\n     */\n\n  }, {\n    key: "getPixel",\n    value: function getPixel(pos, destColor) {\n      var ptr = (Math.round(pos.x) + Math.round(pos.y) * this.width) * 4;\n      destColor.set(this.data[ptr], this.data[ptr + 1], this.data[ptr + 2]);\n    }\n  }, {\n    key: "clear",\n    value: function clear(color) {\n      var maxPtr = this.data.length;\n\n      if (!color) {\n        color = new color_Color(0, 0, 0, 255);\n      }\n\n      var ptr = 0;\n      var r = color.r;\n      var b = color.b;\n      var g = color.g;\n      var a = color.a;\n\n      while (ptr < maxPtr) {\n        this.data[ptr++] = r;\n        this.data[ptr++] = g;\n        this.data[ptr++] = b;\n        this.data[ptr++] = a;\n      }\n    }\n  }]);\n\n  return VirtualSurface;\n}();\n// CONCATENATED MODULE: ./lib/core/line.js\nvar Line = {\n  /**\n   * @public\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @returns {object}\n   */\n  calculate: function calculate(p1, p2) {\n    var variables = {\n      px1: Math.round(p1.x),\n      py1: Math.round(p1.y),\n      px2: Math.round(p2.x),\n      py2: Math.round(p2.y),\n      done: false,\n      pxStart: 0,\n      lastPlotX: 0,\n      traversed: 0,\n      traverseLength: 0\n    };\n    variables.dx = Math.abs(variables.px2 - variables.px1);\n    variables.dy = Math.abs(variables.py2 - variables.py1);\n    variables.traverseLength = Math.sqrt(variables.dx * variables.dx + variables.dy * variables.dy);\n\n    if (variables.traverseLength < 1) {\n      variables.traverseLength = 1;\n    }\n\n    variables.err = variables.dx - variables.dy;\n    variables.e2 = (variables.dx - variables.dy) * 2;\n    variables.sx = -1;\n    variables.sy = -1;\n\n    if (variables.px1 < variables.px2) {\n      variables.sx = 1;\n    }\n\n    if (variables.py1 < variables.py2) {\n      variables.sy = 1;\n    }\n\n    return variables;\n  },\n\n  /**\n   * @public\n   * @param {object} line\n   */\n  step: function step(line) {\n    line.pxStart = line.px1;\n\n    while (true) {\n      // plot here\n      line.traversed++;\n      line.lastPlotX = line.px1;\n\n      if (line.px1 === line.px2 && line.py1 === line.py2) {\n        line.done = true;\n        break;\n      }\n\n      if (line.e2 > -line.dy) {\n        line.err = line.err - line.dy;\n        line.e2 = line.err + line.err;\n        line.px1 += line.sx;\n      }\n\n      if (line.px1 === line.px2 && line.py1 === line.py2) {\n        // plot here\n        line.traversed++;\n        line.lastPlotX = line.px1;\n        line.done = true;\n        break;\n      }\n\n      if (line.e2 < line.dx) {\n        line.err = line.err + line.dx;\n        line.e2 = line.err + line.err;\n        line.py1 += line.sy;\n        break;\n      }\n    }\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   * @link http://en.wikipedia.org/wiki/Bresenham\'s_line_algorithm\n   */\n  draw: function draw(p1, p2, color, surface) {\n    var px1 = Math.round(p1.x);\n    var py1 = Math.round(p1.y);\n    var px2 = Math.round(p2.x);\n    var py2 = Math.round(p2.y);\n    var dx = Math.abs(px2 - px1);\n    var dy = Math.abs(py2 - py1);\n    var sx = px1 < px2 ? 1 : -1;\n    var sy = py1 < py2 ? 1 : -1;\n    var sx4 = sx * 4;\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var err = dx - dy;\n    var e2 = err * 2;\n    var ptr = (px1 + py1 * width) * 4;\n    var lineAdd = sy * width * 4;\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n\n    while (true) {\n      if (px1 >= 0 && px1 < width && py1 >= 0 && py1 < height) {\n        data[ptr] = colR;\n        data[ptr + 1] = colG;\n        data[ptr + 2] = colB;\n      }\n\n      if (px1 === px2 && py1 === py2) {\n        break;\n      }\n\n      if (e2 > -dy) {\n        err = err - dy;\n        e2 = err + err;\n        px1 += sx;\n        ptr += sx4;\n      }\n\n      if (px1 === px2 && py1 === py2) {\n        if (px1 >= 0 && px1 < width && py1 >= 0 && py1 < height) {\n          data[ptr] = colR;\n          data[ptr + 1] = colG;\n          data[ptr + 2] = colB;\n        }\n\n        break;\n      }\n\n      if (e2 < dx) {\n        err = err + dx;\n        e2 = err + err;\n        py1 += sy;\n        ptr += lineAdd;\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/point-3d.js\n\n\nvar point_3d_Point3D =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|Vector3D|Point3D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @param {int|float|Number} [z=0]\n   * @constructor\n   */\n  function Point3D(x, y, z) {\n    Object(classCallCheck["a" /* default */])(this, Point3D);\n\n    // works with Vector3D too, since it\'s a subclass\n    if (x instanceof Point3D) {\n      this.x = x.x;\n      this.y = x.y;\n      this.z = x.z;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n  }\n\n  Object(createClass["a" /* default */])(Point3D, [{\n    key: "clone",\n\n    /**\n     * @returns {Point3D}\n     * @public\n     */\n    value: function clone() {\n      return new Point3D(this.x, this.y, this.z);\n    }\n    /**\n     * @param {Point3D} p\n     * @public\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(p) {\n      var tx = p.x;\n      var ty = p.y;\n      var tz = p.z;\n      p.x = this.x;\n      p.y = this.y;\n      p.z = this.z;\n      this.x = tx;\n      this.y = ty;\n      this.z = tz;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "round",\n    value: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "normalize",\n    value: function normalize() {\n      var d = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      this.x = this.x * (1.0 / d);\n      this.y = this.y * (1.0 / d);\n      this.z = this.z * (1.0 / d);\n    }\n    /**\n     * @param {int|float|Number|Vector3D|Point3D} x\n     * @param {int|float|Number} [y]\n     * @param {int|float|Number} [z]\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(x, y, z) {\n      if (x instanceof Point3D) {\n        this.x = x.x;\n        this.y = x.y;\n        this.z = x.z;\n      } else {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n      }\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(point) {\n      this.x += point.x;\n      this.y += point.y;\n      this.z += point.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(point) {\n      this.x -= point.x;\n      this.y -= point.y;\n      this.z -= point.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "multiply",\n    value: function multiply(point) {\n      this.x *= point.x;\n      this.y *= point.y;\n      this.z *= point.z;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "divideByVal",\n    value: function divideByVal(value) {\n      this.x /= value;\n      this.y /= value;\n      this.z /= value;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(value) {\n      this.x *= value;\n      this.y *= value;\n      this.z *= value;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "negate",\n    value: function negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} p1\n     * @param {Point3D|Vector3D} p2\n     * @param {Point3D|Vector3D} p3\n     * @public\n     */\n\n  }, {\n    key: "setToCenter",\n    value: function setToCenter(p1, p2, p3) {\n      var minX = Math.min(p1.x, p2.x, p3.x);\n      var minY = Math.min(p1.y, p2.y, p3.y);\n      var minZ = Math.min(p1.z, p2.z, p3.z);\n      this.x = minX + (Math.max(p1.x, p2.x, p3.x) - minX) / 2;\n      this.y = minY + (Math.max(p1.y, p2.y, p3.y) - minY) / 2;\n      this.z = minZ + (Math.max(p1.z, p2.z, p3.z) - minZ) / 2;\n    }\n    /**\n     * @param {Point3D} pointA\n     * @param {Point3D} pointB\n     * @param {int} stepCount\n     * @public\n     */\n\n  }, {\n    key: "interpolate",\n    value: function interpolate(pointA, pointB, stepCount) {\n      this.x = (pointB.x - pointA.x) / stepCount;\n      this.y = (pointB.y - pointA.y) / stepCount;\n      this.z = (pointB.z - pointA.z) / stepCount;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "addByVal",\n    value: function addByVal(value) {\n      this.x += value;\n      this.y += value;\n      this.z += value;\n    }\n  }]);\n\n  return Point3D;\n}();\n// CONCATENATED MODULE: ./lib/core/vector-3d.js\n\n\n\n\n\n\n/*\n * Loosely based on http://evanw.github.io/lightgl.js/docs/vector.html\n */\n\nvar vector_3d_Vector3D =\n/*#__PURE__*/\nfunction (_Point3D) {\n  Object(inherits["a" /* default */])(Vector3D, _Point3D);\n\n  /**\n   * @param {Number|int|float|Vector3D|Point3D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @param {int|float|Number} [z=0]\n   * @constructor\n   * @extends {Point3D}\n   */\n  function Vector3D(x, y, z) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Vector3D);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Vector3D).call(this));\n\n    if (x instanceof Vector3D || x instanceof point_3d_Point3D) {\n      _this.x = x.x;\n      _this.y = x.y;\n      _this.z = x.z;\n    } else {\n      _this.x = x || 0;\n      _this.y = y || 0;\n      _this.z = z || 0;\n    }\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Vector3D, [{\n    key: "clone",\n\n    /**\n     * @returns {Vector3D}\n     * @public\n     */\n    value: function clone() {\n      return new Vector3D(this.x, this.y, this.z);\n    }\n  }, {\n    key: "distance",\n\n    /**\n     * Distance from a point\n     * @param {int|float|Number} x\n     * @param {int|float|Number} y\n     * @param {int|float|Number} z\n     * @returns {Number}\n     * @public\n     */\n    value: function distance(x, y, z) {\n      var xd = this.x - x;\n      var yd = this.y - y;\n      var zd = this.z - z;\n      return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n  }, {\n    key: "length",\n\n    /**\n     * Vector length\n     *\n     * @returns {Number}\n     * @public\n     */\n    value: function length() {\n      return Math.sqrt(this.dot(this));\n    }\n  }, {\n    key: "dot",\n\n    /**\n     * Dot product\n     *\n     * @param {Vector3D} vector\n     * @returns {Number}\n     * @public\n     */\n    value: function dot(vector) {\n      return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n    }\n  }, {\n    key: "cross",\n\n    /**\n     * Cross product\n     *\n     * @param {Vector3D} vector\n     * @public\n     */\n    value: function cross(vector) {\n      this.x = this.y * vector.z - this.z * vector.y;\n      this.y = this.z * vector.x - this.x * vector.z;\n      this.z = this.x * vector.y - this.y * vector.x;\n    }\n  }, {\n    key: "normalize",\n\n    /**\n     * Normalize Vector (get a unit vector)\n     * @public\n     */\n    value: function normalize() {\n      var vectorLength = this.length();\n      this.x = this.x / vectorLength;\n      this.y = this.y / vectorLength;\n      this.z = this.z / vectorLength;\n    }\n  }, {\n    key: "normal",\n\n    /**\n     * @param {Point3D|Vector3D} p1\n     * @param {Point3D|Vector3D} p2\n     * @param {Point3D|Vector3D} p3\n     * @link http://www.opengl.org/wiki/Calculating_a_Surface_Normal\n     * @public\n     */\n    value: function normal(p1, p2, p3) {\n      var ux = p2.x - p1.x;\n      var uy = p2.y - p1.y;\n      var uz = p2.z - p1.z;\n      var vx = p3.x - p1.x;\n      var vy = p3.y - p1.y;\n      var vz = p3.z - p1.z;\n      this.x = uy * vz - uz * vy;\n      this.y = uz * vx - ux * vz;\n      this.z = ux * vy - uy * vx;\n    }\n  }]);\n\n  return Vector3D;\n}(point_3d_Point3D);\n// CONCATENATED MODULE: ./lib/core/point-2d.js\n\n\n\n\nvar point_2d_Point2D =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|Vector3D|Point3D|Point2D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @constructor\n   */\n  function Point2D(x, y) {\n    Object(classCallCheck["a" /* default */])(this, Point2D);\n\n    if (x instanceof vector_3d_Vector3D || x instanceof point_3d_Point3D || x instanceof Point2D) {\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n    }\n  }\n  /**\n   * @returns {Point2D}\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Point2D, [{\n    key: "clone",\n    value: function clone() {\n      return new Point2D(this.x, this.y);\n    }\n    /**\n     * @param {Point2D} p\n     * @public\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(p) {\n      var tx = p.x;\n      var ty = p.y;\n      p.x = this.x;\n      p.y = this.y;\n      this.x = tx;\n      this.y = ty;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "round",\n    value: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n    }\n    /**\n     * @param {int|float|Number|Vector3D|Point3D|Point2D} [x=0]\n     * @param {int|float|Number} [y=0]\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(x, y) {\n      if (x instanceof vector_3d_Vector3D || x instanceof point_3d_Point3D || x instanceof Point2D) {\n        this.x = x.x;\n        this.y = x.y;\n      } else {\n        this.x = x;\n        this.y = y;\n      }\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "distance",\n    value: function distance(point) {\n      var a = point.x - this.x;\n      var b = point.y - this.y;\n      return Math.sqrt(a * a + b * b);\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(point) {\n      this.x -= point.x;\n      this.y -= point.y;\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(point) {\n      this.x += point.x;\n      this.y += point.y;\n    }\n    /**\n     * @param {int|float|number} val\n     * @public\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(val) {\n      this.x *= val;\n      this.y *= val;\n    }\n  }]);\n\n  return Point2D;\n}();\n// CONCATENATED MODULE: ./lib/core/better-triangle.js\n// import { Color } from \'./color\';\n\n\nvar BetterTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, color, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    BetterTriangle.sortPoints(this.p1, this.p2, this.p3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3); // Line.step( line23 );\n\n    BetterTriangle.drawHalf(line12, line13, color, false, surface);\n    BetterTriangle.drawHalf(line23, line13, color, true, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Color} color\n   * @param {boolean} secondHalf\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, color, secondHalf, surface) {\n    var data = surface.getData();\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height) {\n        for (var x = minX; x <= maxX; x++) {\n          data[ptr++] = colR;\n          data[ptr++] = colG;\n          data[ptr++] = colB;\n          ptr++;\n        }\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      y += lineA.sy;\n    }\n    /* if( ( secondHalf === true ) && ( ( lineA.done !== true ) || ( lineB.done !== true ) ) )\n    {\n      y = y;\n    } */\n\n  },\n\n  /**\n   * @protected\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   */\n  sortPoints: function sortPoints(p1, p2, p3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/better-interpolated-triangle.js\n\n\n\nvar BetterInterpolatedTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n  c1: new color_Color(),\n  c2: new color_Color(),\n  c3: new color_Color(),\n  c1c2: new color_Color(),\n  c1c3: new color_Color(),\n  c2c3: new color_Color(),\n  colSlider: new color_Color(),\n  cLeft: new color_Color(),\n  cLeft2: new color_Color(),\n  cRight: new color_Color(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @param {Surface} surface\n   */\n  draw: function draw(p1, p2, p3, c1, c2, c3, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.c1.set(c1);\n    this.c2.set(c2);\n    this.c3.set(c3);\n    this.sortPoints(this.p1, this.p2, this.p3, this.c1, this.c2, this.c3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3);\n    this.c1c2.interpolate(this.c1, this.c2, this.p1.distance(this.p2), true);\n    this.c1c3.interpolate(this.c1, this.c3, this.p1.distance(this.p3), true);\n    this.c2c3.interpolate(this.c2, this.c3, this.p2.distance(this.p3), true);\n    this.c1c2.multiplyByVal(Math.abs(this.p1.distance(this.p2) / (line12.py1 - line12.py2)), true);\n    this.c1c3.multiplyByVal(Math.abs(this.p1.distance(this.p3) / (line13.py1 - line13.py2)), true);\n    this.c2c3.multiplyByVal(Math.abs(this.p2.distance(this.p3) / (line23.py1 - line23.py2)), true);\n    this.cLeft.set(this.c1);\n    this.cRight.set(this.c1);\n    this.cLeft2.set(this.c2);\n    this.cRight.add(this.c1c3, true);\n    Line.step(line23);\n    this.cLeft2.add(this.c2c3, true);\n    this.drawHalf(line12, line13, this.cLeft, this.cRight, this.c1c2, this.c1c3, false, surface);\n    this.drawHalf(line23, line13, this.cLeft2, this.cRight, this.c2c3, this.c1c3, true, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Color} colLeft\n   * @param {Color} colRight\n   * @param {Color} colAdderLeft\n   * @param {Color} colAdderRight\n   * @param {boolean} secondHalf\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, colLeft, colRight, colAdderLeft, colAdderRight, secondHalf, surface) {\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height && minX <= maxX) {\n        var colR = void 0,\n            colG = void 0,\n            colB = void 0;\n\n        if (Math.min(lineA.lastPlotX, lineA.pxStart) < Math.min(lineB.lastPlotX, lineB.pxStart)) {\n          this.colSlider.set(colRight);\n          this.colSlider.subtract(colLeft, true);\n          colR = colLeft.r;\n          colG = colLeft.g;\n          colB = colLeft.b;\n        } else {\n          this.colSlider.set(colLeft);\n          this.colSlider.subtract(colRight, true);\n          colR = colRight.r;\n          colG = colRight.g;\n          colB = colRight.b;\n        }\n\n        this.colSlider.divideByVal(maxX - minX + 1, true);\n\n        for (var x = minX; x <= maxX; x++) {\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colR)));\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colG)));\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colB)));\n          ptr++;\n          colR += this.colSlider.r;\n          colG += this.colSlider.g;\n          colB += this.colSlider.b;\n        }\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      colLeft.add(colAdderLeft, true);\n      colRight.add(colAdderRight, true);\n      y += lineA.sy;\n    }\n  },\n\n  /**\n   * @protected\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   */\n  sortPoints: function sortPoints(p1, p2, p3, c1, c2, c3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      c3.swap(c1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      c2.swap(c1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      c3.swap(c2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/textured-triangle.js\n\n\n\nvar textured_triangle_TexturedTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n  uv1: new point_3d_Point3D(),\n  uv2: new point_3d_Point3D(),\n  uv3: new point_3d_Point3D(),\n  uvMul: new point_3d_Point3D(),\n  uv12: new point_3d_Point3D(),\n  uv13: new point_3d_Point3D(),\n  uv23: new point_3d_Point3D(),\n  uvLeft: new point_3d_Point3D(),\n  uvRight: new point_3d_Point3D(),\n  uvLeft2: new point_3d_Point3D(),\n  uvPos: new point_3d_Point3D(),\n  uvSlider: new point_3d_Point3D(),\n  ud: new point_2d_Point2D(),\n  pd: new point_2d_Point2D(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} uv3\n   * @param {Texture} texture\n   * @param {Surface} surface\n   */\n  draw: function draw(p1, p2, p3, uv1, uv2, uv3, texture, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.uv1.set(uv1);\n    this.uv2.set(uv2);\n    this.uv3.set(uv3);\n    this.sortPoints(this.p1, this.p2, this.p3, this.uv1, this.uv2, this.uv3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3); // Convert UV 0..1 range to real texture coordinates\n\n    this.uvMul.set(texture.getWidth() - 1, texture.getHeight() - 1, 1);\n    this.uv1.multiply(this.uvMul);\n    this.uv2.multiply(this.uvMul);\n    this.uv3.multiply(this.uvMul);\n    this.uv1.round();\n    this.uv2.round();\n    this.uv3.round();\n    this.interpolate(line12, this.uv1, this.uv2, this.uv12);\n    this.interpolate(line13, this.uv1, this.uv3, this.uv13);\n    this.interpolate(line23, this.uv2, this.uv3, this.uv23);\n    Line.step(line23);\n    this.uvLeft.set(this.uv1);\n    this.uvRight.set(this.uv1);\n    this.uvLeft2.set(this.uv2);\n    var uv12Length = Math.sqrt((this.uv2.x - this.uv1.x) * (this.uv2.x - this.uv1.x) + (this.uv2.y - this.uv1.y) * (this.uv2.y - this.uv1.y));\n    var uv13Length = Math.sqrt((this.uv3.x - this.uv1.x) * (this.uv3.x - this.uv1.x) + (this.uv3.y - this.uv1.y) * (this.uv3.y - this.uv1.y));\n    var uv23Length = Math.sqrt((this.uv3.x - this.uv2.x) * (this.uv3.x - this.uv2.x) + (this.uv3.y - this.uv2.y) * (this.uv3.y - this.uv2.y));\n    this.uvRight.add(this.uv13, true);\n    this.uvLeft.add(this.uv12, true);\n    this.uvLeft2.add(this.uv23);\n    this.drawHalf(line12, line13, this.uvLeft, this.uvRight, this.uv12, this.uv13, texture, false, uv12Length, uv13Length, surface);\n    this.drawHalf(line23, line13, this.uvLeft2, this.uvRight, this.uv23, this.uv13, texture, true, uv23Length, uv13Length, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} line\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} resultLine\n   */\n  interpolate: function interpolate(line, uv1, uv2, resultLine) {\n    resultLine.x = (uv2.x - uv1.x) / ((line.dy + 1) * line.sy);\n    resultLine.y = (uv2.y - uv1.y) / ((line.dy + 1) * line.sy);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Point3D} uvLeft\n   * @param {Point3D} uvRight\n   * @param {Point3D} uvAdderLeft\n   * @param {Point3D} uvAdderRight\n   * @param {Material} texture\n   * @param {Boolean} secondHalf\n   * @param {Number} uvLeftLength\n   * @param {Number} uvRightLength\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, uvLeft, uvRight, uvAdderLeft, uvAdderRight, texture, secondHalf, uvLeftLength, uvRightLength, surface) {\n    var data = surface.getData();\n    var uvData = texture.data;\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var uvWidth = texture.getWidth();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height && minX <= maxX) {\n        if (Math.min(lineA.lastPlotX, lineA.pxStart) < Math.min(lineB.lastPlotX, lineB.pxStart)) {\n          this.uvSlider.set(uvRight);\n          this.uvSlider.subtract(uvLeft, true);\n          this.uvPos.set(uvLeft);\n        } else {\n          this.uvSlider.set(uvLeft);\n          this.uvSlider.subtract(uvRight, true);\n          this.uvPos.set(uvRight);\n        }\n\n        this.uvSlider.divideByVal(Math.max(maxX - minX + 1, 1)); // y = y; // debug\n\n        for (var x = minX; x <= maxX; x++) {\n          var uvX = Math.round(this.uvPos.x);\n          var uvY = Math.round(this.uvPos.y);\n          var uvPtr = uvY * uvWidth + uvX << 2; // jshint ignore:line\n\n          data[ptr++] = uvData[uvPtr];\n          data[ptr++] = uvData[uvPtr + 1];\n          data[ptr++] = uvData[uvPtr + 2];\n          ptr++;\n          this.uvPos.add(this.uvSlider);\n        }\n\n        this.uvPos.subtract(this.uvSlider); // y = y; // debug\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      uvLeft.add(uvAdderLeft);\n      uvRight.add(uvAdderRight);\n      y += lineA.sy;\n    }\n\n    uvLeft.subtract(uvAdderLeft);\n    uvRight.subtract(uvAdderRight); // uvRightOrig.set( uvRight );\n  },\n  sortPoints: function sortPoints(p1, p2, p3, uv1, uv2, uv3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      uv3.swap(uv1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      uv2.swap(uv1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      uv3.swap(uv2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/draw.js\n// import { Surface } from \'./surface\';\n // import { Point2D } from \'./point-2d\';\n// import { Point3D } from \'./point-3d\';\n// import { CanvasTexture } from \'./canvas-texture\';\n\n\n\n\n\nvar Draw = {\n  /**\n   * @type {Surface}\n   */\n  surface: null,\n\n  /**\n   * @type {Color}\n   */\n  color: new color_Color(255, 0, 0),\n\n  /**\n   * @type {Color}\n   */\n  bgColor: new color_Color(64, 64, 64),\n\n  /**\n   * @param {Surface} surface\n   * @public\n   */\n  setSurface: function setSurface(surface) {\n    Draw.surface = surface;\n  },\n\n  /**\n   * @returns {Surface}\n   * @public\n   */\n  getSurface: function getSurface() {\n    return Draw.surface;\n  },\n\n  /**\n   * @public\n   */\n  beginPaint: function beginPaint() {\n    Draw.surface.beginPaint();\n    Draw.clear();\n  },\n\n  /**\n   * @public\n   */\n  endPaint: function endPaint() {\n    Draw.surface.endPaint();\n  },\n\n  /**\n   * @returns {Boolean}\n   * @public\n   */\n  isDrawing: function isDrawing() {\n    return Draw.surface.isDrawing();\n  },\n\n  /**\n   * @public\n   */\n  clear: function clear() {\n    Draw.surface.clear(Draw.bgColor);\n  },\n\n  /**\n   * @param {Point2D} point\n   * @param {Color} color\n   * @public\n   */\n  setPixel: function setPixel(point, color) {\n    var x = Math.round(point.x);\n    var y = Math.round(point.y);\n\n    if (x < 0 || y < 0 || x >= Draw.surface.getWidth() || y >= Draw.surface.getHeight()) {\n      return;\n    }\n\n    var data = Draw.surface.getData();\n    var ptr = (x + y * Draw.surface.getWidth()) * 4;\n    data[ptr++] = color.r;\n    data[ptr++] = color.g;\n    data[ptr] = color.b;\n  },\n\n  /**\n   * @param {Point2D} point\n   * @param {Color} color\n   * @public\n   */\n  blendPixel: function blendPixel(point, color) {\n    var x = Math.round(point.x);\n    var y = Math.round(point.y);\n\n    if (x < 0 || y < 0 || x >= Draw.surface.getWidth() || y >= Draw.surface.getHeight()) {\n      return;\n    }\n\n    var data = Draw.surface.getData();\n    var ptr = (x + y * Draw.surface.getWidth()) * 4;\n    var ptrpp = ptr + 1;\n    var ptrp2 = ptr + 2;\n    var colMul = color.a / 255;\n    var rd = (color.r - data[ptr]) * colMul;\n    var gd = (color.g - data[ptrpp]) * colMul;\n    var bd = (color.b - data[ptrp2]) * colMul;\n    data[ptr] += rd;\n    data[ptrpp] += gd;\n    data[ptrp2] += bd;\n  },\n  blendValue: function blendValue(bgValue, fgValue, opacity) {\n    if (opacity === 255) {\n      return fgValue;\n    }\n\n    if (opacity === 0) {\n      return bgValue;\n    }\n\n    return Math.min(255, Math.max(0, bgValue + Math.round((fgValue - bgValue) * (opacity / 255))));\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Color} color\n   * @public\n   */\n  line: function line(p1, p2, color) {\n    Line.draw(p1, p2, color, Draw.surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @public\n   */\n  triangle: function triangle(p1, p2, p3, color) {\n    BetterTriangle.draw(p1, p2, p3, color, Draw.surface); // BetterTexturedTriangle.draw( p1, p2, p3, color );\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @public\n   */\n  interpolatedTriangle: function interpolatedTriangle(p1, p2, p3, c1, c2, c3) {\n    BetterInterpolatedTriangle.draw(p1, p2, p3, c1, c2, c3, Draw.surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} uv3\n   * @param {CanvasTexture} texture\n   * @public\n   */\n  texturedTriangle: function texturedTriangle(p1, p2, p3, uv1, uv2, uv3, texture) {\n    textured_triangle_TexturedTriangle.draw(p1, p2, p3, uv1, uv2, uv3, texture, Draw.surface);\n  }\n};\n// CONCATENATED MODULE: ./lib/core/app.js\n\n\n\n\n\nvar app_App =\n/*#__PURE__*/\nfunction () {\n  function App(canvasElementId) {\n    Object(classCallCheck["a" /* default */])(this, App);\n\n    this.drawing = false;\n    this.paused = false;\n    this.startTime = new Date();\n\n    if (canvasElementId) {\n      this.canvasId = canvasElementId;\n      this.canvas = Helper.getElement(this.canvasId);\n      this.canvasContext = this.canvas.getContext(\'2d\');\n      this.canvasPixels = this.canvas.getContext(\'2d\').createImageData(this.canvas.width, this.canvas.height);\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.canvas.width, this.canvas.height, this.canvasPixels.data);\n      this.virtualSurface.clear();\n    } else {\n      this.canvas = null;\n      this.canvasId = \'\';\n      this.canvasContext = null;\n      this.canvasPixels = null;\n      this.virtualSurface = null;\n    }\n  }\n  /**\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(App, [{\n    key: "startDrawing",\n    value: function startDrawing() {\n      this.drawing = true;\n      Draw.setSurface(this.virtualSurface); // Draw.setSurface( this.virtualSurface );\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "endDrawing",\n    value: function endDrawing(pushToCanvas) {\n      if (pushToCanvas === true) {\n        this.canvas.getContext(\'2d\').putImageData(this.canvasPixels, 0, 0);\n      }\n\n      this.drawing = false;\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isDrawing",\n    value: function isDrawing() {\n      return this.drawing;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {}\n    /**\n     * @returns {boolean}\n     * @public\n     */\n\n  }, {\n    key: "isPaused",\n    value: function isPaused() {\n      return this.paused;\n    }\n    /**\n     * @public\n     * @param {boolean} isPaused\n     */\n\n  }, {\n    key: "setPaused",\n    value: function setPaused(isPaused) {\n      this.paused = isPaused;\n    }\n  }]);\n\n  return App;\n}();\n// CONCATENATED MODULE: ./lib/core/normalized-color.js\n\n\n\nvar normalized_color_NormalizedColor =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|NormalizedColor|Color} [r=0]\n   * @param {int|float|Number} [g=0]\n   * @param {int|float|Number} [b=0]\n   * @param {int|float|Number} [a=1]\n   * @constructor\n   */\n  function NormalizedColor(r, g, b, a) {\n    Object(classCallCheck["a" /* default */])(this, NormalizedColor);\n\n    this.set(r, g, b, a);\n  }\n  /**\n   * @param {float|Color|NormalizedColor} [r=0]\n   * @param {int|float|Number} [g=0]\n   * @param {int|float|Number} [b=0]\n   * @param {int|float|Number} [a=1]\n   */\n\n\n  Object(createClass["a" /* default */])(NormalizedColor, [{\n    key: "set",\n    value: function set(r, g, b, a) {\n      if (r instanceof color_Color) {\n        r.getNormalizedColor(this);\n      } else if (r instanceof NormalizedColor) {\n        this.r = r.r;\n        this.g = r.g;\n        this.b = r.b;\n        this.a = r.a;\n      } else {\n        this.r = Math.max(Math.min(r, 1), 0) || 0;\n        this.g = Math.max(Math.min(g, 1), 0) || 0;\n        this.b = Math.max(Math.min(b, 1), 0) || 0;\n        this.a = Math.max(Math.min(a, 1), 0) || 1;\n      }\n    }\n    /**\n     * @param {Color} color\n     */\n\n  }, {\n    key: "getColor",\n    value: function getColor(color) {\n      color.r = Math.round(this.r * 255);\n      color.g = Math.round(this.g * 255);\n      color.b = Math.round(this.b * 255);\n      color.a = Math.round(this.a * 255);\n    }\n    /**\n     * @param {NormalizedColor} color\n     */\n\n  }, {\n    key: "add",\n    value: function add(color) {\n      this.r = this.r + color.r;\n      this.g = this.g + color.g;\n      this.b = this.b + color.b;\n    }\n  }]);\n\n  return NormalizedColor;\n}();\n/**\n * @link http://www.cs.rit.edu/~ncs/color/t_convert.html\n * @param {Number} hue 0..359\n * @param {Number} saturation 0..1\n * @param {Number} value 0..1\n * @param {NormalizedColor} targetColor\n * @static\n * @public\n */\n\nnormalized_color_NormalizedColor.hsvToRgb = function (hue, saturation, value, targetColor) {\n  if (saturation === 0) {\n    targetColor.set(value, value, value);\n    return;\n  }\n\n  var sector = hue / 60.0;\n  var flooredHue = Math.floor(sector);\n  var factorial = sector - flooredHue;\n  var p = value * (1 - saturation);\n  var q = value * (1 - saturation * factorial);\n  var t = value * (1 - saturation * (1 - factorial));\n\n  switch (flooredHue) {\n    case 0:\n      targetColor.set(value, t, p);\n      break;\n\n    case 1:\n      targetColor.set(q, value, p);\n      break;\n\n    case 2:\n      targetColor.set(p, value, t);\n      break;\n\n    case 3:\n      targetColor.set(p, q, value);\n      break;\n\n    case 4:\n      targetColor.set(t, p, value);\n      break;\n\n    default:\n      targetColor.set(value, p, q);\n      break;\n  }\n};\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/app.js\n\n\n\n\n\n\n\nvar app_BilinearInterpolatorApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(BilinearInterpolatorApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {number} q11\n   * @param {number} q12\n   * @param {number} q21\n   * @param {number} q22\n   * @constructor\n   * @extends {app.js}\n   */\n  function BilinearInterpolatorApp(targetCanvasId, q11, q12, q21, q22) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BilinearInterpolatorApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(BilinearInterpolatorApp).call(this, targetCanvasId));\n    _this.q11 = q11;\n    _this.q12 = q12;\n    _this.q21 = q21;\n    _this.q22 = q22;\n\n    _this.initializeLookupTable();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BilinearInterpolatorApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var width = this.canvas.width;\n      var height = this.canvas.height;\n      var widthMinus = width - 1;\n      var heightMinus = height - 1;\n      var ptr = 0;\n      var canvasPixels = this.canvasPixels;\n      var canvasData = canvasPixels.data;\n      var x1 = 0;\n      var x2 = widthMinus;\n      var y1 = 0;\n      var y2 = heightMinus;\n      var normalColor = new normalized_color_NormalizedColor();\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var x2MinusX = x2 - x;\n          var y2MinusY = y2 - y;\n          var xMinusX1 = x - x1;\n          var yMinusY1 = y - y1;\n          var hue = this.q11 * this.lookupTable[x2MinusX][y2MinusY] + this.q21 * this.lookupTable[xMinusX1][y2MinusY] + this.q12 * this.lookupTable[x2MinusX][yMinusY1] + this.q22 * this.lookupTable[xMinusX1][yMinusY1];\n          normalized_color_NormalizedColor.hsvToRgb(hue, 1.0, 1.0, normalColor);\n          canvasData[ptr++] = Math.round(normalColor.r * 255);\n          canvasData[ptr++] = Math.round(normalColor.g * 255);\n          canvasData[ptr++] = Math.round(normalColor.b * 255);\n          canvasData[ptr++] = 255;\n        }\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(canvasPixels, 0, 0);\n      this.endDrawing();\n    }\n    /**\n     * @private\n     * @returns {Array}\n     */\n\n  }, {\n    key: "createMultidimensionalArray",\n    value: function createMultidimensionalArray() {\n      if (arguments.length > 1) {\n        var thisDimension = new Array(arguments[0]);\n        var slicedArguments = Array.prototype.slice.call(arguments);\n        slicedArguments.shift();\n\n        for (var i = 0; i < thisDimension.length; i++) {\n          thisDimension[i] = this.createMultidimensionalArray(slicedArguments);\n        }\n\n        return thisDimension;\n      } else if (arguments.length === 1) {\n        return new Array(arguments[0]);\n      }\n\n      throw new Error(\'Failed to create the specified array\');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: "initializeLookupTable",\n    value: function initializeLookupTable() {\n      var width = this.canvas.width;\n      var height = this.canvas.height;\n      var heightMinus = height - 1;\n      var widthMinus = width - 1;\n      var x1 = 0;\n      var x2 = widthMinus;\n      var y1 = 0;\n      var y2 = heightMinus;\n      var oneDivX2MinusX1MulY2MinusY1 = 1 / ((x2 - x1) * (y2 - y1)) * 359.0;\n      this.lookupTable = this.createMultidimensionalArray(width, height);\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          this.lookupTable[x2 - x][y2 - y] = (x2 - x) * (y2 - y) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x - x1][y2 - y] = (x - x1) * (y2 - y) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x2 - x][y - y1] = (x2 - x) * (y - y1) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x - x1][y - y1] = (x - x1) * (y - y1) * oneDivX2MinusX1MulY2MinusY1;\n        }\n      }\n    }\n  }]);\n\n  return BilinearInterpolatorApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bilinear-interpolator/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n\nvar bilinear_interpolatorvue_type_script_lang_js_class, bilinear_interpolatorvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar bilinear_interpolatorvue_type_script_lang_js_BilinearInterpolator = Object(vue_class_component_esm["a" /* default */])(bilinear_interpolatorvue_type_script_lang_js_class = (bilinear_interpolatorvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(BilinearInterpolator, _VueWrapper);\n\n  function BilinearInterpolator() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BilinearInterpolator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(BilinearInterpolator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "directions", [{\n      name: \'q11\',\n      speed: 0.005,\n      direction: -1\n    }, {\n      name: \'q12\',\n      speed: 0.0035,\n      direction: 1\n    }, {\n      name: \'q21\',\n      speed: 0.0015,\n      direction: 1\n    }, {\n      name: \'q22\',\n      speed: 0.002,\n      direction: -1\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BilinearInterpolator, [{\n    key: "updateDirections",\n    value: function updateDirections() {\n      var app = this.app;\n      var directions = this.directions;\n\n      if (!app) {\n        return;\n      }\n\n      for (var i = 0; i < 4; i++) {\n        var val = app[directions[i].name];\n        val += directions[i].speed * directions[i].direction;\n\n        if (val < 0) {\n          directions[i].direction = 1;\n          val = 0;\n        }\n\n        if (val > 1) {\n          directions[i].direction = -1;\n          val = 1;\n        }\n\n        app[directions[i].name] = val;\n      }\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_BilinearInterpolatorApp(\'surface\', 1.0, 0.7, 0.5, 0.3);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.updateDirections();\n      this.app.draw();\n    }\n  }]);\n\n  return BilinearInterpolator;\n}(vue_wrapper), bilinear_interpolatorvue_type_script_lang_js_temp)) || bilinear_interpolatorvue_type_script_lang_js_class;\n\n/* harmony default export */ var bilinear_interpolatorvue_type_script_lang_js_ = (bilinear_interpolatorvue_type_script_lang_js_BilinearInterpolator);\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_bilinear_interpolatorvue_type_script_lang_js_ = (bilinear_interpolatorvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar bilinear_interpolator_component = Object(componentNormalizer["a" /* default */])(\n  effects_bilinear_interpolatorvue_type_script_lang_js_,\n  bilinear_interpolatorvue_type_template_id_1d0dee2e_render,\n  bilinear_interpolatorvue_type_template_id_1d0dee2e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var bilinear_interpolator = (bilinear_interpolator_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bump-mapping/index.vue?vue&type=template&id=6499e4db&\nvar bump_mappingvue_type_template_id_6499e4db_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"320","height":"200"},on:{"mousemove":_vm.onMouseMove,"mouseout":_vm.onMouseOut,"mouseover":_vm.onMouseOver}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Bump Mapping")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Light Distance","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"512"},on:{"update":_vm.updateDistance},model:{value:(_vm.distance),callback:function ($$v) {_vm.distance=$$v},expression:"distance"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Emboss Depth","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"1000"},on:{"update":_vm.updateEmboss},model:{value:(_vm.emboss),callback:function ($$v) {_vm.emboss=$$v},expression:"emboss"}})],1)],1)],1)])}\nvar bump_mappingvue_type_template_id_6499e4db_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Normal_mapping"}},[_vm._v("bump mapping")]),_vm._v("\\n      (normal mapping) on a 2D surface. Move your mouse over the canvas to control the light source.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue?vue&type=template&id=6499e4db&\n\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/app.js\n\n\n\n\n\n\n\nvar app_BumpMappingApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(BumpMappingApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {CanvasTexture} texture\n   * @param {CanvasTexture} heightMapTexture\n   * @constructor\n   * @extends {app.js}\n   */\n  function BumpMappingApp(targetCanvasId, texture, heightMapTexture) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BumpMappingApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(BumpMappingApp).call(this, targetCanvasId));\n    _this.heightMapTexture = heightMapTexture;\n    _this.texture = texture;\n    _this.lightPosition = new vector_3d_Vector3D();\n    _this.drawing = false;\n    _this.precalculated = false;\n    _this.precalculatedNormals = [];\n    _this.embossDepth = 48 / 50;\n\n    _this.heightMapTexture.onload = function () {\n      _this.precalculateNormals();\n    };\n\n    return _this;\n  }\n  /**\n   * @param {float} pointHeight Height at X, Y\n   * @param {float} pointHeightRight Height at X + 1, Y\n   * @param {float} pointHeightAbove Height at X, Y - 1\n   * @return {Vector3D} Bump map normal\n   * @private\n   */\n\n\n  Object(createClass["a" /* default */])(BumpMappingApp, [{\n    key: "calculateNormal",\n    value: function calculateNormal(pointHeight, pointHeightRight, pointHeightAbove) {\n      var phphaDifference = pointHeight - pointHeightAbove;\n      var phphrDifference = pointHeight - pointHeightRight;\n      var divisor = Math.sqrt(phphaDifference * phphaDifference + phphrDifference * phphrDifference + this.embossDepth);\n      /**\n       * Note: Have taken out z / divisor here, because it softens the image\n       * image too much for my taste.\n       */\n\n      return new vector_3d_Vector3D(phphaDifference / divisor, phphrDifference / divisor, this.embossDepth\n      /* / divisor */\n      );\n    }\n    /**\n     * Calculates a normal for each pixel in the height map\n     * @private\n     */\n\n  }, {\n    key: "precalculateNormals",\n    value: function precalculateNormals() {\n      var width = this.heightMapTexture.getWidth();\n      var height = this.heightMapTexture.getHeight();\n      var widthMinus = width - 1;\n      var pixels = this.heightMapTexture.getPixels();\n      var data = pixels.data;\n      var abovePtr = 0;\n      var ptr = width * 4; // ignore first line\n\n      var singlePtr = width;\n      this.precalculatedNormals = new Array(width * height);\n\n      for (var y = 1; y < height; y++) {\n        for (var x = 0; x < widthMinus; x++) {\n          var bumpNormal = this.calculateNormal(data[ptr], data[ptr + 4], data[abovePtr]);\n          bumpNormal.normalize();\n          this.precalculatedNormals[singlePtr] = bumpNormal;\n          abovePtr += 4;\n          ptr += 4;\n          singlePtr++;\n        } // Take in account width - 1\n\n\n        abovePtr += 4;\n        ptr += 4;\n        singlePtr++;\n      }\n\n      this.precalculated = true;\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (this.isLoaded() !== true) {\n        return;\n      }\n\n      if (this.hasPrecalculated() !== true) {\n        this.precalculateNormals();\n      }\n\n      this.startDrawing();\n      var width = this.heightMapTexture.getWidth();\n      var height = this.heightMapTexture.getHeight();\n      var widthMinus = width - 1;\n      var texturePixels = this.texture.getPixels();\n      var textureData = texturePixels.data;\n      var precalc = this.precalculatedNormals;\n      var realLightPos = new vector_3d_Vector3D();\n      var lightPos = this.lightPosition;\n      var lightPosZDiv2 = lightPos.z / 2;\n      var ptr = width * 4; // ignore top line\n\n      var singlePtr = width;\n\n      for (var y = 1; y < height; y++) {\n        for (var x = 0; x < widthMinus; x++) {\n          realLightPos.set(-(lightPos.y - y), lightPos.x - x, lightPosZDiv2);\n          var bumpDot = realLightPos.dot(precalc[singlePtr]);\n          var distMul = bumpDot / lightPos.distance(x, y, 0);\n          var ptrpp = ptr + 1;\n          var ptrp2 = ptr + 2;\n          textureData[ptr] = textureData[ptr] * distMul;\n          textureData[ptrpp] = textureData[ptrpp] * distMul;\n          textureData[ptrp2] = textureData[ptrp2] * distMul;\n          ptr += 4;\n          singlePtr++;\n        } // take in account width - 1\n\n\n        ptr += 4;\n        singlePtr++;\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(texturePixels, 0, 0);\n      this.endDrawing();\n    }\n    /**\n     * @param {float|int} x\n     * @param {float|int} y\n     * @param {float|int} z\n     * @public\n     */\n\n  }, {\n    key: "setLightPos",\n    value: function setLightPos(x, y, z) {\n      this.lightPosition.x = x;\n      this.lightPosition.y = y;\n      this.lightPosition.z = z;\n    }\n    /**\n     * @param {float|int} depth\n     * @public\n     */\n\n  }, {\n    key: "setEmbossDepth",\n    value: function setEmbossDepth(depth) {\n      this.embossDepth = depth;\n      this.precalculateNormals();\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isLoaded",\n    value: function isLoaded() {\n      return this.heightMapTexture.loaded === true && this.texture.loaded === true;\n    }\n    /**\n     * @returns {Boolean}\n     * @private\n     */\n\n  }, {\n    key: "hasPrecalculated",\n    value: function hasPrecalculated() {\n      return this.precalculated;\n    }\n  }]);\n\n  return BumpMappingApp;\n}(app_App);\n// CONCATENATED MODULE: ./lib/core/texture.js\n\n\n\nvar texture_Texture =\n/*#__PURE__*/\nfunction () {\n  function Texture() {\n    Object(classCallCheck["a" /* default */])(this, Texture);\n\n    this.loaded = false;\n    this.canvas = null;\n    this.context = null;\n    this.data = null;\n    this.virtualSurface = null;\n  }\n\n  Object(createClass["a" /* default */])(Texture, [{\n    key: "getWidth",\n\n    /**\n     * @return {int}\n     * @abstract\n     * @public\n     */\n    value: function getWidth() {\n      return 0;\n    }\n    /**\n     * @return {int}\n     * @abstract\n     * @public\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return 0;\n    }\n    /**\n     * @return {CanvasPixelArray}\n     * @abstract\n     * @public\n     **/\n\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      return null;\n    }\n    /**\n     * @param {CanvasPixelArray} pixels\n     * @public\n     */\n\n  }, {\n    key: "setPixels",\n    value: function setPixels(pixels) {\n      this.context.putImageData(pixels, 0, 0);\n    }\n    /**\n     * @public\n     * @returns {VirtualSurface}\n     */\n\n  }, {\n    key: "getVirtualSurface",\n    value: function getVirtualSurface() {\n      return this.virtualSurface;\n    }\n    /**\n     * @public\n     * @abstract\n     */\n\n  }, {\n    key: "create",\n    value: function create() {}\n    /**\n     * @public\n     * @abstract\n     */\n\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n    /**\n     * @param {VirtualSurface} destVirtualSurface\n     * @param {int} posX\n     * @param {int} posY\n     * @param {int} [offsetX=0]\n     * @param {int} [offsetY=0]\n     * @param {int} [offsetWidth=sourceTexture.getWidth()]\n     * @param {int} [offsetHeight=sourceTexture.getHeight()]\n     * @public\n     */\n\n  }, {\n    key: "draw",\n    value: function draw(destVirtualSurface, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight) {\n      Texture.draw(destVirtualSurface, this, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight);\n    }\n  }]);\n\n  return Texture;\n}();\n/**\n * @param {VirtualSurface} destVirtualSurface\n * @param {Texture} sourceTexture\n * @param {int} posX\n * @param {int} posY\n * @param {int} [offsetX=0]\n * @param {int} [offsetY=0]\n * @param {int} [offsetWidth=sourceTexture.getWidth()]\n * @param {int} [offsetHeight=sourceTexture.getHeight()]\n * @public\n */\n\ntexture_Texture.draw = function (destVirtualSurface, sourceTexture, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight) {\n  if (!sourceTexture || !destVirtualSurface) {\n    return;\n  }\n\n  var destData = destVirtualSurface.getData();\n  var destWidth = destVirtualSurface.getWidth();\n  var destHeight = destVirtualSurface.getHeight();\n  var textureWidth = sourceTexture.getWidth();\n  var textureHeight = sourceTexture.getHeight();\n\n  if (posX >= textureWidth || posY >= textureHeight || posX + textureWidth <= 0 || posY + textureHeight <= 0) {\n    return;\n  }\n\n  offsetX = Math.round(Math.min(textureWidth - 1, Math.max(0, offsetX || 0)));\n  offsetY = Math.round(Math.min(textureHeight - 1, Math.max(0, offsetY || 0)));\n  offsetWidth = Math.round(Math.min(textureWidth, Math.max(0, offsetWidth || textureWidth)));\n  offsetHeight = Math.round(Math.min(textureHeight, Math.max(0, offsetHeight || textureHeight)));\n  posX = Math.round(posX);\n  posY = Math.round(posY);\n\n  if (posX < 0) {\n    offsetX += -posX;\n    offsetWidth += posX;\n    posX = 0;\n  }\n\n  if (posY < 0) {\n    offsetY += -posY;\n    offsetHeight += posY;\n    posY = 0;\n  }\n\n  if (posX + offsetWidth > destWidth) {\n    offsetWidth = destWidth - posX;\n  }\n\n  if (posY + offsetHeight > destHeight) {\n    offsetHeight = destHeight - posY;\n  }\n\n  if (offsetWidth <= 0 || offsetHeight <= 0) {\n    return;\n  }\n\n  var destPtr = (posX + posY * destWidth) * 4;\n  var sourcePtr = (offsetX + offsetY * textureWidth) * 4;\n  var sourceOffsetAdder = (textureWidth - offsetWidth) * 4;\n  var destOffsetAdder = (destWidth - offsetWidth) * 4;\n  var sourceData = sourceTexture.getPixels().data;\n\n  for (var y = 0; y < offsetHeight; y++) {\n    for (var x = 0; x < offsetWidth; x++) {\n      var fgAlpha = sourceData[sourcePtr + 3];\n\n      if (fgAlpha === 0) {\n        sourcePtr += 3;\n        destPtr += 3;\n      } else if (fgAlpha === 255) {\n        destData[destPtr++] = sourceData[sourcePtr++];\n        destData[destPtr++] = sourceData[sourcePtr++];\n        destData[destPtr++] = sourceData[sourcePtr++];\n      } else {\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n      }\n\n      destPtr++;\n      sourcePtr++;\n    }\n\n    sourcePtr += sourceOffsetAdder;\n    destPtr += destOffsetAdder;\n  }\n};\n// CONCATENATED MODULE: ./lib/core/canvas-texture.js\n\n\n\n\n\n\n\n\n/**\n * @param {string} src URI/URL to texture resource\n * @constructor\n * @extends {Texture}\n */\n\nvar canvas_texture_CanvasTexture =\n/*#__PURE__*/\nfunction (_Texture) {\n  Object(inherits["a" /* default */])(CanvasTexture, _Texture);\n\n  function CanvasTexture(src) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CanvasTexture);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(CanvasTexture).call(this));\n    _this.canvas = _this.create();\n    _this.context = _this.canvas.getContext(\'2d\');\n    _this.loaded = false;\n    _this.image = new Image();\n    _this.image.crossOrigin = \'Anonymous\';\n    _this.image.src = src;\n    _this.wasDrawn = false; // Let\'s update stuff once the image has loaded\n\n    _this.image.onload = function () {\n      _this.loaded = true;\n      _this.canvas.width = _this.image.width;\n      _this.canvas.height = _this.image.height;\n      _this.data = _this.getPixels().data;\n      _this.wasDrawn = false;\n      _this.virtualSurface = new virtual_surface_VirtualSurface(_this.image.width, _this.image.height, _this.data);\n\n      if (typeof _this.onload === \'function\') {\n        _this.onload();\n      }\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CanvasTexture, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.image.width;\n    }\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.image.height;\n    }\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      if (this.wasDrawn === false) {\n        this.context.drawImage(this.image, 0, 0);\n        this.wasDrawn = true;\n      }\n\n      return this.context.getImageData(0, 0, this.getWidth(), this.getHeight());\n    }\n  }, {\n    key: "create",\n    value: function create() {\n      var canvas = Helper.createElement(\'canvas\');\n      canvas.width = 1;\n      canvas.height = 1;\n      return canvas;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      Helper.removeElement(this.canvas);\n      this.loaded = false;\n      this.image = null;\n      this.context = null;\n      this.canvas = null;\n    }\n  }]);\n\n  return CanvasTexture;\n}(texture_Texture);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bump-mapping/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar bump_mappingvue_type_script_lang_js_class, bump_mappingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\nvar bump_mappingvue_type_script_lang_js_BumpMapping = Object(vue_class_component_esm["a" /* default */])(bump_mappingvue_type_script_lang_js_class = (bump_mappingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(BumpMapping, _VueWrapper);\n\n  function BumpMapping() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BumpMapping);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(BumpMapping)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radsPerSecond", 0.8);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radius", 120);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lightPosX", 160);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lightPosY", 100);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "distance", 100);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "emboss", 48);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BumpMapping, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var heightmap = new canvas_texture_CanvasTexture(\'./resources/apps/bump-mapping/mbaco-heightmap2.png\');\n      var texture = new canvas_texture_CanvasTexture(\'./resources/apps/bump-mapping/mbaco-texture.png\');\n      var app = new app_BumpMappingApp(\'surface\', texture, heightmap);\n      app.setLightPos(this.lightPosX, this.lightPosY, this.distance); // app.setEmbossDepth(this.emboss / 50);\n\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var runTime = (curTime.getTime() - this.app.startTime.getTime()) / 1000.00;\n      var x = this.lightPosX + this.radius * Math.sin(this.radsPerSecond * runTime);\n      var y = this.lightPosY + this.radius * Math.cos(this.radsPerSecond * runTime);\n      var z = this.app.lightPosition.z;\n      this.app.setLightPos(x, y, z);\n      this.app.draw();\n    }\n  }, {\n    key: "updateDistance",\n    value: function updateDistance(val) {\n      var app = this.app;\n      app.setLightPos(app.lightPosition.x, app.lightPosition.y, val);\n    }\n  }, {\n    key: "updateEmboss",\n    value: function updateEmboss(val) {\n      var app = this.app;\n      app.setEmbossDepth(val / 50);\n    }\n  }, {\n    key: "onMouseMove",\n    value: function onMouseMove(event) {\n      var coordinates = Helper.getCanvasCoordinates(event, \'surface\');\n      this.app.setLightPos(coordinates.x, coordinates.y, this.app.lightPosition.z);\n      this.app.draw();\n    }\n  }, {\n    key: "onMouseOver",\n    value: function onMouseOver(event) {\n      this.app.setPaused(true);\n    }\n  }, {\n    key: "onMouseOut",\n    value: function onMouseOut(event) {\n      this.app.setPaused(false);\n    }\n  }]);\n\n  return BumpMapping;\n}(vue_wrapper), bump_mappingvue_type_script_lang_js_temp)) || bump_mappingvue_type_script_lang_js_class;\n\n/* harmony default export */ var bump_mappingvue_type_script_lang_js_ = (bump_mappingvue_type_script_lang_js_BumpMapping);\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_bump_mappingvue_type_script_lang_js_ = (bump_mappingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar bump_mapping_component = Object(componentNormalizer["a" /* default */])(\n  effects_bump_mappingvue_type_script_lang_js_,\n  bump_mappingvue_type_template_id_6499e4db_render,\n  bump_mappingvue_type_template_id_6499e4db_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var bump_mapping = (bump_mapping_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/crepuscular-rays/index.vue?vue&type=template&id=03fed90a&\nvar crepuscular_raysvue_type_template_id_03fed90a_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"320","height":"200"},on:{"mousemove":_vm.onMouseMove,"mouseout":_vm.onMouseOut,"mouseover":_vm.onMouseOver}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Crepuscular Rays")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Weight","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"200"},on:{"update":_vm.updateWeight},model:{value:(_vm.weight),callback:function ($$v) {_vm.weight=$$v},expression:"weight"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Decay","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateDecay},model:{value:(_vm.decay),callback:function ($$v) {_vm.decay=$$v},expression:"decay"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Exposure","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateExposure},model:{value:(_vm.exposure),callback:function ($$v) {_vm.exposure=$$v},expression:"exposure"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Density","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateDensity},model:{value:(_vm.density),callback:function ($$v) {_vm.density=$$v},expression:"density"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Samples","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"150"},on:{"update":_vm.updateSamples},model:{value:(_vm.samples),callback:function ($$v) {_vm.samples=$$v},expression:"samples"}})],1),_vm._v(" "),_c(\'b-form-group\',[_c(\'b-form-checkbox-group\',{attrs:{"options":_vm.buttonOptions,"buttons":"","size":"sm"},on:{"change":_vm.toggleButtons},model:{value:(_vm.selectedButtons),callback:function ($$v) {_vm.selectedButtons=$$v},expression:"selectedButtons"}})],1)],1)],1)])}\nvar crepuscular_raysvue_type_template_id_03fed90a_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Crepuscular_rays"}},[_vm._v("crepuscular rays")]),_vm._v(" (\\"god rays\\")\\n      on a 2D surface. Move your mouse over the canvas to control the light source.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue?vue&type=template&id=03fed90a&\n\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/app.js\n\n\n\n\n\n\n\n\n\nvar app_CrepuscularRaysApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(CrepuscularRaysApp, _App);\n\n  function CrepuscularRaysApp(targetCanvasId, backgroundImageUrl, maskImageUrl) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CrepuscularRaysApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(CrepuscularRaysApp).call(this, targetCanvasId));\n    _this.bgImage = new canvas_texture_CanvasTexture(backgroundImageUrl);\n    _this.maskImage = new canvas_texture_CanvasTexture(maskImageUrl);\n    _this.maskImagePosition = new point_2d_Point2D(-120, -180);\n    _this.drawMask = true;\n    _this.drawBackground = true;\n    _this.dirtySurface = false;\n    _this.drawArea = new virtual_surface_VirtualSurface(_this.canvas.width, _this.canvas.height);\n    _this.totalDrawTime = 0;\n    _this.totalDrawCount = 0;\n    _this.lights = [];\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CrepuscularRaysApp, [{\n    key: "draw",\n    value: function draw() {\n      var drawDest = this.dirtySurface ? this.virtualSurface : this.drawArea;\n      this.startDrawing();\n\n      if (this.drawBackground === true) {\n        this.bgImage.draw(drawDest, 0, 0);\n      }\n\n      for (var i = 0; i < this.lights.length; i++) {\n        if (this.lights[i].active === true && this.lights[i].drawLight === true) {\n          this.lights[i].image.draw(drawDest, this.lights[i].position.x - this.lights[i].image.getWidth() / 2, this.lights[i].position.y - this.lights[i].image.getHeight() / 2);\n        }\n      }\n\n      if (this.drawMask === true) {\n        this.maskImage.draw(drawDest, this.maskImagePosition.x, this.maskImagePosition.y);\n      }\n\n      for (var _i = 0; _i < this.lights.length; _i++) {\n        if (this.lights[_i].active === true) {\n          this.processRays(this.lights[_i], this.virtualSurface.data, drawDest.data);\n        }\n      }\n\n      this.endDrawing(true); // console.log(\'pushed\');\n    }\n  }, {\n    key: "addLight",\n\n    /**\n     * <code>\n     * var lightObject = {\n     *   active: true,\n     *   position: new Point2D( 0, 0 ),\n     *   height: 0.2,\n     *   decay: 0.3,\n     *   exposur: 1,\n     *   density: 0.4,\n     *   samples: 10,\n     *   imageUr: \'resources/light.png\'\n     * };\n     * </code>\n     *\n     * @public\n     * @param {object|Array} lightObject\n     */\n    value: function addLight(lightObject) {\n      if (lightObject instanceof Array) {\n        for (var i = 0; i < lightObject.length; i++) {\n          lightObject[i].image = new canvas_texture_CanvasTexture(lightObject[i].imageUrl);\n          this.lights.push(lightObject[i]);\n        }\n      } else {\n        lightObject.image = new canvas_texture_CanvasTexture(lightObject.imageUrl);\n        this.lights.push(lightObject);\n      }\n    }\n  }, {\n    key: "processRays",\n    value: function processRays(light, dest, source) {\n      var dataPtr = 0;\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var samples = light.samples;\n      var weight = light.weight;\n      var decay = light.decay;\n      var exposure = light.exposure;\n      var lightPosX = light.position.x;\n      var lightPosY = light.position.y;\n      var normalSamplesByDensity = 1.0 / samples * light.density;\n      var maxPtr = width * height * 4;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          // curPos.set( x, y );\n          // deltaTex.set( curPos );\n          // this is faster:\n          var curPosX = x;\n          var curPosY = y;\n          var deltaTexX = x;\n          var deltaTexY = y; // deltaTex.subtract( light.position );\n          // deltaTex.multiplyByVal( normalSamplesByDensity );\n          // this is faster:\n\n          deltaTexX -= lightPosX;\n          deltaTexY -= lightPosY;\n          deltaTexX *= normalSamplesByDensity;\n          deltaTexY *= normalSamplesByDensity; // this.virtualSurface.getPixel( curPos, initialColor );\n          // this is faster:\n\n          var initialR = source[dataPtr];\n          var initialG = source[dataPtr + 1];\n          var initialB = source[dataPtr + 2];\n          var illuminationDecay = 1.0;\n\n          for (var i = 0; i < samples; i++) {\n            // curPos.subtract( deltaTex );\n            // this is faster:\n            curPosX -= deltaTexX;\n            curPosY -= deltaTexY; // this.virtualSurface.getPixel( curPos, curColor );\n            // this is faster:\n\n            var curPtr = (Math.round(curPosX) + Math.round(curPosY) * width) * 4;\n\n            if (curPtr >= 0 && curPtr < maxPtr) {\n              var curR = source[curPtr++];\n              var curG = source[curPtr++];\n              var curB = source[curPtr]; // curColor.multiplyByVal( illuminationDecay * weight, true );\n              // initialColor.add( curColor, true );\n              // this is faster:\n\n              var curMul = illuminationDecay * weight;\n              curR *= curMul;\n              curG *= curMul;\n              curB *= curMul;\n              initialR += curR;\n              initialG += curG;\n              initialB += curB;\n              illuminationDecay *= decay;\n            }\n          } // this is faster:\n\n\n          initialR = Math.max(0, Math.min(255, Math.round(initialR * exposure)));\n          initialG = Math.max(0, Math.min(255, Math.round(initialG * exposure)));\n          initialB = Math.max(0, Math.min(255, Math.round(initialB * exposure)));\n          dest[dataPtr++] = initialR;\n          dest[dataPtr++] = initialG;\n          dest[dataPtr++] = initialB;\n          dataPtr++;\n        }\n      }\n    }\n  }]);\n\n  return CrepuscularRaysApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/crepuscular-rays/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar crepuscular_raysvue_type_script_lang_js_class, crepuscular_raysvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\nvar crepuscular_raysvue_type_script_lang_js_CrepuscularRays = Object(vue_class_component_esm["a" /* default */])(crepuscular_raysvue_type_script_lang_js_class = (crepuscular_raysvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(CrepuscularRays, _VueWrapper);\n\n  function CrepuscularRays() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CrepuscularRays);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(CrepuscularRays)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "weight", 250);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "decay", 800);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "exposure", 800);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "density", 450);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "samples", 20);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "selectedButtons", [\'drawLight\', \'drawMask\', \'drawBackground\']);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "buttonOptions", [{\n      text: \'Draw Light\',\n      value: \'drawLight\'\n    }, {\n      text: \'Draw Mask\',\n      value: \'drawMask\'\n    }, {\n      text: \'Draw Background\',\n      value: \'drawBackground\'\n    }, {\n      text: \'Dirty Surface\',\n      value: \'dirtySurface\'\n    }]);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radsPerSecond", 0.6);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radius", 40);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "gridPosX", -120);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "gridPosY", -200);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "noUpdates", false);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lights", [{\n      active: true,\n      drawLight: true,\n      position: new point_2d_Point2D(160, 100),\n      radiusPerSecond: -0.9,\n      radiusX: 80,\n      radiusY: 80,\n      origin: new point_2d_Point2D(160, 100),\n      weight: _this.weight / 1000,\n      decay: _this.decay / 1000,\n      exposure: _this.exposure / 1000,\n      density: _this.density / 1000,\n      samples: _this.samples,\n      imageUrl: \'./resources/apps/crepuscular-rays/light.png\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CrepuscularRays, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_CrepuscularRaysApp(\'surface\', \'./resources/apps/crepuscular-rays/bg.png\', \'./resources/apps/crepuscular-rays/mask3.png\', \'./resources/apps/crepuscular-rays/light.png\');\n      app.addLight(this.lights);\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var app = this.app;\n\n      if (!this.noUpdates) {\n        var lights = this.lights;\n        var curTime = new Date();\n        var runTime = (curTime.getTime() - app.startTime.getTime()) / 1000.00;\n\n        for (var i = 0; i < lights.length; i++) {\n          lights[i].position.set(lights[i].origin.x + lights[i].radiusX * Math.sin(lights[i].radiusPerSecond * runTime), lights[i].origin.y + lights[i].radiusY * Math.cos(lights[i].radiusPerSecond * runTime));\n        }\n      }\n\n      app.draw();\n    }\n  }, {\n    key: "toggleButtons",\n    value: function toggleButtons(val) {\n      this.app.lights[0].drawLight = val.indexOf(\'drawLight\') >= 0;\n      this.app.drawMask = val.indexOf(\'drawMask\') >= 0;\n      this.app.drawBackground = val.indexOf(\'drawBackground\') >= 0;\n      this.app.dirtySurface = val.indexOf(\'dirtySurface\') >= 0;\n    }\n  }, {\n    key: "updateWeight",\n    value: function updateWeight(val) {\n      this.app.lights[0].weight = val / 1000;\n    }\n  }, {\n    key: "updateDecay",\n    value: function updateDecay(val) {\n      this.app.lights[0].decay = val / 1000;\n    }\n  }, {\n    key: "updateDensity",\n    value: function updateDensity(val) {\n      this.app.lights[0].density = val / 1000;\n    }\n  }, {\n    key: "updateExposure",\n    value: function updateExposure(val) {\n      this.app.lights[0].exposure = val / 1000;\n    }\n  }, {\n    key: "updateSamples",\n    value: function updateSamples(val) {\n      this.app.lights[0].samples = Math.round(val);\n    }\n  }, {\n    key: "onMouseMove",\n    value: function onMouseMove(event) {\n      var coords = Helper.getCanvasCoordinates(event, \'surface\');\n      this.app.lights[0].position.set(coords.x, coords.y);\n    }\n  }, {\n    key: "onMouseOver",\n    value: function onMouseOver(event) {\n      this.noUpdates = true;\n    }\n  }, {\n    key: "onMouseOut",\n    value: function onMouseOut(event) {\n      this.noUpdates = false;\n    }\n  }]);\n\n  return CrepuscularRays;\n}(vue_wrapper), crepuscular_raysvue_type_script_lang_js_temp)) || crepuscular_raysvue_type_script_lang_js_class;\n\n/* harmony default export */ var crepuscular_raysvue_type_script_lang_js_ = (crepuscular_raysvue_type_script_lang_js_CrepuscularRays);\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_crepuscular_raysvue_type_script_lang_js_ = (crepuscular_raysvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar crepuscular_rays_component = Object(componentNormalizer["a" /* default */])(\n  effects_crepuscular_raysvue_type_script_lang_js_,\n  crepuscular_raysvue_type_template_id_03fed90a_render,\n  crepuscular_raysvue_type_template_id_03fed90a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var crepuscular_rays = (crepuscular_rays_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/fisheye-lens/index.vue?vue&type=template&id=a6d7c2ae&\nvar fisheye_lensvue_type_template_id_a6d7c2ae_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar fisheye_lensvue_type_template_id_a6d7c2ae_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"853","height":"470"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Fisheye Lens")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Distortion_(optics)"}},[_vm._v("radial barrel distortion")]),_vm._v(".")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue?vue&type=template&id=a6d7c2ae&\n\n// CONCATENATED MODULE: ./lib/core/empty-texture.js\n\n\n\n\n\n\n\n\nvar empty_texture_EmptyTexture =\n/*#__PURE__*/\nfunction (_Texture) {\n  Object(inherits["a" /* default */])(EmptyTexture, _Texture);\n\n  function EmptyTexture(canvasElementId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, EmptyTexture);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(EmptyTexture).call(this));\n    _this.canvas = Helper.getElement(canvasElementId);\n    _this.context = _this.canvas.getContext(\'2d\');\n\n    _this.create();\n\n    _this.loaded = true;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(EmptyTexture, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.width;\n    }\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.height;\n    }\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      return this.data;\n    }\n  }, {\n    key: "create",\n    value: function create() {\n      this.data = this.context.createImageData(this.canvas.width, this.canvas.height);\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.width, this.height, this.data.data);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.loaded = false;\n      this.context = null;\n      this.canvas = null;\n      this.width = 0;\n      this.height = 0;\n      this.data = null;\n    }\n  }]);\n\n  return EmptyTexture;\n}(texture_Texture);\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/app.js\n\n\n\n\n\n\n\n\n\nvar app_FisheyeLensApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(FisheyeLensApp, _App);\n\n  /**\n   * @link http://popscan.blogspot.co.uk/2012/04/fisheye-lens-equation-simple-fisheye.html\n   * @param {string} targetCanvasId\n   * @param {string} bgImageUrl\n   * @constructor\n   * @extends {app.js}\n   */\n  function FisheyeLensApp(targetCanvasId, bgImageUrl) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FisheyeLensApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FisheyeLensApp).call(this, targetCanvasId));\n    _this.bgImage = new canvas_texture_CanvasTexture(bgImageUrl);\n    _this.textures = [new empty_texture_EmptyTexture(targetCanvasId), new empty_texture_EmptyTexture(targetCanvasId)];\n    _this.lenses = [];\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FisheyeLensApp, [{\n    key: "addLens",\n\n    /**\n     * Add a new lens\n     *\n     * <code>\n     * var lens = {\n     *  x: 0,\n     *  y: 0,\n     *  radius: 50\n     * };\n     * </code>\n     *\n     * @param {object} lens\n     * @public\n     */\n    value: function addLens(lens) {\n      this.lenses.push(lens);\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.drawing = true;\n      this.textures[0].data = this.bgImage.context.getImageData(0, 0, this.textures[0].getWidth(), this.textures[0].getHeight());\n      var curSourceCanvas = 0;\n      var curDestCanvas = 1; // this is very unoptimized\n\n      for (var i = 0; i < this.lenses.length; i++) {\n        this.textures[curDestCanvas].data.data.set(new Uint8ClampedArray(this.textures[curSourceCanvas].data.data));\n        this.drawLens(Math.round(this.lenses[i].x), Math.round(this.lenses[i].y), Math.round(this.lenses[i].radius), this.textures[curDestCanvas], this.textures[curSourceCanvas]);\n        curSourceCanvas = 1 - curSourceCanvas;\n        curDestCanvas = 1 - curDestCanvas;\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(this.textures[curSourceCanvas].data, 0, 0);\n      this.drawing = false;\n    }\n    /**\n     * @param {int} posX\n     * @param {int} posY\n     * @param {int} radius\n     * @param {CanvasTexture} destCanvasTexture\n     * @param {CanvasTexture} sourceCanvasTexture\n     * @private\n     */\n\n  }, {\n    key: "drawLens",\n    value: function drawLens(posX, posY, radius, destCanvasTexture, sourceCanvasTexture) {\n      var destData = destCanvasTexture.data.data;\n      var sourceData = sourceCanvasTexture.data.data;\n      var sourceWidth = sourceCanvasTexture.getWidth();\n      var halfRadius = 0.5 * radius;\n\n      for (var y = 0; y < radius; y++) {\n        var ptr = (posX + (y + posY) * destCanvasTexture.getWidth()) * 4;\n        var ny = y / halfRadius - 1.0;\n        var ny2 = ny * ny;\n\n        for (var x = 0; x < radius; x++) {\n          var nx = x / halfRadius - 1.0;\n          var r = Math.sqrt(nx * nx + ny2);\n\n          if (r >= 0.0 && r <= 1.0) {\n            var theta = Math.atan2(ny, nx);\n            var rd = (r + (1 - Math.sqrt(1 - r * r))) / 2;\n\n            if (rd <= 1.0) {\n              var fnx = rd * Math.cos(theta);\n              var fny = rd * Math.sin(theta);\n              var px = posX + Math.round((fnx + 1.0) * halfRadius);\n              var py = posY + Math.round((fny + 1.0) * halfRadius);\n              var bgPtr = (py * sourceWidth + px) * 4;\n              destData[ptr++] = sourceData[bgPtr++];\n              destData[ptr++] = sourceData[bgPtr++];\n              destData[ptr++] = sourceData[bgPtr++];\n              ptr++;\n            } else {\n              ptr += 4;\n            }\n          } else {\n            ptr += 4;\n          }\n        }\n      }\n    }\n  }]);\n\n  return FisheyeLensApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/fisheye-lens/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar fisheye_lensvue_type_script_lang_js_class, fisheye_lensvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\nvar fisheye_lensvue_type_script_lang_js_FisheyeLens = Object(vue_class_component_esm["a" /* default */])(fisheye_lensvue_type_script_lang_js_class = (fisheye_lensvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(FisheyeLens, _VueWrapper);\n\n  function FisheyeLens() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FisheyeLens);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FisheyeLens)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lenses", [{\n      x: 163,\n      y: 48,\n      radius: 250,\n      dirX: -1,\n      dirY: 0,\n      speedX: -1.6,\n      speedY: 0.0\n    }, {\n      x: 263,\n      y: 98,\n      radius: 300,\n      dirX: 2.3,\n      dirY: 0,\n      speedX: 1,\n      speedY: 0.0\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FisheyeLens, [{\n    key: "moveLenses",\n    value: function moveLenses() {\n      var canvas = Helper.getElement(\'surface\');\n      var lenses = this.lenses;\n\n      for (var i = 0; i < lenses.length; i++) {\n        lenses[i].x += lenses[i].speedX;\n        lenses[i].y += lenses[i].speedY;\n        lenses[i].speedY += 0.7;\n\n        if (lenses[i].x + lenses[i].radius >= canvas.width && lenses[i].speedX >= 0) {\n          lenses[i].x = canvas.width - lenses[i].radius;\n          lenses[i].speedX = -Math.min(8.0, Math.abs(lenses[i].speedX) * (0.7 + Math.random()));\n        }\n\n        if (lenses[i].x < 0 && lenses[i].speedX <= 0) {\n          lenses[i].x = 0;\n          lenses[i].speedX = Math.min(8.0, Math.abs(lenses[i].speedX) * (0.5 + Math.random()));\n        }\n\n        if (lenses[i].y < 0 && lenses[i].speedY <= 0) {\n          lenses[i].y = 0;\n          lenses[i].speedY = -lenses[i].speedY * 0.9;\n        }\n\n        if (lenses[i].y + lenses[i].radius >= canvas.height && lenses[i].speedY >= 0) {\n          lenses[i].y = canvas.height - lenses[i].radius;\n          lenses[i].speedY = -lenses[i].speedY * 0.85;\n\n          if (Math.abs(lenses[i].speedY) < 8) {\n            lenses[i].speedY *= 2;\n          }\n        }\n      }\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_FisheyeLensApp(\'surface\', \'./resources/apps/fisheye-lens/bg.jpg\');\n      var lenses = this.lenses;\n\n      for (var i = 0; i < lenses.length; i++) {\n        app.addLens(lenses[i]);\n      }\n\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.moveLenses();\n      this.app.draw();\n    }\n  }]);\n\n  return FisheyeLens;\n}(vue_wrapper), fisheye_lensvue_type_script_lang_js_temp)) || fisheye_lensvue_type_script_lang_js_class;\n\n/* harmony default export */ var fisheye_lensvue_type_script_lang_js_ = (fisheye_lensvue_type_script_lang_js_FisheyeLens);\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_fisheye_lensvue_type_script_lang_js_ = (fisheye_lensvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar fisheye_lens_component = Object(componentNormalizer["a" /* default */])(\n  effects_fisheye_lensvue_type_script_lang_js_,\n  fisheye_lensvue_type_template_id_a6d7c2ae_render,\n  fisheye_lensvue_type_template_id_a6d7c2ae_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var fisheye_lens = (fisheye_lens_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/metaballs/index.vue?vue&type=template&id=6195cc6f&\nvar metaballsvue_type_template_id_6195cc6f_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{ref:"metaballsCanvas",attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Metaballs")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Min Threshold","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"1200"},on:{"update":_vm.updateMinThreshold},model:{value:(_vm.minThreshold),callback:function ($$v) {_vm.minThreshold=$$v},expression:"minThreshold"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Max Threshold","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"3100"},on:{"update":_vm.updateMaxThreshold},model:{value:(_vm.maxThreshold),callback:function ($$v) {_vm.maxThreshold=$$v},expression:"maxThreshold"}})],1)],1)],1)])}\nvar metaballsvue_type_template_id_6195cc6f_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Metaballs"}},[_vm._v("Blinn\'s Metaballs")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue?vue&type=template&id=6195cc6f&\n\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/app.js\n\n\n\n\n\n\n\n\n\n\n\nvar app_MetaballsApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(MetaballsApp, _App);\n\n  function MetaballsApp(targetCanvasId, ballCount) {\n    var _this;\n\n    var minThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;\n    var maxThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n\n    Object(classCallCheck["a" /* default */])(this, MetaballsApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MetaballsApp).call(this, targetCanvasId));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "balls", []);\n\n    _this.thresholdMin = minThreshold;\n    _this.thresholdMax = maxThreshold;\n\n    _this.initBalls(ballCount);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(MetaballsApp, [{\n    key: "initBalls",\n    value: function initBalls(ballCount) {\n      var canvasWidth = this.canvas.width;\n      var canvasHeight = this.canvas.height;\n\n      for (var i = 0; i < ballCount; i++) {\n        var radius = 25 + 25 * Math.random();\n        var power = 0.5 + Math.random() * 0.5;\n        this.balls.push({\n          pos: new point_2d_Point2D(radius + (canvasWidth - radius * 2) * Math.random(), radius + (canvasHeight - radius * 2) * Math.random()),\n          radius: radius,\n          power: power,\n          radiusTimesPower: radius * power,\n          direction: new point_2d_Point2D(-1 + Math.random() * 2, -1 + Math.random()),\n          tint: new normalized_color_NormalizedColor(0.7 + 0.3 * Math.random(), 0.7 + 0.3 * Math.random(), 0.7 + 0.3 * Math.random())\n        });\n      }\n    }\n  }, {\n    key: "moveBalls",\n    value: function moveBalls() {\n      var canvasWidth = this.canvas.width;\n      var canvasHeight = this.canvas.height;\n\n      for (var i = 0; i < this.balls.length; i++) {\n        var b = this.balls[i];\n        b.pos.add(b.direction);\n\n        if (b.pos.x < b.radius && b.direction.x < 0) {\n          b.direction.x = -b.direction.x;\n          b.pos.x = b.radius;\n        }\n\n        if (b.pos.y < b.radius && b.direction.y < 0) {\n          b.direction.y = -b.direction.y;\n          b.pos.y = b.radius;\n        }\n\n        if (b.pos.x > canvasWidth - b.radius && b.direction.x > 0) {\n          b.direction.x = -b.direction.x;\n          b.pos.x = canvasWidth - b.radius;\n        }\n\n        if (b.pos.y > canvasHeight - b.radius && b.direction.y > 0) {\n          b.direction.y = -b.direction.y;\n          b.pos.y = canvasHeight - b.radius;\n        }\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor.set(0, 0, 0);\n      Draw.setSurface(this.virtualSurface);\n      Draw.clear();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptr = 0;\n      var balls = this.balls;\n      var ballCount = balls.length;\n      var thresholdMin = this.thresholdMin;\n      var thresholdMax = this.thresholdMax;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var power = 0;\n          var colR = 0;\n          var colG = 0;\n          var colB = 0;\n\n          for (var i = 0; i < ballCount; i++) {\n            var b = balls[i];\n            var xDiff = x - b.pos.x;\n            var yDiff = y - b.pos.y;\n            var tint = b.tint;\n\n            if (xDiff === 0 && yDiff === 0) {\n              power += b.power;\n              colR += tint.r;\n              colG += tint.g;\n              colB += tint.b;\n            } else {\n              var d = b.radiusTimesPower / Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n              colR += tint.r * d;\n              colG += tint.g * d;\n              colB += tint.b * d;\n              power += d;\n            }\n          }\n\n          if (power >= thresholdMin && power <= thresholdMax) {\n            // this helps with the fall-off\n            if (power < 1.0) {\n              var sine = Math.sin(0.5 * Math.PI * power);\n              var m = sine * sine * sine;\n              colR *= m;\n              colG *= m;\n              colB *= m;\n            }\n\n            colR = Math.round(Math.min(255, Math.max(0, colR * 255)));\n            colG = Math.round(Math.min(255, Math.max(0, colG * 255)));\n            colB = Math.round(Math.min(255, Math.max(0, colB * 255)));\n            data[ptr++] = colR;\n            data[ptr++] = colG;\n            data[ptr++] = colB;\n            ptr++;\n          } else {\n            ptr += 4;\n          }\n        }\n      }\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return MetaballsApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/metaballs/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar metaballsvue_type_script_lang_js_class, metaballsvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar metaballsvue_type_script_lang_js_Metaballs = Object(vue_class_component_esm["a" /* default */])(metaballsvue_type_script_lang_js_class = (metaballsvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Metaballs, _VueWrapper);\n\n  function Metaballs() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Metaballs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Metaballs)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "minThreshold", 1);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "maxThreshold", 3100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Metaballs, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      // this.intervalFrequency = 10;\n      return new app_MetaballsApp(\'surface\', 8, this.minThreshold / 1000, (this.maxThreshold === 3100 ? 1000000 : this.maxThreshold) / 1000);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var app = this.app;\n      app.moveBalls();\n      app.draw();\n    }\n  }, {\n    key: "updateMinThreshold",\n    value: function updateMinThreshold(val) {\n      this.app.thresholdMin = val / 1000.0;\n    }\n  }, {\n    key: "updateMaxThreshold",\n    value: function updateMaxThreshold(val) {\n      if (val >= 3000) {\n        val = 1000000;\n      }\n\n      this.app.thresholdMax = val / 1000.0;\n    }\n  }]);\n\n  return Metaballs;\n}(vue_wrapper), metaballsvue_type_script_lang_js_temp)) || metaballsvue_type_script_lang_js_class;\n\n/* harmony default export */ var metaballsvue_type_script_lang_js_ = (metaballsvue_type_script_lang_js_Metaballs);\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_metaballsvue_type_script_lang_js_ = (metaballsvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar metaballs_component = Object(componentNormalizer["a" /* default */])(\n  effects_metaballsvue_type_script_lang_js_,\n  metaballsvue_type_template_id_6195cc6f_render,\n  metaballsvue_type_template_id_6195cc6f_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var metaballs = (metaballs_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/plasma/index.vue?vue&type=template&id=17495692&\nvar plasmavue_type_template_id_17495692_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar plasmavue_type_template_id_17495692_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Plasma Effect")]),_vm._v(" "),_c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Plasma_effect"}},[_vm._v("plasma effect")]),_vm._v(".")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue?vue&type=template&id=17495692&\n\n// CONCATENATED MODULE: ./components/apps/effects/plasma/app.js\n\n\n\n\n\n\n\n\nvar app_PlasmaApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(PlasmaApp, _App);\n\n  function PlasmaApp(targetCanvasId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, PlasmaApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(PlasmaApp).call(this, targetCanvasId));\n    _this.COLOR_COUNT = 1000;\n    _this.offset = 0;\n\n    _this.calculatePlasma();\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(PlasmaApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptrMax = width * height * 4;\n      var ptr = 0;\n      var precalcPtr = 0;\n      var precalcTable = this.precalcTable;\n      var precalcColors = this.precalcColors;\n      var offset = this.offset % this.COLOR_COUNT;\n      var colorCount = this.COLOR_COUNT;\n\n      while (ptr < ptrMax) {\n        var precalcVal = precalcTable[precalcPtr++] + offset; // Math.round( precalcTable[ precalcPtr++ ] / Plasma.COLOR_COUNT * 255 );\n\n        if (precalcVal >= colorCount) {\n          precalcVal -= colorCount;\n        }\n\n        var precalcCol = precalcColors[precalcVal];\n        data[ptr++] = precalcCol.r;\n        data[ptr++] = precalcCol.g;\n        data[ptr++] = precalcCol.b;\n        ptr++;\n      }\n\n      this.offset++;\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.COLOR_COUNT);\n      var degrees = 180;\n      var degreeOffset = 40;\n\n      for (var i = 0; i < this.COLOR_COUNT; i++) {\n        var normal = Math.sin(i / this.COLOR_COUNT * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, normal, 1 - normal, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }, {\n    key: "calculatePlasma",\n    value: function calculatePlasma() {\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptr = 0;\n      var min = false;\n      var max = false;\n      this.precalcTable = new Array(width * height);\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var val = this.COLOR_COUNT / 2 + (this.COLOR_COUNT / 2 - 1) * Math.sin(x / 100 * Math.cos(y / 1000) * Math.tan(ptr / 1000000)) * Math.cos(y / 100 * Math.sin(x / 100) * Math.tan(ptr / 1000000));\n          this.precalcTable[ptr++] = Math.round(val);\n\n          if (min === false || val < min) {\n            min = val;\n          }\n\n          if (max === false || val > max) {\n            max = val;\n          }\n        }\n      }\n    }\n  }]);\n\n  return PlasmaApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/plasma/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar plasmavue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar plasmavue_type_script_lang_js_Plasma = Object(vue_class_component_esm["a" /* default */])(plasmavue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Plasma, _VueWrapper);\n\n  function Plasma() {\n    Object(classCallCheck["a" /* default */])(this, Plasma);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Plasma).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(Plasma, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_PlasmaApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.draw();\n    }\n  }]);\n\n  return Plasma;\n}(vue_wrapper)) || plasmavue_type_script_lang_js_class;\n\n/* harmony default export */ var plasmavue_type_script_lang_js_ = (plasmavue_type_script_lang_js_Plasma);\n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_plasmavue_type_script_lang_js_ = (plasmavue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar plasma_component = Object(componentNormalizer["a" /* default */])(\n  effects_plasmavue_type_script_lang_js_,\n  plasmavue_type_template_id_17495692_render,\n  plasmavue_type_template_id_17495692_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var plasma = (plasma_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/wave-distortion/index.vue?vue&type=template&id=fef71dcc&\nvar wave_distortionvue_type_template_id_fef71dcc_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"853","height":"470"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Wave Distortion")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Amplitude","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"16000"},on:{"update":_vm.updateAmplitude},model:{value:(_vm.amplitude),callback:function ($$v) {_vm.amplitude=$$v},expression:"amplitude"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Frequency","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"300","max":"100000"},on:{"update":_vm.updateFrequency},model:{value:(_vm.frequency),callback:function ($$v) {_vm.frequency=$$v},expression:"frequency"}})],1)],1)],1)])}\nvar wave_distortionvue_type_template_id_fef71dcc_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Distortion_(optics)"}},[_vm._v("wave distortion")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue?vue&type=template&id=fef71dcc&\n\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/app.js\n\n\n\n\n\n\n\n\n\nvar app_WaveDistortionApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(WaveDistortionApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {string} bgImageUrl\n   * @constructor\n   * @extends {app.js}\n   */\n  function WaveDistortionApp(targetCanvasId, bgImageUrl) {\n    var _this;\n\n    var amplitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 28.21;\n    var frequency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 35.62;\n\n    Object(classCallCheck["a" /* default */])(this, WaveDistortionApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WaveDistortionApp).call(this, targetCanvasId));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "amplitude", 28.21);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "frequency", 35.62);\n\n    _this.bgImage = new canvas_texture_CanvasTexture(bgImageUrl);\n    _this.phase = 0;\n    _this.amplitude = amplitude;\n    _this.frequency = frequency;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(WaveDistortionApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var x;\n      var y;\n      var dest = this.virtualSurface.data;\n      var destWidth = this.virtualSurface.width;\n      var destHeight = this.virtualSurface.height;\n      var source = this.bgImage.data;\n      var sourceWidth = this.bgImage.getWidth();\n      var sourceHeight = this.bgImage.getHeight();\n      var periodIncrement = Math.PI / this.frequency;\n      var phase = this.phase;\n      var amplitude = this.amplitude;\n      var displacementY = new Array(destHeight);\n      var displacementX = new Array(destWidth);\n      var destPtr = 0;\n      var period = 0;\n      var periodY = period;\n      var periodX = period;\n\n      if (!source || !dest) {\n        this.endDrawing(false);\n        return;\n      }\n\n      for (y = 0; y < destHeight; y++) {\n        displacementY[y] = Math.round(amplitude * Math.sin(phase + periodY));\n        periodY += periodIncrement;\n      }\n\n      for (x = 0; x < destWidth; x++) {\n        displacementX[x] = Math.round(amplitude * Math.cos(phase + periodX));\n        periodX += periodIncrement;\n      }\n\n      for (y = 0; y < destHeight; y++) {\n        var dx = displacementY[y];\n\n        for (x = 0; x < destWidth; x++) {\n          var dy = displacementX[x];\n          var xp = x + dx;\n          var yp = y + dy;\n\n          if (xp >= 0 && xp < sourceWidth && yp >= 0 && yp < sourceHeight) {\n            var sourcePtr = (yp * sourceWidth + xp) * 4;\n            dest[destPtr++] = source[sourcePtr++];\n            dest[destPtr++] = source[sourcePtr++];\n            dest[destPtr++] = source[sourcePtr++];\n            destPtr++;\n          } else {\n            dest[destPtr++] = 0;\n            dest[destPtr++] = 0;\n            dest[destPtr++] = 0;\n            destPtr++;\n          }\n        }\n\n        period += periodIncrement;\n      }\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return WaveDistortionApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/wave-distortion/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar wave_distortionvue_type_script_lang_js_class, wave_distortionvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar wave_distortionvue_type_script_lang_js_WaveDistortion = Object(vue_class_component_esm["a" /* default */])(wave_distortionvue_type_script_lang_js_class = (wave_distortionvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(WaveDistortion, _VueWrapper);\n\n  function WaveDistortion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, WaveDistortion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(WaveDistortion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "amplitude", 2235);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "frequency", 27712);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(WaveDistortion, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_WaveDistortionApp(\'surface\', \'./resources/apps/wave-distortion/bg.jpg\', this.amplitude / 100, this.frequency / 100);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.phase += 0.1;\n      this.app.draw();\n    }\n  }, {\n    key: "updateAmplitude",\n    value: function updateAmplitude(val) {\n      this.app.amplitude = val / 100;\n    }\n  }, {\n    key: "updateFrequency",\n    value: function updateFrequency(val) {\n      this.app.frequency = val / 100;\n    }\n  }]);\n\n  return WaveDistortion;\n}(vue_wrapper), wave_distortionvue_type_script_lang_js_temp)) || wave_distortionvue_type_script_lang_js_class;\n\n/* harmony default export */ var wave_distortionvue_type_script_lang_js_ = (wave_distortionvue_type_script_lang_js_WaveDistortion);\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_wave_distortionvue_type_script_lang_js_ = (wave_distortionvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar wave_distortion_component = Object(componentNormalizer["a" /* default */])(\n  effects_wave_distortionvue_type_script_lang_js_,\n  wave_distortionvue_type_template_id_fef71dcc_render,\n  wave_distortionvue_type_template_id_fef71dcc_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var wave_distortion = (wave_distortion_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat/index.vue?vue&type=template&id=76857549&\nvar flatvue_type_template_id_76857549_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Flat Polygon Projection")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of non-shaded polygon projection.")]),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar flatvue_type_template_id_76857549_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue?vue&type=template&id=76857549&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/vertex/index.vue?vue&type=template&id=644c9ac7&\nvar vertexvue_type_template_id_644c9ac7_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Vertex Projection")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar vertexvue_type_template_id_644c9ac7_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/3D_projection"}},[_vm._v("camera projection.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue?vue&type=template&id=644c9ac7&\n\n// CONCATENATED MODULE: ./lib/core/canvas-texture-container.js\n\n\n\nvar canvas_texture_container_CanvasTextureContainer =\n/*#__PURE__*/\nfunction () {\n  function CanvasTextureContainer() {\n    Object(classCallCheck["a" /* default */])(this, CanvasTextureContainer);\n\n    this.textures = {};\n  }\n\n  Object(createClass["a" /* default */])(CanvasTextureContainer, [{\n    key: "add",\n\n    /**\n     * Add texture to container\n     *\n     * @param {string} textureName\n     * @param {string} src\n     * @public\n     */\n    value: function add(textureName, src) {\n      if (this.exists(textureName) === true) {\n        this.remove(textureName);\n      }\n\n      var ct = new canvas_texture_CanvasTexture(src);\n      var me = this;\n      this.textures[textureName] = ct;\n\n      ct.onload = function () {\n        me.eventImageLoaded(textureName);\n      };\n\n      return ct;\n    }\n    /**\n     * Add multiple canvas textures\n     *\n     * Usage:\n     *\n     * srcReferenceObject = {\n     *   myTexture1 : \'http://www.google.com/logo.png\',\n     *   myTexture2 : \'http://www.microsoft.com/logo.png\',\n     *   ...\n     * };\n     *\n     * @param {Object} srcReferenceObject\n     * @public\n     */\n\n  }, {\n    key: "addMany",\n    value: function addMany(srcReferenceObject) {\n      for (var textureName in srcReferenceObject) {\n        if (srcReferenceObject.hasOwnProperty(textureName)) {\n          if (this.textures.hasOwnProperty(textureName)) {\n            this.add(textureName, srcReferenceObject[textureName]);\n          }\n        }\n      }\n    }\n    /**\n     * @param {string} textureName\n     * @public\n     */\n\n  }, {\n    key: "remove",\n    value: function remove(textureName) {\n      if (this.textures[textureName] !== null) {\n        this.textures[textureName].destroy();\n      }\n\n      delete this.textures[textureName];\n    }\n    /**\n     * @param {string} textureName\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "exists",\n    value: function exists(textureName) {\n      return this.get(textureName) !== null;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "reset",\n    value: function reset() {\n      for (var key in this.textures) {\n        if (this.textures.hasOwnProperty(key)) {\n          this.remove(key);\n        }\n      }\n\n      this.textures = {};\n    }\n    /**\n     * @param {string} textureName\n     * @returns {CanvasTexture|null}\n     * @public\n     */\n\n  }, {\n    key: "get",\n    value: function get(textureName) {\n      if (this.textures.hasOwnProperty(textureName)) {\n        return this.textures[textureName];\n      }\n\n      return null;\n    }\n    /**\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: "isLoaded",\n    value: function isLoaded() {\n      for (var key in this.textures) {\n        if (this.textures.hasOwnProperty(key)) {\n          if (this.textures[key] !== null) {\n            if (this.textures[key].loaded !== true) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }\n    /**\n     * @public\n     * @param {string} textureName\n     */\n\n  }, {\n    key: "eventImageLoaded",\n    value: function eventImageLoaded(textureName) {\n      if (this.isLoaded() === true) {\n        if (typeof this.onload === \'function\') {\n          this.onload();\n        }\n      }\n    }\n  }]);\n\n  return CanvasTextureContainer;\n}();\n// CONCATENATED MODULE: ./lib/core/interpolated-triangle.js\n\n\nvar interpolated_triangle_InterpolatedTriangle = {\n  p1: new point_2d_Point2D(0, 0),\n  p2: new point_2d_Point2D(0, 0),\n  p3: new point_2d_Point2D(0, 0),\n  c1: new color_Color(0, 0, 0),\n  c2: new color_Color(0, 0, 0),\n  c3: new color_Color(0, 0, 0),\n  cIntL: new color_Color(0, 0, 0),\n  cIntR: new color_Color(0, 0, 0),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @protected\n   */\n  calculateBounds: function calculateBounds(p1, p2, p3, c1, c2, c3) {\n    this.sortPoints(p1, p2, p3, c1, c2, c3);\n    return {\n      rSizeAdder: (p3.x - p1.x) / (p3.y - p1.y),\n      lSizeAdder: (p2.x - p1.x) / (p2.y - p1.y + 1),\n      lSizeAdder2: (p3.x - p2.x) / (p3.y - p2.y),\n      rColAdder: new color_Color((c3.r - c1.r) / (p3.y - p1.y), (c3.g - c1.g) / (p3.y - p1.y), (c3.b - c1.b) / (p3.y - p1.y)),\n      lColAdder: new color_Color((c2.r - c1.r) / (p2.y - p1.y + 1), (c2.g - c1.g) / (p2.y - p1.y + 1), (c2.b - c1.b) / (p2.y - p1.y + 1)),\n      lColAdder2: new color_Color((c3.r - c2.r) / (p3.y - p2.y), (c3.g - c2.g) / (p3.y - p2.y), (c3.b - c2.b) / (p3.y - p2.y))\n    };\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, c1, c2, c3, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.c1.set(c1);\n    this.c2.set(c2);\n    this.c3.set(c3);\n    var bounds = this.calculateBounds(this.p1, this.p2, this.p3, this.c1, this.c2, this.c3);\n    this.cIntL.set(this.c1);\n    this.cIntR.set(this.c1); // this.cIntR.add( bounds.rColAdder );\n\n    var rx = this.drawHalfTriangle(this.p1, this.p2, this.p3, bounds.lSizeAdder, bounds.rSizeAdder, this.p1.x + bounds.lSizeAdder / 2, this.p1.x, this.cIntL, this.cIntR, bounds.lColAdder, bounds.rColAdder, surface);\n    this.p2.y++;\n    this.drawHalfTriangle(this.p2, this.p3, this.p1, bounds.lSizeAdder2, bounds.rSizeAdder, this.p2.x, rx, this.cIntL, this.cIntR, bounds.lColAdder2, bounds.rColAdder, surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {float} lAdder\n   * @param {float} rAdder\n   * @param {float} lx\n   * @param {float} rx\n   * @param {Color} colLeft\n   * @param {Color} colRight\n   * @param {Color} colLeftAdder\n   * @param {Color} colRightAdder\n   * @param {Surface} surface\n   * @returns {Number}\n   * @protected\n   */\n  drawHalfTriangle: function drawHalfTriangle(p1, p2, p3, lAdder, rAdder, lx, rx, colLeft, colRight, colLeftAdder, colRightAdder, surface) {\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var ptr = Math.round(Math.min(lx, rx) + p1.y * width) * 4;\n    var minLeftX = Math.min(p1.x, p2.x);\n    var maxLeftX = Math.max(p1.x, p2.x);\n    var minRightX = Math.min(p1.x, p3.x, p2.x);\n    var maxRightX = Math.max(p1.x, p3.x, p2.x);\n    var colAdder = new color_Color();\n    var colR, colG, colB;\n\n    for (var y = p1.y; y <= p2.y && y < height; y++) {\n      var minX = Math.round(Math.min(lx, rx));\n      var maxX = Math.round(Math.max(lx, rx));\n\n      if (y >= 0) {\n        if (minX < 0) {\n          ptr += Math.abs(minX) * 4;\n          minX = 0;\n          maxX = Math.max(maxX, minX);\n        }\n\n        maxX = Math.min(maxX, width - 1);\n        var distance = maxX - minX;\n\n        if (distance !== 0) {\n          if (lx < rx) {\n            colR = colLeft.r;\n            colG = colLeft.g;\n            colB = colLeft.b;\n            colAdder.set((colRight.r - colLeft.r) / distance, (colRight.g - colLeft.g) / distance, (colRight.b - colLeft.b) / distance);\n          } else {\n            colR = colRight.r;\n            colG = colRight.g;\n            colB = colRight.b;\n            colAdder.set((colLeft.r - colRight.r) / distance, (colLeft.g - colRight.g) / distance, (colLeft.b - colRight.b) / distance);\n          }\n        }\n\n        for (var xp = minX; xp <= maxX; xp++) {\n          data[ptr] = Math.round(colR);\n          data[ptr + 1] = Math.round(colG);\n          data[ptr + 2] = Math.round(colB);\n          ptr += 4;\n          colR += colAdder.r;\n          colG += colAdder.g;\n          colB += colAdder.b;\n        }\n      } else {\n        ptr += (maxX - minX) * 4 + 4;\n      }\n\n      lx += lAdder;\n      rx += rAdder;\n      lx = Math.max(lx, minLeftX);\n      lx = Math.min(lx, maxLeftX);\n      rx = Math.max(rx, minRightX);\n      rx = Math.min(rx, maxRightX);\n      ptr += (width - maxX + Math.round(Math.min(lx, rx))) * 4;\n      ptr -= 4;\n      colLeft.add(colLeftAdder);\n      colRight.add(colRightAdder);\n    }\n\n    return rx;\n  },\n\n  /**\n   * Sort p1, p2, p3 in lowest Y order.\n   *\n   * Relies on arguments being treated as byref\n   *\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @protected\n   */\n  sortPoints: function sortPoints(p1, p2, p3, c1, c2, c3) {\n    p1.round();\n    p2.round();\n    p3.round();\n\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      c3.swap(c1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      c2.swap(c1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      c3.swap(c2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/matrix.js\n\n\n\n/**\n * YX notated Matrix\n * @param {int|Matrix|Array} width\n * @param {int} height\n * @constructor\n */\nvar matrix_Matrix =\n/*#__PURE__*/\nfunction () {\n  function Matrix(width, height) {\n    Object(classCallCheck["a" /* default */])(this, Matrix);\n\n    this.data = [];\n    this.width = 0;\n    this.height = 0;\n\n    if (width instanceof Matrix) {\n      this.set(width);\n    } else if (width instanceof Array) {\n      this.set(width);\n    } else {\n      this.resize(width, height);\n    }\n  }\n\n  Object(createClass["a" /* default */])(Matrix, [{\n    key: "clone",\n\n    /**\n     * @returns {Matrix}\n     * @public\n     */\n    value: function clone() {\n      var m = new Matrix(this.width, this.height);\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < this.width; x++) {\n          m.data[y][x] = this.data[y][x];\n        }\n      }\n\n      return m;\n    }\n    /**\n     * @param {Matrix|Array} matrix\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(matrix) {\n      if (matrix instanceof Array) {\n        this.data = new Array(matrix.length);\n        this.height = matrix.length;\n        this.width = matrix[0].length;\n\n        for (var y = 0; y < matrix.length; y++) {\n          this.data[y] = matrix[y].slice(0);\n        }\n      } else {\n        this.data = new Array(matrix.data.length);\n        this.height = matrix.height;\n        this.width = matrix.width;\n\n        for (var _y = 0; _y < matrix.data.length; _y++) {\n          this.data[_y] = matrix.data[_y].slice(0);\n        }\n      }\n    }\n    /**\n     * @param {int} width\n     * @param {int} height\n     * @public\n     */\n\n  }, {\n    key: "resize",\n    value: function resize(width, height) {\n      this.data = new Array(height);\n      this.width = width;\n      this.height = height;\n\n      for (var y = 0; y < height; y++) {\n        this.data[y] = new Array(width);\n      }\n    }\n    /**\n     * sourcePoint and targetPoint MUST NOT be the same object\n     *\n     * @param {Point3D} sourcePoint\n     * @param {Point3D} targetPoint\n     * @todo Remove hardcoding\n     * @public\n     */\n\n  }, {\n    key: "multiplyPoint3D",\n    value: function multiplyPoint3D(sourcePoint, targetPoint) {\n      targetPoint.x = sourcePoint.x * this.data[0][0] + sourcePoint.y * this.data[0][1] + sourcePoint.z * this.data[0][2];\n      targetPoint.y = sourcePoint.x * this.data[1][0] + sourcePoint.y * this.data[1][1] + sourcePoint.z * this.data[1][2];\n      targetPoint.z = sourcePoint.x * this.data[2][0] + sourcePoint.y * this.data[2][1] + sourcePoint.z * this.data[2][2];\n    }\n    /**\n     * @param {Matrix} matrix\n     * @returns {Matrix}\n     * @public\n     */\n\n  }, {\n    key: "multiplyMatrix",\n    value: function multiplyMatrix(matrix) {\n      if (this.height !== matrix.width) {\n        return null;\n      }\n\n      var m = new Matrix(matrix.width, this.height);\n      var size = this.height;\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          var val = 0;\n\n          for (var i = 0; i < size; i++) {\n            val += this.data[y][i] * matrix.data[i][x];\n          }\n\n          m.data[y][x] = val;\n        }\n      }\n\n      return m;\n    }\n    /**\n     * @param {Matrix} matrix\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(matrix) {\n      if (this.width !== matrix.width || this.height !== matrix.height) {\n        return;\n      }\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          this.data[y][x] += matrix.data[y][x];\n        }\n      }\n    }\n    /**\n     * @param {Matrix} matrix\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(matrix) {\n      if (this.width !== matrix.width || this.height !== matrix.height) {\n        return;\n      }\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          this.data[y][x] -= matrix.data[y][x];\n        }\n      }\n    }\n    /**\n     * @returns {Matrix}\n     * @public\n     */\n\n  }, {\n    key: "transpose",\n    value: function transpose() {\n      var t = new Matrix(this.height, this.width);\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < this.width; x++) {\n          t.data[x][y] = this.data[y][x];\n        }\n      }\n\n      return t;\n    }\n  }]);\n\n  return Matrix;\n}();\n// CONCATENATED MODULE: ./lib/core/surface.js\n\n\n\n\nvar surface_Surface =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} elementID\n   * @param {Boolean} createElement\n   * @constructor\n   */\n  function Surface(elementID, createElement) {\n    Object(classCallCheck["a" /* default */])(this, Surface);\n\n    this.elementID = elementID;\n\n    if (createElement === true) {\n      this.canvas = Helper.createElement(\'canvas\');\n      this.canvas.setAttribute(\'id\', elementID);\n    } else {\n      this.canvas = Helper.getElement(elementID);\n    }\n\n    this.context = this.canvas.getContext(\'2d\');\n    this.imageData = null;\n    this.virtualSurface = null;\n    this.drawing = false;\n  }\n  /**\n   * @returns {int}\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Surface, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.canvas.width;\n    }\n    /**\n     * @returns {int}\n     * @public\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.canvas.height;\n    }\n    /**\n     * @returns {Array}\n     * @public\n     */\n\n  }, {\n    key: "getData",\n    value: function getData() {\n      return this.imageData.data;\n    }\n    /**\n     * @param {int} width\n     * @param {int} height\n     * @public\n     */\n\n  }, {\n    key: "setSize",\n    value: function setSize(width, height) {\n      this.canvas.width = width;\n      this.canvas.height = height;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "beginPaint",\n    value: function beginPaint() {\n      this.imageData = this.context.createImageData(this.getWidth(), this.getHeight());\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.getWidth(), this.getHeight(), this.imageData.data);\n      this.drawing = true;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "endPaint",\n    value: function endPaint() {\n      this.context.putImageData(this.imageData, 0, 0, 0, 0, this.getWidth(), this.getHeight()); // this.canvas.getContext(\'2d\').putImageData(this.imageData, 0, 0);\n\n      this.imageData = null;\n      this.drawing = false;\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isDrawing",\n    value: function isDrawing() {\n      return this.drawing;\n    }\n    /**\n     * @param {Color} bgColor\n     * @public\n     */\n\n  }, {\n    key: "clear",\n    value: function clear(bgColor) {\n      if (this.drawing !== true) {\n        return;\n      }\n\n      var ptrMax = this.canvas.width * this.canvas.height * 4;\n      var data = this.imageData.data;\n      var r = bgColor.r;\n      var g = bgColor.g;\n      var b = bgColor.b;\n      var a = bgColor.a;\n      var ptr = 0;\n\n      while (ptr < ptrMax) {\n        data[ptr++] = r;\n        data[ptr++] = g;\n        data[ptr++] = b;\n        data[ptr++] = a;\n      }\n    }\n  }]);\n\n  return Surface;\n}();\n// CONCATENATED MODULE: ./lib/core/triangle.js\n\nvar Triangle = {\n  p1: new point_2d_Point2D(0, 0),\n  p2: new point_2d_Point2D(0, 0),\n  p3: new point_2d_Point2D(0, 0),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @protected\n   */\n  calculateBounds: function calculateBounds(p1, p2, p3) {\n    this.sortPoints(p1, p2, p3);\n    return {\n      rSizeAdder: (p3.x - p1.x) / (p3.y - p1.y),\n      lSizeAdder: (p2.x - p1.x) / (p2.y - p1.y + 1),\n      lSizeAdder2: (p3.x - p2.x) / (p3.y - p2.y)\n    };\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, color, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    var bounds = this.calculateBounds(this.p1, this.p2, this.p3);\n    var rx = this.drawHalfTriangle(this.p1, this.p2, this.p3, bounds.lSizeAdder, bounds.rSizeAdder, this.p1.x + bounds.lSizeAdder / 2, this.p1.x, color, surface);\n    this.p2.y++;\n    this.drawHalfTriangle(this.p2, this.p3, this.p1, bounds.lSizeAdder2, bounds.rSizeAdder, this.p2.x, rx, color, surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Number} lAdder\n   * @param {Number} rAdder\n   * @param {Number} lx\n   * @param {Number} rx\n   * @param {Color} color\n   * @param {Surface} surface\n   * @returns {Number}\n   * @protected\n   */\n  drawHalfTriangle: function drawHalfTriangle(p1, p2, p3, lAdder, rAdder, lx, rx, color, surface) {\n    var data = surface.getData();\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var ptr = Math.round(Math.min(lx, rx) + p1.y * width) * 4;\n    var minLeftX = Math.min(p1.x, p2.x);\n    var maxLeftX = Math.max(p1.x, p2.x);\n    var minRightX = Math.min(p1.x, p3.x, p2.x);\n    var maxRightX = Math.max(p1.x, p3.x, p2.x);\n\n    for (var y = p1.y; y <= p2.y && y < height; y++) {\n      var minX = Math.round(Math.min(lx, rx));\n      var maxX = Math.round(Math.max(lx, rx));\n\n      if (y >= 0) {\n        if (minX < 0) {\n          ptr += Math.abs(minX) * 4;\n          minX = 0;\n          maxX = Math.max(maxX, minX);\n        }\n\n        maxX = Math.min(maxX, width - 1);\n\n        for (var xp = minX; xp <= maxX; xp++) {\n          data[ptr] = colR;\n          data[ptr + 1] = colG;\n          data[ptr + 2] = colB;\n          ptr += 4;\n        }\n      } else {\n        ptr += (maxX - minX) * 4 + 4;\n      }\n\n      lx += lAdder;\n      rx += rAdder;\n      lx = Math.max(lx, minLeftX);\n      lx = Math.min(lx, maxLeftX);\n      rx = Math.max(rx, minRightX);\n      rx = Math.min(rx, maxRightX);\n      ptr += (width - maxX + Math.round(Math.min(lx, rx))) * 4;\n      ptr -= 4;\n    }\n\n    return rx;\n  },\n\n  /**\n   * Sort p1, p2, p3 in lowest Y order.\n   *\n   * Relies on arguments being treated as byref\n   *\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @protected\n   */\n  sortPoints: function sortPoints(p1, p2, p3) {\n    p1.round();\n    p2.round();\n    p3.round();\n\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/camera/camera.js\n\nvar camera_Camera = function Camera() {\n  Object(classCallCheck["a" /* default */])(this, Camera);\n};\n// CONCATENATED MODULE: ./lib/3d/camera/movable-camera.js\n\n\n\n\n\n\n\nvar movable_camera_MovableCamera =\n/*#__PURE__*/\nfunction (_Camera) {\n  Object(inherits["a" /* default */])(MovableCamera, _Camera);\n\n  /**\n   * @link http://en.wikipedia.org/wiki/3D_projection#Perspective_projection\n   * @constructor\n   * @extends Camera\n   */\n  function MovableCamera() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, MovableCamera);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MovableCamera).call(this));\n    _this.position = new point_3d_Point3D(0, 0, 0);\n    _this.orientation = new vector_3d_Vector3D(0, 0, 100.0);\n    _this.viewerPosition = new point_3d_Point3D(-320, -240, 200.0);\n    return _this;\n  }\n  /**\n   * @param {Vertex[]} vertices\n   */\n\n\n  Object(createClass["a" /* default */])(MovableCamera, [{\n    key: "transform",\n    value: function transform(vertices) {\n      var camPos = this.position;\n      var l = vertices.length;\n      var cosX = Math.cos(this.orientation.x);\n      var sinX = Math.sin(this.orientation.x);\n      var cosY = Math.cos(this.orientation.y);\n      var sinY = Math.sin(this.orientation.y);\n      var cosZ = Math.cos(this.orientation.z);\n      var sinZ = Math.sin(this.orientation.z);\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.transformed;\n        var targetPoint = vertex.cameraTransformed;\n        var sourceMinusCamX = sourcePoint.x - camPos.x;\n        var sourceMinusCamY = sourcePoint.y - camPos.y;\n        var sourceMinusCamZ = sourcePoint.z - camPos.z;\n        var cosZSourceMinusCamX = cosZ * sourceMinusCamX;\n        var sinZSourceMinusCamX = sinZ * sourceMinusCamX;\n        var cosZSourceMinusCamY = cosZ * sourceMinusCamY;\n        var sinZSourceMinusCamY = sinZ * sourceMinusCamY;\n        var cosYSourceMinusCamZ = cosY * sourceMinusCamZ;\n        var sinYsinZcosZCamYCamX = sinY * (sinZSourceMinusCamY + cosZSourceMinusCamX);\n        targetPoint.x = cosZ * (sinZSourceMinusCamY + cosZSourceMinusCamX) - sinY * sourceMinusCamZ;\n        targetPoint.y = sinX * (cosYSourceMinusCamZ + sinYsinZcosZCamYCamX) + cosX * (cosZSourceMinusCamY - sinZSourceMinusCamX);\n        targetPoint.z = cosX * (cosYSourceMinusCamZ + sinYsinZcosZCamYCamX) - sinX * (cosZSourceMinusCamY - sinZSourceMinusCamX);\n      }\n    }\n    /**\n     * @param {Vertex[]} vertices\n     */\n\n  }, {\n    key: "project",\n    value: function project(vertices) {\n      var l = vertices.length;\n      var viewerPosition = this.viewerPosition;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.cameraTransformed;\n        var targetPoint = vertex.cameraProjected;\n        var zDiv = viewerPosition.z / sourcePoint.z;\n        targetPoint.x = zDiv * sourcePoint.x - viewerPosition.x;\n        targetPoint.y = zDiv * sourcePoint.y - viewerPosition.y;\n      }\n    }\n  }]);\n\n  return MovableCamera;\n}(camera_Camera);\n// CONCATENATED MODULE: ./lib/3d/camera/simple-camera.js\n\n\n\n\n\n\n\nvar simple_camera_SimpleCamera =\n/*#__PURE__*/\nfunction (_Camera) {\n  Object(inherits["a" /* default */])(SimpleCamera, _Camera);\n\n  /**\n   * @constructor\n   * @extends Camera\n   */\n  function SimpleCamera() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, SimpleCamera);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SimpleCamera).call(this));\n    _this.viewerPosition = new point_2d_Point2D(320, 240);\n    _this.perspectiveDepth = 100;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(SimpleCamera, [{\n    key: "transform",\n\n    /**\n     * @param {Vertex[]} vertices\n     */\n    value: function transform(vertices) {\n      var l = vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.transformed;\n        var targetPoint = vertex.cameraTransformed;\n        targetPoint.x = sourcePoint.x;\n        targetPoint.y = sourcePoint.y;\n        targetPoint.z = sourcePoint.z;\n      }\n    }\n    /**\n     * @param {Vertex[]} vertices\n     */\n\n  }, {\n    key: "project",\n    value: function project(vertices) {\n      var l = vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.cameraTransformed;\n        var targetPoint = vertex.cameraProjected;\n        var pd = this.perspectiveDepth / sourcePoint.z;\n        targetPoint.x = sourcePoint.x * pd + this.viewerPosition.x;\n        targetPoint.y = sourcePoint.y * pd + this.viewerPosition.y;\n      }\n    }\n  }]);\n\n  return SimpleCamera;\n}(camera_Camera);\n// CONCATENATED MODULE: ./lib/3d/camera/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/light/light.js\n\n\n\nvar light_Light =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new light\n   * @constructor\n   */\n  function Light() {\n    Object(classCallCheck["a" /* default */])(this, Light);\n\n    this.position = new point_3d_Point3D();\n  }\n\n  Object(createClass["a" /* default */])(Light, [{\n    key: "calculateLightData",\n\n    /**\n     * @param {Vector3D} viewerDirection\n     * @param {Point3D} normal3DPosition\n     * @param {Vector3D} normal\n     * @param {LightData} targetLightData\n     * @abstract\n     */\n    value: function calculateLightData(viewerDirection, normal3DPosition, normal, targetLightData) {// do nothing\n    }\n  }]);\n\n  return Light;\n}();\n// CONCATENATED MODULE: ./lib/3d/light/light-data.js\n\n\n\nvar light_data_LightData =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function LightData() {\n    Object(classCallCheck["a" /* default */])(this, LightData);\n\n    this.specularColor = new normalized_color_NormalizedColor(0, 0, 0);\n    this.diffuseColor = new normalized_color_NormalizedColor(0, 0, 0);\n  }\n\n  Object(createClass["a" /* default */])(LightData, [{\n    key: "reset",\n    value: function reset(ambience) {\n      if (!ambience) {\n        this.specularColor.set(0, 0, 0, 0);\n        this.diffuseColor.set(0, 0, 0);\n      } else {\n        this.specularColor.set(ambience.light);\n        this.diffuseColor.set(ambience.light);\n      }\n    }\n  }]);\n\n  return LightData;\n}();\n// CONCATENATED MODULE: ./lib/3d/light/omni-light.js\n\n\n\n\n\n\n\nvar omni_light_OmniLight =\n/*#__PURE__*/\nfunction (_Light) {\n  Object(inherits["a" /* default */])(OmniLight, _Light);\n\n  /**\n   * @param {Point3D} position\n   * @param {NormalizedColor} diffuseColor\n   * @link http://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n   * @extends Light\n   * @constructor\n   */\n  function OmniLight(position, diffuseColor) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, OmniLight);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(OmniLight).call(this));\n    /**\n     * @type {Point3D}\n     */\n\n    _this.position = position;\n    /**\n     * @type {Color}\n     */\n\n    _this.diffuseColor = diffuseColor;\n    _this.diffusePower = 0.5;\n    _this.specularHardness = 0.5;\n    _this.specularPower = 0.5;\n    _this.specularColor = new normalized_color_NormalizedColor(1, 1, 1);\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(OmniLight, [{\n    key: "calculateLightData",\n\n    /**\n     * @param {Vector3D} viewerDirection\n     * @param {Point3D} normal3DPosition\n     * @param {Vector3D} normal\n     * @param {LightData} targetLightData\n     */\n    value: function calculateLightData(viewerDirection, normal3DPosition, normal, targetLightData) {\n      if (this.diffusePower > 0) {\n        var lightDirection = new vector_3d_Vector3D(this.position);\n        lightDirection.subtract(normal3DPosition);\n        var distance = lightDirection.length();\n        lightDirection.normalize();\n        distance = distance * distance;\n        var NdotL = normal.dot(lightDirection);\n        var intensity = Math.min(Math.max(NdotL, 0.0), 1.0);\n        var intensityPowerDistance = intensity * this.diffusePower / distance;\n        targetLightData.diffuseColor.r += this.diffuseColor.r * intensityPowerDistance;\n        targetLightData.diffuseColor.g += this.diffuseColor.g * intensityPowerDistance;\n        targetLightData.diffuseColor.b += this.diffuseColor.b * intensityPowerDistance; // var H = ( lightDir + viewDir ).normalize();\n\n        lightDirection.add(viewerDirection);\n        lightDirection.normalize();\n        var NdotH = normal.dot(lightDirection\n        /* H */\n        );\n        intensity = Math.pow(Math.min(Math.max(NdotH, 0.0), 1.0), this.specularHardness);\n        intensityPowerDistance = intensity * this.specularPower / distance;\n        targetLightData.specularColor.r += this.specularColor.r * intensityPowerDistance;\n        targetLightData.specularColor.g += this.specularColor.g * intensityPowerDistance;\n        targetLightData.specularColor.b += this.specularColor.b * intensityPowerDistance;\n      }\n    }\n  }]);\n\n  return OmniLight;\n}(light_Light);\n// CONCATENATED MODULE: ./lib/3d/light/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/vertex.js\n\n\n\nvar vertex_Vertex =\n/**\n * @param {Point3D} point\n * @constructor\n */\nfunction Vertex(point) {\n  Object(classCallCheck["a" /* default */])(this, Vertex);\n\n  this.origin = point;\n  this.normal = new vector_3d_Vector3D(0, 0, 0);\n  this.transformed = new point_3d_Point3D(0, 0, 0);\n  this.cameraTransformed = new point_3d_Point3D(0, 0, 0);\n  this.cameraProjected = new point_2d_Point2D(0, 0);\n  this.lightData = new light_data_LightData();\n  this.faces = [];\n};\n// CONCATENATED MODULE: ./lib/3d/edge.js\n\n\nvar edge_Edge =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param a\n   * @param b\n   * @constructor\n   */\n  function Edge(a, b) {\n    Object(classCallCheck["a" /* default */])(this, Edge);\n\n    this.a = a;\n    this.b = b;\n  }\n\n  Object(createClass["a" /* default */])(Edge, [{\n    key: "set",\n\n    /**\n     * @param {int} a\n     * @param {int} b\n     * @public\n     */\n    value: function set(a, b) {\n      this.a = a;\n      this.b = b;\n    }\n  }]);\n\n  return Edge;\n}();\n// CONCATENATED MODULE: ./lib/3d/mesh.js\n\n\n\n\n\n\nvar mesh_Mesh =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param [name=]\n   * @constructor\n   */\n  function Mesh(name) {\n    Object(classCallCheck["a" /* default */])(this, Mesh);\n\n    this.name = name || \'\';\n    this.visible = true;\n    /**\n     * @type Vertex[]\n     */\n\n    this.vertices = [];\n    /**\n     * @type Face[]\n     */\n\n    this.faces = [];\n    /**\n     * @type Edge\n     */\n\n    this.edges = [];\n    /**\n     * @type {Point3D}\n     */\n\n    this.position = new point_3d_Point3D(0, 0, 0);\n    /**\n     * @type {Point3D}\n     */\n\n    this.scale = new point_3d_Point3D(1.0, 1.0, 1.0);\n    /**\n     * @type {Point3D}\n     */\n\n    this.rotation = new point_3d_Point3D(0.0, 0.0, 0.0);\n  }\n  /**\n   * @param {Point3D} point\n   */\n\n\n  Object(createClass["a" /* default */])(Mesh, [{\n    key: "addVertex",\n    value: function addVertex(point) {\n      this.vertices.push(new vertex_Vertex(point));\n    }\n    /**\n     * @param {Edge} edge\n     */\n\n  }, {\n    key: "addEdge",\n    value: function addEdge(edge) {\n      this.edges.push(edge);\n    }\n    /**\n     * @param {Face} face\n     */\n\n  }, {\n    key: "addFace",\n    value: function addFace(face) {\n      this.faces.push(face);\n      var faceNo = this.faces.length - 1;\n      face.order = faceNo;\n      this.vertices[face.a].faces.push(faceNo);\n      this.vertices[face.b].faces.push(faceNo);\n      this.vertices[face.c].faces.push(faceNo);\n    }\n    /**\n     * @link http://en.wikipedia.org/wiki/Rotation_matrix\n     */\n\n  }, {\n    key: "rotateMatrix",\n    value: function rotateMatrix() {\n      var cosX = Math.cos(this.rotation.x);\n      var sinX = Math.sin(this.rotation.x);\n      var cosY = Math.cos(this.rotation.y);\n      var sinY = Math.sin(this.rotation.y);\n      var cosZ = Math.cos(this.rotation.z);\n      var sinZ = Math.sin(this.rotation.z);\n      /* I\'m not using matrices here simply because testing showed\n       * they\'re about 25% slower than \'do it yourself\' method */\n\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        /**\n         * @type Vertex\n         */\n        var vertex = this.vertices[i];\n        var ov = vertex.origin;\n        var v = vertex.transformed;\n        var x2 = ov.x;\n        var y = ov.y;\n        var z = ov.z; // ROT X\n        // const x2 = x;\n\n        var y3 = y * cosX - z * sinX;\n        var z2 = y * sinX + z * cosX; // ROT Y\n\n        var x3 = x2 * cosY + z2 * sinY; // const y3 = y2;\n\n        v.z = x2 * -sinY + z2 * cosY; // ROT Z\n\n        v.x = x3 * cosZ - y3 * sinZ;\n        v.y = x3 * sinZ + y3 * cosZ;\n      }\n    }\n  }, {\n    key: "scaleMatrix",\n    value: function scaleMatrix() {\n      // != on purpose\n      if (this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1) {\n        var l = this.vertices.length;\n\n        for (var i = 0; i < l; i++) {\n          this.vertices[i].transformed.multiply(this.scale);\n        }\n      }\n    }\n  }, {\n    key: "translate",\n    value: function translate() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        this.vertices[i].transformed.add(this.position);\n      }\n    }\n  }, {\n    key: "transformOrigin",\n    value: function transformOrigin() {\n      this.rotateMatrix();\n      this.scaleMatrix();\n      this.translate();\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "transformCamera",\n    value: function transformCamera(camera) {\n      camera.transform(this.vertices);\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "project",\n    value: function project(camera) {\n      camera.project(this.vertices);\n    }\n  }, {\n    key: "drawVertices",\n    value: function drawVertices() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.setPixel(this.vertices[i].cameraProjected, Draw.color);\n      }\n    }\n  }, {\n    key: "drawWireframe",\n    value: function drawWireframe() {\n      var l = this.edges.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.line(this.vertices[this.edges[i].a].cameraProjected, this.vertices[this.edges[i].b].cameraProjected, Draw.color);\n      }\n    }\n  }, {\n    key: "drawFlat",\n    value: function drawFlat() {\n      var l = this.faces.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.triangle(this.vertices[this.faces[i].a].cameraProjected, this.vertices[this.faces[i].b].cameraProjected, this.vertices[this.faces[i].c].cameraProjected);\n      }\n    }\n  }, {\n    key: "calculateFaceNormals",\n    value: function calculateFaceNormals() {\n      var l = this.faces.length;\n\n      for (var i = 0; i < l; i++) {\n        var p1 = this.vertices[this.faces[i].a].cameraTransformed;\n        var p2 = this.vertices[this.faces[i].b].cameraTransformed;\n        var p3 = this.vertices[this.faces[i].c].cameraTransformed;\n        this.faces[i].normal.normal(p1, p2, p3);\n        this.faces[i].normal.normalize();\n        this.faces[i].position.setToCenter(p1, p2, p3);\n      }\n    }\n  }, {\n    key: "calculateVertexNormals",\n    value: function calculateVertexNormals() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertexFaces = this.vertices[i].faces;\n        var faceLength = vertexFaces.length;\n        var normalVertex = this.vertices[i].normal;\n        normalVertex.set(0, 0, 0);\n\n        for (var j = 0; j < faceLength; j++) {\n          normalVertex.add(this.faces[vertexFaces[j]].normal);\n        }\n\n        normalVertex.divideByVal(faceLength);\n        normalVertex.normalize();\n      }\n    }\n    /**\n     * @param {Scene} scene\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "calculateFaceLightData",\n    value: function calculateFaceLightData(scene, camera) {\n      var lightCount = scene.lights.length;\n      var faceCount = this.faces.length;\n\n      for (var j = 0; j < faceCount; j++) {\n        var face = this.faces[j];\n        face.lightData.reset(scene.ambience);\n\n        for (var i = 0; i < lightCount; i++) {\n          scene.lights[i].calculateLightData(camera.orientation, face.position, face.normal, face.lightData);\n        }\n      }\n    }\n    /**\n     * @param {Scene} scene\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "calculateVertexLightData",\n    value: function calculateVertexLightData(scene, camera) {\n      var lightCount = scene.lights.length;\n      var vertexCount = this.vertices.length;\n\n      for (var j = 0; j < vertexCount; j++) {\n        var vertex = this.vertices[j];\n        vertex.lightData.reset(scene.ambience);\n\n        for (var i = 0; i < lightCount; i++) {\n          scene.lights[i].calculateLightData(camera.orientation, vertex.cameraTransformed, vertex.normal, vertex.lightData);\n        }\n      }\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "cull",\n    value: function cull(camera) {\n      var faceCount = this.faces.length;\n\n      for (var j = 0; j < faceCount; j++) {\n        var face = this.faces[j];\n        face.visible = true;\n      }\n    }\n    /**\n     * @param {String} name\n     */\n\n  }, {\n    key: "setName",\n    value: function setName(name) {\n      this.name = name;\n    }\n    /**\n     * Figure out wireframe from face data\n     */\n\n  }, {\n    key: "buildWireframe",\n    value: function buildWireframe() {\n      var vertexLookup = Helper.create2DArray(this.vertices.length, this.vertices.length);\n      this.clearEdges();\n\n      for (var i = 0; i < this.faces.length; i++) {\n        vertexLookup[Math.min(this.faces[i].a, this.faces[i].b)][Math.max(this.faces[i].a, this.faces[i].b)] = true;\n        vertexLookup[Math.min(this.faces[i].a, this.faces[i].c)][Math.max(this.faces[i].a, this.faces[i].c)] = true;\n        vertexLookup[Math.min(this.faces[i].b, this.faces[i].c)][Math.max(this.faces[i].b, this.faces[i].c)] = true;\n      }\n\n      for (var _i = 0; _i < vertexLookup.length; _i++) {\n        for (var j = 0; j < vertexLookup.length; j++) {\n          if (vertexLookup[_i][j] === true) {\n            var edge = new edge_Edge(_i, j);\n            this.addEdge(edge);\n          }\n        }\n      }\n    }\n  }, {\n    key: "clearEdges",\n    value: function clearEdges() {\n      this.edges = [];\n    }\n  }]);\n\n  return Mesh;\n}();\n// CONCATENATED MODULE: ./lib/3d/material/material.js\n\n\nvar material_Material =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function Material() {\n    Object(classCallCheck["a" /* default */])(this, Material);\n\n    this.color = null;\n    this.texture = null;\n  }\n\n  Object(createClass["a" /* default */])(Material, [{\n    key: "getColor",\n\n    /**\n     * @returns {null|Color}\n     */\n    value: function getColor() {\n      return this.color;\n    }\n    /**\n     * @returns {null|CanvasTexture}\n     */\n\n  }, {\n    key: "getTexture",\n    value: function getTexture() {\n      return this.texture;\n    }\n  }]);\n\n  return Material;\n}();\n// CONCATENATED MODULE: ./lib/3d/material/solid-color-material.js\n\n\n\n\n\n\nvar solid_color_material_SolidColorMaterial =\n/*#__PURE__*/\nfunction (_Material) {\n  Object(inherits["a" /* default */])(SolidColorMaterial, _Material);\n\n  /**\n   * @param {Color} [color]\n   * @extends Material\n   * @constructor\n   */\n  function SolidColorMaterial(color) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, SolidColorMaterial);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidColorMaterial).call(this));\n    _this.color = color || new color_Color(0, 192, 0);\n    _this.texture = null;\n    return _this;\n  }\n\n  return SolidColorMaterial;\n}(material_Material);\n// CONCATENATED MODULE: ./lib/3d/material/textured-material.js\n\n\n\n\n\nvar textured_material_TexturedMaterial =\n/*#__PURE__*/\nfunction (_Material) {\n  Object(inherits["a" /* default */])(TexturedMaterial, _Material);\n\n  /**\n   * @param {CanvasTexture} [texture]\n   * @extends Material\n   * @constructor\n   */\n  function TexturedMaterial(texture) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TexturedMaterial);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedMaterial).call(this));\n    _this.texture = texture;\n    _this.color = null;\n    return _this;\n  }\n\n  return TexturedMaterial;\n}(material_Material);\n// CONCATENATED MODULE: ./lib/3d/material/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/face.js\n\n\n\n\nvar face_Face =\n/**\n * Triad face\n *\n * @param {int} a\n * @param {int} b\n * @param {int} c\n * @param {Material} [material]\n * @param {Point3D} [uvA]\n * @param {Point3D} [uvB]\n * @param {Point3D} [uvC]\n * @constructor\n */\nfunction Face(a, b, c, material, uvA, uvB, uvC) {\n  Object(classCallCheck["a" /* default */])(this, Face);\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.uvA = uvA || new point_3d_Point3D();\n  this.uvB = uvB || new point_3d_Point3D();\n  this.uvC = uvC || new point_3d_Point3D();\n  this.order = 0;\n  this.visible = false;\n  this.material = material || new solid_color_material_SolidColorMaterial();\n  this.normal = new vector_3d_Vector3D();\n  this.position = new point_3d_Point3D();\n  this.lightData = new light_data_LightData();\n};\n// CONCATENATED MODULE: ./lib/3d/factory/cuboid-factory.js\n\n\n\n\n\nvar CuboidFactory = {\n  /**\n   * @param {float} height\n   * @param {float} length\n   * @param {float} depth\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(height, length, depth) {\n    var cuboid = new mesh_Mesh();\n    CuboidFactory.generateVertices(cuboid, height, length, depth);\n    CuboidFactory.generateEdges(cuboid);\n    CuboidFactory.generateFaces(cuboid);\n    return cuboid;\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @param {float} height\n   * @param {float} length\n   * @param {float} depth\n   * @private\n   */\n  generateVertices: function generateVertices(cuboid, height, length, depth) {\n    var l2 = length / 2;\n    var h2 = height / 2;\n    var d2 = depth / 2;\n    cuboid.addVertex(new point_3d_Point3D(-l2, -h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, +h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, -h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, +h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, -h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, +h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, -h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, +h2, +d2));\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @private\n   */\n  generateEdges: function generateEdges(cuboid) {\n    cuboid.addEdge(new edge_Edge(0, 1));\n    cuboid.addEdge(new edge_Edge(0, 2));\n    cuboid.addEdge(new edge_Edge(3, 2));\n    cuboid.addEdge(new edge_Edge(3, 1));\n    cuboid.addEdge(new edge_Edge(4, 5));\n    cuboid.addEdge(new edge_Edge(4, 6));\n    cuboid.addEdge(new edge_Edge(7, 6));\n    cuboid.addEdge(new edge_Edge(7, 5));\n    cuboid.addEdge(new edge_Edge(0, 4));\n    cuboid.addEdge(new edge_Edge(1, 5));\n    cuboid.addEdge(new edge_Edge(2, 6));\n    cuboid.addEdge(new edge_Edge(3, 7));\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @private\n   */\n  generateFaces: function generateFaces(cuboid) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n    cuboid.addFace(new face_Face(0, 1, 3, material));\n    cuboid.addFace(new face_Face(2, 0, 3, material2));\n    cuboid.addFace(new face_Face(4, 5, 6, material));\n    cuboid.addFace(new face_Face(6, 5, 7, material2));\n    cuboid.addFace(new face_Face(4, 0, 6, material));\n    cuboid.addFace(new face_Face(2, 0, 6, material));\n    cuboid.addFace(new face_Face(1, 3, 7, material));\n    cuboid.addFace(new face_Face(1, 7, 5, material));\n    cuboid.addFace(new face_Face(6, 2, 3, material));\n    cuboid.addFace(new face_Face(6, 3, 7, material));\n    cuboid.addFace(new face_Face(4, 0, 1, material));\n    cuboid.addFace(new face_Face(5, 4, 1, material));\n  }\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(25);\n\n// CONCATENATED MODULE: ./lib/3d/factory/obj-factory.js\n\n\n\n\n\nvar ObjFactory = {\n  /**\n   * Load Wavefront OBJ file\n   * @param {String} url\n   * @param {Scene} [scene]\n   * @returns {Mesh}\n   * @link http://en.wikipedia.org/wiki/Wavefront_.obj_file\n   */\n  load: function load(url, scene) {\n    var mesh = new mesh_Mesh();\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    Helper.load(url, function (data\n    /*, textStatus, jqXHR */\n    ) {\n      ObjFactory.process(data, mesh, material);\n\n      if (scene) {\n        scene.faceSortPile.reInit();\n      }\n    });\n    return mesh;\n  },\n\n  /**\n   * @param {String} objFileData\n   * @param {Mesh} mesh\n   * @param {Material} material\n   * @private\n   */\n  process: function process(objFileData, mesh, material) {\n    var lines = objFileData.split(\'\\n\');\n    var vertexTextures = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      var parameters = ObjFactory.getLineParameters(lines[i].trim());\n\n      if (parameters.length > 0) {\n        switch (parameters[0]) {\n          case \'v\':\n            // vertices\n            ObjFactory.addVertex(parameters, mesh);\n            break;\n\n          case \'f\':\n            // faces\n            ObjFactory.addFace(parameters, mesh, vertexTextures, material);\n            break;\n\n          case \'g\':\n            // mesh name\n            mesh.setName(parameters[1]);\n            break;\n\n          case \'vt\':\n            // vertex texture coordinate\n            ObjFactory.addVertexTextureCoordinate(parameters, vertexTextures);\n            break;\n\n          case \'vn\':\n            // vertex normals\n            // ignored for now\n            break;\n        }\n      }\n    }\n\n    mesh.buildWireframe();\n  },\n\n  /**\n   * @private\n   * @param {String} line\n   * @returns {Array}\n   */\n  getLineParameters: function getLineParameters(line) {\n    var initialParameters = line.split(\' \');\n    var parameters = [];\n\n    for (var i = 0; i < initialParameters.length; i++) {\n      if (initialParameters[i] !== \'\') {\n        parameters.push(initialParameters[i]);\n      }\n    }\n\n    return parameters;\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Mesh} mesh\n   * @private\n   */\n  addVertex: function addVertex(parameters, mesh) {\n    var p = new point_3d_Point3D(parameters[1], parameters[2], parameters[3]);\n    mesh.addVertex(p);\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Mesh} mesh\n   * @param {Point3D[]} vertexTextures\n   * @param {Material} material\n   * @private\n   */\n  addFace: function addFace(parameters, mesh, vertexTextures, material) {\n    var a = ObjFactory.splitFaceParameter(parameters[1]);\n    var b = ObjFactory.splitFaceParameter(parameters[2]);\n    var c = ObjFactory.splitFaceParameter(parameters[3]);\n    var uvA = null;\n    var uvB = null;\n    var uvC = null;\n\n    if (a.vt !== null) {\n      uvA = new point_3d_Point3D(vertexTextures[a.vt]);\n    }\n\n    if (b.vt !== null) {\n      uvB = new point_3d_Point3D(vertexTextures[b.vt]);\n    }\n\n    if (c.vt !== null) {\n      uvC = new point_3d_Point3D(vertexTextures[c.vt]);\n    }\n\n    var f = new face_Face(a.v, b.v, c.v, material, uvA, uvB, uvC);\n    mesh.addFace(f);\n  },\n\n  /**\n   * @param {String} parameter\n   * @private\n   */\n  splitFaceParameter: function splitFaceParameter(parameter) {\n    var values = parameter.split(\'/\');\n    var vt = null;\n    var vn = null;\n    var v = parseInt(values[0], 10);\n\n    if (values.length >= 2) {\n      vt = parseInt(values[1], 10);\n    }\n\n    if (values.length >= 3) {\n      vn = parseInt(values[0], 10);\n    }\n\n    return {\n      v: v - 1,\n      vt: vt - 1,\n      vn: vn - 1\n    };\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Point3D[]} vertexTextures\n   * @private\n   */\n  addVertexTextureCoordinate: function addVertexTextureCoordinate(parameters, vertexTextures) {\n    var p = new point_3d_Point3D(parameters[1], parameters[2], parameters[3]);\n    vertexTextures.push(p);\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/sphere-factory.js\n\n\n\n\n\n/**\n * This just generates a sphere-shaped mesh\n * @link http://stackoverflow.com/a/9787745/844771\n * @namespace\n */\n\nvar SphereFactory = {\n  /**\n   * @param {float} radiusX\n   * @param {float} radiusY\n   * @param {float} radiusZ\n   * @param {int} steps\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(radiusX, radiusY, radiusZ, steps) {\n    var sphere = new mesh_Mesh();\n    var uSteps = steps;\n    var vSteps = steps * 2;\n    this.generateVertices(radiusX, radiusY, radiusZ, sphere, uSteps, vSteps);\n    this.generateEdges(sphere, uSteps, vSteps);\n    this.generateFaces(sphere, uSteps, vSteps);\n    return sphere;\n  },\n\n  /**\n   * @param {int|float|Number} radiusX\n   * @param {int|float|Number} radiusY\n   * @param {int|float|Number} radiusZ\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateVertices: function generateVertices(radiusX, radiusY, radiusZ, sphere, uSteps, vSteps) {\n    var resolution = Math.PI / uSteps;\n    var inclination = 0;\n\n    for (var u = 0; u <= uSteps; u++) {\n      var azimuth = 0;\n\n      for (var v = 0; v <= vSteps; v++) {\n        var p = new point_3d_Point3D(radiusX * Math.sin(inclination) * Math.cos(azimuth), radiusY * Math.sin(inclination) * Math.sin(azimuth), radiusZ * Math.cos(inclination));\n        sphere.addVertex(p);\n        azimuth += Math.abs(resolution);\n      }\n\n      inclination += Math.abs(resolution);\n    }\n  },\n\n  /**\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateEdges: function generateEdges(sphere, uSteps, vSteps) {\n    for (var u = 0; u < uSteps; u++) {\n      for (var v = 0; v < vSteps; v++) {\n        var thisVertex = u * (vSteps + 1) + v;\n        var nextUI = u + 1;\n\n        if (nextUI > uSteps) {\n          nextUI = 0;\n        }\n\n        var uiNextVertex = nextUI * (vSteps + 1) + v;\n        sphere.addEdge(new edge_Edge(thisVertex, uiNextVertex));\n        var nextVI = v + 1;\n\n        if (nextVI > vSteps) {\n          nextVI = 0;\n        }\n\n        var viNextVertex = u * (vSteps + 1) + nextVI;\n        sphere.addEdge(new edge_Edge(thisVertex, viNextVertex));\n      }\n    }\n  },\n\n  /**\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateFaces: function generateFaces(sphere, uSteps, vSteps) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n\n    for (var u = 0; u < uSteps; u++) {\n      for (var v = 0; v < vSteps; v++) {\n        var nextUI = u + 1;\n\n        if (nextUI > uSteps) {\n          // break;\n          nextUI = 0;\n        }\n\n        var nextVI = v + 1;\n\n        if (nextVI > vSteps) {\n          // break;\n          nextVI = 0;\n        }\n\n        sphere.addFace(new face_Face(u * (vSteps + 1) + v, nextUI * (vSteps + 1) + v, nextUI * (vSteps + 1) + nextVI, material, new point_3d_Point3D(0, 0, 0), new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0)));\n        sphere.addFace(new face_Face(u * (vSteps + 1) + v, nextUI * (vSteps + 1) + nextVI, u * (vSteps + 1) + nextVI, material2, new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0)));\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/torus-factory.js\n\n\n\n\n\n/**\n * This just generates a torus-shaped mesh\n * @namespace\n * @link http://gamedev.stackexchange.com/a/16850\n */\n\nvar TorusFactory = {\n  /**\n   * @param {float} outerRadiusX\n   * @param {float} outerRadiusY\n   * @param {float} weight\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps) {\n    var torus = new mesh_Mesh();\n    TorusFactory.generateVertices(torus, outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps);\n    TorusFactory.generateEdges(torus, outerSteps, innerSteps);\n    TorusFactory.generateFaces(torus, outerSteps, innerSteps);\n    return torus;\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {float} outerRadiusX\n   * @param {float} outerRadiusY\n   * @param {float} weight\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateVertices: function generateVertices(torus, outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps) {\n    var outerResolution = 2 * Math.PI / outerSteps;\n    var innerResolution = 2 * Math.PI / innerSteps;\n    var u = 0;\n\n    for (var ui = 0; ui < outerSteps; ui++) {\n      var p = new point_3d_Point3D(outerRadiusX * Math.cos(u), outerRadiusY * Math.sin(u), 0);\n      var w = new point_3d_Point3D(p.x, p.y, p.z);\n      w.normalize();\n      var v = 0;\n\n      for (var vi = 0; vi < innerSteps; vi++) {\n        var q = new point_3d_Point3D(outerRadiusX * w.x + weight * Math.cos(v) * w.x + 0, outerRadiusY * w.y + weight * Math.cos(v) * w.y + 0, outerRadiusX * w.z + weight * Math.cos(v) * w.z + weight * Math.sin(v));\n        torus.addVertex(q);\n        v += Math.abs(innerResolution);\n      }\n\n      u += Math.abs(outerResolution);\n    }\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateEdges: function generateEdges(torus, outerSteps, innerSteps) {\n    var uiCount = outerSteps;\n    var viCount = innerSteps;\n\n    for (var ui = 0; ui < uiCount; ui++) {\n      for (var vi = 0; vi < viCount; vi++) {\n        var thisVertex = ui * viCount + vi;\n        var nextUI = ui + 1;\n\n        if (nextUI >= uiCount) {\n          nextUI = 0;\n        }\n\n        var uiNextVertex = nextUI * viCount + vi;\n        torus.addEdge(new edge_Edge(thisVertex, uiNextVertex));\n        var nextVI = vi + 1;\n\n        if (nextVI >= viCount) {\n          nextVI = 0;\n        }\n\n        var viNextVertex = ui * viCount + nextVI;\n        torus.addEdge(new edge_Edge(thisVertex, viNextVertex));\n      }\n    }\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateFaces: function generateFaces(torus, outerSteps, innerSteps) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n    var uiCount = outerSteps;\n    var viCount = innerSteps;\n\n    for (var ui = 0; ui < uiCount; ui++) {\n      for (var vi = 0; vi < viCount; vi++) {\n        var nextUI = ui + 1;\n\n        if (nextUI >= uiCount) {\n          // break;\n          nextUI = 0;\n        }\n\n        var nextVI = vi + 1;\n\n        if (nextVI >= viCount) {\n          // break;\n          nextVI = 0;\n        }\n\n        torus.addFace(new face_Face(ui * viCount + vi, nextUI * viCount + vi, nextUI * viCount + nextVI, material, new point_3d_Point3D(0, 0, 0), new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0)));\n        torus.addFace(new face_Face(ui * viCount + vi, nextUI * viCount + nextVI, ui * viCount + nextVI, material2, new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0)));\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/index.js\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/renderer/renderer.js\n\n\nvar renderer_Renderer =\n/*#__PURE__*/\nfunction () {\n  function Renderer() {\n    Object(classCallCheck["a" /* default */])(this, Renderer);\n  }\n\n  Object(createClass["a" /* default */])(Renderer, [{\n    key: "draw",\n\n    /**\n     * Rasterize scene\n     *\n     * @param {Scene} scene\n     * @abstract\n     */\n    value: function draw(scene) {// do nothing\n    }\n  }]);\n\n  return Renderer;\n}();\n// CONCATENATED MODULE: ./lib/3d/renderer/flat-renderer.js\n\n\n\n\n\n\n\nvar flat_renderer_FlatRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(FlatRenderer, _Renderer);\n\n  function FlatRenderer() {\n    Object(classCallCheck["a" /* default */])(this, FlatRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n        Draw.color.r = Math.round(255 / (faceLength - 1) * faceLookup.face.order);\n        Draw.color.g = 255 - Math.round(255 / (faceLength - 1) * faceLookup.face.order); // faceLookup.face.a\n\n        Draw.triangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceLookup.face.material.color);\n        /* Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.a ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.b ].cameraProjected,\n            faceLookup.face.material.color\n          );\n         Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.b ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.c ].cameraProjected,\n            faceLookup.face.material.color\n          );\n         Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.c ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.a ].cameraProjected,\n            faceLookup.face.material.color\n          ); */\n      }\n    }\n  }]);\n\n  return FlatRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/flat-shader-renderer.js\n\n\n\n\n\n\n\n\nvar flat_shader_renderer_FlatShaderRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(FlatShaderRenderer, _Renderer);\n\n  function FlatShaderRenderer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FlatShaderRenderer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FlatShaderRenderer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "draw", function (scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n      var faceColor = new color_Color();\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n        faceColor.r = Math.round(faceLookup.face.lightData.diffuseColor.r * faceLookup.face.material.color.r);\n        faceColor.g = Math.round(faceLookup.face.lightData.diffuseColor.g * faceLookup.face.material.color.g);\n        faceColor.b = Math.round(faceLookup.face.lightData.diffuseColor.b * faceLookup.face.material.color.b);\n        Draw.triangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceColor);\n      }\n    });\n\n    return _this;\n  }\n\n  return FlatShaderRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/gouraud-shader-renderer.js\n\n\n\n\n\n\n\nvar gouraud_shader_renderer_GouraudShaderRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(GouraudShaderRenderer, _Renderer);\n\n  function GouraudShaderRenderer() {\n    Object(classCallCheck["a" /* default */])(this, GouraudShaderRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(GouraudShaderRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(GouraudShaderRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n      var faceColorA = new color_Color();\n      var faceColorB = new color_Color();\n      var faceColorC = new color_Color();\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n\n        if (faceLookup.face.visible === true) {\n          faceColorA.set(faceLookup.face.material.color);\n          faceColorB.set(faceLookup.face.material.color);\n          faceColorC.set(faceLookup.face.material.color);\n          faceColorA.multiply(faceLookup.mesh.vertices[faceLookup.face.a].lightData.diffuseColor);\n          faceColorB.multiply(faceLookup.mesh.vertices[faceLookup.face.b].lightData.diffuseColor);\n          faceColorC.multiply(faceLookup.mesh.vertices[faceLookup.face.c].lightData.diffuseColor);\n          Draw.interpolatedTriangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceColorA, faceColorB, faceColorC);\n        }\n      }\n    }\n  }]);\n\n  return GouraudShaderRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/texture-renderer.js\n\n\n\n\n\n\n\nvar texture_renderer_TextureRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(TextureRenderer, _Renderer);\n\n  function TextureRenderer() {\n    Object(classCallCheck["a" /* default */])(this, TextureRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TextureRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TextureRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n\n        if (faceLookup.face.visible === true) {\n          Draw.texturedTriangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceLookup.face.uvA, faceLookup.face.uvB, faceLookup.face.uvC, faceLookup.face.material.getTexture());\n        }\n      }\n    }\n  }]);\n\n  return TextureRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/vertex-renderer.js\n\n\n\n\n\n\nvar vertex_renderer_VertexRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(VertexRenderer, _Renderer);\n\n  function VertexRenderer() {\n    Object(classCallCheck["a" /* default */])(this, VertexRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(VertexRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(VertexRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      for (var m = 0; m < scene.meshes.length; m++) {\n        scene.meshes[m].drawVertices();\n      }\n    }\n  }]);\n\n  return VertexRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/wireframe-renderer.js\n\n\n\n\n\n\nvar wireframe_renderer_WireframeRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(WireframeRenderer, _Renderer);\n\n  function WireframeRenderer() {\n    Object(classCallCheck["a" /* default */])(this, WireframeRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WireframeRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(WireframeRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      for (var m = 0; m < scene.meshes.length; m++) {\n        scene.meshes[m].drawWireframe();\n      }\n    }\n  }]);\n\n  return WireframeRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/index.js\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/ambience.js\n\n\nvar ambience_Ambience =\n/**\n * @constructor\n * @param {NormalizedColor} [light]\n */\nfunction Ambience(light) {\n  Object(classCallCheck["a" /* default */])(this, Ambience);\n\n  this.light = light || new normalized_color_NormalizedColor(0.3, 0.3, 0.3);\n};\n// CONCATENATED MODULE: ./lib/3d/face-lookup.js\n\nvar face_lookup_FaceLookup =\n/**\n * @param {Face} face\n * @param {Mesh} mesh\n * @constructor\n */\nfunction FaceLookup(face, mesh) {\n  Object(classCallCheck["a" /* default */])(this, FaceLookup);\n\n  this.face = face;\n  this.mesh = mesh;\n};\n// CONCATENATED MODULE: ./lib/3d/face-sort-pile.js\n\n\n\nvar face_sort_pile_FaceSortPile =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param scene\n   * @constructor\n   */\n  function FaceSortPile(scene) {\n    Object(classCallCheck["a" /* default */])(this, FaceSortPile);\n\n    this.scene = scene;\n    this.lookupTable = [];\n    this.forceInit = true;\n  }\n\n  Object(createClass["a" /* default */])(FaceSortPile, [{\n    key: "populate",\n    value: function populate() {\n      var idx = 0;\n      var meshLength = this.scene.meshes.length;\n\n      for (var i = 0; i < meshLength; i++) {\n        var faces = this.scene.meshes[i].faces;\n        var faceLength = faces.length;\n\n        for (var j = 0; j < faceLength; j++) {\n          this.lookupTable[idx] = new face_lookup_FaceLookup(faces[j], this.scene.meshes[i]);\n          idx++;\n        }\n      }\n    }\n  }, {\n    key: "resize",\n    value: function resize() {\n      var faceCount = 0;\n      var meshLength = this.scene.meshes.length;\n\n      for (var i = 0; i < meshLength; i++) {\n        faceCount += this.scene.meshes[i].faces.length;\n      }\n\n      if (this.lookupTable.length !== faceCount) {\n        this.lookupTable = new Array(faceCount);\n      }\n    }\n  }, {\n    key: "reInit",\n    value: function reInit() {\n      this.forceInit = true;\n    }\n  }, {\n    key: "init",\n    value: function init() {\n      this.forceInit = false;\n      this.resize();\n      this.populate();\n    }\n  }, {\n    key: "sort",\n    value: function sort() {\n      if (this.forceInit === true) {\n        this.init();\n      }\n\n      this.lookupTable.sort(function (a, b) {\n        if (a.face.position.z > b.face.position.z) {\n          return 1;\n        }\n\n        if (a.face.position.z < b.face.position.z) {\n          return -1;\n        }\n\n        return 0;\n      });\n    }\n  }]);\n\n  return FaceSortPile;\n}();\n// CONCATENATED MODULE: ./lib/3d/scene.js\n\n\n\n\n\nvar scene_Scene =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function Scene() {\n    Object(classCallCheck["a" /* default */])(this, Scene);\n\n    /**\n     * @type Mesh[]\n     */\n    this.meshes = [];\n    /**\n     * @type Camera[]\n     */\n\n    this.cameras = [];\n    /**\n     * @type Light[]\n     */\n\n    this.lights = [];\n    /**\n     * @type Material[]\n     */\n\n    this.materials = [];\n    /**\n     * @type Renderer[]\n     */\n\n    this.renderers = [];\n    /**\n     * @type FaceSortPile\n     */\n\n    this.faceSortPile = new face_sort_pile_FaceSortPile(this);\n    this.ambience = new ambience_Ambience();\n    /**\n     * @type Camera\n     */\n\n    this.activeCamera = null;\n    /**\n     * @type Renderer\n     */\n\n    this.activeRenderer = null;\n    this.renderTime = 0;\n    this.renderFrameCount = 0;\n    this.renderFPS = 0.00;\n    this.forceReinitSort = true;\n  }\n  /**\n   * @param {Camera} camera\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Scene, [{\n    key: "addCamera",\n    value: function addCamera(camera) {\n      this.cameras.push(camera);\n\n      if (this.activeCamera === null) {\n        this.activeCamera = camera;\n      }\n    }\n    /**\n     * @param {Renderer} renderer\n     * @param {Boolean} [setAsActive]\n     * @public\n     */\n\n  }, {\n    key: "addRenderer",\n    value: function addRenderer(renderer, setAsActive) {\n      this.renderers.push(renderer);\n\n      if (this.activeRenderer === null || setAsActive === true) {\n        this.activeRenderer = renderer;\n      }\n    }\n    /**\n     * @param {Mesh} mesh\n     * @public\n     */\n\n  }, {\n    key: "addMesh",\n    value: function addMesh(mesh) {\n      this.meshes.push(mesh);\n      this.forceReinitSort = true;\n    }\n    /**\n     * @param {Light} light\n     * @public\n     */\n\n  }, {\n    key: "addLight",\n    value: function addLight(light) {\n      this.lights.push(light);\n    }\n    /**\n     * @param {String} name\n     * @returns {int|null}\n     * @public\n     */\n\n  }, {\n    key: "findMeshIndex",\n    value: function findMeshIndex(name) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        if (this.meshes[i].name === name) {\n          return i;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @param {String} name\n     * @public\n     */\n\n  }, {\n    key: "removeMesh",\n    value: function removeMesh(name) {\n      var i = this.findMeshIndex(name);\n\n      if (i !== null) {\n        this.meshes.splice(i, 1);\n      }\n    }\n    /**\n     * @param {Renderer} [renderer]\n     * @public\n     */\n\n  }, {\n    key: "render",\n    value: function render(renderer) {\n      if (!renderer) {\n        renderer = this.activeRenderer;\n      }\n\n      var renderStart = new Date(); // transform, project, and calculate normals\n\n      for (var i = 0; i < this.meshes.length; i++) {\n        if (this.meshes[i].visible === true) {\n          this.meshes[i].transformOrigin();\n          this.meshes[i].transformCamera(this.activeCamera);\n          this.meshes[i].project(this.activeCamera);\n          this.meshes[i].calculateFaceNormals();\n          this.meshes[i].calculateVertexNormals();\n          this.meshes[i].calculateFaceLightData(this, this.activeCamera);\n          this.meshes[i].calculateVertexLightData(this, this.activeCamera);\n          this.meshes[i].cull(this.activeCamera);\n        }\n      }\n\n      this.faceSortPile.sort();\n      renderer.draw(this);\n      var renderComplete = new Date();\n      this.renderFrameCount++;\n      this.renderTime += (renderComplete.getTime() - renderStart.getTime()) / 1000.0;\n      this.renderFPS = this.renderFrameCount / this.renderTime;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "clearMeshes",\n    value: function clearMeshes() {\n      this.meshes = [];\n      this.faceSortPile.reInit();\n    }\n  }]);\n\n  return Scene;\n}();\n// CONCATENATED MODULE: ./lib/3d/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./components/apps/3d/vertex/app.js\n\n\n\n\n\n\n\nvar app_VertexApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(VertexApp, _App);\n\n  function VertexApp(targetCanvasId) {\n    var _this;\n\n    var activeObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'torus\';\n\n    Object(classCallCheck["a" /* default */])(this, VertexApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(VertexApp).call(this, targetCanvasId));\n    _this.scene = new scene_Scene();\n\n    _this.loadObjects();\n\n    _this.initObject(activeObject);\n\n    _this.initLights();\n\n    _this.initCamera();\n\n    _this.initRenderer();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(VertexApp, [{\n    key: "loadObjects",\n    value: function loadObjects() {\n      this.objects = {\n        torus: TorusFactory.generate(500, 500, 350, 20, 12),\n        teapot: ObjFactory.load(\'./resources/3d/objects/teapot.obj\', this.scene),\n        cube: CuboidFactory.generate(500, 500, 500),\n        sphere: SphereFactory.generate(500, 500, 500, 20)\n      };\n      this.objects.torus.position.z = -1200;\n      this.objects.teapot.position.z = -1200;\n      this.objects.cube.position.z = -1200;\n      this.objects.sphere.position.z = -1200;\n      this.objects.teapot.scale.set(800, 800, 800);\n    }\n  }, {\n    key: "initCamera",\n    value: function initCamera() {\n      var camera = new movable_camera_MovableCamera();\n      this.scene.addCamera(camera);\n    }\n  }, {\n    key: "initObject",\n    value: function initObject(activeObject) {\n      this.setObject(activeObject);\n    }\n  }, {\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new vertex_renderer_VertexRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }, {\n    key: "initLights",\n    value: function initLights() {\n      var light = new omni_light_OmniLight(new point_3d_Point3D(-250, 0, -800), new normalized_color_NormalizedColor(1, 1, 1));\n      light.diffusePower = 20000;\n      var light2 = new omni_light_OmniLight(new point_3d_Point3D(0, 0, -1200), new normalized_color_NormalizedColor(1, 1, 1));\n      light2.diffusePower = 20000;\n      this.scene.addLight(light);\n      this.scene.addLight(light2);\n    }\n  }, {\n    key: "setObject",\n    value: function setObject(objectName) {\n      this.scene.clearMeshes();\n      this.scene.addMesh(this.objects[objectName]);\n      this.activeObject = objectName;\n    }\n  }, {\n    key: "rotateMesh",\n    value: function rotateMesh() {\n      this.objects[this.activeObject].rotation.addByVal(0.01);\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor = new color_Color(220, 230, 240);\n      Draw.clear();\n      this.scene.render();\n      this.endDrawing(true);\n    }\n  }]);\n\n  return VertexApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/vertex/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar vertexvue_type_script_lang_js_class, vertexvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar vertexvue_type_script_lang_js_Vertex = Object(vue_class_component_esm["a" /* default */])(vertexvue_type_script_lang_js_class = (vertexvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Vertex, _VueWrapper);\n\n  function Vertex() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Vertex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Vertex)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'teapot\');\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "objectOptions", [{\n      text: \'Cube\',\n      value: \'cube\'\n    }, {\n      text: \'Sphere\',\n      value: \'sphere\'\n    }, {\n      text: \'Torus\',\n      value: \'torus\'\n    }, {\n      text: \'Teapot\',\n      value: \'teapot\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Vertex, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_VertexApp(\'surface\', this.activeObject);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.rotateMesh();\n      this.app.draw();\n    }\n  }, {\n    key: "switchObject",\n    value: function switchObject(object) {\n      this.app.setObject(object);\n    }\n  }]);\n\n  return Vertex;\n}(vue_wrapper), vertexvue_type_script_lang_js_temp)) || vertexvue_type_script_lang_js_class;\n\n/* harmony default export */ var vertexvue_type_script_lang_js_ = (vertexvue_type_script_lang_js_Vertex);\n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_vertexvue_type_script_lang_js_ = (vertexvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar vertex_component = Object(componentNormalizer["a" /* default */])(\n  _3d_vertexvue_type_script_lang_js_,\n  vertexvue_type_template_id_644c9ac7_render,\n  vertexvue_type_template_id_644c9ac7_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var vertex = (vertex_component.exports);\n// CONCATENATED MODULE: ./components/apps/3d/flat/app.js\n\n\n\n\n\n\n\nvar app_FlatApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(FlatApp, _VertexApp);\n\n  function FlatApp() {\n    Object(classCallCheck["a" /* default */])(this, FlatApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new flat_renderer_FlatRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return FlatApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar flatvue_type_script_lang_js_class, flatvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar flatvue_type_script_lang_js_Flat = Object(vue_class_component_esm["a" /* default */])(flatvue_type_script_lang_js_class = (flatvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(Flat, _Vertex);\n\n  function Flat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Flat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Flat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Flat, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_FlatApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return Flat;\n}(vertex), flatvue_type_script_lang_js_temp)) || flatvue_type_script_lang_js_class;\n\n/* harmony default export */ var flatvue_type_script_lang_js_ = (flatvue_type_script_lang_js_Flat);\n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_flatvue_type_script_lang_js_ = (flatvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar flat_component = Object(componentNormalizer["a" /* default */])(\n  _3d_flatvue_type_script_lang_js_,\n  flatvue_type_template_id_76857549_render,\n  flatvue_type_template_id_76857549_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var flat = (flat_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat-shading/index.vue?vue&type=template&id=4046d1e9&\nvar flat_shadingvue_type_template_id_4046d1e9_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Flat Shading")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar flat_shadingvue_type_template_id_4046d1e9_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Shading#Flat_shading"}},[_vm._v("flat shading.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue?vue&type=template&id=4046d1e9&\n\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/app.js\n\n\n\n\n\n\n\nvar app_FlatShadingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(FlatShadingApp, _VertexApp);\n\n  function FlatShadingApp() {\n    Object(classCallCheck["a" /* default */])(this, FlatShadingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatShadingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatShadingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new flat_shader_renderer_FlatShaderRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return FlatShadingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat-shading/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar flat_shadingvue_type_script_lang_js_class, flat_shadingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar flat_shadingvue_type_script_lang_js_FlatShading = Object(vue_class_component_esm["a" /* default */])(flat_shadingvue_type_script_lang_js_class = (flat_shadingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(FlatShading, _Vertex);\n\n  function FlatShading() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FlatShading);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FlatShading)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FlatShading, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_FlatShadingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return FlatShading;\n}(vertex), flat_shadingvue_type_script_lang_js_temp)) || flat_shadingvue_type_script_lang_js_class;\n\n/* harmony default export */ var flat_shadingvue_type_script_lang_js_ = (flat_shadingvue_type_script_lang_js_FlatShading);\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_flat_shadingvue_type_script_lang_js_ = (flat_shadingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar flat_shading_component = Object(componentNormalizer["a" /* default */])(\n  _3d_flat_shadingvue_type_script_lang_js_,\n  flat_shadingvue_type_template_id_4046d1e9_render,\n  flat_shadingvue_type_template_id_4046d1e9_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var flat_shading = (flat_shading_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/gouraud-shading/index.vue?vue&type=template&id=3275c592&\nvar gouraud_shadingvue_type_template_id_3275c592_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Gouraud Shading")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar gouraud_shadingvue_type_template_id_3275c592_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Gouraud_shading"}},[_vm._v("Gouraud shading.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue?vue&type=template&id=3275c592&\n\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/app.js\n\n\n\n\n\n\n\nvar app_GouraudShadingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(GouraudShadingApp, _VertexApp);\n\n  function GouraudShadingApp() {\n    Object(classCallCheck["a" /* default */])(this, GouraudShadingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(GouraudShadingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(GouraudShadingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new gouraud_shader_renderer_GouraudShaderRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return GouraudShadingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/gouraud-shading/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar gouraud_shadingvue_type_script_lang_js_class, gouraud_shadingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar gouraud_shadingvue_type_script_lang_js_GouraudShading = Object(vue_class_component_esm["a" /* default */])(gouraud_shadingvue_type_script_lang_js_class = (gouraud_shadingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(GouraudShading, _Vertex);\n\n  function GouraudShading() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, GouraudShading);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(GouraudShading)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(GouraudShading, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_GouraudShadingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return GouraudShading;\n}(vertex), gouraud_shadingvue_type_script_lang_js_temp)) || gouraud_shadingvue_type_script_lang_js_class;\n\n/* harmony default export */ var gouraud_shadingvue_type_script_lang_js_ = (gouraud_shadingvue_type_script_lang_js_GouraudShading);\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_gouraud_shadingvue_type_script_lang_js_ = (gouraud_shadingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar gouraud_shading_component = Object(componentNormalizer["a" /* default */])(\n  _3d_gouraud_shadingvue_type_script_lang_js_,\n  gouraud_shadingvue_type_template_id_3275c592_render,\n  gouraud_shadingvue_type_template_id_3275c592_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var gouraud_shading = (gouraud_shading_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/texture-mapping/index.vue?vue&type=template&id=4779511a&\nvar texture_mappingvue_type_template_id_4779511a_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Texture Mapping")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar texture_mappingvue_type_template_id_4779511a_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Texture_mapping"}},[_vm._v("texture mapping.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue?vue&type=template&id=4779511a&\n\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/app.js\n\n\n\n\n\n\n\nvar app_TextureMappingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(TextureMappingApp, _VertexApp);\n\n  function TextureMappingApp() {\n    Object(classCallCheck["a" /* default */])(this, TextureMappingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TextureMappingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TextureMappingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new texture_renderer_TextureRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return TextureMappingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/texture-mapping/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar texture_mappingvue_type_script_lang_js_class, texture_mappingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar texture_mappingvue_type_script_lang_js_TextureMapping = Object(vue_class_component_esm["a" /* default */])(texture_mappingvue_type_script_lang_js_class = (texture_mappingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(TextureMapping, _Vertex);\n\n  function TextureMapping() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TextureMapping);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(TextureMapping)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(TextureMapping, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_TextureMappingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return TextureMapping;\n}(vertex), texture_mappingvue_type_script_lang_js_temp)) || texture_mappingvue_type_script_lang_js_class;\n\n/* harmony default export */ var texture_mappingvue_type_script_lang_js_ = (texture_mappingvue_type_script_lang_js_TextureMapping);\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_texture_mappingvue_type_script_lang_js_ = (texture_mappingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar texture_mapping_component = Object(componentNormalizer["a" /* default */])(\n  _3d_texture_mappingvue_type_script_lang_js_,\n  texture_mappingvue_type_template_id_4779511a_render,\n  texture_mappingvue_type_template_id_4779511a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var texture_mapping = (texture_mapping_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/wireframe/index.vue?vue&type=template&id=369b44f3&\nvar wireframevue_type_template_id_369b44f3_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Wireframe Projection")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)])}\nvar wireframevue_type_template_id_369b44f3_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Wire-frame_model"}},[_vm._v("wireframe projection.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue?vue&type=template&id=369b44f3&\n\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/app.js\n\n\n\n\n\n\n\nvar app_WireframeApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(WireframeApp, _VertexApp);\n\n  function WireframeApp() {\n    Object(classCallCheck["a" /* default */])(this, WireframeApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WireframeApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(WireframeApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new wireframe_renderer_WireframeRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return WireframeApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/wireframe/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar wireframevue_type_script_lang_js_class, wireframevue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar wireframevue_type_script_lang_js_Wireframe = Object(vue_class_component_esm["a" /* default */])(wireframevue_type_script_lang_js_class = (wireframevue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(Wireframe, _Vertex);\n\n  function Wireframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Wireframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Wireframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'teapot\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Wireframe, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_WireframeApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return Wireframe;\n}(vertex), wireframevue_type_script_lang_js_temp)) || wireframevue_type_script_lang_js_class;\n\n/* harmony default export */ var wireframevue_type_script_lang_js_ = (wireframevue_type_script_lang_js_Wireframe);\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_wireframevue_type_script_lang_js_ = (wireframevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar wireframe_component = Object(componentNormalizer["a" /* default */])(\n  _3d_wireframevue_type_script_lang_js_,\n  wireframevue_type_template_id_369b44f3_render,\n  wireframevue_type_template_id_369b44f3_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var wireframe = (wireframe_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/mandelbrot/index.vue?vue&type=template&id=abb448c8&\nvar mandelbrotvue_type_template_id_abb448c8_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"400"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Mandelbrot Set")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Resolution","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"100"},on:{"update":_vm.updateIterations},model:{value:(_vm.iterations),callback:function ($$v) {_vm.iterations=$$v},expression:"iterations"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Zoom","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"1000"},on:{"update":_vm.updateZoom},model:{value:(_vm.zoom),callback:function ($$v) {_vm.zoom=$$v},expression:"zoom"}})],1)],1)],1)])}\nvar mandelbrotvue_type_template_id_abb448c8_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Mandelbrot_set"}},[_vm._v("Mandelbrot set")]),_vm._v(" fractal shape.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue?vue&type=template&id=abb448c8&\n\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/app.js\n\n\n\n\n\n\n\n\nvar app_MandelbrotApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(MandelbrotApp, _App);\n\n  function MandelbrotApp(targetCanvasId) {\n    var _this;\n\n    var maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    Object(classCallCheck["a" /* default */])(this, MandelbrotApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MandelbrotApp).call(this, targetCanvasId));\n    _this.maxIterations = maxIterations;\n    _this.zoom = zoom;\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(MandelbrotApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var maxIterations = this.maxIterations;\n      var scaleX = 3.5 / this.zoom;\n      var scaleY = 2.0 / this.zoom;\n      var yAdder = -this.zoom / 40;\n      var xAdder = -this.zoom / 24;\n      var precalcColors = this.precalcColors;\n      var xPos = -0.75 + xAdder - scaleX / 2;\n      var yPos = 0 + yAdder - scaleY / 2;\n      var ptr = 0;\n\n      for (var py = 0; py < height; py++) {\n        for (var px = 0; px < width; px++) {\n          var x0 = xPos + px / width * scaleX;\n          var y0 = yPos + py / height * scaleY;\n          var x = 0.0;\n          var y = 0.0;\n          var xx = x * x;\n          var yy = y * y;\n          var iteration = 0;\n\n          while (xx + yy < 4 && iteration < maxIterations) {\n            y = 2 * x * y + y0;\n            x = xx - yy + x0;\n            iteration++;\n            xx = x * x;\n            yy = y * y;\n          }\n\n          var colIndex = Math.max(0, Math.min(maxIterations - 1, iteration));\n          var color = precalcColors[colIndex];\n          data[ptr++] = color.r;\n          data[ptr++] = color.g;\n          data[ptr++] = color.b;\n          ptr++;\n        }\n      }\n\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.maxIterations);\n      var degrees = 160;\n      var degreeOffset = 45;\n\n      for (var i = 0; i < this.maxIterations; i++) {\n        var normal = Math.cos(i / this.maxIterations * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, normal / 2, normal, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }]);\n\n  return MandelbrotApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/mandelbrot/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar mandelbrotvue_type_script_lang_js_class, mandelbrotvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar mandelbrotvue_type_script_lang_js_Mandelbrot = Object(vue_class_component_esm["a" /* default */])(mandelbrotvue_type_script_lang_js_class = (mandelbrotvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Mandelbrot, _VueWrapper);\n\n  function Mandelbrot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Mandelbrot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Mandelbrot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "iterations", 40);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "zoom", 100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Mandelbrot, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_MandelbrotApp(\'surface\', this.iterations, this.zoom / 100);\n      app.calculatePalette();\n      app.draw();\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {// do nothing\n    }\n  }, {\n    key: "updateIterations",\n    value: function updateIterations(val) {\n      this.app.maxIterations = val;\n      this.app.calculatePalette();\n      this.app.draw();\n    }\n  }, {\n    key: "updateZoom",\n    value: function updateZoom(val) {\n      this.app.zoom = val / 100.0;\n      this.app.draw();\n    }\n  }]);\n\n  return Mandelbrot;\n}(vue_wrapper), mandelbrotvue_type_script_lang_js_temp)) || mandelbrotvue_type_script_lang_js_class;\n\n/* harmony default export */ var mandelbrotvue_type_script_lang_js_ = (mandelbrotvue_type_script_lang_js_Mandelbrot);\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var fractals_mandelbrotvue_type_script_lang_js_ = (mandelbrotvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar mandelbrot_component = Object(componentNormalizer["a" /* default */])(\n  fractals_mandelbrotvue_type_script_lang_js_,\n  mandelbrotvue_type_template_id_abb448c8_render,\n  mandelbrotvue_type_template_id_abb448c8_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var mandelbrot = (mandelbrot_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/sierpinski/index.vue?vue&type=template&id=1f734547&\nvar sierpinskivue_type_template_id_1f734547_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Sierpiński Triangle")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Resolution","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"30"},on:{"update":_vm.updateResolution},model:{value:(_vm.resolution),callback:function ($$v) {_vm.resolution=$$v},expression:"resolution"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Zoom","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"5000"},on:{"update":_vm.updateZoom},model:{value:(_vm.zoom),callback:function ($$v) {_vm.zoom=$$v},expression:"zoom"}})],1)],1)],1)])}\nvar sierpinskivue_type_template_id_1f734547_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle"}},[_vm._v("Sierpiński\\n      triangle")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue?vue&type=template&id=1f734547&\n\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_SierpinskiApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(SierpinskiApp, _App);\n\n  function SierpinskiApp(targetCanvasId) {\n    var _this;\n\n    var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var maxIterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;\n\n    Object(classCallCheck["a" /* default */])(this, SierpinskiApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SierpinskiApp).call(this, targetCanvasId));\n    _this.zoom = zoom;\n    _this.maxIterations = maxIterations;\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(SierpinskiApp, [{\n    key: "drawRecursive",\n    value: function drawRecursive(sideLength, posCenter, calculatedTriangleHeight, depth) {\n      if (sideLength < 0.2) {\n        return;\n      }\n\n      var sideLengthHalf = sideLength / 2;\n      var triangleHeight = calculatedTriangleHeight || Math.sqrt(sideLength * sideLength - sideLengthHalf * sideLengthHalf);\n      var triangleHalf = triangleHeight / 2;\n\n      if (posCenter.x + sideLengthHalf < 0 || posCenter.x - sideLengthHalf > this.virtualSurface.getWidth() || posCenter.y + sideLengthHalf < 0 || posCenter.y - sideLengthHalf > this.virtualSurface.getWidth()) {\n        return;\n      }\n\n      depth = depth || 0;\n      var posA = new point_2d_Point2D(posCenter.x - sideLengthHalf, posCenter.y + triangleHalf);\n      var posB = new point_2d_Point2D(posCenter.x + sideLengthHalf, posCenter.y + triangleHalf);\n      var posC = new point_2d_Point2D(posCenter.x, posCenter.y - triangleHalf);\n      var color = new color_Color(this.precalcColors[depth]);\n      color.a = Math.round(0.5 * (this.maxIterations - depth) / this.maxIterations * 255);\n      Draw.blendPixel(posA, color);\n      Draw.blendPixel(posB, color);\n      Draw.blendPixel(posC, color);\n\n      if (depth + 1 < this.maxIterations) {\n        var triangleDoubleHalf = triangleHalf / 2;\n        var sideDoubleHalf = sideLengthHalf / 2;\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x - sideDoubleHalf, posCenter.y + triangleDoubleHalf), triangleHalf, depth + 1);\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x + sideDoubleHalf, posCenter.y + triangleDoubleHalf), triangleHalf, depth + 1);\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x, posCenter.y - triangleDoubleHalf), triangleHalf, depth + 1);\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.color.set(32, 255, 32);\n      Draw.setSurface(this.virtualSurface);\n      Draw.clear();\n      var sideLength = Math.min(this.canvas.height, this.canvas.width) * this.zoom;\n      var offset = new point_2d_Point2D(this.zoom * 10, this.zoom * 3);\n      var posCenter = new point_2d_Point2D(this.canvas.width / 2 + offset.x, this.canvas.height / 2 + offset.y);\n      this.drawRecursive(sideLength, posCenter);\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.maxIterations);\n      var degrees = 45;\n      var degreeOffset = 0;\n\n      for (var i = 0; i < this.maxIterations; i++) {\n        var normal = Math.cos(i / this.maxIterations * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, i, 1, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }]);\n\n  return SierpinskiApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/sierpinski/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar sierpinskivue_type_script_lang_js_class, sierpinskivue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar sierpinskivue_type_script_lang_js_Sierpinski = Object(vue_class_component_esm["a" /* default */])(sierpinskivue_type_script_lang_js_class = (sierpinskivue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Sierpinski, _VueWrapper);\n\n  function Sierpinski() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Sierpinski);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Sierpinski)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "resolution", 15);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "zoom", 100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Sierpinski, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_SierpinskiApp(\'surface\', this.zoom / 100, this.resolution);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.draw();\n    }\n  }, {\n    key: "updateResolution",\n    value: function updateResolution(val) {\n      var app = this.app;\n      app.maxIterations = val;\n      app.calculatePalette();\n      app.draw();\n    }\n  }, {\n    key: "updateZoom",\n    value: function updateZoom(val) {\n      var app = this.app;\n      app.zoom = val / 100.0;\n      app.draw();\n    }\n  }]);\n\n  return Sierpinski;\n}(vue_wrapper), sierpinskivue_type_script_lang_js_temp)) || sierpinskivue_type_script_lang_js_class;\n\n/* harmony default export */ var sierpinskivue_type_script_lang_js_ = (sierpinskivue_type_script_lang_js_Sierpinski);\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var fractals_sierpinskivue_type_script_lang_js_ = (sierpinskivue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar sierpinski_component = Object(componentNormalizer["a" /* default */])(\n  fractals_sierpinskivue_type_script_lang_js_,\n  sierpinskivue_type_template_id_1f734547_render,\n  sierpinskivue_type_template_id_1f734547_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var sierpinski = (sierpinski_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/interpolated-triangle/index.vue?vue&type=template&id=61c45261&\nvar interpolated_trianglevue_type_template_id_61c45261_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar interpolated_trianglevue_type_template_id_61c45261_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Interpolated Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Gouraud_shading"}},[_vm._v("triangle polygon interpolation")]),_vm._v(" ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path()")]),_vm._v(")")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue?vue&type=template&id=61c45261&\n\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/app.js\n\n\n\n\n\n\n\n\n // import { Surface } from \'~/lib/core/surface\';\n\nvar app_InterpolatedTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(InterpolatedTriangleApp, _App);\n\n  // eslint-disable-next-line\n  function InterpolatedTriangleApp(canvasId) {\n    Object(classCallCheck["a" /* default */])(this, InterpolatedTriangleApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(InterpolatedTriangleApp).call(this, canvasId)); // Draw.bgColor.set(220, 220, 220);\n  }\n\n  Object(createClass["a" /* default */])(InterpolatedTriangleApp, [{\n    key: "drawTriangle",\n    value: function drawTriangle(radAdjustment, posX, posY, triangle) {\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var rad = radAdjustment;\n\n      for (var j = 0; j < 3; j++) {\n        translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n        translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n      }\n\n      Draw.interpolatedTriangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], new color_Color(255, 255, 255), new color_Color(255, 0, 0), new color_Color(0, 0, 0));\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear(); // Draw.color.set(32, 255, 32);\n\n      this.drawTriangle( // 77.458\n      rad // 61.758\n      // 36.231\n      // 9.2\n      // 91.503\n      //  /*1.108*/, 320, 240,\n      , 320, 240, // jshint ignore:line\n      [new point_2d_Point2D(0, -100), new point_2d_Point2D(-100, 100), new point_2d_Point2D(100, 100)]);\n      this.endDrawing(true);\n    }\n  }]);\n\n  return InterpolatedTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/interpolated-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar interpolated_trianglevue_type_script_lang_js_class, interpolated_trianglevue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar interpolated_trianglevue_type_script_lang_js_InterpolatedTriangle = Object(vue_class_component_esm["a" /* default */])(interpolated_trianglevue_type_script_lang_js_class = (interpolated_trianglevue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(InterpolatedTriangle, _VueWrapper);\n\n  function InterpolatedTriangle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, InterpolatedTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(InterpolatedTriangle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "startTime", new Date());\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(InterpolatedTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_InterpolatedTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return InterpolatedTriangle;\n}(vue_wrapper), interpolated_trianglevue_type_script_lang_js_temp)) || interpolated_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var interpolated_trianglevue_type_script_lang_js_ = (interpolated_trianglevue_type_script_lang_js_InterpolatedTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_interpolated_trianglevue_type_script_lang_js_ = (interpolated_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar interpolated_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_interpolated_trianglevue_type_script_lang_js_,\n  interpolated_trianglevue_type_template_id_61c45261_render,\n  interpolated_trianglevue_type_template_id_61c45261_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var interpolated_triangle = (interpolated_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/line/index.vue?vue&type=template&id=5f05ee90&\nvar linevue_type_template_id_5f05ee90_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar linevue_type_template_id_5f05ee90_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Line")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of line ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.lineTo()")]),_vm._v(")")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue?vue&type=template&id=5f05ee90&\n\n// CONCATENATED MODULE: ./components/apps/primitives/line/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_LineApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(LineApp, _App);\n\n  function LineApp() {\n    Object(classCallCheck["a" /* default */])(this, LineApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(LineApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(LineApp, [{\n    key: "drawLine",\n    value: function drawLine(p1, p2, rad) {\n      var lineColor = new color_Color(32, 255, 32);\n      var pixelColor = new color_Color(255, 0, 0, 128);\n      Line.draw(p1, p2, lineColor, Draw.getSurface());\n      Draw.blendPixel(p1, pixelColor);\n      Draw.blendPixel(p2, pixelColor);\n    }\n    /**\n     * @param {float|int|Number} x\n     * @param {float|int|Number} y\n     * @param {float|int|Number} length\n     * @param {float|int|Number} rad\n     */\n\n  }, {\n    key: "rotateLine",\n    value: function rotateLine(x, y, length, rad) {\n      var lineColor = new color_Color(20, 123, 255);\n      var pixelColor = new color_Color(255, 236, 7, 255);\n      var lx1 = -length / 2;\n      var lx2 = length / 2;\n      var ly1 = 0;\n      var ly2 = 0;\n      var p1 = new point_2d_Point2D(x + lx1 * Math.cos(rad) - ly1 * Math.sin(rad), y + ly1 * Math.cos(rad) + lx1 * Math.sin(rad));\n      var p2 = new point_2d_Point2D(x + lx2 * Math.cos(rad) - ly2 * Math.sin(rad), y + ly2 * Math.cos(rad) + lx2 * Math.sin(rad));\n      Line.draw(p1, p2, lineColor, Draw.getSurface());\n      Draw.blendPixel(p1, pixelColor);\n      Draw.blendPixel(p2, pixelColor);\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear();\n      this.rotateLine(320, 240, 200, rad);\n      /*\n      drawLine( new Point2D( 10, 20 ), new Point2D( 30, 40 ) );\n       drawLine( new Point2D( 200, 200 ), new Point2D( 500, 200 ) );\n      drawLine( new Point2D( 200, 300 ), new Point2D( 500, 300 ) );\n      drawLine( new Point2D( 200, 200 ), new Point2D( 200, 300 ) );\n      drawLine( new Point2D( 500, 200 ), new Point2D( 500, 300 ) );\n       drawLine( new Point2D( 200, 200 ), new Point2D( 500, 300 ) );\n      drawLine( new Point2D( 500, 200 ), new Point2D( 200, 300 ) );\n       drawLine( new Point2D( 500, 450 ), new Point2D( 200, 449 ) );\n      drawLine( new Point2D( 600, 100 ), new Point2D( 601, 400 ) );\n      */\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return LineApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/line/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar linevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar linevue_type_script_lang_js_LineComponent = Object(vue_class_component_esm["a" /* default */])(linevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(LineComponent, _VueWrapper);\n\n  function LineComponent() {\n    Object(classCallCheck["a" /* default */])(this, LineComponent);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(LineComponent).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(LineComponent, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_LineApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return LineComponent;\n}(vue_wrapper)) || linevue_type_script_lang_js_class;\n\n/* harmony default export */ var linevue_type_script_lang_js_ = (linevue_type_script_lang_js_LineComponent);\n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_linevue_type_script_lang_js_ = (linevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar line_component = Object(componentNormalizer["a" /* default */])(\n  primitives_linevue_type_script_lang_js_,\n  linevue_type_template_id_5f05ee90_render,\n  linevue_type_template_id_5f05ee90_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var primitives_line = (line_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/solid-triangle/index.vue?vue&type=template&id=0dd09940&\nvar solid_trianglevue_type_template_id_0dd09940_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar solid_trianglevue_type_template_id_0dd09940_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Solid Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of triangle polygon ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path")]),_vm._v(")")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue?vue&type=template&id=0dd09940&\n\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/app.js\n\n\n\n\n\n\n\n\n\nvar app_SolidTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(SolidTriangleApp, _App);\n\n  function SolidTriangleApp() {\n    Object(classCallCheck["a" /* default */])(this, SolidTriangleApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidTriangleApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(SolidTriangleApp, [{\n    key: "drawTriangles",\n    value: function drawTriangles(radAdjustment, posY, triangle) {\n      var triCount = 10;\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var pixelColor = new color_Color(255, 0, 0, 128);\n\n      for (var i = 0; i < triCount; i++) {\n        var rad = i * (Math.PI * 2) / triCount + radAdjustment;\n        var posX = Draw.surface.getWidth() / triCount * (i + 0.5);\n\n        for (var j = 0; j < 3; j++) {\n          translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n          translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n        }\n\n        Draw.triangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], Draw.color);\n\n        for (var _j = 0; _j < 3; _j++) {\n          Draw.blendPixel(translatedTriangle[_j], pixelColor);\n        }\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.color.set(32, 32, 255);\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear();\n      this.drawTriangles(rad, 150, [new point_2d_Point2D(0, -10), new point_2d_Point2D(-10, 10), new point_2d_Point2D(10, 0)]);\n      this.drawTriangles(rad, 200, [new point_2d_Point2D(0, -8), new point_2d_Point2D(7, 4), new point_2d_Point2D(10, 0)]);\n      this.drawTriangles(rad, 250, [new point_2d_Point2D(0, -10), new point_2d_Point2D(-30, 10), new point_2d_Point2D(30, 35)]);\n      this.endDrawing(true);\n    }\n  }]);\n\n  return SolidTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/solid-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar solid_trianglevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar solid_trianglevue_type_script_lang_js_SolidTriangle = Object(vue_class_component_esm["a" /* default */])(solid_trianglevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(SolidTriangle, _VueWrapper);\n\n  function SolidTriangle() {\n    Object(classCallCheck["a" /* default */])(this, SolidTriangle);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidTriangle).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(SolidTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_SolidTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return SolidTriangle;\n}(vue_wrapper)) || solid_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var solid_trianglevue_type_script_lang_js_ = (solid_trianglevue_type_script_lang_js_SolidTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_solid_trianglevue_type_script_lang_js_ = (solid_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar solid_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_solid_trianglevue_type_script_lang_js_,\n  solid_trianglevue_type_template_id_0dd09940_render,\n  solid_trianglevue_type_template_id_0dd09940_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var solid_triangle = (solid_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/textured-triangle/index.vue?vue&type=template&id=2e65df31&\nvar textured_trianglevue_type_template_id_2e65df31_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar textured_trianglevue_type_template_id_2e65df31_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Textured Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of textured triangle polygon ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path")]),_vm._v(")")])])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue?vue&type=template&id=2e65df31&\n\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_TexturedTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(TexturedTriangleApp, _App);\n\n  function TexturedTriangleApp(targetCanvasId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TexturedTriangleApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedTriangleApp).call(this, targetCanvasId));\n    _this.texture = new canvas_texture_CanvasTexture(\'./resources/apps/textured-triangle/smiley2.png\');\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(TexturedTriangleApp, [{\n    key: "drawTriangle",\n    value: function drawTriangle(radAdjustment, posX, posY, triangle, uv) {\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var rad = radAdjustment;\n\n      for (var j = 0; j < 3; j++) {\n        translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n        translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n      }\n\n      Draw.texturedTriangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], uv[0], uv[1], uv[2], this.texture);\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.color.set(32, 255, 32);\n      Draw.clear();\n      var s = 1 + Math.cos(rad) * 0.3; // Math.cos(rad);\n\n      this.drawTriangle(rad, 320, 300, [new point_2d_Point2D(s * 100, s * -100), new point_2d_Point2D(s * 100, s * 100), new point_2d_Point2D(s * -100, s * 100)], [new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0), new point_3d_Point3D(0, 1, 0)]);\n      this.drawTriangle(rad, 320, 150, [new point_2d_Point2D(s * 100, s * -100), new point_2d_Point2D(s * 100, s * 100), new point_2d_Point2D(s * -100, s * 100)], [new point_3d_Point3D(0.25, 0.75, 0), new point_3d_Point3D(0.5, 0.25, 0), new point_3d_Point3D(0.75, 0.75, 0)] // [ new Point3D( 1, 0, 0 ), new Point3D( 1, 1, 0 ), new Point3D( 0, 1, 0 ) ]\n      );\n      this.endDrawing(true);\n    }\n  }]);\n\n  return TexturedTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/textured-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar textured_trianglevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar textured_trianglevue_type_script_lang_js_TexturedTriangle = Object(vue_class_component_esm["a" /* default */])(textured_trianglevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(TexturedTriangle, _VueWrapper);\n\n  function TexturedTriangle() {\n    Object(classCallCheck["a" /* default */])(this, TexturedTriangle);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedTriangle).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TexturedTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_TexturedTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return TexturedTriangle;\n}(vue_wrapper)) || textured_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var textured_trianglevue_type_script_lang_js_ = (textured_trianglevue_type_script_lang_js_TexturedTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_textured_trianglevue_type_script_lang_js_ = (textured_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar textured_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_textured_trianglevue_type_script_lang_js_,\n  textured_trianglevue_type_template_id_2e65df31_render,\n  textured_trianglevue_type_template_id_2e65df31_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var textured_triangle = (textured_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./pages/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar lib_vue_loader_options_pagesvue_type_script_lang_js_dec, lib_vue_loader_options_pagesvue_type_script_lang_js_class, lib_vue_loader_options_pagesvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import * as _ from \'lodash\';\n\n\n // import Logo from \'~/components/Logo.vue\';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar lib_vue_loader_options_pagesvue_type_script_lang_js_IndexPage = (lib_vue_loader_options_pagesvue_type_script_lang_js_dec = Object(vue_class_component_esm["a" /* default */])({\n  components: {// Logo,\n  }\n}), lib_vue_loader_options_pagesvue_type_script_lang_js_dec(lib_vue_loader_options_pagesvue_type_script_lang_js_class = (lib_vue_loader_options_pagesvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(IndexPage, _Vue);\n\n  function IndexPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, IndexPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(IndexPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "sidebarActive", false);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeItem", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "curInstance", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "sidebarItems", [{\n      type: \'title\',\n      title: \'JS-VFX\',\n      id: \'JsvfxMain\',\n      classes: \'main\'\n    }, {\n      type: \'title\',\n      title: \'Effects\',\n      id: \'EffectsTitle\'\n    }, {\n      title: \'Bilinear Interpolation\',\n      component: bilinear_interpolator,\n      id: \'BilinearInterpolator\'\n    }, {\n      title: \'Bump Mapping\',\n      component: bump_mapping,\n      id: \'BumpMapping\'\n    }, {\n      title: \'Crepuscular Rays\',\n      component: crepuscular_rays,\n      id: \'CrepuscularRays\'\n    }, {\n      title: \'Fisheye Lens\',\n      component: fisheye_lens,\n      id: \'FisheyeLens\'\n    }, {\n      title: \'Metaballs\',\n      component: metaballs,\n      id: \'Metaballs\'\n    }, {\n      title: \'Plasma\',\n      component: plasma,\n      id: \'Plasma\'\n    }, {\n      title: \'Wave Distortion\',\n      component: wave_distortion,\n      id: \'WaveDistortion\'\n    }, {\n      type: \'title\',\n      title: \'3D\',\n      id: \'3DTitle\'\n    }, {\n      title: \'Flat Polygon\',\n      component: flat,\n      id: \'FlatPolygon\'\n    }, {\n      title: \'Flat Shading\',\n      component: flat_shading,\n      id: \'FlatShading\'\n    }, {\n      title: \'Gouraud Shading\',\n      component: gouraud_shading,\n      id: \'GouraudShading\'\n    }, {\n      title: \'Texture Mapping\',\n      component: texture_mapping,\n      id: \'TextureMapping\'\n    }, {\n      title: \'Vertex\',\n      component: vertex,\n      id: \'Vertex\'\n    }, {\n      title: \'Wireframe\',\n      component: wireframe,\n      id: \'Wireframe\'\n    }, {\n      type: \'title\',\n      title: \'Fractals\',\n      id: \'FractalsTitle\'\n    }, {\n      title: \'Mandelbrot Set\',\n      component: mandelbrot,\n      id: \'Mandelbrot\'\n    }, {\n      title: \'Sierpiński Triangle\',\n      component: sierpinski,\n      id: \'Sierpinski\'\n    }, {\n      type: \'title\',\n      title: \'Primitives\',\n      id: \'PrimitivesTitle\'\n    }, {\n      title: \'Interpolated Triangle\',\n      component: interpolated_triangle,\n      id: \'InterpolatedTriangle\'\n    }, {\n      title: \'Line\',\n      component: primitives_line,\n      id: \'LineComponent\'\n    }, {\n      title: \'Solid Triangle\',\n      component: solid_triangle,\n      id: \'SolidTriangle\'\n    }, {\n      title: \'Textured Triangle\',\n      component: textured_triangle,\n      id: \'TexturedTriangle\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(IndexPage, [{\n    key: "destroyCurApp",\n    value: function destroyCurApp() {\n      if (this.curInstance) {\n        this.curInstance.$destroy();\n        this.curInstance = null;\n      }\n\n      var el = this.$refs.appContainer;\n      el.childNodes.forEach(function (c) {\n        return el.removeChild(c);\n      });\n    }\n  }, {\n    key: "menuSelect",\n    value: function menuSelect(item) {\n      this.selectApp(item);\n\n      if (window.innerWidth <= 640 && this.sidebarActive) {\n        this.toggleSidebar();\n      }\n    }\n  }, {\n    key: "selectApp",\n    value: function selectApp(item) {\n      if (this.activeItem === item.id) {\n        return;\n      }\n\n      if (this.curInstance) {\n        this.destroyCurApp();\n      }\n\n      var containerEl = this.$refs.appContainer;\n      var el = document.createElement(\'div\');\n      var VueComponent = item.component;\n      containerEl.appendChild(el);\n      this.curInstance = new VueComponent();\n      this.curInstance.$mount(el);\n      this.activeItem = item.id;\n    }\n  }, {\n    key: "toggleSidebar",\n    value: function toggleSidebar() {\n      this.sidebarActive = !this.sidebarActive;\n    }\n  }, {\n    key: "mounted",\n    value: function mounted() {\n      this.selectApp({\n        title: \'Main\',\n        id: \'Main\',\n        component: main\n      });\n    }\n  }]);\n\n  return IndexPage;\n}(vue_runtime_esm["default"]), lib_vue_loader_options_pagesvue_type_script_lang_js_temp)) || lib_vue_loader_options_pagesvue_type_script_lang_js_class);\n/* harmony default export */ var lib_vue_loader_options_pagesvue_type_script_lang_js_ = (lib_vue_loader_options_pagesvue_type_script_lang_js_IndexPage);\n// CONCATENATED MODULE: ./pages/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var pagesvue_type_script_lang_js_ = (lib_vue_loader_options_pagesvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./pages/index.vue?vue&type=style&index=0&lang=scss&\nvar pagesvue_type_style_index_0_lang_scss_ = __webpack_require__(191);\n\n// CONCATENATED MODULE: ./pages/index.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar pages_component = Object(componentNormalizer["a" /* default */])(\n  pagesvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var pages = __webpack_exports__["default"] = (pages_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/ZGQ3YiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4vaW5kZXgudnVlP2ViNGEiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvbWFpbi9pbmRleC52dWU/MDE3MSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21haW4vaW5kZXgudnVlP2ExNGUiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9tYWluL2luZGV4LnZ1ZT80OGQ2Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2JpbGluZWFyLWludGVycG9sYXRvci9pbmRleC52dWU/OGNlOCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvdnVlLXdyYXBwZXIuanM/ZDNlOCIsIndlYnBhY2s6Ly8vLi9saWIvY29yZS9oZWxwZXIuanM/YjJhYSIsIndlYnBhY2s6Ly8vLi9saWIvY29yZS9jb2xvci5qcz82MDBhIiwid2VicGFjazovLy8uL2xpYi9jb3JlL3ZpcnR1YWwtc3VyZmFjZS5qcz9lZWYxIiwid2VicGFjazovLy8uL2xpYi9jb3JlL2xpbmUuanM/ODNhZiIsIndlYnBhY2s6Ly8vLi9saWIvY29yZS9wb2ludC0zZC5qcz9mY2Y5Iiwid2VicGFjazovLy8uL2xpYi9jb3JlL3ZlY3Rvci0zZC5qcz9lMmU3Iiwid2VicGFjazovLy8uL2xpYi9jb3JlL3BvaW50LTJkLmpzP2UxZTEiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvYmV0dGVyLXRyaWFuZ2xlLmpzPzAwOTgiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvYmV0dGVyLWludGVycG9sYXRlZC10cmlhbmdsZS5qcz8yNjQwIiwid2VicGFjazovLy8uL2xpYi9jb3JlL3RleHR1cmVkLXRyaWFuZ2xlLmpzP2RmMWQiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvZHJhdy5qcz9hNWUwIiwid2VicGFjazovLy8uL2xpYi9jb3JlL2FwcC5qcz8xYjQwIiwid2VicGFjazovLy8uL2xpYi9jb3JlL25vcm1hbGl6ZWQtY29sb3IuanM/YWVlNyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9iaWxpbmVhci1pbnRlcnBvbGF0b3IvYXBwLmpzPzJiMmIiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2JpbGluZWFyLWludGVycG9sYXRvci9pbmRleC52dWU/ZTg3NyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9iaWxpbmVhci1pbnRlcnBvbGF0b3IvaW5kZXgudnVlPzhhZTIiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvYmlsaW5lYXItaW50ZXJwb2xhdG9yL2luZGV4LnZ1ZT8xMWYyIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2J1bXAtbWFwcGluZy9pbmRleC52dWU/ZDgzYyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9idW1wLW1hcHBpbmcvYXBwLmpzP2UxYzEiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvdGV4dHVyZS5qcz9hMzYyIiwid2VicGFjazovLy8uL2xpYi9jb3JlL2NhbnZhcy10ZXh0dXJlLmpzPzlhZDMiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2J1bXAtbWFwcGluZy9pbmRleC52dWU/OTgyZiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9idW1wLW1hcHBpbmcvaW5kZXgudnVlPzAzMjAiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvYnVtcC1tYXBwaW5nL2luZGV4LnZ1ZT9hZTVlIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2NyZXB1c2N1bGFyLXJheXMvaW5kZXgudnVlP2I1NDIiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvY3JlcHVzY3VsYXItcmF5cy9hcHAuanM/ZjQ4MiIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvY3JlcHVzY3VsYXItcmF5cy9pbmRleC52dWU/YjhlMyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9jcmVwdXNjdWxhci1yYXlzL2luZGV4LnZ1ZT84MWEzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2NyZXB1c2N1bGFyLXJheXMvaW5kZXgudnVlPzJmODYiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvZmlzaGV5ZS1sZW5zL2luZGV4LnZ1ZT9hM2ZkIiwid2VicGFjazovLy8uL2xpYi9jb3JlL2VtcHR5LXRleHR1cmUuanM/MTQ3NCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9maXNoZXllLWxlbnMvYXBwLmpzPzlkOWEiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2Zpc2hleWUtbGVucy9pbmRleC52dWU/MDI0YSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9maXNoZXllLWxlbnMvaW5kZXgudnVlPzI0YTUiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvZmlzaGV5ZS1sZW5zL2luZGV4LnZ1ZT9kOGU2Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL21ldGFiYWxscy9pbmRleC52dWU/ZTRiMiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9tZXRhYmFsbHMvYXBwLmpzPzY3MjgiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL21ldGFiYWxscy9pbmRleC52dWU/MTBjYiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9tZXRhYmFsbHMvaW5kZXgudnVlP2EzZGMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvbWV0YWJhbGxzL2luZGV4LnZ1ZT80ZmM3Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL3BsYXNtYS9pbmRleC52dWU/ODM4ZCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9wbGFzbWEvYXBwLmpzPzYxYWEiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL3BsYXNtYS9pbmRleC52dWU/MTg0NSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9wbGFzbWEvaW5kZXgudnVlPzA4N2MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvcGxhc21hL2luZGV4LnZ1ZT80YWFhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL3dhdmUtZGlzdG9ydGlvbi9pbmRleC52dWU/ZTM0MSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy93YXZlLWRpc3RvcnRpb24vYXBwLmpzPzdmZWIiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL3dhdmUtZGlzdG9ydGlvbi9pbmRleC52dWU/NDQzYSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy93YXZlLWRpc3RvcnRpb24vaW5kZXgudnVlP2E3NzMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvd2F2ZS1kaXN0b3J0aW9uL2luZGV4LnZ1ZT83NjFlIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC9mbGF0L2luZGV4LnZ1ZT9jNTFlIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC92ZXJ0ZXgvaW5kZXgudnVlP2I0NzMiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvY2FudmFzLXRleHR1cmUtY29udGFpbmVyLmpzP2FjZjUiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvaW50ZXJwb2xhdGVkLXRyaWFuZ2xlLmpzPzgwMTYiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvbWF0cml4LmpzPzdkMDMiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvc3VyZmFjZS5qcz8wOTlhIiwid2VicGFjazovLy8uL2xpYi9jb3JlL3RyaWFuZ2xlLmpzP2I1ZjYiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvcmUvaW5kZXguanM/ZjI1ZCIsIndlYnBhY2s6Ly8vLi9saWIvM2QvY2FtZXJhL2NhbWVyYS5qcz8yNWRlIiwid2VicGFjazovLy8uL2xpYi8zZC9jYW1lcmEvbW92YWJsZS1jYW1lcmEuanM/YWQyMSIsIndlYnBhY2s6Ly8vLi9saWIvM2QvY2FtZXJhL3NpbXBsZS1jYW1lcmEuanM/NDJjNiIsIndlYnBhY2s6Ly8vLi9saWIvM2QvY2FtZXJhL2luZGV4LmpzPzJjMGQiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL2xpZ2h0L2xpZ2h0LmpzPzI5MzYiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL2xpZ2h0L2xpZ2h0LWRhdGEuanM/NzkwYyIsIndlYnBhY2s6Ly8vLi9saWIvM2QvbGlnaHQvb21uaS1saWdodC5qcz82ZmRjIiwid2VicGFjazovLy8uL2xpYi8zZC9saWdodC9pbmRleC5qcz80ZWYwIiwid2VicGFjazovLy8uL2xpYi8zZC92ZXJ0ZXguanM/NTdmOSIsIndlYnBhY2s6Ly8vLi9saWIvM2QvZWRnZS5qcz9mMmMxIiwid2VicGFjazovLy8uL2xpYi8zZC9tZXNoLmpzPzc4OTUiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL21hdGVyaWFsL21hdGVyaWFsLmpzPzA1NzQiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL21hdGVyaWFsL3NvbGlkLWNvbG9yLW1hdGVyaWFsLmpzPzBkNGYiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL21hdGVyaWFsL3RleHR1cmVkLW1hdGVyaWFsLmpzPzc2OTkiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL21hdGVyaWFsL2luZGV4LmpzPzA2MmEiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL2ZhY2UuanM/YmNkMCIsIndlYnBhY2s6Ly8vLi9saWIvM2QvZmFjdG9yeS9jdWJvaWQtZmFjdG9yeS5qcz83NTAxIiwid2VicGFjazovLy8uL2xpYi8zZC9mYWN0b3J5L29iai1mYWN0b3J5LmpzPzdmNzQiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL2ZhY3Rvcnkvc3BoZXJlLWZhY3RvcnkuanM/ZTY2MyIsIndlYnBhY2s6Ly8vLi9saWIvM2QvZmFjdG9yeS90b3J1cy1mYWN0b3J5LmpzPzk5NTciLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL2ZhY3RvcnkvaW5kZXguanM/NjM1NyIsIndlYnBhY2s6Ly8vLi9saWIvM2QvcmVuZGVyZXIvcmVuZGVyZXIuanM/MWUwNiIsIndlYnBhY2s6Ly8vLi9saWIvM2QvcmVuZGVyZXIvZmxhdC1yZW5kZXJlci5qcz8zNzFlIiwid2VicGFjazovLy8uL2xpYi8zZC9yZW5kZXJlci9mbGF0LXNoYWRlci1yZW5kZXJlci5qcz9mZWU0Iiwid2VicGFjazovLy8uL2xpYi8zZC9yZW5kZXJlci9nb3VyYXVkLXNoYWRlci1yZW5kZXJlci5qcz9mZmQ3Iiwid2VicGFjazovLy8uL2xpYi8zZC9yZW5kZXJlci90ZXh0dXJlLXJlbmRlcmVyLmpzPzA4MjUiLCJ3ZWJwYWNrOi8vLy4vbGliLzNkL3JlbmRlcmVyL3ZlcnRleC1yZW5kZXJlci5qcz81MDU0Iiwid2VicGFjazovLy8uL2xpYi8zZC9yZW5kZXJlci93aXJlZnJhbWUtcmVuZGVyZXIuanM/Mjk4ZCIsIndlYnBhY2s6Ly8vLi9saWIvM2QvcmVuZGVyZXIvaW5kZXguanM/ODk4ZiIsIndlYnBhY2s6Ly8vLi9saWIvM2QvYW1iaWVuY2UuanM/ZWVhNiIsIndlYnBhY2s6Ly8vLi9saWIvM2QvZmFjZS1sb29rdXAuanM/ZTVmNiIsIndlYnBhY2s6Ly8vLi9saWIvM2QvZmFjZS1zb3J0LXBpbGUuanM/NTE0ZCIsIndlYnBhY2s6Ly8vLi9saWIvM2Qvc2NlbmUuanM/YzE0ZSIsIndlYnBhY2s6Ly8vLi9saWIvM2QvaW5kZXguanM/ZGZkMyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvdmVydGV4L2FwcC5qcz9jNzAwIiwid2VicGFjazovLy9jb21wb25lbnRzL2FwcHMvM2QvdmVydGV4L2luZGV4LnZ1ZT8wZTdmIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC92ZXJ0ZXgvaW5kZXgudnVlP2NmODkiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL3ZlcnRleC9pbmRleC52dWU/MDIxOCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvZmxhdC9hcHAuanM/NmY4MiIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9hcHBzLzNkL2ZsYXQvaW5kZXgudnVlPzg2OWMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL2ZsYXQvaW5kZXgudnVlPzhiMzciLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL2ZsYXQvaW5kZXgudnVlPzA2NzUiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL2ZsYXQtc2hhZGluZy9pbmRleC52dWU/NzlkZiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvZmxhdC1zaGFkaW5nL2FwcC5qcz9hNWVhIiwid2VicGFjazovLy9jb21wb25lbnRzL2FwcHMvM2QvZmxhdC1zaGFkaW5nL2luZGV4LnZ1ZT8xMmJiIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC9mbGF0LXNoYWRpbmcvaW5kZXgudnVlP2RhMGQiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL2ZsYXQtc2hhZGluZy9pbmRleC52dWU/NjRjMSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvZ291cmF1ZC1zaGFkaW5nL2luZGV4LnZ1ZT81MDk4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC9nb3VyYXVkLXNoYWRpbmcvYXBwLmpzPzgyMDciLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy8zZC9nb3VyYXVkLXNoYWRpbmcvaW5kZXgudnVlPzQzNjciLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL2dvdXJhdWQtc2hhZGluZy9pbmRleC52dWU/ZTgxZCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvZ291cmF1ZC1zaGFkaW5nL2luZGV4LnZ1ZT9mZWUxIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC90ZXh0dXJlLW1hcHBpbmcvaW5kZXgudnVlPzg1MGMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL3RleHR1cmUtbWFwcGluZy9hcHAuanM/YjE3MSIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9hcHBzLzNkL3RleHR1cmUtbWFwcGluZy9pbmRleC52dWU/ZWY3ZiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2QvdGV4dHVyZS1tYXBwaW5nL2luZGV4LnZ1ZT9iZDFjIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC90ZXh0dXJlLW1hcHBpbmcvaW5kZXgudnVlP2Y0MTEiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL3dpcmVmcmFtZS9pbmRleC52dWU/NjU0YiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvM2Qvd2lyZWZyYW1lL2FwcC5qcz9kMTc0Iiwid2VicGFjazovLy9jb21wb25lbnRzL2FwcHMvM2Qvd2lyZWZyYW1lL2luZGV4LnZ1ZT9iMmVmIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy8zZC93aXJlZnJhbWUvaW5kZXgudnVlPzYwOTIiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzLzNkL3dpcmVmcmFtZS9pbmRleC52dWU/ZjkwMSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZnJhY3RhbHMvbWFuZGVsYnJvdC9pbmRleC52dWU/Yjg5OSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvZnJhY3RhbHMvbWFuZGVsYnJvdC9hcHAuanM/YWFjZiIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL21hbmRlbGJyb3QvaW5kZXgudnVlP2MxYmMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL21hbmRlbGJyb3QvaW5kZXgudnVlP2I0ZWIiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL21hbmRlbGJyb3QvaW5kZXgudnVlPzJjZjkiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL3NpZXJwaW5za2kvaW5kZXgudnVlP2FhNzIiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL3NpZXJwaW5za2kvYXBwLmpzPzhkYWUiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9mcmFjdGFscy9zaWVycGluc2tpL2luZGV4LnZ1ZT80YWRiIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9mcmFjdGFscy9zaWVycGluc2tpL2luZGV4LnZ1ZT9lZTEwIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9mcmFjdGFscy9zaWVycGluc2tpL2luZGV4LnZ1ZT80MWVhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2ludGVycG9sYXRlZC10cmlhbmdsZS9pbmRleC52dWU/NWI1NiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy9pbnRlcnBvbGF0ZWQtdHJpYW5nbGUvYXBwLmpzP2EzNzAiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2ludGVycG9sYXRlZC10cmlhbmdsZS9pbmRleC52dWU/NTQyYSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy9pbnRlcnBvbGF0ZWQtdHJpYW5nbGUvaW5kZXgudnVlPzYyNWUiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL3ByaW1pdGl2ZXMvaW50ZXJwb2xhdGVkLXRyaWFuZ2xlL2luZGV4LnZ1ZT83NzYzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2xpbmUvaW5kZXgudnVlPzYyNGEiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL3ByaW1pdGl2ZXMvbGluZS9hcHAuanM/ZTViMCIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9hcHBzL3ByaW1pdGl2ZXMvbGluZS9pbmRleC52dWU/NmU2YyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy9saW5lL2luZGV4LnZ1ZT81ZWIzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2xpbmUvaW5kZXgudnVlPzQ3NWYiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL3ByaW1pdGl2ZXMvc29saWQtdHJpYW5nbGUvaW5kZXgudnVlPzIxYmEiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHBzL3ByaW1pdGl2ZXMvc29saWQtdHJpYW5nbGUvYXBwLmpzPzM4MjQiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3NvbGlkLXRyaWFuZ2xlL2luZGV4LnZ1ZT9jZmRmIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3NvbGlkLXRyaWFuZ2xlL2luZGV4LnZ1ZT9iZmIzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3NvbGlkLXRyaWFuZ2xlL2luZGV4LnZ1ZT9mYTNmIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3RleHR1cmVkLXRyaWFuZ2xlL2luZGV4LnZ1ZT9iOGRiIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3RleHR1cmVkLXRyaWFuZ2xlL2FwcC5qcz9jNTAzIiwid2VicGFjazovLy9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy90ZXh0dXJlZC10cmlhbmdsZS9pbmRleC52dWU/ZDFlMSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy90ZXh0dXJlZC10cmlhbmdsZS9pbmRleC52dWU/YTYxYyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy90ZXh0dXJlZC10cmlhbmdsZS9pbmRleC52dWU/ZjM0YiIsIndlYnBhY2s6Ly8vcGFnZXMvaW5kZXgudnVlPzMzZTciLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvaW5kZXgudnVlP2ZmNTciLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvaW5kZXgudnVlP2I3ZDMiXSwibmFtZXMiOlsiVnVlV3JhcHBlciIsIkNvbXBvbmVudCIsIkRhdGUiLCJzdGFydCIsInN0b3AiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJhcHAiLCJFcnJvciIsImluc3RhbnRpYXRlQXBwIiwiaW50ZXJ2YWxGcmVxdWVuY3kiLCJzZXRJbnRlcnZhbCIsImlzRHJhd2luZyIsImlzUGF1c2VkIiwidGljayIsIlZ1ZSIsIkhlbHBlciIsImdldENhbnZhc0Nvb3JkaW5hdGVzIiwiZXZlbnQiLCJlbGVtZW50SUQiLCJ0b3RhbE9mZnNldFgiLCJ0b3RhbE9mZnNldFkiLCJjYW52YXNYIiwiY2FudmFzWSIsImVsZW1lbnQiLCJnZXRFbGVtZW50IiwiaW5pdGlhbEVsIiwib2Zmc2V0TGVmdCIsInNjcm9sbExlZnQiLCJvZmZzZXRUb3AiLCJzY3JvbGxUb3AiLCJvZmZzZXRQYXJlbnQiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsIngiLCJ5IiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnRUeXBlIiwiZG9jdW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZ2V0RWxlbWVudEJ5SWQiLCJleHRlbmQiLCJvYmplY3QiLCJfIiwibG9hZCIsInVybCIsInN1Y2Nlc3NGdW5jdGlvbiIsImVycm9yRnVuY3Rpb24iLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbmxvYWQiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwic2VuZCIsImNyZWF0ZTJEQXJyYXkiLCJzaXplQSIsInNpemVCIiwiYSIsIkFycmF5IiwiaSIsIkNvbG9yIiwiciIsImciLCJiIiwic2V0Iiwibm9ybWFsaXplZENvbG9yIiwiY29sb3IiLCJza2lwU2FmZXR5Iiwicm91bmQiLCJjbGFtcCIsInRtcFIiLCJ0bXBHIiwidG1wQiIsInRtcEEiLCJ2YWx1ZSIsImRpdmlzb3IiLCJjb2xvckEiLCJjb2xvckIiLCJzdGVwQ291bnQiLCJNYXRoIiwibWF4IiwibWluIiwiVmlydHVhbFN1cmZhY2UiLCJkYXRhIiwiZG9DbGVhciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiY2xlYXIiLCJwb3MiLCJkZXN0Q29sb3IiLCJwdHIiLCJtYXhQdHIiLCJsZW5ndGgiLCJMaW5lIiwiY2FsY3VsYXRlIiwicDEiLCJwMiIsInZhcmlhYmxlcyIsInB4MSIsInB5MSIsInB4MiIsInB5MiIsImRvbmUiLCJweFN0YXJ0IiwibGFzdFBsb3RYIiwidHJhdmVyc2VkIiwidHJhdmVyc2VMZW5ndGgiLCJkeCIsImFicyIsImR5Iiwic3FydCIsImVyciIsImUyIiwic3giLCJzeSIsInN0ZXAiLCJsaW5lIiwiZHJhdyIsInN1cmZhY2UiLCJzeDQiLCJnZXREYXRhIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJsaW5lQWRkIiwiY29sUiIsImNvbEciLCJjb2xCIiwiUG9pbnQzRCIsInoiLCJwIiwidHgiLCJ0eSIsInR6IiwiZCIsInBvaW50IiwicDMiLCJtaW5YIiwibWluWSIsIm1pbloiLCJwb2ludEEiLCJwb2ludEIiLCJWZWN0b3IzRCIsInhkIiwieWQiLCJ6ZCIsImRvdCIsInZlY3RvciIsInZlY3Rvckxlbmd0aCIsInV4IiwidXkiLCJ1eiIsInZ4IiwidnkiLCJ2eiIsIlBvaW50MkQiLCJ2YWwiLCJCZXR0ZXJUcmlhbmdsZSIsInNvcnRQb2ludHMiLCJsaW5lMTIiLCJsaW5lMTMiLCJsaW5lMjMiLCJkcmF3SGFsZiIsImxpbmVBIiwibGluZUIiLCJzZWNvbmRIYWxmIiwibWF4WCIsInN3YXAiLCJCZXR0ZXJJbnRlcnBvbGF0ZWRUcmlhbmdsZSIsImMxIiwiYzIiLCJjMyIsImMxYzIiLCJjMWMzIiwiYzJjMyIsImNvbFNsaWRlciIsImNMZWZ0IiwiY0xlZnQyIiwiY1JpZ2h0IiwiaW50ZXJwb2xhdGUiLCJkaXN0YW5jZSIsIm11bHRpcGx5QnlWYWwiLCJhZGQiLCJjb2xMZWZ0IiwiY29sUmlnaHQiLCJjb2xBZGRlckxlZnQiLCJjb2xBZGRlclJpZ2h0Iiwic3VidHJhY3QiLCJkaXZpZGVCeVZhbCIsIlRleHR1cmVkVHJpYW5nbGUiLCJ1djEiLCJ1djIiLCJ1djMiLCJ1dk11bCIsInV2MTIiLCJ1djEzIiwidXYyMyIsInV2TGVmdCIsInV2UmlnaHQiLCJ1dkxlZnQyIiwidXZQb3MiLCJ1dlNsaWRlciIsInVkIiwicGQiLCJ0ZXh0dXJlIiwibXVsdGlwbHkiLCJ1djEyTGVuZ3RoIiwidXYxM0xlbmd0aCIsInV2MjNMZW5ndGgiLCJyZXN1bHRMaW5lIiwidXZBZGRlckxlZnQiLCJ1dkFkZGVyUmlnaHQiLCJ1dkxlZnRMZW5ndGgiLCJ1dlJpZ2h0TGVuZ3RoIiwidXZEYXRhIiwidXZXaWR0aCIsInV2WCIsInV2WSIsInV2UHRyIiwiRHJhdyIsImJnQ29sb3IiLCJzZXRTdXJmYWNlIiwiZ2V0U3VyZmFjZSIsImJlZ2luUGFpbnQiLCJlbmRQYWludCIsInNldFBpeGVsIiwiYmxlbmRQaXhlbCIsInB0cnBwIiwicHRycDIiLCJjb2xNdWwiLCJyZCIsImdkIiwiYmQiLCJibGVuZFZhbHVlIiwiYmdWYWx1ZSIsImZnVmFsdWUiLCJvcGFjaXR5IiwidHJpYW5nbGUiLCJpbnRlcnBvbGF0ZWRUcmlhbmdsZSIsInRleHR1cmVkVHJpYW5nbGUiLCJBcHAiLCJjYW52YXNFbGVtZW50SWQiLCJkcmF3aW5nIiwicGF1c2VkIiwic3RhcnRUaW1lIiwiY2FudmFzSWQiLCJjYW52YXMiLCJjYW52YXNDb250ZXh0IiwiZ2V0Q29udGV4dCIsImNhbnZhc1BpeGVscyIsImNyZWF0ZUltYWdlRGF0YSIsInZpcnR1YWxTdXJmYWNlIiwicHVzaFRvQ2FudmFzIiwicHV0SW1hZ2VEYXRhIiwiTm9ybWFsaXplZENvbG9yIiwiZ2V0Tm9ybWFsaXplZENvbG9yIiwiaHN2VG9SZ2IiLCJodWUiLCJzYXR1cmF0aW9uIiwidGFyZ2V0Q29sb3IiLCJzZWN0b3IiLCJmbG9vcmVkSHVlIiwiZmxvb3IiLCJmYWN0b3JpYWwiLCJxIiwidCIsIkJpbGluZWFySW50ZXJwb2xhdG9yQXBwIiwidGFyZ2V0Q2FudmFzSWQiLCJxMTEiLCJxMTIiLCJxMjEiLCJxMjIiLCJpbml0aWFsaXplTG9va3VwVGFibGUiLCJzdGFydERyYXdpbmciLCJ3aWR0aE1pbnVzIiwiaGVpZ2h0TWludXMiLCJjYW52YXNEYXRhIiwieDEiLCJ4MiIsInkxIiwieTIiLCJub3JtYWxDb2xvciIsIngyTWludXNYIiwieTJNaW51c1kiLCJ4TWludXNYMSIsInlNaW51c1kxIiwibG9va3VwVGFibGUiLCJlbmREcmF3aW5nIiwiYXJndW1lbnRzIiwidGhpc0RpbWVuc2lvbiIsInNsaWNlZEFyZ3VtZW50cyIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsInNoaWZ0IiwiY3JlYXRlTXVsdGlkaW1lbnNpb25hbEFycmF5Iiwib25lRGl2WDJNaW51c1gxTXVsWTJNaW51c1kxIiwiQnVtcE1hcHBpbmdBcHAiLCJoZWlnaHRNYXBUZXh0dXJlIiwibGlnaHRQb3NpdGlvbiIsInByZWNhbGN1bGF0ZWQiLCJwcmVjYWxjdWxhdGVkTm9ybWFscyIsImVtYm9zc0RlcHRoIiwicHJlY2FsY3VsYXRlTm9ybWFscyIsInBvaW50SGVpZ2h0IiwicG9pbnRIZWlnaHRSaWdodCIsInBvaW50SGVpZ2h0QWJvdmUiLCJwaHBoYURpZmZlcmVuY2UiLCJwaHBockRpZmZlcmVuY2UiLCJwaXhlbHMiLCJnZXRQaXhlbHMiLCJhYm92ZVB0ciIsInNpbmdsZVB0ciIsImJ1bXBOb3JtYWwiLCJjYWxjdWxhdGVOb3JtYWwiLCJub3JtYWxpemUiLCJpc0xvYWRlZCIsImhhc1ByZWNhbGN1bGF0ZWQiLCJ0ZXh0dXJlUGl4ZWxzIiwidGV4dHVyZURhdGEiLCJwcmVjYWxjIiwicmVhbExpZ2h0UG9zIiwibGlnaHRQb3MiLCJsaWdodFBvc1pEaXYyIiwiYnVtcERvdCIsImRpc3RNdWwiLCJkZXB0aCIsImxvYWRlZCIsIlRleHR1cmUiLCJjb250ZXh0IiwiZGVzdFZpcnR1YWxTdXJmYWNlIiwicG9zWCIsInBvc1kiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwic291cmNlVGV4dHVyZSIsImRlc3REYXRhIiwiZGVzdFdpZHRoIiwiZGVzdEhlaWdodCIsInRleHR1cmVXaWR0aCIsInRleHR1cmVIZWlnaHQiLCJkZXN0UHRyIiwic291cmNlUHRyIiwic291cmNlT2Zmc2V0QWRkZXIiLCJkZXN0T2Zmc2V0QWRkZXIiLCJzb3VyY2VEYXRhIiwiZmdBbHBoYSIsIkNhbnZhc1RleHR1cmUiLCJzcmMiLCJjcmVhdGUiLCJpbWFnZSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJ3YXNEcmF3biIsImRyYXdJbWFnZSIsImdldEltYWdlRGF0YSIsIkNyZXB1c2N1bGFyUmF5c0FwcCIsImJhY2tncm91bmRJbWFnZVVybCIsIm1hc2tJbWFnZVVybCIsImJnSW1hZ2UiLCJtYXNrSW1hZ2UiLCJtYXNrSW1hZ2VQb3NpdGlvbiIsImRyYXdNYXNrIiwiZHJhd0JhY2tncm91bmQiLCJkaXJ0eVN1cmZhY2UiLCJkcmF3QXJlYSIsInRvdGFsRHJhd1RpbWUiLCJ0b3RhbERyYXdDb3VudCIsImxpZ2h0cyIsImRyYXdEZXN0IiwiYWN0aXZlIiwiZHJhd0xpZ2h0IiwicG9zaXRpb24iLCJwcm9jZXNzUmF5cyIsImxpZ2h0T2JqZWN0IiwiaW1hZ2VVcmwiLCJwdXNoIiwibGlnaHQiLCJkZXN0Iiwic291cmNlIiwiZGF0YVB0ciIsInNhbXBsZXMiLCJ3ZWlnaHQiLCJkZWNheSIsImV4cG9zdXJlIiwibGlnaHRQb3NYIiwibGlnaHRQb3NZIiwibm9ybWFsU2FtcGxlc0J5RGVuc2l0eSIsImRlbnNpdHkiLCJjdXJQb3NYIiwiY3VyUG9zWSIsImRlbHRhVGV4WCIsImRlbHRhVGV4WSIsImluaXRpYWxSIiwiaW5pdGlhbEciLCJpbml0aWFsQiIsImlsbHVtaW5hdGlvbkRlY2F5IiwiY3VyUHRyIiwiY3VyUiIsImN1ckciLCJjdXJCIiwiY3VyTXVsIiwiRW1wdHlUZXh0dXJlIiwiRmlzaGV5ZUxlbnNBcHAiLCJiZ0ltYWdlVXJsIiwidGV4dHVyZXMiLCJsZW5zZXMiLCJsZW5zIiwiY3VyU291cmNlQ2FudmFzIiwiY3VyRGVzdENhbnZhcyIsImRyYXdMZW5zIiwicmFkaXVzIiwiZGVzdENhbnZhc1RleHR1cmUiLCJzb3VyY2VDYW52YXNUZXh0dXJlIiwic291cmNlV2lkdGgiLCJoYWxmUmFkaXVzIiwibnkiLCJueTIiLCJueCIsInRoZXRhIiwiYXRhbjIiLCJmbngiLCJjb3MiLCJmbnkiLCJzaW4iLCJweCIsInB5IiwiYmdQdHIiLCJNZXRhYmFsbHNBcHAiLCJiYWxsQ291bnQiLCJtaW5UaHJlc2hvbGQiLCJtYXhUaHJlc2hvbGQiLCJ0aHJlc2hvbGRNaW4iLCJ0aHJlc2hvbGRNYXgiLCJpbml0QmFsbHMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInJhbmRvbSIsInBvd2VyIiwiYmFsbHMiLCJyYWRpdXNUaW1lc1Bvd2VyIiwiZGlyZWN0aW9uIiwidGludCIsInhEaWZmIiwieURpZmYiLCJzaW5lIiwiUEkiLCJtIiwiUGxhc21hQXBwIiwiQ09MT1JfQ09VTlQiLCJvZmZzZXQiLCJjYWxjdWxhdGVQbGFzbWEiLCJjYWxjdWxhdGVQYWxldHRlIiwicHRyTWF4IiwicHJlY2FsY1B0ciIsInByZWNhbGNUYWJsZSIsInByZWNhbGNDb2xvcnMiLCJjb2xvckNvdW50IiwicHJlY2FsY1ZhbCIsInByZWNhbGNDb2wiLCJkZWdyZWVzIiwiZGVncmVlT2Zmc2V0Iiwibm9ybWFsIiwiY29sIiwiZmluYWxDb2xvciIsImdldENvbG9yIiwidGFuIiwiV2F2ZURpc3RvcnRpb25BcHAiLCJhbXBsaXR1ZGUiLCJmcmVxdWVuY3kiLCJwaGFzZSIsInNvdXJjZUhlaWdodCIsInBlcmlvZEluY3JlbWVudCIsImRpc3BsYWNlbWVudFkiLCJkaXNwbGFjZW1lbnRYIiwicGVyaW9kIiwicGVyaW9kWSIsInBlcmlvZFgiLCJ4cCIsInlwIiwiQ2FudmFzVGV4dHVyZUNvbnRhaW5lciIsInRleHR1cmVOYW1lIiwiZXhpc3RzIiwicmVtb3ZlIiwiY3QiLCJtZSIsImV2ZW50SW1hZ2VMb2FkZWQiLCJzcmNSZWZlcmVuY2VPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImRlc3Ryb3kiLCJnZXQiLCJrZXkiLCJJbnRlcnBvbGF0ZWRUcmlhbmdsZSIsImNJbnRMIiwiY0ludFIiLCJjYWxjdWxhdGVCb3VuZHMiLCJyU2l6ZUFkZGVyIiwibFNpemVBZGRlciIsImxTaXplQWRkZXIyIiwickNvbEFkZGVyIiwibENvbEFkZGVyIiwibENvbEFkZGVyMiIsImJvdW5kcyIsInJ4IiwiZHJhd0hhbGZUcmlhbmdsZSIsImxBZGRlciIsInJBZGRlciIsImx4IiwiY29sTGVmdEFkZGVyIiwiY29sUmlnaHRBZGRlciIsIm1pbkxlZnRYIiwibWF4TGVmdFgiLCJtaW5SaWdodFgiLCJtYXhSaWdodFgiLCJjb2xBZGRlciIsIk1hdHJpeCIsInJlc2l6ZSIsIm1hdHJpeCIsInNvdXJjZVBvaW50IiwidGFyZ2V0UG9pbnQiLCJzaXplIiwiU3VyZmFjZSIsImltYWdlRGF0YSIsIlRyaWFuZ2xlIiwiQ2FtZXJhIiwiTW92YWJsZUNhbWVyYSIsIm9yaWVudGF0aW9uIiwidmlld2VyUG9zaXRpb24iLCJ2ZXJ0aWNlcyIsImNhbVBvcyIsImwiLCJjb3NYIiwic2luWCIsImNvc1kiLCJzaW5ZIiwiY29zWiIsInNpbloiLCJ2ZXJ0ZXgiLCJ0cmFuc2Zvcm1lZCIsImNhbWVyYVRyYW5zZm9ybWVkIiwic291cmNlTWludXNDYW1YIiwic291cmNlTWludXNDYW1ZIiwic291cmNlTWludXNDYW1aIiwiY29zWlNvdXJjZU1pbnVzQ2FtWCIsInNpblpTb3VyY2VNaW51c0NhbVgiLCJjb3NaU291cmNlTWludXNDYW1ZIiwic2luWlNvdXJjZU1pbnVzQ2FtWSIsImNvc1lTb3VyY2VNaW51c0NhbVoiLCJzaW5Zc2luWmNvc1pDYW1ZQ2FtWCIsImNhbWVyYVByb2plY3RlZCIsInpEaXYiLCJTaW1wbGVDYW1lcmEiLCJwZXJzcGVjdGl2ZURlcHRoIiwiTGlnaHQiLCJ2aWV3ZXJEaXJlY3Rpb24iLCJub3JtYWwzRFBvc2l0aW9uIiwidGFyZ2V0TGlnaHREYXRhIiwiTGlnaHREYXRhIiwic3BlY3VsYXJDb2xvciIsImRpZmZ1c2VDb2xvciIsImFtYmllbmNlIiwiT21uaUxpZ2h0IiwiZGlmZnVzZVBvd2VyIiwic3BlY3VsYXJIYXJkbmVzcyIsInNwZWN1bGFyUG93ZXIiLCJsaWdodERpcmVjdGlvbiIsIk5kb3RMIiwiaW50ZW5zaXR5IiwiaW50ZW5zaXR5UG93ZXJEaXN0YW5jZSIsIk5kb3RIIiwicG93IiwiVmVydGV4Iiwib3JpZ2luIiwibGlnaHREYXRhIiwiZmFjZXMiLCJFZGdlIiwiTWVzaCIsIm5hbWUiLCJ2aXNpYmxlIiwiZWRnZXMiLCJzY2FsZSIsInJvdGF0aW9uIiwiZWRnZSIsImZhY2UiLCJmYWNlTm8iLCJvcmRlciIsImMiLCJvdiIsInYiLCJ5MyIsInoyIiwieDMiLCJyb3RhdGVNYXRyaXgiLCJzY2FsZU1hdHJpeCIsInRyYW5zbGF0ZSIsImNhbWVyYSIsInRyYW5zZm9ybSIsInByb2plY3QiLCJzZXRUb0NlbnRlciIsInZlcnRleEZhY2VzIiwiZmFjZUxlbmd0aCIsIm5vcm1hbFZlcnRleCIsImoiLCJzY2VuZSIsImxpZ2h0Q291bnQiLCJmYWNlQ291bnQiLCJyZXNldCIsImNhbGN1bGF0ZUxpZ2h0RGF0YSIsInZlcnRleENvdW50IiwidmVydGV4TG9va3VwIiwiY2xlYXJFZGdlcyIsImFkZEVkZ2UiLCJNYXRlcmlhbCIsIlNvbGlkQ29sb3JNYXRlcmlhbCIsIlRleHR1cmVkTWF0ZXJpYWwiLCJGYWNlIiwibWF0ZXJpYWwiLCJ1dkEiLCJ1dkIiLCJ1dkMiLCJDdWJvaWRGYWN0b3J5IiwiZ2VuZXJhdGUiLCJjdWJvaWQiLCJnZW5lcmF0ZVZlcnRpY2VzIiwiZ2VuZXJhdGVFZGdlcyIsImdlbmVyYXRlRmFjZXMiLCJsMiIsImgyIiwiZDIiLCJhZGRWZXJ0ZXgiLCJtYXRlcmlhbDIiLCJhZGRGYWNlIiwiT2JqRmFjdG9yeSIsIm1lc2giLCJwcm9jZXNzIiwiZmFjZVNvcnRQaWxlIiwicmVJbml0Iiwib2JqRmlsZURhdGEiLCJsaW5lcyIsInNwbGl0IiwidmVydGV4VGV4dHVyZXMiLCJwYXJhbWV0ZXJzIiwiZ2V0TGluZVBhcmFtZXRlcnMiLCJ0cmltIiwic2V0TmFtZSIsImFkZFZlcnRleFRleHR1cmVDb29yZGluYXRlIiwiYnVpbGRXaXJlZnJhbWUiLCJpbml0aWFsUGFyYW1ldGVycyIsInNwbGl0RmFjZVBhcmFtZXRlciIsInZ0IiwiZiIsInBhcmFtZXRlciIsInZhbHVlcyIsInZuIiwicGFyc2VJbnQiLCJTcGhlcmVGYWN0b3J5IiwicmFkaXVzWCIsInJhZGl1c1kiLCJyYWRpdXNaIiwic3RlcHMiLCJzcGhlcmUiLCJ1U3RlcHMiLCJ2U3RlcHMiLCJyZXNvbHV0aW9uIiwiaW5jbGluYXRpb24iLCJ1IiwiYXppbXV0aCIsInRoaXNWZXJ0ZXgiLCJuZXh0VUkiLCJ1aU5leHRWZXJ0ZXgiLCJuZXh0VkkiLCJ2aU5leHRWZXJ0ZXgiLCJUb3J1c0ZhY3RvcnkiLCJvdXRlclJhZGl1c1giLCJvdXRlclJhZGl1c1kiLCJvdXRlclN0ZXBzIiwiaW5uZXJTdGVwcyIsInRvcnVzIiwib3V0ZXJSZXNvbHV0aW9uIiwiaW5uZXJSZXNvbHV0aW9uIiwidWkiLCJ3IiwidmkiLCJ1aUNvdW50IiwidmlDb3VudCIsIlJlbmRlcmVyIiwiRmxhdFJlbmRlcmVyIiwic29ydCIsImZhY2VMb29rdXAiLCJGbGF0U2hhZGVyUmVuZGVyZXIiLCJmYWNlQ29sb3IiLCJHb3VyYXVkU2hhZGVyUmVuZGVyZXIiLCJmYWNlQ29sb3JBIiwiZmFjZUNvbG9yQiIsImZhY2VDb2xvckMiLCJUZXh0dXJlUmVuZGVyZXIiLCJnZXRUZXh0dXJlIiwiVmVydGV4UmVuZGVyZXIiLCJtZXNoZXMiLCJkcmF3VmVydGljZXMiLCJXaXJlZnJhbWVSZW5kZXJlciIsImRyYXdXaXJlZnJhbWUiLCJBbWJpZW5jZSIsIkZhY2VMb29rdXAiLCJGYWNlU29ydFBpbGUiLCJmb3JjZUluaXQiLCJpZHgiLCJtZXNoTGVuZ3RoIiwicG9wdWxhdGUiLCJpbml0IiwiU2NlbmUiLCJjYW1lcmFzIiwibWF0ZXJpYWxzIiwicmVuZGVyZXJzIiwiYWN0aXZlQ2FtZXJhIiwiYWN0aXZlUmVuZGVyZXIiLCJyZW5kZXJUaW1lIiwicmVuZGVyRnJhbWVDb3VudCIsInJlbmRlckZQUyIsImZvcmNlUmVpbml0U29ydCIsInJlbmRlcmVyIiwic2V0QXNBY3RpdmUiLCJmaW5kTWVzaEluZGV4Iiwic3BsaWNlIiwicmVuZGVyU3RhcnQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1DYW1lcmEiLCJjYWxjdWxhdGVGYWNlTm9ybWFscyIsImNhbGN1bGF0ZVZlcnRleE5vcm1hbHMiLCJjYWxjdWxhdGVGYWNlTGlnaHREYXRhIiwiY2FsY3VsYXRlVmVydGV4TGlnaHREYXRhIiwiY3VsbCIsInJlbmRlckNvbXBsZXRlIiwiZ2V0VGltZSIsIlZlcnRleEFwcCIsImFjdGl2ZU9iamVjdCIsImxvYWRPYmplY3RzIiwiaW5pdE9iamVjdCIsImluaXRMaWdodHMiLCJpbml0Q2FtZXJhIiwiaW5pdFJlbmRlcmVyIiwib2JqZWN0cyIsInRlYXBvdCIsImN1YmUiLCJhZGRDYW1lcmEiLCJzZXRPYmplY3QiLCJhZGRSZW5kZXJlciIsImxpZ2h0MiIsImFkZExpZ2h0Iiwib2JqZWN0TmFtZSIsImNsZWFyTWVzaGVzIiwiYWRkTWVzaCIsImFkZEJ5VmFsIiwicmVuZGVyIiwiRmxhdEFwcCIsIkZsYXRTaGFkaW5nQXBwIiwiR291cmF1ZFNoYWRpbmdBcHAiLCJUZXh0dXJlTWFwcGluZ0FwcCIsIldpcmVmcmFtZUFwcCIsIk1hbmRlbGJyb3RBcHAiLCJtYXhJdGVyYXRpb25zIiwiem9vbSIsInNjYWxlWCIsInNjYWxlWSIsInlBZGRlciIsInhBZGRlciIsInhQb3MiLCJ5UG9zIiwieDAiLCJ5MCIsInh4IiwieXkiLCJpdGVyYXRpb24iLCJjb2xJbmRleCIsIlNpZXJwaW5za2lBcHAiLCJzaWRlTGVuZ3RoIiwicG9zQ2VudGVyIiwiY2FsY3VsYXRlZFRyaWFuZ2xlSGVpZ2h0Iiwic2lkZUxlbmd0aEhhbGYiLCJ0cmlhbmdsZUhlaWdodCIsInRyaWFuZ2xlSGFsZiIsInBvc0EiLCJwb3NCIiwicG9zQyIsInRyaWFuZ2xlRG91YmxlSGFsZiIsInNpZGVEb3VibGVIYWxmIiwiZHJhd1JlY3Vyc2l2ZSIsIkludGVycG9sYXRlZFRyaWFuZ2xlQXBwIiwicmFkQWRqdXN0bWVudCIsInRyYW5zbGF0ZWRUcmlhbmdsZSIsInJhZCIsImRyYXdUcmlhbmdsZSIsIkxpbmVBcHAiLCJsaW5lQ29sb3IiLCJwaXhlbENvbG9yIiwibHgxIiwibHgyIiwibHkxIiwibHkyIiwicm90YXRlTGluZSIsIlNvbGlkVHJpYW5nbGVBcHAiLCJ0cmlDb3VudCIsImRyYXdUcmlhbmdsZXMiLCJUZXh0dXJlZFRyaWFuZ2xlQXBwIiwidXYiLCJzIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQiw2QkFBNkIscUNBQXFDLGNBQWMsNkJBQTZCLHlDQUF5QyxxREFBcUQseUNBQXlDLG9GQUFvRixnREFBZ0QsdUVBQXVFLG9DQUFvQyxLQUFLLHlCQUF5Qiw4QkFBOEIsZ0NBQWdDLHdCQUF3QiwwQ0FBMEMseUJBQXlCLDZCQUE2QiwyQkFBMkIsaUNBQWlDLHlCQUF5Qiw2QkFBNkIsMENBQTBDLDJDQUEyQztBQUN4K0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBLElBQUksd0NBQU0sZ0JBQWdCLGFBQWEsMEJBQTBCLHdCQUF3QjtBQUN6RixJQUFJLGlEQUFlLGlCQUFpQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLGtCQUFrQixZQUFZLHdCQUF3QixXQUFXLG9CQUFvQixrV0FBa1cs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QixDQUFyQixDQUFsQjtBQUNBMlIsYUFBUyxDQUFDcGpCLEtBQVYsR0FBa0IsSUFBSU4sV0FBSixDQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLEdBQWhCLENBQWxCO0FBRUFrakIsVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFDQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JlLFNBQWxCLENBQWY7QUFFQVIsVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFDQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JlLFNBQWxCLENBQWY7QUFFQVIsVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFDQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFFQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFDQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFFQU0sVUFBTSxDQUFDUyxPQUFQLENBQWUsSUFBSWhCLFNBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0JDLFFBQWxCLENBQWY7QUFDQU0sVUFBTSxDQUFDUyxPQUFQ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QTtBQUhBLEtBcEdBLEVBeUdBO0FBQ0Esb0NBREE7QUFFQSxzQ0FGQTtBQUdBO0FBSEEsS0F6R0EsRUE4R0E7QUFDQSxtQkFEQTtBQUVBLGdDQUZBO0FBR0E7QUFIQSxLQTlHQSxFQW1IQTtBQUNBLDZCQURBO0FBRUEsK0JBRkE7QUFHQTtBQUhBLEtBbkhBLEVBd0hBO0FBQ0EsZ0NBREE7QUFFQSxrQ0FGQTtBQUdBO0FBSEEsS0F4SEEsQzs7Ozs7OztvQ0FnSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUNBOzs7K0JBR0EsSSxFQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs4QkFHQSxJLEVBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7OztvQ0FHQTtBQUNBO0FBQ0E7Ozs4QkFHQTtBQUNBLHFCQUNBO0FBQ0EscUJBREE7QUFFQSxrQkFGQTtBQUdBO0FBSEEsT0FEQTtBQU9BOzs7O0VBaE1BLDBCO0FBb01BLHdKOztBQzFQeUssQ0FBZ0Isc0hBQUcsRUFBQyxDOzs7OztBQ0F6RztBQUMzQjtBQUNMO0FBQ2M7OztBQUdsRTtBQUN1RjtBQUN2RixJQUFJLGVBQVMsR0FBRyw4Q0FBVTtBQUMxQixFQUFFLDZCQUFNO0FBQ1IsRUFBRSxNQUFNO0FBQ1IsRUFBRSxlQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVlLDBGQUFTLFEiLCJmaWxlIjoiMTkzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwid3JhcHBlclwiLGNsYXNzOnsnc2lkZWJhci1hY3RpdmUnOiBfdm0uc2lkZWJhckFjdGl2ZX19LFtfYygnYi1uYXYnLHtzdGF0aWNDbGFzczpcInNpZGViYXJcIixhdHRyczp7XCJwaWxsc1wiOlwiXCIsXCJ2ZXJ0aWNhbFwiOlwiXCIsXCJhbGlnblwiOlwibGVmdFwifX0sW192bS5fbCgoX3ZtLnNpZGViYXJJdGVtcyksZnVuY3Rpb24oaXRlbSxrZXksaW5kZXgpe3JldHVybiBbKGl0ZW0udHlwZSA9PT0gJ3RpdGxlJyk/X2MoJ2gzJyx7a2V5Oml0ZW0uaWQgfHwgKFwic2lkZWJhci10aXRsZS1cIiArIGluZGV4KSxzdGF0aWNDbGFzczpcInN1YnRpdGxlXCIsY2xhc3M6aXRlbS5jbGFzc2VzfSxbX3ZtLl92KF92bS5fcyhpdGVtLnRpdGxlKSldKTpfYygnYi1uYXYtaXRlbScse2tleTppdGVtLmlkIHx8IChcInNpZGViYXItbmF2LWl0ZW0tXCIgKyBpbmRleCksY2xhc3M6aXRlbS5jbGFzc2VzLGF0dHJzOntcImFjdGl2ZVwiOl92bS5hY3RpdmVJdGVtID09PSBpdGVtLmlkfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5tZW51U2VsZWN0KGl0ZW0pfX19LFtfdm0uX3YoX3ZtLl9zKGl0ZW0udGl0bGUpKV0pXX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidG9nZ2xlLXNpZGViYXIgYmFja2Ryb3BcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS50b2dnbGVTaWRlYmFyKCl9fX0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwidG9nZ2xlLXNpZGViYXJcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS50b2dnbGVTaWRlYmFyKCl9fX0sW192bS5fdihcIuKWtlwiKV0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtyZWY6XCJhcHBDb250YWluZXJcIixzdGF0aWNDbGFzczpcImNvbnRhaW5lclwifSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfdm0uX20oMCl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdoMScse3N0YXRpY0NsYXNzOlwidGl0bGVcIn0sW192bS5fdihcIlxcbiAgICAgIEpTLVZGWFxcbiAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCB2aXN1YWwgZWZmZWN0cyBpbXBsZW1lbnRlZCB3aXRoIEhUTUw1IFwiKSxfYygnY29kZScsW192bS5fdihcImNhbnZhc1wiKV0pLF92bS5fdihcIi5cIildKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyxbX3ZtLl92KFwiTm8gZGVwZW5kZW5jaWVzLCBubyBXZWJHTCwganVzdCBwdXJlLCB1bmFkdWx0ZXJhdGVkIGNvZGUgd3JpdHRlbiBmcm9tIHRoZSBncm91bmQgdXAuXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIkNoZWNrIG91dCB0aGUgc291cmNlIGF0IFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9zYWxpZXJpL2pzLXZmeFwiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJHaXRIdWJcIildKSxfdm0uX3YoXCIuXCIpXSldKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDxkaXYgY2xhc3M9J2NvbC1tZC0xMic+XG4gICAgICA8aDEgY2xhc3M9XCJ0aXRsZVwiPlxuICAgICAgICBKUy1WRlhcbiAgICAgIDwvaDE+XG4gICAgICA8ZGl2PlxuICAgICAgICA8cD5QdXJlIEphdmFTY3JpcHQgdmlzdWFsIGVmZmVjdHMgaW1wbGVtZW50ZWQgd2l0aCBIVE1MNSA8Y29kZT5jYW52YXM8L2NvZGU+LjwvcD5cblxuICAgICAgICA8cD5ObyBkZXBlbmRlbmNpZXMsIG5vIFdlYkdMLCBqdXN0IHB1cmUsIHVuYWR1bHRlcmF0ZWQgY29kZSB3cml0dGVuIGZyb20gdGhlIGdyb3VuZCB1cC48L3A+XG5cbiAgICAgICAgPHA+Q2hlY2sgb3V0IHRoZSBzb3VyY2UgYXQgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9zYWxpZXJpL2pzLXZmeFwiIHRhcmdldD1cIl9ibGFua1wiPkdpdEh1YjwvYT4uPC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5cbkBDb21wb25lbnRcbmNsYXNzIE1haW4gZXh0ZW5kcyBWdWUge1xufVxuXG5leHBvcnQgZGVmYXVsdCBNYWluO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mOWNlNDhjYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLl9tKDApfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI0ODBcIixcImhlaWdodFwiOlwiMzYwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJCaWxpbmVhciBJbnRlcnBvbGF0aW9uXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBcIiksX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JpbGluZWFyX2ludGVycG9sYXRpb25cIn19LFtfdm0uX3YoXCJiaWxpbmVhciBpbnRlcnBvbGF0aW9uXCIpXSksX3ZtLl92KFwiLlwiKV0pXSldKX1dXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG5AQ29tcG9uZW50KClcbmNsYXNzIFZ1ZVdyYXBwZXIgZXh0ZW5kcyBWdWUge1xuICAvLyBpbnRlbnRpb25hbGx5IG5vdCBkZWNsYXJlZCBoZXJlLCB0byBrZWVwIGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gYSByZWFjdGl2ZSBvYmplY3RcbiAgLy8gYXBwID0gbnVsbDtcblxuICBpbnRlcnZhbCA9IG51bGw7XG5cbiAgaW50ZXJ2YWxGcmVxdWVuY3kgPSAyNTtcblxuICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy5hcHAgPSBudWxsO1xuICB9XG5cblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICB0aGlzLnN0b3AoKTtcblxuICAgIHRoaXMuYXBwID0gdGhpcy5pbnN0YW50aWF0ZUFwcCgpO1xuXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWxGcmVxdWVuY3kgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwO1xuXG4gICAgICAgIGlmICghYXBwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChhcHAuaXNEcmF3aW5nKCkgPT09IHRydWUpIHx8IChhcHAuaXNQYXVzZWQoKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpY2soKTtcbiAgICAgIH0sXG4gICAgICB0aGlzLmludGVydmFsRnJlcXVlbmN5XG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlV3JhcHBlcjtcblxuIiwiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgY29uc3QgSGVscGVyID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnRJRFxuICAgKlxuICAgKiBAbGluayBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81OTMyMjAzLzg0NDc3MVxuICAgKiBAYXV0aG9yIFJ5YW4gQXJ0ZWNvbmFcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0Q2FudmFzQ29vcmRpbmF0ZXMoZXZlbnQsIGVsZW1lbnRJRCkge1xuICAgIGxldCB0b3RhbE9mZnNldFggPSAwO1xuICAgIGxldCB0b3RhbE9mZnNldFkgPSAwO1xuICAgIGxldCBjYW52YXNYID0gMDtcbiAgICBsZXQgY2FudmFzWSA9IDA7XG4gICAgbGV0IGVsZW1lbnQgPSBIZWxwZXIuZ2V0RWxlbWVudChlbGVtZW50SUQpO1xuXG4gICAgY29uc3QgaW5pdGlhbEVsID0gZWxlbWVudDtcblxuICAgIGRvIHtcbiAgICAgIHRvdGFsT2Zmc2V0WCArPSBlbGVtZW50Lm9mZnNldExlZnQgLSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICB0b3RhbE9mZnNldFkgKz0gZWxlbWVudC5vZmZzZXRUb3AgLSBlbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAgIH1cbiAgICB3aGlsZSAoZWxlbWVudCk7XG5cbiAgICBjYW52YXNYID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldFg7XG4gICAgY2FudmFzWSA9IGV2ZW50LnBhZ2VZIC0gdG90YWxPZmZzZXRZO1xuXG4gICAgaWYgKChpbml0aWFsRWwpICYmIChpbml0aWFsRWwuY2xpZW50V2lkdGgpICYmIChpbml0aWFsRWwuY2xpZW50SGVpZ2h0KSAmJiAoaW5pdGlhbEVsLndpZHRoKSAmJiAoaW5pdGlhbEVsLmhlaWdodCkpIHtcbiAgICAgIGNhbnZhc1ggKj0gKGluaXRpYWxFbC53aWR0aCAvIGluaXRpYWxFbC5jbGllbnRXaWR0aCk7XG4gICAgICBjYW52YXNZICo9IChpbml0aWFsRWwuaGVpZ2h0IC8gaW5pdGlhbEVsLmNsaWVudEhlaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgeDogY2FudmFzWCwgeTogY2FudmFzWSB9O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlbGVtZW50VHlwZSBUeXBlIG9mIGVsZW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtlbGVtZW50SURdIEVsZW1lbnQgSURcbiAgICogQHJldHVybnMge0VsZW1lbnR9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNyZWF0ZUVsZW1lbnQoZWxlbWVudFR5cGUsIGVsZW1lbnRJRCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnRUeXBlKTtcblxuICAgIGlmIChlbGVtZW50SUQpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGVsZW1lbnRJRCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudElEIEVsZW1lbnQgSURcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0RWxlbWVudChlbGVtZW50SUQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElEKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGV4dGVuZChvYmplY3QpIHtcbiAgICByZXR1cm4gXy5tZXJnZSh7fSwgb2JqZWN0KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBMb2FkIGRhdGEgZnJvbSBVUkxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzRnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yRnVuY3Rpb25dXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGxvYWQodXJsLCBzdWNjZXNzRnVuY3Rpb24sIGVycm9yRnVuY3Rpb24pIHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHhoci5vcGVuKCdnZXQnLCB1cmwpO1xuXG4gICAgeGhyLm9ubG9hZCA9ICgpID0+IHN1Y2Nlc3NGdW5jdGlvbih4aHIucmVzcG9uc2UsIHhoci5zdGF0dXNUZXh0LCB4aHIpO1xuICAgIHhoci5vbmVycm9yID0gKCkgPT4gZXJyb3JGdW5jdGlvbih4aHIuc3RhdHVzVGV4dCwgeGhyKTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVtcHR5IHR3byBkaW1lbnNpb25hbCBhcnJheVxuICAgKlxuICAgKiBAcGFyYW0ge2ludH0gc2l6ZUFcbiAgICogQHBhcmFtIHtpbnR9IHNpemVCXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlMkRBcnJheShzaXplQSwgc2l6ZUIpIHtcbiAgICBjb25zdCBhID0gbmV3IEFycmF5KHNpemVBKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZUE7IGkrKykge1xuICAgICAgYVtpXSA9IG5ldyBBcnJheShzaXplQik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cbn07XG4iLCJleHBvcnQgY2xhc3MgQ29sb3Ige1xuICAvKipcbiAgICogQHBhcmFtIHtpbnR8Q29sb3J9IFtyPTBdXG4gICAqIEBwYXJhbSB7aW50fSBbZz0wXVxuICAgKiBAcGFyYW0ge2ludH0gW2I9MF1cbiAgICogQHBhcmFtIHtpbnR9IFthPTI1NV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHIsIGcsIGIsIGEpIHtcbiAgICBpZiAociBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICB0aGlzLnNldChyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yID0gciB8fCAwO1xuICAgICAgdGhpcy5nID0gZyB8fCAwO1xuICAgICAgdGhpcy5iID0gYiB8fCAwO1xuICAgICAgdGhpcy5hID0gYSB8fCAyNTU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fENvbG9yfSBbcj0wXVxuICAgKiBAcGFyYW0ge2ludH0gW2c9MF1cbiAgICogQHBhcmFtIHtpbnR9IFtiPTBdXG4gICAqIEBwYXJhbSB7aW50fSBbYT0yNTVdXG4gICAqL1xuICBzZXQociwgZywgYiwgYSkge1xuICAgIGlmIChyIGluc3RhbmNlb2YgQ29sb3IpIHtcbiAgICAgIHRoaXMuciA9IHIucjtcbiAgICAgIHRoaXMuZyA9IHIuZztcbiAgICAgIHRoaXMuYiA9IHIuYjtcbiAgICAgIHRoaXMuYSA9IHIuYTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yID0gcjtcbiAgICAgIHRoaXMuZyA9IGc7XG4gICAgICB0aGlzLmIgPSBiO1xuICAgICAgdGhpcy5hID0gYSB8fCAyNTU7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtOb3JtYWxpemVkQ29sb3J9IG5vcm1hbGl6ZWRDb2xvclxuICAgKi9cbiAgZ2V0Tm9ybWFsaXplZENvbG9yKG5vcm1hbGl6ZWRDb2xvcikge1xuICAgIG5vcm1hbGl6ZWRDb2xvci5yID0gdGhpcy5yIC8gMjU1O1xuICAgIG5vcm1hbGl6ZWRDb2xvci5nID0gdGhpcy5nIC8gMjU1O1xuICAgIG5vcm1hbGl6ZWRDb2xvci5iID0gdGhpcy5iIC8gMjU1O1xuICAgIG5vcm1hbGl6ZWRDb2xvci5hID0gdGhpcy5hIC8gMjU1O1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcFNhZmV0eT1mYWxzZV1cbiAgICovXG4gIGFkZChjb2xvciwgc2tpcFNhZmV0eSkge1xuICAgIHRoaXMuciA9IHRoaXMuciArIGNvbG9yLnI7XG4gICAgdGhpcy5nID0gdGhpcy5nICsgY29sb3IuZztcbiAgICB0aGlzLmIgPSB0aGlzLmIgKyBjb2xvci5iO1xuXG4gICAgaWYgKHNraXBTYWZldHkgIT09IHRydWUpIHtcbiAgICAgIHRoaXMucm91bmQoKTtcbiAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwU2FmZXR5PWZhbHNlXVxuICAgKi9cbiAgc3VidHJhY3QoY29sb3IsIHNraXBTYWZldHkpIHtcbiAgICB0aGlzLnIgPSB0aGlzLnIgLSBjb2xvci5yO1xuICAgIHRoaXMuZyA9IHRoaXMuZyAtIGNvbG9yLmc7XG4gICAgdGhpcy5iID0gdGhpcy5iIC0gY29sb3IuYjtcblxuICAgIGlmIChza2lwU2FmZXR5ICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnJvdW5kKCk7XG4gICAgICB0aGlzLmNsYW1wKCk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICovXG4gIHN3YXAoY29sb3IpIHtcbiAgICBjb25zdCB0bXBSID0gY29sb3IucjtcbiAgICBjb25zdCB0bXBHID0gY29sb3IuZztcbiAgICBjb25zdCB0bXBCID0gY29sb3IuYjtcbiAgICBjb25zdCB0bXBBID0gY29sb3IuYTtcblxuICAgIGNvbG9yLnIgPSB0aGlzLnI7XG4gICAgdGhpcy5yID0gdG1wUjtcblxuICAgIGNvbG9yLmcgPSB0aGlzLmc7XG4gICAgdGhpcy5nID0gdG1wRztcblxuICAgIGNvbG9yLmIgPSB0aGlzLmI7XG4gICAgdGhpcy5iID0gdG1wQjtcblxuICAgIGNvbG9yLmEgPSB0aGlzLmE7XG4gICAgdGhpcy5hID0gdG1wQTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29sb3J8Tm9ybWFsaXplZENvbG9yfSBjb2xvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwU2FmZXR5PWZhbHNlXVxuICAgKi9cbiAgbXVsdGlwbHkoY29sb3IsIHNraXBTYWZldHkpIHtcbiAgICB0aGlzLnIgPSBjb2xvci5yICogdGhpcy5yO1xuICAgIHRoaXMuZyA9IGNvbG9yLmcgKiB0aGlzLmc7XG4gICAgdGhpcy5iID0gY29sb3IuYiAqIHRoaXMuYjtcbiAgICB0aGlzLmEgPSBjb2xvci5hICogdGhpcy5hO1xuXG4gICAgaWYgKHNraXBTYWZldHkgIT09IHRydWUpIHtcbiAgICAgIHRoaXMucm91bmQoKTtcbiAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Zsb2F0fGludHxudW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBTYWZldHk9ZmFsc2VdXG4gICAqL1xuICBtdWx0aXBseUJ5VmFsKHZhbHVlLCBza2lwU2FmZXR5KSB7XG4gICAgdGhpcy5yID0gdGhpcy5yICogdmFsdWU7XG4gICAgdGhpcy5nID0gdGhpcy5nICogdmFsdWU7XG4gICAgdGhpcy5iID0gdGhpcy5iICogdmFsdWU7XG5cbiAgICBpZiAoc2tpcFNhZmV0eSAhPT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yb3VuZCgpO1xuICAgICAgdGhpcy5jbGFtcCgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fG51bWJlcn0gZGl2aXNvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwU2FmZXR5PWZhbHNlXVxuICAgKi9cbiAgZGl2aWRlQnlWYWwoZGl2aXNvciwgc2tpcFNhZmV0eSkge1xuICAgIHRoaXMuciA9IHRoaXMuciAvIGRpdmlzb3I7XG4gICAgdGhpcy5nID0gdGhpcy5nIC8gZGl2aXNvcjtcbiAgICB0aGlzLmIgPSB0aGlzLmIgLyBkaXZpc29yO1xuXG4gICAgaWYgKHNraXBTYWZldHkgIT09IHRydWUpIHtcbiAgICAgIHRoaXMucm91bmQoKTtcbiAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvckFcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JCXG4gICAqIEBwYXJhbSB7aW50fSBzdGVwQ291bnRcbiAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcFNhZmV0eT1mYWxzZV1cbiAgICovXG4gIGludGVycG9sYXRlKGNvbG9yQSwgY29sb3JCLCBzdGVwQ291bnQsIHNraXBTYWZldHkpIHtcbiAgICB0aGlzLnIgPSAoY29sb3JCLnIgLSBjb2xvckEucikgLyBzdGVwQ291bnQ7XG4gICAgdGhpcy5nID0gKGNvbG9yQi5nIC0gY29sb3JBLmcpIC8gc3RlcENvdW50O1xuICAgIHRoaXMuYiA9IChjb2xvckIuYiAtIGNvbG9yQS5iKSAvIHN0ZXBDb3VudDtcblxuICAgIGlmIChza2lwU2FmZXR5ICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnJvdW5kKCk7XG4gICAgICB0aGlzLmNsYW1wKCk7XG4gICAgfVxuICB9XG5cblxuICByb3VuZCgpIHtcbiAgICB0aGlzLnIgPSBNYXRoLnJvdW5kKHRoaXMucik7XG4gICAgdGhpcy5nID0gTWF0aC5yb3VuZCh0aGlzLmcpO1xuICAgIHRoaXMuYiA9IE1hdGgucm91bmQodGhpcy5iKTtcbiAgICB0aGlzLmEgPSBNYXRoLnJvdW5kKHRoaXMuYSk7XG4gIH1cblxuXG4gIGNsYW1wKCkge1xuICAgIHRoaXMuciA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuciwgMjU1KSwgMCk7XG4gICAgdGhpcy5nID0gTWF0aC5tYXgoTWF0aC5taW4odGhpcy5nLCAyNTUpLCAwKTtcbiAgICB0aGlzLmIgPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLmIsIDI1NSksIDApO1xuICAgIHRoaXMuYSA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuYSwgMjU1KSwgMCk7XG4gIH1cbn1cblxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcblxuZXhwb3J0IGNsYXNzIFZpcnR1YWxTdXJmYWNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fSB3aWR0aFxuICAgKiBAcGFyYW0ge2ludH0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7VWludDhDbGFtcGVkQXJyYXl9IFtkYXRhXVxuICAgKi9cbiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgZGF0YSkge1xuICAgIGxldCBkb0NsZWFyID0gZmFsc2U7XG5cbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIGRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgIGRvQ2xlYXIgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgaWYgKGRvQ2xlYXIpIHtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQHJldHVybnMge2ludH1cbiAgICovXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoO1xuICB9XG5cblxuICAvKipcbiAgICogQHJldHVybnMge2ludH1cbiAgICovXG4gIGdldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7VWludDhDbGFtcGVkQXJyYXl9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcG9zXG4gICAqIEBwYXJhbSB7Q29sb3J9IGRlc3RDb2xvclxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRQaXhlbChwb3MsIGRlc3RDb2xvcikge1xuICAgIGNvbnN0IHB0ciA9IChNYXRoLnJvdW5kKHBvcy54KSArIE1hdGgucm91bmQocG9zLnkpICogdGhpcy53aWR0aCkgKiA0O1xuXG4gICAgZGVzdENvbG9yLnNldChcbiAgICAgIHRoaXMuZGF0YVtwdHJdLFxuICAgICAgdGhpcy5kYXRhW3B0ciArIDFdLFxuICAgICAgdGhpcy5kYXRhW3B0ciArIDJdXG4gICAgKTtcbiAgfVxuXG5cbiAgY2xlYXIoY29sb3IpIHtcbiAgICBjb25zdCBtYXhQdHIgPSB0aGlzLmRhdGEubGVuZ3RoO1xuXG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgY29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMjU1KTtcbiAgICB9XG5cbiAgICBsZXQgcHRyID0gMDtcblxuICAgIGNvbnN0IHIgPSBjb2xvci5yO1xuICAgIGNvbnN0IGIgPSBjb2xvci5iO1xuICAgIGNvbnN0IGcgPSBjb2xvci5nO1xuICAgIGNvbnN0IGEgPSBjb2xvci5hO1xuXG5cbiAgICB3aGlsZSAocHRyIDwgbWF4UHRyKSB7XG4gICAgICB0aGlzLmRhdGFbcHRyKytdID0gcjtcbiAgICAgIHRoaXMuZGF0YVtwdHIrK10gPSBnO1xuICAgICAgdGhpcy5kYXRhW3B0cisrXSA9IGI7XG4gICAgICB0aGlzLmRhdGFbcHRyKytdID0gYTtcbiAgICB9XG4gIH1cbn1cblxuIiwiXG5leHBvcnQgY29uc3QgTGluZSA9IHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBjYWxjdWxhdGUocDEsIHAyKSB7XG4gICAgY29uc3QgdmFyaWFibGVzID0ge1xuICAgICAgcHgxOiBNYXRoLnJvdW5kKHAxLngpLFxuICAgICAgcHkxOiBNYXRoLnJvdW5kKHAxLnkpLFxuICAgICAgcHgyOiBNYXRoLnJvdW5kKHAyLngpLFxuICAgICAgcHkyOiBNYXRoLnJvdW5kKHAyLnkpLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBweFN0YXJ0OiAwLFxuICAgICAgbGFzdFBsb3RYOiAwLFxuXG4gICAgICB0cmF2ZXJzZWQ6IDAsXG4gICAgICB0cmF2ZXJzZUxlbmd0aDogMFxuICAgIH07XG5cbiAgICB2YXJpYWJsZXMuZHggPSBNYXRoLmFicyh2YXJpYWJsZXMucHgyIC0gdmFyaWFibGVzLnB4MSk7XG4gICAgdmFyaWFibGVzLmR5ID0gTWF0aC5hYnModmFyaWFibGVzLnB5MiAtIHZhcmlhYmxlcy5weTEpO1xuXG4gICAgdmFyaWFibGVzLnRyYXZlcnNlTGVuZ3RoID0gTWF0aC5zcXJ0KHZhcmlhYmxlcy5keCAqIHZhcmlhYmxlcy5keCArIHZhcmlhYmxlcy5keSAqIHZhcmlhYmxlcy5keSk7XG5cbiAgICBpZiAodmFyaWFibGVzLnRyYXZlcnNlTGVuZ3RoIDwgMSkge1xuICAgICAgdmFyaWFibGVzLnRyYXZlcnNlTGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXJpYWJsZXMuZXJyID0gdmFyaWFibGVzLmR4IC0gdmFyaWFibGVzLmR5O1xuICAgIHZhcmlhYmxlcy5lMiA9ICh2YXJpYWJsZXMuZHggLSB2YXJpYWJsZXMuZHkpICogMjtcblxuICAgIHZhcmlhYmxlcy5zeCA9IC0xO1xuICAgIHZhcmlhYmxlcy5zeSA9IC0xO1xuXG4gICAgaWYgKHZhcmlhYmxlcy5weDEgPCB2YXJpYWJsZXMucHgyKSB7XG4gICAgICB2YXJpYWJsZXMuc3ggPSAxO1xuICAgIH1cblxuICAgIGlmICh2YXJpYWJsZXMucHkxIDwgdmFyaWFibGVzLnB5Mikge1xuICAgICAgdmFyaWFibGVzLnN5ID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFyaWFibGVzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVcbiAgICovXG4gIHN0ZXAobGluZSkge1xuICAgIGxpbmUucHhTdGFydCA9IGxpbmUucHgxO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIHBsb3QgaGVyZVxuICAgICAgbGluZS50cmF2ZXJzZWQrKztcbiAgICAgIGxpbmUubGFzdFBsb3RYID0gbGluZS5weDE7XG5cbiAgICAgIGlmICgobGluZS5weDEgPT09IGxpbmUucHgyKSAmJiAobGluZS5weTEgPT09IGxpbmUucHkyKSkge1xuICAgICAgICBsaW5lLmRvbmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmUuZTIgPiAtbGluZS5keSkge1xuICAgICAgICBsaW5lLmVyciA9IGxpbmUuZXJyIC0gbGluZS5keTtcbiAgICAgICAgbGluZS5lMiA9IGxpbmUuZXJyICsgbGluZS5lcnI7XG5cbiAgICAgICAgbGluZS5weDEgKz0gbGluZS5zeDtcbiAgICAgIH1cblxuICAgICAgaWYgKChsaW5lLnB4MSA9PT0gbGluZS5weDIpICYmIChsaW5lLnB5MSA9PT0gbGluZS5weTIpKSB7XG4gICAgICAgIC8vIHBsb3QgaGVyZVxuICAgICAgICBsaW5lLnRyYXZlcnNlZCsrO1xuXG4gICAgICAgIGxpbmUubGFzdFBsb3RYID0gbGluZS5weDE7XG4gICAgICAgIGxpbmUuZG9uZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobGluZS5lMiA8IGxpbmUuZHgpIHtcbiAgICAgICAgbGluZS5lcnIgPSBsaW5lLmVyciArIGxpbmUuZHg7XG4gICAgICAgIGxpbmUuZTIgPSBsaW5lLmVyciArIGxpbmUuZXJyO1xuXG4gICAgICAgIGxpbmUucHkxICs9IGxpbmUuc3k7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqIEBwdWJsaWNcbiAgICogQGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVzZW5oYW0nc19saW5lX2FsZ29yaXRobVxuICAgKi9cbiAgZHJhdyhwMSwgcDIsIGNvbG9yLCBzdXJmYWNlKSB7XG4gICAgbGV0IHB4MSA9IE1hdGgucm91bmQocDEueCk7XG4gICAgbGV0IHB5MSA9IE1hdGgucm91bmQocDEueSk7XG4gICAgY29uc3QgcHgyID0gTWF0aC5yb3VuZChwMi54KTtcbiAgICBjb25zdCBweTIgPSBNYXRoLnJvdW5kKHAyLnkpO1xuXG4gICAgY29uc3QgZHggPSBNYXRoLmFicyhweDIgLSBweDEpO1xuICAgIGNvbnN0IGR5ID0gTWF0aC5hYnMocHkyIC0gcHkxKTtcblxuICAgIGNvbnN0IHN4ID0gKHB4MSA8IHB4MikgPyAxIDogLTE7XG4gICAgY29uc3Qgc3kgPSAocHkxIDwgcHkyKSA/IDEgOiAtMTtcblxuICAgIGNvbnN0IHN4NCA9IHN4ICogNDtcblxuICAgIGNvbnN0IGRhdGEgPSBzdXJmYWNlLmdldERhdGEoKTtcbiAgICBjb25zdCB3aWR0aCA9IHN1cmZhY2UuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBzdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gICAgbGV0IGVyciA9IGR4IC0gZHk7XG4gICAgbGV0IGUyID0gZXJyICogMjtcbiAgICBsZXQgcHRyID0gKHB4MSArIHB5MSAqIHdpZHRoKSAqIDQ7XG4gICAgY29uc3QgbGluZUFkZCA9IChzeSAqIHdpZHRoKSAqIDQ7XG5cbiAgICBjb25zdCBjb2xSID0gY29sb3IucjtcbiAgICBjb25zdCBjb2xHID0gY29sb3IuZztcbiAgICBjb25zdCBjb2xCID0gY29sb3IuYjtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoKHB4MSA+PSAwKSAmJiAocHgxIDwgd2lkdGgpICYmIChweTEgPj0gMCkgJiYgKHB5MSA8IGhlaWdodCkpIHtcbiAgICAgICAgZGF0YVtwdHJdID0gY29sUjtcbiAgICAgICAgZGF0YVtwdHIgKyAxXSA9IGNvbEc7XG4gICAgICAgIGRhdGFbcHRyICsgMl0gPSBjb2xCO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHB4MSA9PT0gcHgyKSAmJiAocHkxID09PSBweTIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZTIgPiAtZHkpIHtcbiAgICAgICAgZXJyID0gZXJyIC0gZHk7XG4gICAgICAgIGUyID0gZXJyICsgZXJyO1xuXG4gICAgICAgIHB4MSArPSBzeDtcbiAgICAgICAgcHRyICs9IHN4NDtcbiAgICAgIH1cblxuICAgICAgaWYgKChweDEgPT09IHB4MikgJiYgKHB5MSA9PT0gcHkyKSkge1xuICAgICAgICBpZiAoKHB4MSA+PSAwKSAmJiAocHgxIDwgd2lkdGgpICYmIChweTEgPj0gMCkgJiYgKHB5MSA8IGhlaWdodCkpIHtcbiAgICAgICAgICBkYXRhW3B0cl0gPSBjb2xSO1xuICAgICAgICAgIGRhdGFbcHRyICsgMV0gPSBjb2xHO1xuICAgICAgICAgIGRhdGFbcHRyICsgMl0gPSBjb2xCO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChlMiA8IGR4KSB7XG4gICAgICAgIGVyciA9IGVyciArIGR4O1xuICAgICAgICBlMiA9IGVyciArIGVycjtcblxuICAgICAgICBweTEgKz0gc3k7XG4gICAgICAgIHB0ciArPSBsaW5lQWRkO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsImV4cG9ydCBjbGFzcyBQb2ludDNEIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcnxWZWN0b3IzRHxQb2ludDNEfSBbeD0wXVxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IFt5PTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW3o9MF1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgLy8gd29ya3Mgd2l0aCBWZWN0b3IzRCB0b28sIHNpbmNlIGl0J3MgYSBzdWJjbGFzc1xuICAgIGlmICh4IGluc3RhbmNlb2YgUG9pbnQzRCkge1xuICAgICAgdGhpcy54ID0geC54O1xuICAgICAgdGhpcy55ID0geC55O1xuICAgICAgdGhpcy56ID0geC56O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnggPSB4IHx8IDA7XG4gICAgICB0aGlzLnkgPSB5IHx8IDA7XG4gICAgICB0aGlzLnogPSB6IHx8IDA7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQb2ludDNEfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50M0QodGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHBcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3dhcChwKSB7XG4gICAgY29uc3QgdHggPSBwLng7XG4gICAgY29uc3QgdHkgPSBwLnk7XG4gICAgY29uc3QgdHogPSBwLno7XG5cbiAgICBwLnggPSB0aGlzLng7XG4gICAgcC55ID0gdGhpcy55O1xuICAgIHAueiA9IHRoaXMuejtcblxuICAgIHRoaXMueCA9IHR4O1xuICAgIHRoaXMueSA9IHR5O1xuICAgIHRoaXMueiA9IHR6O1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcm91bmQoKSB7XG4gICAgdGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xuICAgIHRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTtcbiAgICB0aGlzLnogPSBNYXRoLnJvdW5kKHRoaXMueik7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBub3JtYWxpemUoKSB7XG4gICAgY29uc3QgZCA9IE1hdGguc3FydCgodGhpcy54ICogdGhpcy54KSArICh0aGlzLnkgKiB0aGlzLnkpICsgKHRoaXMueiAqIHRoaXMueikpO1xuXG4gICAgdGhpcy54ID0gdGhpcy54ICogKDEuMCAvIGQpO1xuICAgIHRoaXMueSA9IHRoaXMueSAqICgxLjAgLyBkKTtcbiAgICB0aGlzLnogPSB0aGlzLnogKiAoMS4wIC8gZCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ8VmVjdG9yM0R8UG9pbnQzRH0geFxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IFt5XVxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IFt6XVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXQoeCwgeSwgeikge1xuICAgIGlmICh4IGluc3RhbmNlb2YgUG9pbnQzRCkge1xuICAgICAgdGhpcy54ID0geC54O1xuICAgICAgdGhpcy55ID0geC55O1xuICAgICAgdGhpcy56ID0geC56O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgdGhpcy55ID0geTtcbiAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDNEfFZlY3RvcjNEfSBwb2ludFxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGQocG9pbnQpIHtcbiAgICB0aGlzLnggKz0gcG9pbnQueDtcbiAgICB0aGlzLnkgKz0gcG9pbnQueTtcbiAgICB0aGlzLnogKz0gcG9pbnQuejtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UG9pbnQzRHxWZWN0b3IzRH0gcG9pbnRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3VidHJhY3QocG9pbnQpIHtcbiAgICB0aGlzLnggLT0gcG9pbnQueDtcbiAgICB0aGlzLnkgLT0gcG9pbnQueTtcbiAgICB0aGlzLnogLT0gcG9pbnQuejtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UG9pbnQzRHxWZWN0b3IzRH0gcG9pbnRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbXVsdGlwbHkocG9pbnQpIHtcbiAgICB0aGlzLnggKj0gcG9pbnQueDtcbiAgICB0aGlzLnkgKj0gcG9pbnQueTtcbiAgICB0aGlzLnogKj0gcG9pbnQuejtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR8aW50fE51bWJlcn0gdmFsdWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZGl2aWRlQnlWYWwodmFsdWUpIHtcbiAgICB0aGlzLnggLz0gdmFsdWU7XG4gICAgdGhpcy55IC89IHZhbHVlO1xuICAgIHRoaXMueiAvPSB2YWx1ZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR8aW50fE51bWJlcn0gdmFsdWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbXVsdGlwbHlCeVZhbCh2YWx1ZSkge1xuICAgIHRoaXMueCAqPSB2YWx1ZTtcbiAgICB0aGlzLnkgKj0gdmFsdWU7XG4gICAgdGhpcy56ICo9IHZhbHVlO1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbmVnYXRlKCkge1xuICAgIHRoaXMueCA9IC10aGlzLng7XG4gICAgdGhpcy55ID0gLXRoaXMueTtcbiAgICB0aGlzLnogPSAtdGhpcy56O1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDNEfFZlY3RvcjNEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50M0R8VmVjdG9yM0R9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQzRHxWZWN0b3IzRH0gcDNcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0VG9DZW50ZXIocDEsIHAyLCBwMykge1xuICAgIGNvbnN0IG1pblggPSBNYXRoLm1pbihwMS54LCBwMi54LCBwMy54KTtcbiAgICBjb25zdCBtaW5ZID0gTWF0aC5taW4ocDEueSwgcDIueSwgcDMueSk7XG4gICAgY29uc3QgbWluWiA9IE1hdGgubWluKHAxLnosIHAyLnosIHAzLnopO1xuXG4gICAgdGhpcy54ID0gbWluWCArICgoTWF0aC5tYXgocDEueCwgcDIueCwgcDMueCkgLSBtaW5YKSAvIDIpO1xuICAgIHRoaXMueSA9IG1pblkgKyAoKE1hdGgubWF4KHAxLnksIHAyLnksIHAzLnkpIC0gbWluWSkgLyAyKTtcbiAgICB0aGlzLnogPSBtaW5aICsgKChNYXRoLm1heChwMS56LCBwMi56LCBwMy56KSAtIG1pblopIC8gMik7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHBvaW50QVxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHBvaW50QlxuICAgKiBAcGFyYW0ge2ludH0gc3RlcENvdW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGludGVycG9sYXRlKHBvaW50QSwgcG9pbnRCLCBzdGVwQ291bnQpIHtcbiAgICB0aGlzLnggPSAocG9pbnRCLnggLSBwb2ludEEueCkgLyBzdGVwQ291bnQ7XG4gICAgdGhpcy55ID0gKHBvaW50Qi55IC0gcG9pbnRBLnkpIC8gc3RlcENvdW50O1xuICAgIHRoaXMueiA9IChwb2ludEIueiAtIHBvaW50QS56KSAvIHN0ZXBDb3VudDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR8aW50fE51bWJlcn0gdmFsdWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkQnlWYWwodmFsdWUpIHtcbiAgICB0aGlzLnggKz0gdmFsdWU7XG4gICAgdGhpcy55ICs9IHZhbHVlO1xuICAgIHRoaXMueiArPSB2YWx1ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUG9pbnQzRCB9IGZyb20gJy4vcG9pbnQtM2QnO1xuXG4vKlxuICogTG9vc2VseSBiYXNlZCBvbiBodHRwOi8vZXZhbncuZ2l0aHViLmlvL2xpZ2h0Z2wuanMvZG9jcy92ZWN0b3IuaHRtbFxuICovXG5cbmV4cG9ydCBjbGFzcyBWZWN0b3IzRCBleHRlbmRzIFBvaW50M0Qge1xuICAvKipcbiAgICogQHBhcmFtIHtOdW1iZXJ8aW50fGZsb2F0fFZlY3RvcjNEfFBvaW50M0R9IFt4PTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW3k9MF1cbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8TnVtYmVyfSBbej0wXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge1BvaW50M0R9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICgoeCBpbnN0YW5jZW9mIFZlY3RvcjNEKSB8fCAoeCBpbnN0YW5jZW9mIFBvaW50M0QpKSB7XG4gICAgICB0aGlzLnggPSB4Lng7XG4gICAgICB0aGlzLnkgPSB4Lnk7XG4gICAgICB0aGlzLnogPSB4Lno7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMueCA9IHggfHwgMDtcbiAgICAgIHRoaXMueSA9IHkgfHwgMDtcbiAgICAgIHRoaXMueiA9IHogfHwgMDtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQHJldHVybnMge1ZlY3RvcjNEfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjNEKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIERpc3RhbmNlIGZyb20gYSBwb2ludFxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IHhcbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8TnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gelxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBkaXN0YW5jZSh4LCB5LCB6KSB7XG4gICAgY29uc3QgeGQgPSB0aGlzLnggLSB4O1xuICAgIGNvbnN0IHlkID0gdGhpcy55IC0geTtcbiAgICBjb25zdCB6ZCA9IHRoaXMueiAtIHo7XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgeGQgKiB4ZCArXG4gICAgICB5ZCAqIHlkICtcbiAgICAgIHpkICogemRcbiAgICApO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIFZlY3RvciBsZW5ndGhcbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbGVuZ3RoKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5kb3QodGhpcykpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIERvdCBwcm9kdWN0XG4gICAqXG4gICAqIEBwYXJhbSB7VmVjdG9yM0R9IHZlY3RvclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBkb3QodmVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMueCAqIHZlY3Rvci54ICsgdGhpcy55ICogdmVjdG9yLnkgKyB0aGlzLnogKiB2ZWN0b3IuejtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBDcm9zcyBwcm9kdWN0XG4gICAqXG4gICAqIEBwYXJhbSB7VmVjdG9yM0R9IHZlY3RvclxuICAgKiBAcHVibGljXG4gICAqL1xuICBjcm9zcyh2ZWN0b3IpIHtcbiAgICB0aGlzLnggPSB0aGlzLnkgKiB2ZWN0b3IueiAtIHRoaXMueiAqIHZlY3Rvci55O1xuICAgIHRoaXMueSA9IHRoaXMueiAqIHZlY3Rvci54IC0gdGhpcy54ICogdmVjdG9yLno7XG4gICAgdGhpcy56ID0gdGhpcy54ICogdmVjdG9yLnkgLSB0aGlzLnkgKiB2ZWN0b3IueDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemUgVmVjdG9yIChnZXQgYSB1bml0IHZlY3RvcilcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbm9ybWFsaXplKCkge1xuICAgIGNvbnN0IHZlY3Rvckxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cbiAgICB0aGlzLnggPSB0aGlzLnggLyB2ZWN0b3JMZW5ndGg7XG4gICAgdGhpcy55ID0gdGhpcy55IC8gdmVjdG9yTGVuZ3RoO1xuICAgIHRoaXMueiA9IHRoaXMueiAvIHZlY3Rvckxlbmd0aDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50M0R8VmVjdG9yM0R9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQzRHxWZWN0b3IzRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDNEfFZlY3RvcjNEfSBwM1xuICAgKiBAbGluayBodHRwOi8vd3d3Lm9wZW5nbC5vcmcvd2lraS9DYWxjdWxhdGluZ19hX1N1cmZhY2VfTm9ybWFsXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG5vcm1hbChwMSwgcDIsIHAzKSB7XG4gICAgY29uc3QgdXggPSBwMi54IC0gcDEueDtcbiAgICBjb25zdCB1eSA9IHAyLnkgLSBwMS55O1xuICAgIGNvbnN0IHV6ID0gcDIueiAtIHAxLno7XG5cbiAgICBjb25zdCB2eCA9IHAzLnggLSBwMS54O1xuICAgIGNvbnN0IHZ5ID0gcDMueSAtIHAxLnk7XG4gICAgY29uc3QgdnogPSBwMy56IC0gcDEuejtcblxuICAgIHRoaXMueCA9ICh1eSAqIHZ6KSAtICh1eiAqIHZ5KTtcbiAgICB0aGlzLnkgPSAodXogKiB2eCkgLSAodXggKiB2eik7XG4gICAgdGhpcy56ID0gKHV4ICogdnkpIC0gKHV5ICogdngpO1xuICB9XG59XG5cbiIsImltcG9ydCB7IFBvaW50M0QgfSBmcm9tICcuL3BvaW50LTNkJztcbmltcG9ydCB7IFZlY3RvcjNEIH0gZnJvbSAnLi92ZWN0b3ItM2QnO1xuXG5cbmV4cG9ydCBjbGFzcyBQb2ludDJEIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcnxWZWN0b3IzRHxQb2ludDNEfFBvaW50MkR9IFt4PTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW3k9MF1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgaWYgKCh4IGluc3RhbmNlb2YgVmVjdG9yM0QpIHx8ICh4IGluc3RhbmNlb2YgUG9pbnQzRCkgfHwgKHggaW5zdGFuY2VvZiBQb2ludDJEKSkge1xuICAgICAgdGhpcy54ID0geC54O1xuICAgICAgdGhpcy55ID0geC55O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnggPSB4IHx8IDA7XG4gICAgICB0aGlzLnkgPSB5IHx8IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQb2ludDJEfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50MkQodGhpcy54LCB0aGlzLnkpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN3YXAocCkge1xuICAgIGNvbnN0IHR4ID0gcC54O1xuICAgIGNvbnN0IHR5ID0gcC55O1xuXG4gICAgcC54ID0gdGhpcy54O1xuICAgIHAueSA9IHRoaXMueTtcblxuICAgIHRoaXMueCA9IHR4O1xuICAgIHRoaXMueSA9IHR5O1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcm91bmQoKSB7XG4gICAgdGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xuICAgIHRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcnxWZWN0b3IzRHxQb2ludDNEfFBvaW50MkR9IFt4PTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW3k9MF1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0KHgsIHkpIHtcbiAgICBpZiAoKHggaW5zdGFuY2VvZiBWZWN0b3IzRCkgfHwgKHggaW5zdGFuY2VvZiBQb2ludDNEKSB8fCAoeCBpbnN0YW5jZW9mIFBvaW50MkQpKSB7XG4gICAgICB0aGlzLnggPSB4Lng7XG4gICAgICB0aGlzLnkgPSB4Lnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMueCA9IHg7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcG9pbnRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZGlzdGFuY2UocG9pbnQpIHtcbiAgICBjb25zdCBhID0gcG9pbnQueCAtIHRoaXMueDtcbiAgICBjb25zdCBiID0gcG9pbnQueSAtIHRoaXMueTtcblxuICAgIHJldHVybiBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHBvaW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN1YnRyYWN0KHBvaW50KSB7XG4gICAgdGhpcy54IC09IHBvaW50Lng7XG4gICAgdGhpcy55IC09IHBvaW50Lnk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHBvaW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZChwb2ludCkge1xuICAgIHRoaXMueCArPSBwb2ludC54O1xuICAgIHRoaXMueSArPSBwb2ludC55O1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8bnVtYmVyfSB2YWxcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbXVsdGlwbHlCeVZhbCh2YWwpIHtcbiAgICB0aGlzLnggKj0gdmFsO1xuICAgIHRoaXMueSAqPSB2YWw7XG4gIH1cbn1cblxuIiwiLy8gaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICcuL3BvaW50LTJkJztcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuL2xpbmUnO1xuXG5cbmV4cG9ydCBjb25zdCBCZXR0ZXJUcmlhbmdsZSA9IHtcbiAgcDE6IG5ldyBQb2ludDJEKCksXG4gIHAyOiBuZXcgUG9pbnQyRCgpLFxuICBwMzogbmV3IFBvaW50MkQoKSxcblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGRyYXcocDEsIHAyLCBwMywgY29sb3IsIHN1cmZhY2UpIHtcbiAgICB0aGlzLnAxLnNldChwMSk7XG4gICAgdGhpcy5wMi5zZXQocDIpO1xuICAgIHRoaXMucDMuc2V0KHAzKTtcblxuICAgIEJldHRlclRyaWFuZ2xlLnNvcnRQb2ludHModGhpcy5wMSwgdGhpcy5wMiwgdGhpcy5wMyk7XG5cbiAgICBjb25zdCBsaW5lMTIgPSBMaW5lLmNhbGN1bGF0ZSh0aGlzLnAxLCB0aGlzLnAyKTtcbiAgICBjb25zdCBsaW5lMTMgPSBMaW5lLmNhbGN1bGF0ZSh0aGlzLnAxLCB0aGlzLnAzKTtcbiAgICBjb25zdCBsaW5lMjMgPSBMaW5lLmNhbGN1bGF0ZSh0aGlzLnAyLCB0aGlzLnAzKTtcblxuICAgIC8vIExpbmUuc3RlcCggbGluZTIzICk7XG5cbiAgICBCZXR0ZXJUcmlhbmdsZS5kcmF3SGFsZihsaW5lMTIsIGxpbmUxMywgY29sb3IsIGZhbHNlLCBzdXJmYWNlKTtcbiAgICBCZXR0ZXJUcmlhbmdsZS5kcmF3SGFsZihsaW5lMjMsIGxpbmUxMywgY29sb3IsIHRydWUsIHN1cmZhY2UpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVBXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsaW5lQlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlY29uZEhhbGZcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqL1xuICBkcmF3SGFsZihsaW5lQSwgbGluZUIsIGNvbG9yLCBzZWNvbmRIYWxmLCBzdXJmYWNlKSB7XG4gICAgY29uc3QgZGF0YSA9IHN1cmZhY2UuZ2V0RGF0YSgpO1xuXG4gICAgY29uc3QgY29sUiA9IGNvbG9yLnI7XG4gICAgY29uc3QgY29sRyA9IGNvbG9yLmc7XG4gICAgY29uc3QgY29sQiA9IGNvbG9yLmI7XG5cbiAgICBjb25zdCB3aWR0aCA9IHN1cmZhY2UuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBzdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gICAgbGV0IHkgPSBsaW5lQS5weTE7XG5cbiAgICBsZXQgbWF4WCA9IHdpZHRoO1xuICAgIGxldCBtaW5YID0gMDtcblxuICAgIGxldCBwdHIgPSAoeSAqIHdpZHRoICsgMSkgPDwgMjsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cblxuICAgIHdoaWxlIChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bm1vZGlmaWVkLWxvb3AtY29uZGl0aW9uXG4gICAgICAoKHNlY29uZEhhbGYgPT09IHRydWUpICYmICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgfHwgKGxpbmVCLmRvbmUgIT09IHRydWUpKSkgfHxcbiAgICAgICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgJiYgKGxpbmVCLmRvbmUgIT09IHRydWUpKVxuICAgICkge1xuICAgICAgTGluZS5zdGVwKGxpbmVBKTtcbiAgICAgIExpbmUuc3RlcChsaW5lQik7XG5cbiAgICAgIG1pblggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsaW5lQS5sYXN0UGxvdFgsIGxpbmVBLnB4U3RhcnQsIGxpbmVCLmxhc3RQbG90WCwgbGluZUIucHhTdGFydCkpO1xuXG4gICAgICBwdHIgKz0gKHdpZHRoIC0gbWF4WCArIG1pblggLSAxKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgICAgbWF4WCA9IE1hdGgubWluKHdpZHRoIC0gMSwgTWF0aC5tYXgobGluZUEubGFzdFBsb3RYLCBsaW5lQS5weFN0YXJ0LCBsaW5lQi5sYXN0UGxvdFgsIGxpbmVCLnB4U3RhcnQpKTtcblxuICAgICAgaWYgKCh5ID49IDApICYmICh5IDwgaGVpZ2h0KSkge1xuICAgICAgICBmb3IgKGxldCB4ID0gbWluWDsgeCA8PSBtYXhYOyB4KyspIHtcbiAgICAgICAgICBkYXRhW3B0cisrXSA9IGNvbFI7XG4gICAgICAgICAgZGF0YVtwdHIrK10gPSBjb2xHO1xuICAgICAgICAgIGRhdGFbcHRyKytdID0gY29sQjtcblxuICAgICAgICAgIHB0cisrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdHIgKz0gKG1heFggLSBtaW5YICsgMSkgPDwgMjsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICB9XG5cbiAgICAgIHkgKz0gbGluZUEuc3k7XG4gICAgfVxuXG4gICAgLyogaWYoICggc2Vjb25kSGFsZiA9PT0gdHJ1ZSApICYmICggKCBsaW5lQS5kb25lICE9PSB0cnVlICkgfHwgKCBsaW5lQi5kb25lICE9PSB0cnVlICkgKSApXG4gICAge1xuICAgICAgeSA9IHk7XG4gICAgfSAqL1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICovXG4gIHNvcnRQb2ludHMocDEsIHAyLCBwMykge1xuICAgIGlmIChwMy55IDwgcDEueSkge1xuICAgICAgcDMuc3dhcChwMSk7XG4gICAgfVxuXG4gICAgaWYgKHAyLnkgPCBwMS55KSB7XG4gICAgICBwMi5zd2FwKHAxKTtcbiAgICB9XG5cbiAgICBpZiAocDMueSA8IHAyLnkpIHtcbiAgICAgIHAzLnN3YXAocDIpO1xuICAgIH1cbiAgfVxufTtcblxuIiwiaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJy4vcG9pbnQtMmQnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcbmltcG9ydCB7IExpbmUgfSBmcm9tICcuL2xpbmUnO1xuXG5leHBvcnQgY29uc3QgQmV0dGVySW50ZXJwb2xhdGVkVHJpYW5nbGUgPSB7XG4gIHAxOiBuZXcgUG9pbnQyRCgpLFxuICBwMjogbmV3IFBvaW50MkQoKSxcbiAgcDM6IG5ldyBQb2ludDJEKCksXG4gIGMxOiBuZXcgQ29sb3IoKSxcbiAgYzI6IG5ldyBDb2xvcigpLFxuICBjMzogbmV3IENvbG9yKCksXG4gIGMxYzI6IG5ldyBDb2xvcigpLFxuICBjMWMzOiBuZXcgQ29sb3IoKSxcbiAgYzJjMzogbmV3IENvbG9yKCksXG4gIGNvbFNsaWRlcjogbmV3IENvbG9yKCksXG4gIGNMZWZ0OiBuZXcgQ29sb3IoKSxcbiAgY0xlZnQyOiBuZXcgQ29sb3IoKSxcbiAgY1JpZ2h0OiBuZXcgQ29sb3IoKSxcblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gYzFcbiAgICogQHBhcmFtIHtDb2xvcn0gYzJcbiAgICogQHBhcmFtIHtDb2xvcn0gYzNcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqL1xuICBkcmF3KHAxLCBwMiwgcDMsIGMxLCBjMiwgYzMsIHN1cmZhY2UpIHtcbiAgICB0aGlzLnAxLnNldChwMSk7XG4gICAgdGhpcy5wMi5zZXQocDIpO1xuICAgIHRoaXMucDMuc2V0KHAzKTtcbiAgICB0aGlzLmMxLnNldChjMSk7XG4gICAgdGhpcy5jMi5zZXQoYzIpO1xuICAgIHRoaXMuYzMuc2V0KGMzKTtcblxuICAgIHRoaXMuc29ydFBvaW50cyh0aGlzLnAxLCB0aGlzLnAyLCB0aGlzLnAzLCB0aGlzLmMxLCB0aGlzLmMyLCB0aGlzLmMzKTtcblxuICAgIGNvbnN0IGxpbmUxMiA9IExpbmUuY2FsY3VsYXRlKHRoaXMucDEsIHRoaXMucDIpO1xuICAgIGNvbnN0IGxpbmUxMyA9IExpbmUuY2FsY3VsYXRlKHRoaXMucDEsIHRoaXMucDMpO1xuICAgIGNvbnN0IGxpbmUyMyA9IExpbmUuY2FsY3VsYXRlKHRoaXMucDIsIHRoaXMucDMpO1xuXG4gICAgdGhpcy5jMWMyLmludGVycG9sYXRlKFxuICAgICAgdGhpcy5jMSxcbiAgICAgIHRoaXMuYzIsXG4gICAgICB0aGlzLnAxLmRpc3RhbmNlKHRoaXMucDIpLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICB0aGlzLmMxYzMuaW50ZXJwb2xhdGUoXG4gICAgICB0aGlzLmMxLFxuICAgICAgdGhpcy5jMyxcbiAgICAgIHRoaXMucDEuZGlzdGFuY2UodGhpcy5wMyksXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHRoaXMuYzJjMy5pbnRlcnBvbGF0ZShcbiAgICAgIHRoaXMuYzIsXG4gICAgICB0aGlzLmMzLFxuICAgICAgdGhpcy5wMi5kaXN0YW5jZSh0aGlzLnAzKSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgdGhpcy5jMWMyLm11bHRpcGx5QnlWYWwoTWF0aC5hYnModGhpcy5wMS5kaXN0YW5jZSh0aGlzLnAyKSAvIChsaW5lMTIucHkxIC0gbGluZTEyLnB5MikpLCB0cnVlKTtcbiAgICB0aGlzLmMxYzMubXVsdGlwbHlCeVZhbChNYXRoLmFicyh0aGlzLnAxLmRpc3RhbmNlKHRoaXMucDMpIC8gKGxpbmUxMy5weTEgLSBsaW5lMTMucHkyKSksIHRydWUpO1xuICAgIHRoaXMuYzJjMy5tdWx0aXBseUJ5VmFsKE1hdGguYWJzKHRoaXMucDIuZGlzdGFuY2UodGhpcy5wMykgLyAobGluZTIzLnB5MSAtIGxpbmUyMy5weTIpKSwgdHJ1ZSk7XG5cbiAgICB0aGlzLmNMZWZ0LnNldCh0aGlzLmMxKTtcbiAgICB0aGlzLmNSaWdodC5zZXQodGhpcy5jMSk7XG4gICAgdGhpcy5jTGVmdDIuc2V0KHRoaXMuYzIpO1xuXG4gICAgdGhpcy5jUmlnaHQuYWRkKHRoaXMuYzFjMywgdHJ1ZSk7XG5cbiAgICBMaW5lLnN0ZXAobGluZTIzKTtcbiAgICB0aGlzLmNMZWZ0Mi5hZGQodGhpcy5jMmMzLCB0cnVlKTtcblxuICAgIHRoaXMuZHJhd0hhbGYobGluZTEyLCBsaW5lMTMsIHRoaXMuY0xlZnQsIHRoaXMuY1JpZ2h0LCB0aGlzLmMxYzIsIHRoaXMuYzFjMywgZmFsc2UsIHN1cmZhY2UpO1xuICAgIHRoaXMuZHJhd0hhbGYobGluZTIzLCBsaW5lMTMsIHRoaXMuY0xlZnQyLCB0aGlzLmNSaWdodCwgdGhpcy5jMmMzLCB0aGlzLmMxYzMsIHRydWUsIHN1cmZhY2UpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVBXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsaW5lQlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xMZWZ0XG4gICAqIEBwYXJhbSB7Q29sb3J9IGNvbFJpZ2h0XG4gICAqIEBwYXJhbSB7Q29sb3J9IGNvbEFkZGVyTGVmdFxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xBZGRlclJpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2Vjb25kSGFsZlxuICAgKiBAcGFyYW0ge1N1cmZhY2V9IHN1cmZhY2VcbiAgICovXG4gIGRyYXdIYWxmKGxpbmVBLCBsaW5lQiwgY29sTGVmdCwgY29sUmlnaHQsIGNvbEFkZGVyTGVmdCwgY29sQWRkZXJSaWdodCwgc2Vjb25kSGFsZiwgc3VyZmFjZSkge1xuICAgIGNvbnN0IGRhdGEgPSBzdXJmYWNlLmdldERhdGEoKTtcblxuICAgIGNvbnN0IHdpZHRoID0gc3VyZmFjZS5nZXRXaWR0aCgpO1xuICAgIGNvbnN0IGhlaWdodCA9IHN1cmZhY2UuZ2V0SGVpZ2h0KCk7XG5cbiAgICBsZXQgeSA9IGxpbmVBLnB5MTtcblxuICAgIGxldCBtYXhYID0gd2lkdGg7XG4gICAgbGV0IG1pblggPSAwO1xuXG4gICAgbGV0IHB0ciA9ICh5ICogd2lkdGggKyAxKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIHdoaWxlIChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bm1vZGlmaWVkLWxvb3AtY29uZGl0aW9uXG4gICAgICAoKHNlY29uZEhhbGYgPT09IHRydWUpICYmICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgfHwgKGxpbmVCLmRvbmUgIT09IHRydWUpKSkgfHxcbiAgICAgICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgJiYgKGxpbmVCLmRvbmUgIT09IHRydWUpKVxuICAgICkge1xuICAgICAgTGluZS5zdGVwKGxpbmVBKTtcbiAgICAgIExpbmUuc3RlcChsaW5lQik7XG5cbiAgICAgIG1pblggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsaW5lQS5sYXN0UGxvdFgsIGxpbmVBLnB4U3RhcnQsIGxpbmVCLmxhc3RQbG90WCwgbGluZUIucHhTdGFydCkpO1xuXG4gICAgICBwdHIgKz0gKHdpZHRoIC0gbWF4WCArIG1pblggLSAxKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgICAgbWF4WCA9IE1hdGgubWluKHdpZHRoIC0gMSwgTWF0aC5tYXgobGluZUEubGFzdFBsb3RYLCBsaW5lQS5weFN0YXJ0LCBsaW5lQi5sYXN0UGxvdFgsIGxpbmVCLnB4U3RhcnQpKTtcblxuICAgICAgaWYgKCh5ID49IDApICYmICh5IDwgaGVpZ2h0KSAmJiAobWluWCA8PSBtYXhYKSkge1xuICAgICAgICBsZXQgY29sUiwgY29sRywgY29sQjtcblxuICAgICAgICBpZiAoTWF0aC5taW4obGluZUEubGFzdFBsb3RYLCBsaW5lQS5weFN0YXJ0KSA8IE1hdGgubWluKGxpbmVCLmxhc3RQbG90WCwgbGluZUIucHhTdGFydCkpIHtcbiAgICAgICAgICB0aGlzLmNvbFNsaWRlci5zZXQoY29sUmlnaHQpO1xuICAgICAgICAgIHRoaXMuY29sU2xpZGVyLnN1YnRyYWN0KGNvbExlZnQsIHRydWUpO1xuXG4gICAgICAgICAgY29sUiA9IGNvbExlZnQucjtcbiAgICAgICAgICBjb2xHID0gY29sTGVmdC5nO1xuICAgICAgICAgIGNvbEIgPSBjb2xMZWZ0LmI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb2xTbGlkZXIuc2V0KGNvbExlZnQpO1xuICAgICAgICAgIHRoaXMuY29sU2xpZGVyLnN1YnRyYWN0KGNvbFJpZ2h0LCB0cnVlKTtcblxuICAgICAgICAgIGNvbFIgPSBjb2xSaWdodC5yO1xuICAgICAgICAgIGNvbEcgPSBjb2xSaWdodC5nO1xuICAgICAgICAgIGNvbEIgPSBjb2xSaWdodC5iO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb2xTbGlkZXIuZGl2aWRlQnlWYWwobWF4WCAtIG1pblggKyAxLCB0cnVlKTtcblxuXG4gICAgICAgIGZvciAobGV0IHggPSBtaW5YOyB4IDw9IG1heFg7IHgrKykge1xuICAgICAgICAgIGRhdGFbcHRyKytdID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKGNvbFIpKSk7XG4gICAgICAgICAgZGF0YVtwdHIrK10gPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIE1hdGgucm91bmQoY29sRykpKTtcbiAgICAgICAgICBkYXRhW3B0cisrXSA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChjb2xCKSkpO1xuXG4gICAgICAgICAgcHRyKys7XG5cbiAgICAgICAgICBjb2xSICs9IHRoaXMuY29sU2xpZGVyLnI7XG4gICAgICAgICAgY29sRyArPSB0aGlzLmNvbFNsaWRlci5nO1xuICAgICAgICAgIGNvbEIgKz0gdGhpcy5jb2xTbGlkZXIuYjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHRyICs9IChtYXhYIC0gbWluWCArIDEpIDw8IDI7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfVxuXG5cbiAgICAgIGNvbExlZnQuYWRkKGNvbEFkZGVyTGVmdCwgdHJ1ZSk7XG4gICAgICBjb2xSaWdodC5hZGQoY29sQWRkZXJSaWdodCwgdHJ1ZSk7XG5cbiAgICAgIHkgKz0gbGluZUEuc3k7XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gYzFcbiAgICogQHBhcmFtIHtDb2xvcn0gYzJcbiAgICogQHBhcmFtIHtDb2xvcn0gYzNcbiAgICovXG4gIHNvcnRQb2ludHMocDEsIHAyLCBwMywgYzEsIGMyLCBjMykge1xuICAgIGlmIChwMy55IDwgcDEueSkge1xuICAgICAgcDMuc3dhcChwMSk7XG4gICAgICBjMy5zd2FwKGMxKTtcbiAgICB9XG5cbiAgICBpZiAocDIueSA8IHAxLnkpIHtcbiAgICAgIHAyLnN3YXAocDEpO1xuICAgICAgYzIuc3dhcChjMSk7XG4gICAgfVxuXG4gICAgaWYgKHAzLnkgPCBwMi55KSB7XG4gICAgICBwMy5zd2FwKHAyKTtcbiAgICAgIGMzLnN3YXAoYzIpO1xuICAgIH1cbiAgfVxufTtcblxuIiwiaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJy4vcG9pbnQtMmQnO1xuaW1wb3J0IHsgUG9pbnQzRCB9IGZyb20gJy4vcG9pbnQtM2QnO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vbGluZSc7XG5cbmV4cG9ydCBjb25zdCBUZXh0dXJlZFRyaWFuZ2xlID0ge1xuICBwMTogbmV3IFBvaW50MkQoKSxcbiAgcDI6IG5ldyBQb2ludDJEKCksXG4gIHAzOiBuZXcgUG9pbnQyRCgpLFxuICB1djE6IG5ldyBQb2ludDNEKCksXG4gIHV2MjogbmV3IFBvaW50M0QoKSxcbiAgdXYzOiBuZXcgUG9pbnQzRCgpLFxuICB1dk11bDogbmV3IFBvaW50M0QoKSxcbiAgdXYxMjogbmV3IFBvaW50M0QoKSxcbiAgdXYxMzogbmV3IFBvaW50M0QoKSxcbiAgdXYyMzogbmV3IFBvaW50M0QoKSxcbiAgdXZMZWZ0OiBuZXcgUG9pbnQzRCgpLFxuICB1dlJpZ2h0OiBuZXcgUG9pbnQzRCgpLFxuICB1dkxlZnQyOiBuZXcgUG9pbnQzRCgpLFxuICB1dlBvczogbmV3IFBvaW50M0QoKSxcbiAgdXZTbGlkZXI6IG5ldyBQb2ludDNEKCksXG4gIHVkOiBuZXcgUG9pbnQyRCgpLFxuICBwZDogbmV3IFBvaW50MkQoKSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwM1xuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2MVxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2MlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2M1xuICAgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmVcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqL1xuXG4gIGRyYXcocDEsIHAyLCBwMywgdXYxLCB1djIsIHV2MywgdGV4dHVyZSwgc3VyZmFjZSkge1xuICAgIHRoaXMucDEuc2V0KHAxKTtcbiAgICB0aGlzLnAyLnNldChwMik7XG4gICAgdGhpcy5wMy5zZXQocDMpO1xuICAgIHRoaXMudXYxLnNldCh1djEpO1xuICAgIHRoaXMudXYyLnNldCh1djIpO1xuICAgIHRoaXMudXYzLnNldCh1djMpO1xuXG4gICAgdGhpcy5zb3J0UG9pbnRzKHRoaXMucDEsIHRoaXMucDIsIHRoaXMucDMsIHRoaXMudXYxLCB0aGlzLnV2MiwgdGhpcy51djMpO1xuXG4gICAgY29uc3QgbGluZTEyID0gTGluZS5jYWxjdWxhdGUodGhpcy5wMSwgdGhpcy5wMik7XG4gICAgY29uc3QgbGluZTEzID0gTGluZS5jYWxjdWxhdGUodGhpcy5wMSwgdGhpcy5wMyk7XG4gICAgY29uc3QgbGluZTIzID0gTGluZS5jYWxjdWxhdGUodGhpcy5wMiwgdGhpcy5wMyk7XG5cbiAgICAvLyBDb252ZXJ0IFVWIDAuLjEgcmFuZ2UgdG8gcmVhbCB0ZXh0dXJlIGNvb3JkaW5hdGVzXG4gICAgdGhpcy51dk11bC5zZXQodGV4dHVyZS5nZXRXaWR0aCgpIC0gMSwgdGV4dHVyZS5nZXRIZWlnaHQoKSAtIDEsIDEpO1xuICAgIHRoaXMudXYxLm11bHRpcGx5KHRoaXMudXZNdWwpO1xuICAgIHRoaXMudXYyLm11bHRpcGx5KHRoaXMudXZNdWwpO1xuICAgIHRoaXMudXYzLm11bHRpcGx5KHRoaXMudXZNdWwpO1xuXG4gICAgdGhpcy51djEucm91bmQoKTtcbiAgICB0aGlzLnV2Mi5yb3VuZCgpO1xuICAgIHRoaXMudXYzLnJvdW5kKCk7XG5cbiAgICB0aGlzLmludGVycG9sYXRlKGxpbmUxMiwgdGhpcy51djEsIHRoaXMudXYyLCB0aGlzLnV2MTIpO1xuICAgIHRoaXMuaW50ZXJwb2xhdGUobGluZTEzLCB0aGlzLnV2MSwgdGhpcy51djMsIHRoaXMudXYxMyk7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZShsaW5lMjMsIHRoaXMudXYyLCB0aGlzLnV2MywgdGhpcy51djIzKTtcblxuICAgIExpbmUuc3RlcChsaW5lMjMpO1xuXG4gICAgdGhpcy51dkxlZnQuc2V0KHRoaXMudXYxKTtcbiAgICB0aGlzLnV2UmlnaHQuc2V0KHRoaXMudXYxKTtcbiAgICB0aGlzLnV2TGVmdDIuc2V0KHRoaXMudXYyKTtcblxuICAgIGNvbnN0IHV2MTJMZW5ndGggPSBNYXRoLnNxcnQoXG4gICAgICAodGhpcy51djIueCAtIHRoaXMudXYxLngpICogKHRoaXMudXYyLnggLSB0aGlzLnV2MS54KSArXG4gICAgICAodGhpcy51djIueSAtIHRoaXMudXYxLnkpICogKHRoaXMudXYyLnkgLSB0aGlzLnV2MS55KVxuICAgICk7XG5cbiAgICBjb25zdCB1djEzTGVuZ3RoID0gTWF0aC5zcXJ0KFxuICAgICAgKHRoaXMudXYzLnggLSB0aGlzLnV2MS54KSAqICh0aGlzLnV2My54IC0gdGhpcy51djEueCkgK1xuICAgICAgKHRoaXMudXYzLnkgLSB0aGlzLnV2MS55KSAqICh0aGlzLnV2My55IC0gdGhpcy51djEueSlcbiAgICApO1xuXG4gICAgY29uc3QgdXYyM0xlbmd0aCA9IE1hdGguc3FydChcbiAgICAgICh0aGlzLnV2My54IC0gdGhpcy51djIueCkgKiAodGhpcy51djMueCAtIHRoaXMudXYyLngpICtcbiAgICAgICh0aGlzLnV2My55IC0gdGhpcy51djIueSkgKiAodGhpcy51djMueSAtIHRoaXMudXYyLnkpXG4gICAgKTtcblxuICAgIHRoaXMudXZSaWdodC5hZGQodGhpcy51djEzLCB0cnVlKTtcbiAgICB0aGlzLnV2TGVmdC5hZGQodGhpcy51djEyLCB0cnVlKTtcbiAgICB0aGlzLnV2TGVmdDIuYWRkKHRoaXMudXYyMyk7XG5cbiAgICB0aGlzLmRyYXdIYWxmKGxpbmUxMiwgbGluZTEzLCB0aGlzLnV2TGVmdCwgdGhpcy51dlJpZ2h0LCB0aGlzLnV2MTIsIHRoaXMudXYxMywgdGV4dHVyZSwgZmFsc2UsIHV2MTJMZW5ndGgsXG4gICAgICB1djEzTGVuZ3RoLCBzdXJmYWNlKTtcbiAgICB0aGlzLmRyYXdIYWxmKGxpbmUyMywgbGluZTEzLCB0aGlzLnV2TGVmdDIsIHRoaXMudXZSaWdodCwgdGhpcy51djIzLCB0aGlzLnV2MTMsIHRleHR1cmUsIHRydWUsIHV2MjNMZW5ndGgsXG4gICAgICB1djEzTGVuZ3RoLCBzdXJmYWNlKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsaW5lXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gdXYxXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gdXYyXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gcmVzdWx0TGluZVxuICAgKi9cbiAgaW50ZXJwb2xhdGUobGluZSwgdXYxLCB1djIsIHJlc3VsdExpbmUpIHtcbiAgICByZXN1bHRMaW5lLnggPSAodXYyLnggLSB1djEueCkgLyAoKGxpbmUuZHkgKyAxKSAqIGxpbmUuc3kpO1xuICAgIHJlc3VsdExpbmUueSA9ICh1djIueSAtIHV2MS55KSAvICgobGluZS5keSArIDEpICogbGluZS5zeSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcGFyYW0ge29iamVjdH0gbGluZUFcbiAgICogQHBhcmFtIHtvYmplY3R9IGxpbmVCXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gdXZMZWZ0XG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gdXZSaWdodFxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2QWRkZXJMZWZ0XG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gdXZBZGRlclJpZ2h0XG4gICAqIEBwYXJhbSB7TWF0ZXJpYWx9IHRleHR1cmVcbiAgICogQHBhcmFtIHtCb29sZWFufSBzZWNvbmRIYWxmXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB1dkxlZnRMZW5ndGhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHV2UmlnaHRMZW5ndGhcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqL1xuICBkcmF3SGFsZihsaW5lQSwgbGluZUIsIHV2TGVmdCwgdXZSaWdodCwgdXZBZGRlckxlZnQsIHV2QWRkZXJSaWdodCwgdGV4dHVyZSwgc2Vjb25kSGFsZiwgdXZMZWZ0TGVuZ3RoLCB1dlJpZ2h0TGVuZ3RoLFxuICAgIHN1cmZhY2UpIHtcbiAgICBjb25zdCBkYXRhID0gc3VyZmFjZS5nZXREYXRhKCk7XG4gICAgY29uc3QgdXZEYXRhID0gdGV4dHVyZS5kYXRhO1xuXG4gICAgY29uc3Qgd2lkdGggPSBzdXJmYWNlLmdldFdpZHRoKCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gc3VyZmFjZS5nZXRIZWlnaHQoKTtcblxuICAgIGNvbnN0IHV2V2lkdGggPSB0ZXh0dXJlLmdldFdpZHRoKCk7XG5cbiAgICBsZXQgeSA9IGxpbmVBLnB5MTtcblxuICAgIGxldCBtYXhYID0gd2lkdGg7XG4gICAgbGV0IG1pblggPSAwO1xuXG4gICAgbGV0IHB0ciA9ICh5ICogd2lkdGggKyAxKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIHdoaWxlIChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bm1vZGlmaWVkLWxvb3AtY29uZGl0aW9uXG4gICAgICAoKHNlY29uZEhhbGYgPT09IHRydWUpICYmICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgfHwgKGxpbmVCLmRvbmUgIT09IHRydWUpKSkgfHxcbiAgICAgICgobGluZUEuZG9uZSAhPT0gdHJ1ZSkgJiYgKGxpbmVCLmRvbmUgIT09IHRydWUpKVxuICAgICkge1xuICAgICAgTGluZS5zdGVwKGxpbmVBKTtcbiAgICAgIExpbmUuc3RlcChsaW5lQik7XG5cbiAgICAgIG1pblggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsaW5lQS5sYXN0UGxvdFgsIGxpbmVBLnB4U3RhcnQsIGxpbmVCLmxhc3RQbG90WCwgbGluZUIucHhTdGFydCkpO1xuXG4gICAgICBwdHIgKz0gKHdpZHRoIC0gbWF4WCArIG1pblggLSAxKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgICAgbWF4WCA9IE1hdGgubWluKHdpZHRoIC0gMSwgTWF0aC5tYXgobGluZUEubGFzdFBsb3RYLCBsaW5lQS5weFN0YXJ0LCBsaW5lQi5sYXN0UGxvdFgsIGxpbmVCLnB4U3RhcnQpKTtcblxuICAgICAgaWYgKCh5ID49IDApICYmICh5IDwgaGVpZ2h0KSAmJiAobWluWCA8PSBtYXhYKSkge1xuICAgICAgICBpZiAoTWF0aC5taW4obGluZUEubGFzdFBsb3RYLCBsaW5lQS5weFN0YXJ0KSA8IE1hdGgubWluKGxpbmVCLmxhc3RQbG90WCwgbGluZUIucHhTdGFydCkpIHtcbiAgICAgICAgICB0aGlzLnV2U2xpZGVyLnNldCh1dlJpZ2h0KTtcbiAgICAgICAgICB0aGlzLnV2U2xpZGVyLnN1YnRyYWN0KHV2TGVmdCwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy51dlBvcy5zZXQodXZMZWZ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnV2U2xpZGVyLnNldCh1dkxlZnQpO1xuICAgICAgICAgIHRoaXMudXZTbGlkZXIuc3VidHJhY3QodXZSaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy51dlBvcy5zZXQodXZSaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV2U2xpZGVyLmRpdmlkZUJ5VmFsKE1hdGgubWF4KG1heFggLSBtaW5YICsgMSwgMSkpO1xuXG4gICAgICAgIC8vIHkgPSB5OyAvLyBkZWJ1Z1xuXG4gICAgICAgIGZvciAobGV0IHggPSBtaW5YOyB4IDw9IG1heFg7IHgrKykge1xuICAgICAgICAgIGNvbnN0IHV2WCA9IE1hdGgucm91bmQodGhpcy51dlBvcy54KTtcbiAgICAgICAgICBjb25zdCB1dlkgPSBNYXRoLnJvdW5kKHRoaXMudXZQb3MueSk7XG5cbiAgICAgICAgICBjb25zdCB1dlB0ciA9ICh1dlkgKiB1dldpZHRoICsgdXZYKSA8PCAyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgICAgICAgIGRhdGFbcHRyKytdID0gdXZEYXRhW3V2UHRyXTtcbiAgICAgICAgICBkYXRhW3B0cisrXSA9IHV2RGF0YVt1dlB0ciArIDFdO1xuICAgICAgICAgIGRhdGFbcHRyKytdID0gdXZEYXRhW3V2UHRyICsgMl07XG5cbiAgICAgICAgICBwdHIrKztcblxuICAgICAgICAgIHRoaXMudXZQb3MuYWRkKHRoaXMudXZTbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51dlBvcy5zdWJ0cmFjdCh0aGlzLnV2U2xpZGVyKTtcbiAgICAgICAgLy8geSA9IHk7IC8vIGRlYnVnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdHIgKz0gKG1heFggLSBtaW5YICsgMSkgPDwgMjsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICB9XG5cblxuICAgICAgdXZMZWZ0LmFkZCh1dkFkZGVyTGVmdCk7XG4gICAgICB1dlJpZ2h0LmFkZCh1dkFkZGVyUmlnaHQpO1xuXG4gICAgICB5ICs9IGxpbmVBLnN5O1xuICAgIH1cblxuICAgIHV2TGVmdC5zdWJ0cmFjdCh1dkFkZGVyTGVmdCk7XG4gICAgdXZSaWdodC5zdWJ0cmFjdCh1dkFkZGVyUmlnaHQpO1xuICAgIC8vIHV2UmlnaHRPcmlnLnNldCggdXZSaWdodCApO1xuICB9LFxuXG5cbiAgc29ydFBvaW50cyhwMSwgcDIsIHAzLCB1djEsIHV2MiwgdXYzKSB7XG4gICAgaWYgKHAzLnkgPCBwMS55KSB7XG4gICAgICBwMy5zd2FwKHAxKTtcbiAgICAgIHV2My5zd2FwKHV2MSk7XG4gICAgfVxuXG4gICAgaWYgKHAyLnkgPCBwMS55KSB7XG4gICAgICBwMi5zd2FwKHAxKTtcbiAgICAgIHV2Mi5zd2FwKHV2MSk7XG4gICAgfVxuXG4gICAgaWYgKHAzLnkgPCBwMi55KSB7XG4gICAgICBwMy5zd2FwKHAyKTtcbiAgICAgIHV2My5zd2FwKHV2Mik7XG4gICAgfVxuICB9XG59O1xuIiwiLy8gaW1wb3J0IHsgU3VyZmFjZSB9IGZyb20gJy4vc3VyZmFjZSc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3InO1xuLy8gaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJy4vcG9pbnQtMmQnO1xuLy8gaW1wb3J0IHsgUG9pbnQzRCB9IGZyb20gJy4vcG9pbnQtM2QnO1xuLy8gaW1wb3J0IHsgQ2FudmFzVGV4dHVyZSB9IGZyb20gJy4vY2FudmFzLXRleHR1cmUnO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vbGluZSc7XG5pbXBvcnQgeyBCZXR0ZXJUcmlhbmdsZSB9IGZyb20gJy4vYmV0dGVyLXRyaWFuZ2xlJztcbmltcG9ydCB7IEJldHRlckludGVycG9sYXRlZFRyaWFuZ2xlIH0gZnJvbSAnLi9iZXR0ZXItaW50ZXJwb2xhdGVkLXRyaWFuZ2xlJztcbmltcG9ydCB7IFRleHR1cmVkVHJpYW5nbGUgfSBmcm9tICcuL3RleHR1cmVkLXRyaWFuZ2xlJztcblxuXG5leHBvcnQgY29uc3QgRHJhdyA9IHtcblxuICAvKipcbiAgICogQHR5cGUge1N1cmZhY2V9XG4gICAqL1xuICBzdXJmYWNlOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Q29sb3J9XG4gICAqL1xuICBjb2xvcjogbmV3IENvbG9yKDI1NSwgMCwgMCksXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtDb2xvcn1cbiAgICovXG4gIGJnQ29sb3I6IG5ldyBDb2xvcig2NCwgNjQsIDY0KSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N1cmZhY2V9IHN1cmZhY2VcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0U3VyZmFjZTogZnVuY3Rpb24gKHN1cmZhY2UpIHtcbiAgICBEcmF3LnN1cmZhY2UgPSBzdXJmYWNlO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtTdXJmYWNlfVxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRTdXJmYWNlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERyYXcuc3VyZmFjZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBiZWdpblBhaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgRHJhdy5zdXJmYWNlLmJlZ2luUGFpbnQoKTtcbiAgICBEcmF3LmNsZWFyKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZW5kUGFpbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBEcmF3LnN1cmZhY2UuZW5kUGFpbnQoKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICogQHB1YmxpY1xuICAgKi9cblxuICBpc0RyYXdpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gRHJhdy5zdXJmYWNlLmlzRHJhd2luZygpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgRHJhdy5zdXJmYWNlLmNsZWFyKERyYXcuYmdDb2xvcik7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwb2ludFxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRQaXhlbDogZnVuY3Rpb24gKHBvaW50LCBjb2xvcikge1xuICAgIGNvbnN0IHggPSBNYXRoLnJvdW5kKHBvaW50LngpO1xuICAgIGNvbnN0IHkgPSBNYXRoLnJvdW5kKHBvaW50LnkpO1xuXG4gICAgaWYgKCh4IDwgMCkgfHwgKHkgPCAwKSB8fCAoeCA+PSBEcmF3LnN1cmZhY2UuZ2V0V2lkdGgoKSkgfHwgKHkgPj0gRHJhdy5zdXJmYWNlLmdldEhlaWdodCgpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBEcmF3LnN1cmZhY2UuZ2V0RGF0YSgpO1xuICAgIGxldCBwdHIgPSAoeCArICh5ICogRHJhdy5zdXJmYWNlLmdldFdpZHRoKCkpKSAqIDQ7XG5cbiAgICBkYXRhW3B0cisrXSA9IGNvbG9yLnI7XG4gICAgZGF0YVtwdHIrK10gPSBjb2xvci5nO1xuICAgIGRhdGFbcHRyXSA9IGNvbG9yLmI7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwb2ludFxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICAgKiBAcHVibGljXG4gICAqL1xuICBibGVuZFBpeGVsOiBmdW5jdGlvbiAocG9pbnQsIGNvbG9yKSB7XG4gICAgY29uc3QgeCA9IE1hdGgucm91bmQocG9pbnQueCk7XG4gICAgY29uc3QgeSA9IE1hdGgucm91bmQocG9pbnQueSk7XG5cbiAgICBpZiAoKHggPCAwKSB8fCAoeSA8IDApIHx8ICh4ID49IERyYXcuc3VyZmFjZS5nZXRXaWR0aCgpKSB8fCAoeSA+PSBEcmF3LnN1cmZhY2UuZ2V0SGVpZ2h0KCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IERyYXcuc3VyZmFjZS5nZXREYXRhKCk7XG4gICAgY29uc3QgcHRyID0gKHggKyAoeSAqIERyYXcuc3VyZmFjZS5nZXRXaWR0aCgpKSkgKiA0O1xuICAgIGNvbnN0IHB0cnBwID0gcHRyICsgMTtcbiAgICBjb25zdCBwdHJwMiA9IHB0ciArIDI7XG4gICAgY29uc3QgY29sTXVsID0gY29sb3IuYSAvIDI1NTtcblxuICAgIGNvbnN0IHJkID0gKGNvbG9yLnIgLSBkYXRhW3B0cl0pICogY29sTXVsO1xuICAgIGNvbnN0IGdkID0gKGNvbG9yLmcgLSBkYXRhW3B0cnBwXSkgKiBjb2xNdWw7XG4gICAgY29uc3QgYmQgPSAoY29sb3IuYiAtIGRhdGFbcHRycDJdKSAqIGNvbE11bDtcblxuICAgIGRhdGFbcHRyXSArPSByZDtcbiAgICBkYXRhW3B0cnBwXSArPSBnZDtcbiAgICBkYXRhW3B0cnAyXSArPSBiZDtcbiAgfSxcblxuXG4gIGJsZW5kVmFsdWU6IGZ1bmN0aW9uIChiZ1ZhbHVlLCBmZ1ZhbHVlLCBvcGFjaXR5KSB7XG4gICAgaWYgKG9wYWNpdHkgPT09IDI1NSkge1xuICAgICAgcmV0dXJuIGZnVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG9wYWNpdHkgPT09IDApIHtcbiAgICAgIHJldHVybiBiZ1ZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIGJnVmFsdWUgKyBNYXRoLnJvdW5kKChmZ1ZhbHVlIC0gYmdWYWx1ZSkgKiAob3BhY2l0eSAvIDI1NSkpKSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGxpbmU6IGZ1bmN0aW9uIChwMSwgcDIsIGNvbG9yKSB7XG4gICAgTGluZS5kcmF3KHAxLCBwMiwgY29sb3IsIERyYXcuc3VyZmFjZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdHJpYW5nbGU6IGZ1bmN0aW9uIChwMSwgcDIsIHAzLCBjb2xvcikge1xuICAgIEJldHRlclRyaWFuZ2xlLmRyYXcocDEsIHAyLCBwMywgY29sb3IsIERyYXcuc3VyZmFjZSk7XG4gICAgLy8gQmV0dGVyVGV4dHVyZWRUcmlhbmdsZS5kcmF3KCBwMSwgcDIsIHAzLCBjb2xvciApO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDFcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAzXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMxXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMyXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMzXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGludGVycG9sYXRlZFRyaWFuZ2xlOiBmdW5jdGlvbiAocDEsIHAyLCBwMywgYzEsIGMyLCBjMykge1xuICAgIEJldHRlckludGVycG9sYXRlZFRyaWFuZ2xlLmRyYXcocDEsIHAyLCBwMywgYzEsIGMyLCBjMywgRHJhdy5zdXJmYWNlKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwM1xuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2MVxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2MlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHV2M1xuICAgKiBAcGFyYW0ge0NhbnZhc1RleHR1cmV9IHRleHR1cmVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdGV4dHVyZWRUcmlhbmdsZTogZnVuY3Rpb24gKHAxLCBwMiwgcDMsIHV2MSwgdXYyLCB1djMsIHRleHR1cmUpIHtcbiAgICBUZXh0dXJlZFRyaWFuZ2xlLmRyYXcocDEsIHAyLCBwMywgdXYxLCB1djIsIHV2MywgdGV4dHVyZSwgRHJhdy5zdXJmYWNlKTtcbiAgfVxufTtcbiIsImltcG9ydCB7IEhlbHBlciB9IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7IFZpcnR1YWxTdXJmYWNlIH0gZnJvbSAnLi92aXJ0dWFsLXN1cmZhY2UnO1xuaW1wb3J0IHsgRHJhdyB9IGZyb20gJy4vZHJhdyc7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvcihjYW52YXNFbGVtZW50SWQpIHtcbiAgICB0aGlzLmRyYXdpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcblxuICAgIGlmIChjYW52YXNFbGVtZW50SWQpIHtcbiAgICAgIHRoaXMuY2FudmFzSWQgPSBjYW52YXNFbGVtZW50SWQ7XG4gICAgICB0aGlzLmNhbnZhcyA9IEhlbHBlci5nZXRFbGVtZW50KHRoaXMuY2FudmFzSWQpO1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIHRoaXMuY2FudmFzUGl4ZWxzID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5jcmVhdGVJbWFnZURhdGEodGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgIHRoaXMudmlydHVhbFN1cmZhY2UgPSBuZXcgVmlydHVhbFN1cmZhY2UodGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCwgdGhpcy5jYW52YXNQaXhlbHMuZGF0YSk7XG4gICAgICB0aGlzLnZpcnR1YWxTdXJmYWNlLmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgIHRoaXMuY2FudmFzSWQgPSAnJztcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLmNhbnZhc1BpeGVscyA9IG51bGw7XG4gICAgICB0aGlzLnZpcnR1YWxTdXJmYWNlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3RhcnREcmF3aW5nKCkge1xuICAgIHRoaXMuZHJhd2luZyA9IHRydWU7XG5cbiAgICBEcmF3LnNldFN1cmZhY2UodGhpcy52aXJ0dWFsU3VyZmFjZSk7XG5cbiAgICAvLyBEcmF3LnNldFN1cmZhY2UoIHRoaXMudmlydHVhbFN1cmZhY2UgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBlbmREcmF3aW5nKHB1c2hUb0NhbnZhcykge1xuICAgIGlmIChwdXNoVG9DYW52YXMgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJykucHV0SW1hZ2VEYXRhKHRoaXMuY2FudmFzUGl4ZWxzLCAwLCAwKTtcbiAgICB9XG5cbiAgICB0aGlzLmRyYXdpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaXNEcmF3aW5nKCkge1xuICAgIHJldHVybiB0aGlzLmRyYXdpbmc7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBkcmF3KCkge1xuXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGlzUGF1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1BhdXNlZFxuICAgKi9cbiAgc2V0UGF1c2VkKGlzUGF1c2VkKSB7XG4gICAgdGhpcy5wYXVzZWQgPSBpc1BhdXNlZDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yJztcblxuZXhwb3J0IGNsYXNzIE5vcm1hbGl6ZWRDb2xvciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ8Tm9ybWFsaXplZENvbG9yfENvbG9yfSBbcj0wXVxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IFtnPTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW2I9MF1cbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8TnVtYmVyfSBbYT0xXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHIsIGcsIGIsIGEpIHtcbiAgICB0aGlzLnNldChyLCBnLCBiLCBhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Zsb2F0fENvbG9yfE5vcm1hbGl6ZWRDb2xvcn0gW3I9MF1cbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8TnVtYmVyfSBbZz0wXVxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IFtiPTBdXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gW2E9MV1cbiAgICovXG4gIHNldChyLCBnLCBiLCBhKSB7XG4gICAgaWYgKHIgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgci5nZXROb3JtYWxpemVkQ29sb3IodGhpcyk7XG4gICAgfSBlbHNlIGlmIChyIGluc3RhbmNlb2YgTm9ybWFsaXplZENvbG9yKSB7XG4gICAgICB0aGlzLnIgPSByLnI7XG4gICAgICB0aGlzLmcgPSByLmc7XG4gICAgICB0aGlzLmIgPSByLmI7XG4gICAgICB0aGlzLmEgPSByLmE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuciA9IE1hdGgubWF4KE1hdGgubWluKHIsIDEpLCAwKSB8fCAwO1xuICAgICAgdGhpcy5nID0gTWF0aC5tYXgoTWF0aC5taW4oZywgMSksIDApIHx8IDA7XG4gICAgICB0aGlzLmIgPSBNYXRoLm1heChNYXRoLm1pbihiLCAxKSwgMCkgfHwgMDtcbiAgICAgIHRoaXMuYSA9IE1hdGgubWF4KE1hdGgubWluKGEsIDEpLCAwKSB8fCAxO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICAgKi9cbiAgZ2V0Q29sb3IoY29sb3IpIHtcbiAgICBjb2xvci5yID0gTWF0aC5yb3VuZCh0aGlzLnIgKiAyNTUpO1xuICAgIGNvbG9yLmcgPSBNYXRoLnJvdW5kKHRoaXMuZyAqIDI1NSk7XG4gICAgY29sb3IuYiA9IE1hdGgucm91bmQodGhpcy5iICogMjU1KTtcbiAgICBjb2xvci5hID0gTWF0aC5yb3VuZCh0aGlzLmEgKiAyNTUpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtOb3JtYWxpemVkQ29sb3J9IGNvbG9yXG4gICAqL1xuICBhZGQoY29sb3IpIHtcbiAgICB0aGlzLnIgPSB0aGlzLnIgKyBjb2xvci5yO1xuICAgIHRoaXMuZyA9IHRoaXMuZyArIGNvbG9yLmc7XG4gICAgdGhpcy5iID0gdGhpcy5iICsgY29sb3IuYjtcbiAgfVxufVxuXG5cbi8qKlxuICogQGxpbmsgaHR0cDovL3d3dy5jcy5yaXQuZWR1L35uY3MvY29sb3IvdF9jb252ZXJ0Lmh0bWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBodWUgMC4uMzU5XG4gKiBAcGFyYW0ge051bWJlcn0gc2F0dXJhdGlvbiAwLi4xXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgMC4uMVxuICogQHBhcmFtIHtOb3JtYWxpemVkQ29sb3J9IHRhcmdldENvbG9yXG4gKiBAc3RhdGljXG4gKiBAcHVibGljXG4gKi9cbk5vcm1hbGl6ZWRDb2xvci5oc3ZUb1JnYiA9IGZ1bmN0aW9uIChodWUsIHNhdHVyYXRpb24sIHZhbHVlLCB0YXJnZXRDb2xvcikge1xuICBpZiAoc2F0dXJhdGlvbiA9PT0gMCkge1xuICAgIHRhcmdldENvbG9yLnNldCh2YWx1ZSwgdmFsdWUsIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzZWN0b3IgPSBodWUgLyA2MC4wO1xuXG4gIGNvbnN0IGZsb29yZWRIdWUgPSBNYXRoLmZsb29yKHNlY3Rvcik7XG4gIGNvbnN0IGZhY3RvcmlhbCA9IHNlY3RvciAtIGZsb29yZWRIdWU7XG5cbiAgY29uc3QgcCA9IHZhbHVlICogKDEgLSBzYXR1cmF0aW9uKTtcbiAgY29uc3QgcSA9IHZhbHVlICogKDEgLSAoc2F0dXJhdGlvbiAqIGZhY3RvcmlhbCkpO1xuICBjb25zdCB0ID0gdmFsdWUgKiAoMSAtIChzYXR1cmF0aW9uICogKDEgLSBmYWN0b3JpYWwpKSk7XG5cbiAgc3dpdGNoIChmbG9vcmVkSHVlKSB7XG4gICAgY2FzZSAwOlxuICAgICAgdGFyZ2V0Q29sb3Iuc2V0KHZhbHVlLCB0LCBwKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxOlxuICAgICAgdGFyZ2V0Q29sb3Iuc2V0KHEsIHZhbHVlLCBwKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgdGFyZ2V0Q29sb3Iuc2V0KHAsIHZhbHVlLCB0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAzOlxuICAgICAgdGFyZ2V0Q29sb3Iuc2V0KHAsIHEsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSA0OlxuICAgICAgdGFyZ2V0Q29sb3Iuc2V0KHQsIHAsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRhcmdldENvbG9yLnNldCh2YWx1ZSwgcCwgcSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IE5vcm1hbGl6ZWRDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvbm9ybWFsaXplZC1jb2xvcic7XG5cbmV4cG9ydCBjbGFzcyBCaWxpbmVhckludGVycG9sYXRvckFwcCBleHRlbmRzIEFwcCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0Q2FudmFzSWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHExMVxuICAgKiBAcGFyYW0ge251bWJlcn0gcTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxMjFcbiAgICogQHBhcmFtIHtudW1iZXJ9IHEyMlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge2FwcC5qc31cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhcmdldENhbnZhc0lkLCBxMTEsIHExMiwgcTIxLCBxMjIpIHtcbiAgICBzdXBlcih0YXJnZXRDYW52YXNJZCk7XG5cbiAgICB0aGlzLnExMSA9IHExMTtcbiAgICB0aGlzLnExMiA9IHExMjtcbiAgICB0aGlzLnEyMSA9IHEyMTtcbiAgICB0aGlzLnEyMiA9IHEyMjtcblxuICAgIHRoaXMuaW5pdGlhbGl6ZUxvb2t1cFRhYmxlKCk7XG4gIH07XG5cblxuICBkcmF3KCkge1xuICAgIHRoaXMuc3RhcnREcmF3aW5nKCk7XG5cbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICBjb25zdCB3aWR0aE1pbnVzID0gd2lkdGggLSAxO1xuICAgIGNvbnN0IGhlaWdodE1pbnVzID0gaGVpZ2h0IC0gMTtcblxuICAgIGxldCBwdHIgPSAwO1xuXG4gICAgY29uc3QgY2FudmFzUGl4ZWxzID0gdGhpcy5jYW52YXNQaXhlbHM7XG4gICAgY29uc3QgY2FudmFzRGF0YSA9IGNhbnZhc1BpeGVscy5kYXRhO1xuXG4gICAgY29uc3QgeDEgPSAwO1xuICAgIGNvbnN0IHgyID0gd2lkdGhNaW51cztcbiAgICBjb25zdCB5MSA9IDA7XG4gICAgY29uc3QgeTIgPSBoZWlnaHRNaW51cztcblxuICAgIGNvbnN0IG5vcm1hbENvbG9yID0gbmV3IE5vcm1hbGl6ZWRDb2xvcigpO1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIGNvbnN0IHgyTWludXNYID0geDIgLSB4O1xuICAgICAgICBjb25zdCB5Mk1pbnVzWSA9IHkyIC0geTtcbiAgICAgICAgY29uc3QgeE1pbnVzWDEgPSB4IC0geDE7XG4gICAgICAgIGNvbnN0IHlNaW51c1kxID0geSAtIHkxO1xuXG4gICAgICAgIGNvbnN0IGh1ZSA9XG4gICAgICAgICAgdGhpcy5xMTEgKiB0aGlzLmxvb2t1cFRhYmxlW3gyTWludXNYXVt5Mk1pbnVzWV0gK1xuICAgICAgICAgIHRoaXMucTIxICogdGhpcy5sb29rdXBUYWJsZVt4TWludXNYMV1beTJNaW51c1ldICtcbiAgICAgICAgICB0aGlzLnExMiAqIHRoaXMubG9va3VwVGFibGVbeDJNaW51c1hdW3lNaW51c1kxXSArXG4gICAgICAgICAgdGhpcy5xMjIgKiB0aGlzLmxvb2t1cFRhYmxlW3hNaW51c1gxXVt5TWludXNZMV07XG5cbiAgICAgICAgTm9ybWFsaXplZENvbG9yLmhzdlRvUmdiKGh1ZSwgMS4wLCAxLjAsIG5vcm1hbENvbG9yKTtcblxuICAgICAgICBjYW52YXNEYXRhW3B0cisrXSA9IE1hdGgucm91bmQobm9ybWFsQ29sb3IuciAqIDI1NSk7XG4gICAgICAgIGNhbnZhc0RhdGFbcHRyKytdID0gTWF0aC5yb3VuZChub3JtYWxDb2xvci5nICogMjU1KTtcbiAgICAgICAgY2FudmFzRGF0YVtwdHIrK10gPSBNYXRoLnJvdW5kKG5vcm1hbENvbG9yLmIgKiAyNTUpO1xuICAgICAgICBjYW52YXNEYXRhW3B0cisrXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YShjYW52YXNQaXhlbHMsIDAsIDApO1xuXG4gICAgdGhpcy5lbmREcmF3aW5nKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBjcmVhdGVNdWx0aWRpbWVuc2lvbmFsQXJyYXkoKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCB0aGlzRGltZW5zaW9uID0gbmV3IEFycmF5KGFyZ3VtZW50c1swXSk7XG4gICAgICBjb25zdCBzbGljZWRBcmd1bWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICBzbGljZWRBcmd1bWVudHMuc2hpZnQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzRGltZW5zaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXNEaW1lbnNpb25baV0gPSB0aGlzLmNyZWF0ZU11bHRpZGltZW5zaW9uYWxBcnJheShzbGljZWRBcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc0RpbWVuc2lvbjtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoYXJndW1lbnRzWzBdKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdGhlIHNwZWNpZmllZCBhcnJheScpO1xuICB9XG5cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluaXRpYWxpemVMb29rdXBUYWJsZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICBjb25zdCBoZWlnaHRNaW51cyA9IGhlaWdodCAtIDE7XG4gICAgY29uc3Qgd2lkdGhNaW51cyA9IHdpZHRoIC0gMTtcblxuICAgIGNvbnN0IHgxID0gMDtcbiAgICBjb25zdCB4MiA9IHdpZHRoTWludXM7XG4gICAgY29uc3QgeTEgPSAwO1xuICAgIGNvbnN0IHkyID0gaGVpZ2h0TWludXM7XG5cbiAgICBjb25zdCBvbmVEaXZYMk1pbnVzWDFNdWxZMk1pbnVzWTEgPSAxIC8gKCh4MiAtIHgxKSAqICh5MiAtIHkxKSkgKiAzNTkuMDtcblxuICAgIHRoaXMubG9va3VwVGFibGUgPSB0aGlzLmNyZWF0ZU11bHRpZGltZW5zaW9uYWxBcnJheSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICB0aGlzLmxvb2t1cFRhYmxlW3gyIC0geF1beTIgLSB5XSA9ICh4MiAtIHgpICogKHkyIC0geSkgKiBvbmVEaXZYMk1pbnVzWDFNdWxZMk1pbnVzWTE7XG4gICAgICAgIHRoaXMubG9va3VwVGFibGVbeCAtIHgxXVt5MiAtIHldID0gKHggLSB4MSkgKiAoeTIgLSB5KSAqIG9uZURpdlgyTWludXNYMU11bFkyTWludXNZMTtcbiAgICAgICAgdGhpcy5sb29rdXBUYWJsZVt4MiAtIHhdW3kgLSB5MV0gPSAoeDIgLSB4KSAqICh5IC0geTEpICogb25lRGl2WDJNaW51c1gxTXVsWTJNaW51c1kxO1xuICAgICAgICB0aGlzLmxvb2t1cFRhYmxlW3ggLSB4MV1beSAtIHkxXSA9ICh4IC0geDEpICogKHkgLSB5MSkgKiBvbmVEaXZYMk1pbnVzWDFNdWxZMk1pbnVzWTE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzQ4MCcgaGVpZ2h0PSczNjAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5CaWxpbmVhciBJbnRlcnBvbGF0aW9uPC9oMj5cbiAgICAgIDxwPlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiA8YSBocmVmPSdodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JpbGluZWFyX2ludGVycG9sYXRpb24nPmJpbGluZWFyIGludGVycG9sYXRpb248L2E+LjwvcD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IEJpbGluZWFySW50ZXJwb2xhdG9yQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBCaWxpbmVhckludGVycG9sYXRvciBleHRlbmRzIFZ1ZVdyYXBwZXIge1xuICBkaXJlY3Rpb25zID0gW1xuICAgIHtcbiAgICAgIG5hbWU6ICdxMTEnLFxuICAgICAgc3BlZWQ6IDAuMDA1LFxuICAgICAgZGlyZWN0aW9uOiAtMVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3ExMicsXG4gICAgICBzcGVlZDogMC4wMDM1LFxuICAgICAgZGlyZWN0aW9uOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAncTIxJyxcbiAgICAgIHNwZWVkOiAwLjAwMTUsXG4gICAgICBkaXJlY3Rpb246IDFcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdxMjInLFxuICAgICAgc3BlZWQ6IDAuMDAyLFxuICAgICAgZGlyZWN0aW9uOiAtMVxuICAgIH1cbiAgXTtcblxuICB1cGRhdGVEaXJlY3Rpb25zKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwO1xuICAgIGNvbnN0IGRpcmVjdGlvbnMgPSB0aGlzLmRpcmVjdGlvbnM7XG5cbiAgICBpZiAoIWFwcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICBsZXQgdmFsID0gYXBwW2RpcmVjdGlvbnNbaV0ubmFtZV07XG5cbiAgICAgIHZhbCArPSAoZGlyZWN0aW9uc1tpXS5zcGVlZCAqIGRpcmVjdGlvbnNbaV0uZGlyZWN0aW9uKTtcblxuICAgICAgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgZGlyZWN0aW9uc1tpXS5kaXJlY3Rpb24gPSAxO1xuICAgICAgICB2YWwgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsID4gMSkge1xuICAgICAgICBkaXJlY3Rpb25zW2ldLmRpcmVjdGlvbiA9IC0xO1xuICAgICAgICB2YWwgPSAxO1xuICAgICAgfVxuXG4gICAgICBhcHBbZGlyZWN0aW9uc1tpXS5uYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIHJldHVybiBuZXcgQmlsaW5lYXJJbnRlcnBvbGF0b3JBcHAoJ3N1cmZhY2UnLCAxLjAsIDAuNywgMC41LCAwLjMpO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIHRoaXMudXBkYXRlRGlyZWN0aW9ucygpO1xuXG4gICAgdGhpcy5hcHAuZHJhdygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJpbGluZWFySW50ZXJwb2xhdG9yO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZDBkZWUyZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjMyMFwiLFwiaGVpZ2h0XCI6XCIyMDBcIn0sb246e1wibW91c2Vtb3ZlXCI6X3ZtLm9uTW91c2VNb3ZlLFwibW91c2VvdXRcIjpfdm0ub25Nb3VzZU91dCxcIm1vdXNlb3ZlclwiOl92bS5vbk1vdXNlT3Zlcn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIkJ1bXAgTWFwcGluZ1wiKV0pLF92bS5fdihcIiBcIiksX3ZtLl9tKDApLF92bS5fdihcIiBcIiksX2MoJ2ItY2FyZCcse3N0YXRpY0NsYXNzOlwib3B0aW9uc1wiLGF0dHJzOntcInN1Yi10aXRsZVwiOlwiT3B0aW9uc1wifX0sW19jKCdiLWlucHV0LWdyb3VwJyx7c3RhdGljQ2xhc3M6XCJtYi0zXCIsYXR0cnM6e1wicHJlcGVuZFwiOlwiTGlnaHQgRGlzdGFuY2VcIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjBcIixcIm1heFwiOlwiNTEyXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVEaXN0YW5jZX0sbW9kZWw6e3ZhbHVlOihfdm0uZGlzdGFuY2UpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uZGlzdGFuY2U9JCR2fSxleHByZXNzaW9uOlwiZGlzdGFuY2VcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIkVtYm9zcyBEZXB0aFwiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMVwiLFwibWF4XCI6XCIxMDAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVFbWJvc3N9LG1vZGVsOnt2YWx1ZTooX3ZtLmVtYm9zcyksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5lbWJvc3M9JCR2fSxleHByZXNzaW9uOlwiZW1ib3NzXCJ9fSldLDEpXSwxKV0sMSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBcIiksX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05vcm1hbF9tYXBwaW5nXCJ9fSxbX3ZtLl92KFwiYnVtcCBtYXBwaW5nXCIpXSksX3ZtLl92KFwiXFxuICAgICAgKG5vcm1hbCBtYXBwaW5nKSBvbiBhIDJEIHN1cmZhY2UuIE1vdmUgeW91ciBtb3VzZSBvdmVyIHRoZSBjYW52YXMgdG8gY29udHJvbCB0aGUgbGlnaHQgc291cmNlLlwiKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IFZlY3RvcjNEIH0gZnJvbSAnfi9saWIvY29yZS92ZWN0b3ItM2QnO1xuXG5leHBvcnQgY2xhc3MgQnVtcE1hcHBpbmdBcHAgZXh0ZW5kcyBBcHAge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldENhbnZhc0lkXG4gICAqIEBwYXJhbSB7Q2FudmFzVGV4dHVyZX0gdGV4dHVyZVxuICAgKiBAcGFyYW0ge0NhbnZhc1RleHR1cmV9IGhlaWdodE1hcFRleHR1cmVcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIHthcHAuanN9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YXJnZXRDYW52YXNJZCwgdGV4dHVyZSwgaGVpZ2h0TWFwVGV4dHVyZSkge1xuICAgIHN1cGVyKHRhcmdldENhbnZhc0lkKTtcblxuICAgIHRoaXMuaGVpZ2h0TWFwVGV4dHVyZSA9IGhlaWdodE1hcFRleHR1cmU7XG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcblxuICAgIHRoaXMubGlnaHRQb3NpdGlvbiA9IG5ldyBWZWN0b3IzRCgpO1xuICAgIHRoaXMuZHJhd2luZyA9IGZhbHNlO1xuICAgIHRoaXMucHJlY2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMucHJlY2FsY3VsYXRlZE5vcm1hbHMgPSBbXTtcbiAgICB0aGlzLmVtYm9zc0RlcHRoID0gNDggLyA1MDtcblxuICAgIHRoaXMuaGVpZ2h0TWFwVGV4dHVyZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLnByZWNhbGN1bGF0ZU5vcm1hbHMoKTtcbiAgICB9O1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtmbG9hdH0gcG9pbnRIZWlnaHQgSGVpZ2h0IGF0IFgsIFlcbiAgICogQHBhcmFtIHtmbG9hdH0gcG9pbnRIZWlnaHRSaWdodCBIZWlnaHQgYXQgWCArIDEsIFlcbiAgICogQHBhcmFtIHtmbG9hdH0gcG9pbnRIZWlnaHRBYm92ZSBIZWlnaHQgYXQgWCwgWSAtIDFcbiAgICogQHJldHVybiB7VmVjdG9yM0R9IEJ1bXAgbWFwIG5vcm1hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlTm9ybWFsKHBvaW50SGVpZ2h0LCBwb2ludEhlaWdodFJpZ2h0LCBwb2ludEhlaWdodEFib3ZlKSB7XG4gICAgY29uc3QgcGhwaGFEaWZmZXJlbmNlID0gcG9pbnRIZWlnaHQgLSBwb2ludEhlaWdodEFib3ZlO1xuICAgIGNvbnN0IHBocGhyRGlmZmVyZW5jZSA9IHBvaW50SGVpZ2h0IC0gcG9pbnRIZWlnaHRSaWdodDtcblxuICAgIGNvbnN0IGRpdmlzb3IgPSBNYXRoLnNxcnQoXG4gICAgICAocGhwaGFEaWZmZXJlbmNlICogcGhwaGFEaWZmZXJlbmNlKSArXG4gICAgICAocGhwaHJEaWZmZXJlbmNlICogcGhwaHJEaWZmZXJlbmNlKSArXG4gICAgICB0aGlzLmVtYm9zc0RlcHRoXG4gICAgKTtcblxuICAgIC8qKlxuICAgICAqIE5vdGU6IEhhdmUgdGFrZW4gb3V0IHogLyBkaXZpc29yIGhlcmUsIGJlY2F1c2UgaXQgc29mdGVucyB0aGUgaW1hZ2VcbiAgICAgKiBpbWFnZSB0b28gbXVjaCBmb3IgbXkgdGFzdGUuXG4gICAgICovXG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjNEKHBocGhhRGlmZmVyZW5jZSAvIGRpdmlzb3IsIHBocGhyRGlmZmVyZW5jZSAvIGRpdmlzb3IsIHRoaXMuZW1ib3NzRGVwdGggLyogLyBkaXZpc29yICovKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSBub3JtYWwgZm9yIGVhY2ggcGl4ZWwgaW4gdGhlIGhlaWdodCBtYXBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByZWNhbGN1bGF0ZU5vcm1hbHMoKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLmhlaWdodE1hcFRleHR1cmUuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodE1hcFRleHR1cmUuZ2V0SGVpZ2h0KCk7XG4gICAgY29uc3Qgd2lkdGhNaW51cyA9IHdpZHRoIC0gMTtcbiAgICBjb25zdCBwaXhlbHMgPSB0aGlzLmhlaWdodE1hcFRleHR1cmUuZ2V0UGl4ZWxzKCk7XG4gICAgY29uc3QgZGF0YSA9IHBpeGVscy5kYXRhO1xuXG4gICAgbGV0IGFib3ZlUHRyID0gMDtcbiAgICBsZXQgcHRyID0gd2lkdGggKiA0OyAvLyBpZ25vcmUgZmlyc3QgbGluZVxuICAgIGxldCBzaW5nbGVQdHIgPSB3aWR0aDtcblxuICAgIHRoaXMucHJlY2FsY3VsYXRlZE5vcm1hbHMgPSBuZXcgQXJyYXkod2lkdGggKiBoZWlnaHQpO1xuXG4gICAgZm9yIChsZXQgeSA9IDE7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aE1pbnVzOyB4KyspIHtcbiAgICAgICAgY29uc3QgYnVtcE5vcm1hbCA9IHRoaXMuY2FsY3VsYXRlTm9ybWFsKFxuICAgICAgICAgIGRhdGFbcHRyXSxcbiAgICAgICAgICBkYXRhW3B0ciArIDRdLFxuICAgICAgICAgIGRhdGFbYWJvdmVQdHJdXG4gICAgICAgICk7XG5cbiAgICAgICAgYnVtcE5vcm1hbC5ub3JtYWxpemUoKTtcblxuICAgICAgICB0aGlzLnByZWNhbGN1bGF0ZWROb3JtYWxzW3NpbmdsZVB0cl0gPSBidW1wTm9ybWFsO1xuXG4gICAgICAgIGFib3ZlUHRyICs9IDQ7XG4gICAgICAgIHB0ciArPSA0O1xuXG4gICAgICAgIHNpbmdsZVB0cisrO1xuICAgICAgfVxuXG4gICAgICAvLyBUYWtlIGluIGFjY291bnQgd2lkdGggLSAxXG4gICAgICBhYm92ZVB0ciArPSA0O1xuICAgICAgcHRyICs9IDQ7XG5cbiAgICAgIHNpbmdsZVB0cisrO1xuICAgIH1cblxuICAgIHRoaXMucHJlY2FsY3VsYXRlZCA9IHRydWU7XG4gIH1cblxuXG4gIGRyYXcoKSB7XG4gICAgaWYgKHRoaXMuaXNMb2FkZWQoKSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1ByZWNhbGN1bGF0ZWQoKSAhPT0gdHJ1ZSkge1xuICAgICAgdGhpcy5wcmVjYWxjdWxhdGVOb3JtYWxzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydERyYXdpbmcoKTtcblxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5oZWlnaHRNYXBUZXh0dXJlLmdldFdpZHRoKCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHRNYXBUZXh0dXJlLmdldEhlaWdodCgpO1xuICAgIGNvbnN0IHdpZHRoTWludXMgPSB3aWR0aCAtIDE7XG5cbiAgICBjb25zdCB0ZXh0dXJlUGl4ZWxzID0gdGhpcy50ZXh0dXJlLmdldFBpeGVscygpO1xuICAgIGNvbnN0IHRleHR1cmVEYXRhID0gdGV4dHVyZVBpeGVscy5kYXRhO1xuXG4gICAgY29uc3QgcHJlY2FsYyA9IHRoaXMucHJlY2FsY3VsYXRlZE5vcm1hbHM7XG4gICAgY29uc3QgcmVhbExpZ2h0UG9zID0gbmV3IFZlY3RvcjNEKCk7XG4gICAgY29uc3QgbGlnaHRQb3MgPSB0aGlzLmxpZ2h0UG9zaXRpb247XG4gICAgY29uc3QgbGlnaHRQb3NaRGl2MiA9IGxpZ2h0UG9zLnogLyAyO1xuXG4gICAgbGV0IHB0ciA9IHdpZHRoICogNDsgLy8gaWdub3JlIHRvcCBsaW5lXG4gICAgbGV0IHNpbmdsZVB0ciA9IHdpZHRoO1xuXG4gICAgZm9yIChsZXQgeSA9IDE7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aE1pbnVzOyB4KyspIHtcbiAgICAgICAgcmVhbExpZ2h0UG9zLnNldCgtKGxpZ2h0UG9zLnkgLSB5KSwgKGxpZ2h0UG9zLnggLSB4KSwgbGlnaHRQb3NaRGl2Mik7XG5cbiAgICAgICAgY29uc3QgYnVtcERvdCA9IHJlYWxMaWdodFBvcy5kb3QocHJlY2FsY1tzaW5nbGVQdHJdKTtcbiAgICAgICAgY29uc3QgZGlzdE11bCA9IGJ1bXBEb3QgLyBsaWdodFBvcy5kaXN0YW5jZSh4LCB5LCAwKTtcblxuICAgICAgICBjb25zdCBwdHJwcCA9IHB0ciArIDE7XG4gICAgICAgIGNvbnN0IHB0cnAyID0gcHRyICsgMjtcblxuICAgICAgICB0ZXh0dXJlRGF0YVtwdHJdID0gdGV4dHVyZURhdGFbcHRyXSAqIGRpc3RNdWw7XG4gICAgICAgIHRleHR1cmVEYXRhW3B0cnBwXSA9IHRleHR1cmVEYXRhW3B0cnBwXSAqIGRpc3RNdWw7XG4gICAgICAgIHRleHR1cmVEYXRhW3B0cnAyXSA9IHRleHR1cmVEYXRhW3B0cnAyXSAqIGRpc3RNdWw7XG5cbiAgICAgICAgcHRyICs9IDQ7XG4gICAgICAgIHNpbmdsZVB0cisrO1xuICAgICAgfVxuXG4gICAgICAvLyB0YWtlIGluIGFjY291bnQgd2lkdGggLSAxXG4gICAgICBwdHIgKz0gNDtcbiAgICAgIHNpbmdsZVB0cisrO1xuICAgIH1cblxuICAgIHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJykucHV0SW1hZ2VEYXRhKHRleHR1cmVQaXhlbHMsIDAsIDApO1xuXG4gICAgdGhpcy5lbmREcmF3aW5nKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Zsb2F0fGludH0geFxuICAgKiBAcGFyYW0ge2Zsb2F0fGludH0geVxuICAgKiBAcGFyYW0ge2Zsb2F0fGludH0gelxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRMaWdodFBvcyh4LCB5LCB6KSB7XG4gICAgdGhpcy5saWdodFBvc2l0aW9uLnggPSB4O1xuICAgIHRoaXMubGlnaHRQb3NpdGlvbi55ID0geTtcbiAgICB0aGlzLmxpZ2h0UG9zaXRpb24ueiA9IHo7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Zsb2F0fGludH0gZGVwdGhcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0RW1ib3NzRGVwdGgoZGVwdGgpIHtcbiAgICB0aGlzLmVtYm9zc0RlcHRoID0gZGVwdGg7XG5cbiAgICB0aGlzLnByZWNhbGN1bGF0ZU5vcm1hbHMoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKiBAcHVibGljXG4gICAqL1xuICBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gKCh0aGlzLmhlaWdodE1hcFRleHR1cmUubG9hZGVkID09PSB0cnVlKSAmJiAodGhpcy50ZXh0dXJlLmxvYWRlZCA9PT0gdHJ1ZSkpO1xuICB9XG5cblxuICAvKipcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNQcmVjYWxjdWxhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLnByZWNhbGN1bGF0ZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IERyYXcgfSBmcm9tICcuL2RyYXcnO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICB0aGlzLnZpcnR1YWxTdXJmYWNlID0gbnVsbDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtpbnR9XG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2ludH1cbiAgICogQGFic3RyYWN0XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEhlaWdodCgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NhbnZhc1BpeGVsQXJyYXl9XG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcHVibGljXG4gICAqKi9cbiAgZ2V0UGl4ZWxzKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXNQaXhlbEFycmF5fSBwaXhlbHNcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0UGl4ZWxzKHBpeGVscykge1xuICAgIHRoaXMuY29udGV4dC5wdXRJbWFnZURhdGEocGl4ZWxzLCAwLCAwKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge1ZpcnR1YWxTdXJmYWNlfVxuICAgKi9cbiAgZ2V0VmlydHVhbFN1cmZhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFN1cmZhY2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgY3JlYXRlKCkge1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZpcnR1YWxTdXJmYWNlfSBkZXN0VmlydHVhbFN1cmZhY2VcbiAgICogQHBhcmFtIHtpbnR9IHBvc1hcbiAgICogQHBhcmFtIHtpbnR9IHBvc1lcbiAgICogQHBhcmFtIHtpbnR9IFtvZmZzZXRYPTBdXG4gICAqIEBwYXJhbSB7aW50fSBbb2Zmc2V0WT0wXVxuICAgKiBAcGFyYW0ge2ludH0gW29mZnNldFdpZHRoPXNvdXJjZVRleHR1cmUuZ2V0V2lkdGgoKV1cbiAgICogQHBhcmFtIHtpbnR9IFtvZmZzZXRIZWlnaHQ9c291cmNlVGV4dHVyZS5nZXRIZWlnaHQoKV1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZHJhdyhkZXN0VmlydHVhbFN1cmZhY2UsIHBvc1gsIHBvc1ksIG9mZnNldFgsIG9mZnNldFksIG9mZnNldFdpZHRoLCBvZmZzZXRIZWlnaHQpIHtcbiAgICBUZXh0dXJlLmRyYXcoZGVzdFZpcnR1YWxTdXJmYWNlLCB0aGlzLCBwb3NYLCBwb3NZLCBvZmZzZXRYLCBvZmZzZXRZLCBvZmZzZXRXaWR0aCwgb2Zmc2V0SGVpZ2h0KTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHBhcmFtIHtWaXJ0dWFsU3VyZmFjZX0gZGVzdFZpcnR1YWxTdXJmYWNlXG4gKiBAcGFyYW0ge1RleHR1cmV9IHNvdXJjZVRleHR1cmVcbiAqIEBwYXJhbSB7aW50fSBwb3NYXG4gKiBAcGFyYW0ge2ludH0gcG9zWVxuICogQHBhcmFtIHtpbnR9IFtvZmZzZXRYPTBdXG4gKiBAcGFyYW0ge2ludH0gW29mZnNldFk9MF1cbiAqIEBwYXJhbSB7aW50fSBbb2Zmc2V0V2lkdGg9c291cmNlVGV4dHVyZS5nZXRXaWR0aCgpXVxuICogQHBhcmFtIHtpbnR9IFtvZmZzZXRIZWlnaHQ9c291cmNlVGV4dHVyZS5nZXRIZWlnaHQoKV1cbiAqIEBwdWJsaWNcbiAqL1xuVGV4dHVyZS5kcmF3ID0gZnVuY3Rpb24gKGRlc3RWaXJ0dWFsU3VyZmFjZSwgc291cmNlVGV4dHVyZSwgcG9zWCwgcG9zWSwgb2Zmc2V0WCwgb2Zmc2V0WSwgb2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCkge1xuICBpZiAoKCFzb3VyY2VUZXh0dXJlKSB8fCAoIWRlc3RWaXJ0dWFsU3VyZmFjZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkZXN0RGF0YSA9IGRlc3RWaXJ0dWFsU3VyZmFjZS5nZXREYXRhKCk7XG4gIGNvbnN0IGRlc3RXaWR0aCA9IGRlc3RWaXJ0dWFsU3VyZmFjZS5nZXRXaWR0aCgpO1xuICBjb25zdCBkZXN0SGVpZ2h0ID0gZGVzdFZpcnR1YWxTdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gIGNvbnN0IHRleHR1cmVXaWR0aCA9IHNvdXJjZVRleHR1cmUuZ2V0V2lkdGgoKTtcbiAgY29uc3QgdGV4dHVyZUhlaWdodCA9IHNvdXJjZVRleHR1cmUuZ2V0SGVpZ2h0KCk7XG5cbiAgaWYgKChwb3NYID49IHRleHR1cmVXaWR0aCkgfHwgKHBvc1kgPj0gdGV4dHVyZUhlaWdodCkgfHwgKHBvc1ggKyB0ZXh0dXJlV2lkdGggPD0gMCkgfHwgKHBvc1kgKyB0ZXh0dXJlSGVpZ2h0IDw9IDApKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb2Zmc2V0WCA9IE1hdGgucm91bmQoTWF0aC5taW4odGV4dHVyZVdpZHRoIC0gMSwgTWF0aC5tYXgoMCwgb2Zmc2V0WCB8fCAwKSkpO1xuICBvZmZzZXRZID0gTWF0aC5yb3VuZChNYXRoLm1pbih0ZXh0dXJlSGVpZ2h0IC0gMSwgTWF0aC5tYXgoMCwgb2Zmc2V0WSB8fCAwKSkpO1xuXG4gIG9mZnNldFdpZHRoID0gTWF0aC5yb3VuZChNYXRoLm1pbih0ZXh0dXJlV2lkdGgsIE1hdGgubWF4KDAsIG9mZnNldFdpZHRoIHx8IHRleHR1cmVXaWR0aCkpKTtcbiAgb2Zmc2V0SGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1pbih0ZXh0dXJlSGVpZ2h0LCBNYXRoLm1heCgwLCBvZmZzZXRIZWlnaHQgfHwgdGV4dHVyZUhlaWdodCkpKTtcblxuICBwb3NYID0gTWF0aC5yb3VuZChwb3NYKTtcbiAgcG9zWSA9IE1hdGgucm91bmQocG9zWSk7XG5cblxuICBpZiAocG9zWCA8IDApIHtcbiAgICBvZmZzZXRYICs9IC1wb3NYO1xuICAgIG9mZnNldFdpZHRoICs9IHBvc1g7XG4gICAgcG9zWCA9IDA7XG4gIH1cblxuICBpZiAocG9zWSA8IDApIHtcbiAgICBvZmZzZXRZICs9IC1wb3NZO1xuICAgIG9mZnNldEhlaWdodCArPSBwb3NZO1xuICAgIHBvc1kgPSAwO1xuICB9XG5cbiAgaWYgKHBvc1ggKyBvZmZzZXRXaWR0aCA+IGRlc3RXaWR0aCkge1xuICAgIG9mZnNldFdpZHRoID0gZGVzdFdpZHRoIC0gcG9zWDtcbiAgfVxuXG4gIGlmIChwb3NZICsgb2Zmc2V0SGVpZ2h0ID4gZGVzdEhlaWdodCkge1xuICAgIG9mZnNldEhlaWdodCA9IGRlc3RIZWlnaHQgLSBwb3NZO1xuICB9XG5cbiAgaWYgKChvZmZzZXRXaWR0aCA8PSAwKSB8fCAob2Zmc2V0SGVpZ2h0IDw9IDApKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cblxuICBsZXQgZGVzdFB0ciA9IChwb3NYICsgKHBvc1kgKiBkZXN0V2lkdGgpKSAqIDQ7XG4gIGxldCBzb3VyY2VQdHIgPSAob2Zmc2V0WCArIChvZmZzZXRZICogdGV4dHVyZVdpZHRoKSkgKiA0O1xuXG4gIGNvbnN0IHNvdXJjZU9mZnNldEFkZGVyID0gKHRleHR1cmVXaWR0aCAtIG9mZnNldFdpZHRoKSAqIDQ7XG4gIGNvbnN0IGRlc3RPZmZzZXRBZGRlciA9IChkZXN0V2lkdGggLSBvZmZzZXRXaWR0aCkgKiA0O1xuXG4gIGNvbnN0IHNvdXJjZURhdGEgPSBzb3VyY2VUZXh0dXJlLmdldFBpeGVscygpLmRhdGE7XG5cblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IG9mZnNldEhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBvZmZzZXRXaWR0aDsgeCsrKSB7XG4gICAgICBjb25zdCBmZ0FscGhhID0gc291cmNlRGF0YVtzb3VyY2VQdHIgKyAzXTtcblxuICAgICAgaWYgKGZnQWxwaGEgPT09IDApIHtcbiAgICAgICAgc291cmNlUHRyICs9IDM7XG4gICAgICAgIGRlc3RQdHIgKz0gMztcbiAgICAgIH0gZWxzZSBpZiAoZmdBbHBoYSA9PT0gMjU1KSB7XG4gICAgICAgIGRlc3REYXRhW2Rlc3RQdHIrK10gPSBzb3VyY2VEYXRhW3NvdXJjZVB0cisrXTtcbiAgICAgICAgZGVzdERhdGFbZGVzdFB0cisrXSA9IHNvdXJjZURhdGFbc291cmNlUHRyKytdO1xuICAgICAgICBkZXN0RGF0YVtkZXN0UHRyKytdID0gc291cmNlRGF0YVtzb3VyY2VQdHIrK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXN0RGF0YVtkZXN0UHRyXSA9IERyYXcuYmxlbmRWYWx1ZShkZXN0RGF0YVtkZXN0UHRyXSwgc291cmNlRGF0YVtzb3VyY2VQdHIrK10sIGZnQWxwaGEpO1xuICAgICAgICBkZXN0UHRyKys7XG5cbiAgICAgICAgZGVzdERhdGFbZGVzdFB0cl0gPSBEcmF3LmJsZW5kVmFsdWUoZGVzdERhdGFbZGVzdFB0cl0sIHNvdXJjZURhdGFbc291cmNlUHRyKytdLCBmZ0FscGhhKTtcbiAgICAgICAgZGVzdFB0cisrO1xuXG4gICAgICAgIGRlc3REYXRhW2Rlc3RQdHJdID0gRHJhdy5ibGVuZFZhbHVlKGRlc3REYXRhW2Rlc3RQdHJdLCBzb3VyY2VEYXRhW3NvdXJjZVB0cisrXSwgZmdBbHBoYSk7XG4gICAgICAgIGRlc3RQdHIrKztcbiAgICAgIH1cblxuICAgICAgZGVzdFB0cisrO1xuICAgICAgc291cmNlUHRyKys7XG4gICAgfVxuXG4gICAgc291cmNlUHRyICs9IHNvdXJjZU9mZnNldEFkZGVyO1xuICAgIGRlc3RQdHIgKz0gZGVzdE9mZnNldEFkZGVyO1xuICB9XG59O1xuXG4iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCB7IEhlbHBlciB9IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7IFZpcnR1YWxTdXJmYWNlIH0gZnJvbSAnLi92aXJ0dWFsLXN1cmZhY2UnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVVJJL1VSTCB0byB0ZXh0dXJlIHJlc291cmNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtUZXh0dXJlfVxuICovXG5leHBvcnQgY2xhc3MgQ2FudmFzVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuICBjb25zdHJ1Y3RvcihzcmMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmNyZWF0ZSgpO1xuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICB0aGlzLmltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XG4gICAgdGhpcy5pbWFnZS5zcmMgPSBzcmM7XG4gICAgdGhpcy53YXNEcmF3biA9IGZhbHNlO1xuXG4gICAgLy8gTGV0J3MgdXBkYXRlIHN0dWZmIG9uY2UgdGhlIGltYWdlIGhhcyBsb2FkZWRcbiAgICB0aGlzLmltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRQaXhlbHMoKS5kYXRhO1xuICAgICAgdGhpcy53YXNEcmF3biA9IGZhbHNlO1xuXG4gICAgICB0aGlzLnZpcnR1YWxTdXJmYWNlID0gbmV3IFZpcnR1YWxTdXJmYWNlKHRoaXMuaW1hZ2Uud2lkdGgsIHRoaXMuaW1hZ2UuaGVpZ2h0LCB0aGlzLmRhdGEpO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMub25sb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub25sb2FkKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG5cbiAgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1hZ2Uud2lkdGg7XG4gIH07XG5cblxuICBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICB9O1xuXG5cbiAgZ2V0UGl4ZWxzKCkge1xuICAgIGlmICh0aGlzLndhc0RyYXduID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcbiAgICAgIHRoaXMud2FzRHJhd24gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuZ2V0V2lkdGgoKSwgdGhpcy5nZXRIZWlnaHQoKSk7XG4gIH07XG5cblxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgY2FudmFzID0gSGVscGVyLmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgY2FudmFzLndpZHRoID0gMTtcbiAgICBjYW52YXMuaGVpZ2h0ID0gMTtcblxuICAgIHJldHVybiBjYW52YXM7XG4gIH07XG5cblxuICBkZXN0cm95KCkge1xuICAgIEhlbHBlci5yZW1vdmVFbGVtZW50KHRoaXMuY2FudmFzKTtcblxuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5pbWFnZSA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gIH1cbn1cblxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDxkaXYgY2xhc3M9J2NvbC1tZC0xMic+XG4gICAgICA8Y2FudmFzXG4gICAgICAgIGlkPSdzdXJmYWNlJ1xuICAgICAgICB3aWR0aD0nMzIwJ1xuICAgICAgICBoZWlnaHQ9JzIwMCdcbiAgICAgICAgQG1vdXNlbW92ZT1cIm9uTW91c2VNb3ZlXCJcbiAgICAgICAgQG1vdXNlb3V0PVwib25Nb3VzZU91dFwiXG4gICAgICAgIEBtb3VzZW92ZXI9XCJvbk1vdXNlT3ZlclwiXG4gICAgICA+PC9jYW52YXM+XG5cbiAgICAgIDxoMiBjbGFzcz0nc3VidGl0bGUnPkJ1bXAgTWFwcGluZzwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj0naHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ob3JtYWxfbWFwcGluZyc+YnVtcCBtYXBwaW5nPC9hPlxuICAgICAgICAobm9ybWFsIG1hcHBpbmcpIG9uIGEgMkQgc3VyZmFjZS4gTW92ZSB5b3VyIG1vdXNlIG92ZXIgdGhlIGNhbnZhcyB0byBjb250cm9sIHRoZSBsaWdodCBzb3VyY2UuPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkxpZ2h0IERpc3RhbmNlXCIgc2l6ZT1cInNtXCIgY2xhc3M9XCJtYi0zXCI+XG4gICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSdkaXN0YW5jZScgdHlwZT0ncmFuZ2UnIG1pbj0nMCcgbWF4PSc1MTInIEB1cGRhdGU9XCJ1cGRhdGVEaXN0YW5jZVwiIC8+XG4gICAgICAgIDwvYi1pbnB1dC1ncm91cD5cblxuICAgICAgICA8Yi1pbnB1dC1ncm91cCBwcmVwZW5kPVwiRW1ib3NzIERlcHRoXCIgc2l6ZT1cInNtXCIgY2xhc3M9XCJtYi0zXCI+XG4gICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSdlbWJvc3MnIHR5cGU9J3JhbmdlJyBtaW49JzEnIG1heD0nMTAwMCcgQHVwZGF0ZT1cInVwZGF0ZUVtYm9zc1wiIC8+XG4gICAgICAgIDwvYi1pbnB1dC1ncm91cD5cbiAgICAgIDwvYi1jYXJkPlxuICAgIDwvZGl2PlxuXG5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IEJ1bXBNYXBwaW5nQXBwIH0gZnJvbSAnLi9hcHAnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dHVyZSB9IGZyb20gJ34vbGliL2NvcmUvY2FudmFzLXRleHR1cmUnO1xuaW1wb3J0IHsgSGVscGVyIH0gZnJvbSAnfi9saWIvY29yZS9oZWxwZXInO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBCdW1wTWFwcGluZyBleHRlbmRzIFZ1ZVdyYXBwZXIge1xuICByYWRzUGVyU2Vjb25kID0gMC44O1xuXG4gIHJhZGl1cyA9IDEyMDtcblxuICBsaWdodFBvc1ggPSAxNjA7XG5cbiAgbGlnaHRQb3NZID0gMTAwO1xuXG4gIGRpc3RhbmNlID0gMTAwO1xuXG4gIGVtYm9zcyA9IDQ4O1xuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIGNvbnN0IGhlaWdodG1hcCA9IG5ldyBDYW52YXNUZXh0dXJlKCcuL3Jlc291cmNlcy9hcHBzL2J1bXAtbWFwcGluZy9tYmFjby1oZWlnaHRtYXAyLnBuZycpO1xuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgQ2FudmFzVGV4dHVyZSgnLi9yZXNvdXJjZXMvYXBwcy9idW1wLW1hcHBpbmcvbWJhY28tdGV4dHVyZS5wbmcnKTtcblxuICAgIGNvbnN0IGFwcCA9IG5ldyBCdW1wTWFwcGluZ0FwcCgnc3VyZmFjZScsIHRleHR1cmUsIGhlaWdodG1hcCk7XG5cbiAgICBhcHAuc2V0TGlnaHRQb3ModGhpcy5saWdodFBvc1gsIHRoaXMubGlnaHRQb3NZLCB0aGlzLmRpc3RhbmNlKTtcbiAgICAvLyBhcHAuc2V0RW1ib3NzRGVwdGgodGhpcy5lbWJvc3MgLyA1MCk7XG5cbiAgICByZXR1cm4gYXBwO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJ1blRpbWUgPSAoY3VyVGltZS5nZXRUaW1lKCkgLSB0aGlzLmFwcC5zdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDAuMDA7XG5cbiAgICBjb25zdCB4ID0gdGhpcy5saWdodFBvc1ggKyB0aGlzLnJhZGl1cyAqIE1hdGguc2luKHRoaXMucmFkc1BlclNlY29uZCAqIHJ1blRpbWUpO1xuICAgIGNvbnN0IHkgPSB0aGlzLmxpZ2h0UG9zWSArIHRoaXMucmFkaXVzICogTWF0aC5jb3ModGhpcy5yYWRzUGVyU2Vjb25kICogcnVuVGltZSk7XG4gICAgY29uc3QgeiA9IHRoaXMuYXBwLmxpZ2h0UG9zaXRpb24uejtcblxuICAgIHRoaXMuYXBwLnNldExpZ2h0UG9zKHgsIHksIHopO1xuICAgIHRoaXMuYXBwLmRyYXcoKTtcbiAgfVxuXG5cbiAgdXBkYXRlRGlzdGFuY2UodmFsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHA7XG5cbiAgICBhcHAuc2V0TGlnaHRQb3MoYXBwLmxpZ2h0UG9zaXRpb24ueCwgYXBwLmxpZ2h0UG9zaXRpb24ueSwgdmFsKTtcbiAgfVxuXG5cbiAgdXBkYXRlRW1ib3NzKHZhbCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwO1xuXG4gICAgYXBwLnNldEVtYm9zc0RlcHRoKHZhbCAvIDUwKTtcbiAgfVxuXG5cbiAgb25Nb3VzZU1vdmUoZXZlbnQpIHtcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IEhlbHBlci5nZXRDYW52YXNDb29yZGluYXRlcyhldmVudCwgJ3N1cmZhY2UnKTtcblxuICAgIHRoaXMuYXBwLnNldExpZ2h0UG9zKGNvb3JkaW5hdGVzLngsIGNvb3JkaW5hdGVzLnksIHRoaXMuYXBwLmxpZ2h0UG9zaXRpb24ueik7XG5cbiAgICB0aGlzLmFwcC5kcmF3KCk7XG4gIH1cblxuXG4gIG9uTW91c2VPdmVyKGV2ZW50KSB7XG4gICAgdGhpcy5hcHAuc2V0UGF1c2VkKHRydWUpO1xuICB9XG5cblxuICBvbk1vdXNlT3V0KGV2ZW50KSB7XG4gICAgdGhpcy5hcHAuc2V0UGF1c2VkKGZhbHNlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdW1wTWFwcGluZztcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjQ5OWU0ZGImXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCIzMjBcIixcImhlaWdodFwiOlwiMjAwXCJ9LG9uOntcIm1vdXNlbW92ZVwiOl92bS5vbk1vdXNlTW92ZSxcIm1vdXNlb3V0XCI6X3ZtLm9uTW91c2VPdXQsXCJtb3VzZW92ZXJcIjpfdm0ub25Nb3VzZU92ZXJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJDcmVwdXNjdWxhciBSYXlzXCIpXSksX3ZtLl92KFwiIFwiKSxfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnYi1jYXJkJyx7c3RhdGljQ2xhc3M6XCJvcHRpb25zXCIsYXR0cnM6e1wic3ViLXRpdGxlXCI6XCJPcHRpb25zXCJ9fSxbX2MoJ2ItaW5wdXQtZ3JvdXAnLHtzdGF0aWNDbGFzczpcIm1iLTNcIixhdHRyczp7XCJwcmVwZW5kXCI6XCJXZWlnaHRcIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjBcIixcIm1heFwiOlwiMjAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVXZWlnaHR9LG1vZGVsOnt2YWx1ZTooX3ZtLndlaWdodCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS53ZWlnaHQ9JCR2fSxleHByZXNzaW9uOlwid2VpZ2h0XCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2ItaW5wdXQtZ3JvdXAnLHtzdGF0aWNDbGFzczpcIm1iLTNcIixhdHRyczp7XCJwcmVwZW5kXCI6XCJEZWNheVwiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCIyMDAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVEZWNheX0sbW9kZWw6e3ZhbHVlOihfdm0uZGVjYXkpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uZGVjYXk9JCR2fSxleHByZXNzaW9uOlwiZGVjYXlcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIkV4cG9zdXJlXCIsXCJzaXplXCI6XCJzbVwifX0sW19jKCdiLWZvcm0taW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6XCIwXCIsXCJtYXhcIjpcIjIwMDBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZUV4cG9zdXJlfSxtb2RlbDp7dmFsdWU6KF92bS5leHBvc3VyZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5leHBvc3VyZT0kJHZ9LGV4cHJlc3Npb246XCJleHBvc3VyZVwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWlucHV0LWdyb3VwJyx7c3RhdGljQ2xhc3M6XCJtYi0zXCIsYXR0cnM6e1wicHJlcGVuZFwiOlwiRGVuc2l0eVwiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCIyMDAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVEZW5zaXR5fSxtb2RlbDp7dmFsdWU6KF92bS5kZW5zaXR5KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmRlbnNpdHk9JCR2fSxleHByZXNzaW9uOlwiZGVuc2l0eVwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWlucHV0LWdyb3VwJyx7c3RhdGljQ2xhc3M6XCJtYi0zXCIsYXR0cnM6e1wicHJlcGVuZFwiOlwiU2FtcGxlc1wiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCIxNTBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZVNhbXBsZXN9LG1vZGVsOnt2YWx1ZTooX3ZtLnNhbXBsZXMpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uc2FtcGxlcz0kJHZ9LGV4cHJlc3Npb246XCJzYW1wbGVzXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2ItZm9ybS1ncm91cCcsW19jKCdiLWZvcm0tY2hlY2tib3gtZ3JvdXAnLHthdHRyczp7XCJvcHRpb25zXCI6X3ZtLmJ1dHRvbk9wdGlvbnMsXCJidXR0b25zXCI6XCJcIixcInNpemVcIjpcInNtXCJ9LG9uOntcImNoYW5nZVwiOl92bS50b2dnbGVCdXR0b25zfSxtb2RlbDp7dmFsdWU6KF92bS5zZWxlY3RlZEJ1dHRvbnMpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uc2VsZWN0ZWRCdXR0b25zPSQkdn0sZXhwcmVzc2lvbjpcInNlbGVjdGVkQnV0dG9uc1wifX0pXSwxKV0sMSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3AnLFtfdm0uX3YoXCJQdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DcmVwdXNjdWxhcl9yYXlzXCJ9fSxbX3ZtLl92KFwiY3JlcHVzY3VsYXIgcmF5c1wiKV0pLF92bS5fdihcIiAoXFxcImdvZCByYXlzXFxcIilcXG4gICAgICBvbiBhIDJEIHN1cmZhY2UuIE1vdmUgeW91ciBtb3VzZSBvdmVyIHRoZSBjYW52YXMgdG8gY29udHJvbCB0aGUgbGlnaHQgc291cmNlLlwiKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IENhbnZhc1RleHR1cmUgfSBmcm9tICd+L2xpYi9jb3JlL2NhbnZhcy10ZXh0dXJlJztcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICd+L2xpYi9jb3JlL3BvaW50LTJkJztcbmltcG9ydCB7IFZpcnR1YWxTdXJmYWNlIH0gZnJvbSAnfi9saWIvY29yZS92aXJ0dWFsLXN1cmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgQ3JlcHVzY3VsYXJSYXlzQXBwIGV4dGVuZHMgQXBwIHtcbiAgY29uc3RydWN0b3IodGFyZ2V0Q2FudmFzSWQsIGJhY2tncm91bmRJbWFnZVVybCwgbWFza0ltYWdlVXJsKSB7XG4gICAgc3VwZXIodGFyZ2V0Q2FudmFzSWQpO1xuXG4gICAgdGhpcy5iZ0ltYWdlID0gbmV3IENhbnZhc1RleHR1cmUoYmFja2dyb3VuZEltYWdlVXJsKTtcbiAgICB0aGlzLm1hc2tJbWFnZSA9IG5ldyBDYW52YXNUZXh0dXJlKG1hc2tJbWFnZVVybCk7XG5cbiAgICB0aGlzLm1hc2tJbWFnZVBvc2l0aW9uID0gbmV3IFBvaW50MkQoLTEyMCwgLTE4MCk7XG4gICAgdGhpcy5kcmF3TWFzayA9IHRydWU7XG4gICAgdGhpcy5kcmF3QmFja2dyb3VuZCA9IHRydWU7XG4gICAgdGhpcy5kaXJ0eVN1cmZhY2UgPSBmYWxzZTtcblxuICAgIHRoaXMuZHJhd0FyZWEgPSBuZXcgVmlydHVhbFN1cmZhY2UodGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICB0aGlzLnRvdGFsRHJhd1RpbWUgPSAwO1xuICAgIHRoaXMudG90YWxEcmF3Q291bnQgPSAwO1xuXG4gICAgdGhpcy5saWdodHMgPSBbXTtcbiAgfVxuXG5cbiAgZHJhdygpIHtcbiAgICBjb25zdCBkcmF3RGVzdCA9IHRoaXMuZGlydHlTdXJmYWNlID8gdGhpcy52aXJ0dWFsU3VyZmFjZSA6IHRoaXMuZHJhd0FyZWE7XG5cbiAgICB0aGlzLnN0YXJ0RHJhd2luZygpO1xuXG4gICAgaWYgKHRoaXMuZHJhd0JhY2tncm91bmQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuYmdJbWFnZS5kcmF3KGRyYXdEZXN0LCAwLCAwKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoKHRoaXMubGlnaHRzW2ldLmFjdGl2ZSA9PT0gdHJ1ZSkgJiYgKHRoaXMubGlnaHRzW2ldLmRyYXdMaWdodCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgdGhpcy5saWdodHNbaV0uaW1hZ2UuZHJhdyhcbiAgICAgICAgICBkcmF3RGVzdCxcbiAgICAgICAgICB0aGlzLmxpZ2h0c1tpXS5wb3NpdGlvbi54IC0gdGhpcy5saWdodHNbaV0uaW1hZ2UuZ2V0V2lkdGgoKSAvIDIsXG4gICAgICAgICAgdGhpcy5saWdodHNbaV0ucG9zaXRpb24ueSAtIHRoaXMubGlnaHRzW2ldLmltYWdlLmdldEhlaWdodCgpIC8gMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKHRoaXMuZHJhd01hc2sgPT09IHRydWUpIHtcbiAgICAgIHRoaXMubWFza0ltYWdlLmRyYXcoZHJhd0Rlc3QsIHRoaXMubWFza0ltYWdlUG9zaXRpb24ueCwgdGhpcy5tYXNrSW1hZ2VQb3NpdGlvbi55KTtcbiAgICB9XG5cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saWdodHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmxpZ2h0c1tpXS5hY3RpdmUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzUmF5cyh0aGlzLmxpZ2h0c1tpXSwgdGhpcy52aXJ0dWFsU3VyZmFjZS5kYXRhLCBkcmF3RGVzdC5kYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVuZERyYXdpbmcodHJ1ZSk7XG5cbiAgICAvLyBjb25zb2xlLmxvZygncHVzaGVkJyk7XG4gIH07XG5cblxuICAvKipcbiAgICogPGNvZGU+XG4gICAqIHZhciBsaWdodE9iamVjdCA9IHtcbiAgICogICBhY3RpdmU6IHRydWUsXG4gICAqICAgcG9zaXRpb246IG5ldyBQb2ludDJEKCAwLCAwICksXG4gICAqICAgaGVpZ2h0OiAwLjIsXG4gICAqICAgZGVjYXk6IDAuMyxcbiAgICogICBleHBvc3VyOiAxLFxuICAgKiAgIGRlbnNpdHk6IDAuNCxcbiAgICogICBzYW1wbGVzOiAxMCxcbiAgICogICBpbWFnZVVyOiAncmVzb3VyY2VzL2xpZ2h0LnBuZydcbiAgICogfTtcbiAgICogPC9jb2RlPlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7b2JqZWN0fEFycmF5fSBsaWdodE9iamVjdFxuICAgKi9cbiAgYWRkTGlnaHQobGlnaHRPYmplY3QpIHtcbiAgICBpZiAobGlnaHRPYmplY3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodE9iamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaWdodE9iamVjdFtpXS5pbWFnZSA9IG5ldyBDYW52YXNUZXh0dXJlKGxpZ2h0T2JqZWN0W2ldLmltYWdlVXJsKTtcbiAgICAgICAgdGhpcy5saWdodHMucHVzaChsaWdodE9iamVjdFtpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpZ2h0T2JqZWN0LmltYWdlID0gbmV3IENhbnZhc1RleHR1cmUobGlnaHRPYmplY3QuaW1hZ2VVcmwpO1xuICAgICAgdGhpcy5saWdodHMucHVzaChsaWdodE9iamVjdCk7XG4gICAgfVxuICB9O1xuXG5cbiAgcHJvY2Vzc1JheXMobGlnaHQsIGRlc3QsIHNvdXJjZSkge1xuICAgIGxldCBkYXRhUHRyID0gMDtcblxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy52aXJ0dWFsU3VyZmFjZS5nZXRXaWR0aCgpO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMudmlydHVhbFN1cmZhY2UuZ2V0SGVpZ2h0KCk7XG5cbiAgICBjb25zdCBzYW1wbGVzID0gbGlnaHQuc2FtcGxlcztcbiAgICBjb25zdCB3ZWlnaHQgPSBsaWdodC53ZWlnaHQ7XG4gICAgY29uc3QgZGVjYXkgPSBsaWdodC5kZWNheTtcbiAgICBjb25zdCBleHBvc3VyZSA9IGxpZ2h0LmV4cG9zdXJlO1xuXG4gICAgY29uc3QgbGlnaHRQb3NYID0gbGlnaHQucG9zaXRpb24ueDtcbiAgICBjb25zdCBsaWdodFBvc1kgPSBsaWdodC5wb3NpdGlvbi55O1xuXG4gICAgY29uc3Qgbm9ybWFsU2FtcGxlc0J5RGVuc2l0eSA9IDEuMCAvIHNhbXBsZXMgKiBsaWdodC5kZW5zaXR5O1xuICAgIGNvbnN0IG1heFB0ciA9IHdpZHRoICogaGVpZ2h0ICogNDtcblxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAvLyBjdXJQb3Muc2V0KCB4LCB5ICk7XG4gICAgICAgIC8vIGRlbHRhVGV4LnNldCggY3VyUG9zICk7XG4gICAgICAgIC8vIHRoaXMgaXMgZmFzdGVyOlxuICAgICAgICBsZXQgY3VyUG9zWCA9IHg7XG4gICAgICAgIGxldCBjdXJQb3NZID0geTtcbiAgICAgICAgbGV0IGRlbHRhVGV4WCA9IHg7XG4gICAgICAgIGxldCBkZWx0YVRleFkgPSB5O1xuXG4gICAgICAgIC8vIGRlbHRhVGV4LnN1YnRyYWN0KCBsaWdodC5wb3NpdGlvbiApO1xuICAgICAgICAvLyBkZWx0YVRleC5tdWx0aXBseUJ5VmFsKCBub3JtYWxTYW1wbGVzQnlEZW5zaXR5ICk7XG4gICAgICAgIC8vIHRoaXMgaXMgZmFzdGVyOlxuICAgICAgICBkZWx0YVRleFggLT0gbGlnaHRQb3NYO1xuICAgICAgICBkZWx0YVRleFkgLT0gbGlnaHRQb3NZO1xuICAgICAgICBkZWx0YVRleFggKj0gbm9ybWFsU2FtcGxlc0J5RGVuc2l0eTtcbiAgICAgICAgZGVsdGFUZXhZICo9IG5vcm1hbFNhbXBsZXNCeURlbnNpdHk7XG5cblxuICAgICAgICAvLyB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldFBpeGVsKCBjdXJQb3MsIGluaXRpYWxDb2xvciApO1xuICAgICAgICAvLyB0aGlzIGlzIGZhc3RlcjpcbiAgICAgICAgbGV0IGluaXRpYWxSID0gc291cmNlW2RhdGFQdHJdO1xuICAgICAgICBsZXQgaW5pdGlhbEcgPSBzb3VyY2VbZGF0YVB0ciArIDFdO1xuICAgICAgICBsZXQgaW5pdGlhbEIgPSBzb3VyY2VbZGF0YVB0ciArIDJdO1xuICAgICAgICBsZXQgaWxsdW1pbmF0aW9uRGVjYXkgPSAxLjA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1wbGVzOyBpKyspIHtcbiAgICAgICAgICAvLyBjdXJQb3Muc3VidHJhY3QoIGRlbHRhVGV4ICk7XG4gICAgICAgICAgLy8gdGhpcyBpcyBmYXN0ZXI6XG4gICAgICAgICAgY3VyUG9zWCAtPSBkZWx0YVRleFg7XG4gICAgICAgICAgY3VyUG9zWSAtPSBkZWx0YVRleFk7XG5cbiAgICAgICAgICAvLyB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldFBpeGVsKCBjdXJQb3MsIGN1ckNvbG9yICk7XG4gICAgICAgICAgLy8gdGhpcyBpcyBmYXN0ZXI6XG4gICAgICAgICAgbGV0IGN1clB0ciA9IChNYXRoLnJvdW5kKGN1clBvc1gpICsgTWF0aC5yb3VuZChjdXJQb3NZKSAqIHdpZHRoKSAqIDQ7XG5cbiAgICAgICAgICBpZiAoKGN1clB0ciA+PSAwKSAmJiAoY3VyUHRyIDwgbWF4UHRyKSkge1xuICAgICAgICAgICAgbGV0IGN1clIgPSBzb3VyY2VbY3VyUHRyKytdO1xuICAgICAgICAgICAgbGV0IGN1ckcgPSBzb3VyY2VbY3VyUHRyKytdO1xuICAgICAgICAgICAgbGV0IGN1ckIgPSBzb3VyY2VbY3VyUHRyXTtcblxuICAgICAgICAgICAgLy8gY3VyQ29sb3IubXVsdGlwbHlCeVZhbCggaWxsdW1pbmF0aW9uRGVjYXkgKiB3ZWlnaHQsIHRydWUgKTtcbiAgICAgICAgICAgIC8vIGluaXRpYWxDb2xvci5hZGQoIGN1ckNvbG9yLCB0cnVlICk7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIGZhc3RlcjpcbiAgICAgICAgICAgIGNvbnN0IGN1ck11bCA9IGlsbHVtaW5hdGlvbkRlY2F5ICogd2VpZ2h0O1xuXG4gICAgICAgICAgICBjdXJSICo9IGN1ck11bDtcbiAgICAgICAgICAgIGN1ckcgKj0gY3VyTXVsO1xuICAgICAgICAgICAgY3VyQiAqPSBjdXJNdWw7XG4gICAgICAgICAgICBpbml0aWFsUiArPSBjdXJSO1xuICAgICAgICAgICAgaW5pdGlhbEcgKz0gY3VyRztcbiAgICAgICAgICAgIGluaXRpYWxCICs9IGN1ckI7XG5cbiAgICAgICAgICAgIGlsbHVtaW5hdGlvbkRlY2F5ICo9IGRlY2F5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgaXMgZmFzdGVyOlxuICAgICAgICBpbml0aWFsUiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZChpbml0aWFsUiAqIGV4cG9zdXJlKSkpO1xuICAgICAgICBpbml0aWFsRyA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZChpbml0aWFsRyAqIGV4cG9zdXJlKSkpO1xuICAgICAgICBpbml0aWFsQiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZChpbml0aWFsQiAqIGV4cG9zdXJlKSkpO1xuXG4gICAgICAgIGRlc3RbZGF0YVB0cisrXSA9IGluaXRpYWxSO1xuICAgICAgICBkZXN0W2RhdGFQdHIrK10gPSBpbml0aWFsRztcbiAgICAgICAgZGVzdFtkYXRhUHRyKytdID0gaW5pdGlhbEI7XG5cbiAgICAgICAgZGF0YVB0cisrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXNcbiAgICAgICAgaWQ9J3N1cmZhY2UnXG4gICAgICAgIHdpZHRoPSczMjAnXG4gICAgICAgIGhlaWdodD0nMjAwJ1xuICAgICAgICBAbW91c2Vtb3ZlPVwib25Nb3VzZU1vdmVcIlxuICAgICAgICBAbW91c2VvdXQ9XCJvbk1vdXNlT3V0XCJcbiAgICAgICAgQG1vdXNlb3Zlcj1cIm9uTW91c2VPdmVyXCJcbiAgICAgID48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+Q3JlcHVzY3VsYXIgUmF5czwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj0naHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DcmVwdXNjdWxhcl9yYXlzJz5jcmVwdXNjdWxhciByYXlzPC9hPiAoXCJnb2QgcmF5c1wiKVxuICAgICAgICBvbiBhIDJEIHN1cmZhY2UuIE1vdmUgeW91ciBtb3VzZSBvdmVyIHRoZSBjYW52YXMgdG8gY29udHJvbCB0aGUgbGlnaHQgc291cmNlLjwvcD5cblxuICAgICAgPGItY2FyZCBzdWItdGl0bGU9XCJPcHRpb25zXCIgY2xhc3M9XCJvcHRpb25zXCI+XG4gICAgICAgIDxiLWlucHV0LWdyb3VwIHByZXBlbmQ9XCJXZWlnaHRcIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J3dlaWdodCcgdHlwZT0ncmFuZ2UnIG1pbj0nMCcgbWF4PScyMDAnIEB1cGRhdGU9XCJ1cGRhdGVXZWlnaHRcIiAvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkRlY2F5XCIgc2l6ZT1cInNtXCIgY2xhc3M9XCJtYi0zXCI+XG4gICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSdkZWNheScgdHlwZT0ncmFuZ2UnIG1pbj0nMCcgbWF4PScyMDAwJyBAdXBkYXRlPVwidXBkYXRlRGVjYXlcIiAvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkV4cG9zdXJlXCIgc2l6ZT1cInNtXCIgY2xhc3M9XCJtYi0zXCI+XG4gICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSdleHBvc3VyZScgdHlwZT0ncmFuZ2UnIG1pbj0nMCcgbWF4PScyMDAwJyBAdXBkYXRlPVwidXBkYXRlRXhwb3N1cmVcIiAvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkRlbnNpdHlcIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J2RlbnNpdHknIHR5cGU9J3JhbmdlJyBtaW49JzAnIG1heD0nMjAwMCcgQHVwZGF0ZT1cInVwZGF0ZURlbnNpdHlcIiAvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIlNhbXBsZXNcIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J3NhbXBsZXMnIHR5cGU9J3JhbmdlJyBtaW49JzAnIG1heD0nMTUwJyBAdXBkYXRlPVwidXBkYXRlU2FtcGxlc1wiIC8+XG4gICAgICAgIDwvYi1pbnB1dC1ncm91cD5cblxuICAgICAgICA8Yi1mb3JtLWdyb3VwPlxuICAgICAgICAgIDxiLWZvcm0tY2hlY2tib3gtZ3JvdXBcbiAgICAgICAgICAgIDpvcHRpb25zPVwiYnV0dG9uT3B0aW9uc1wiXG4gICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRCdXR0b25zXCJcbiAgICAgICAgICAgIGJ1dHRvbnNcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBAY2hhbmdlPVwidG9nZ2xlQnV0dG9uc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvYi1mb3JtLWNoZWNrYm94LWdyb3VwPlxuICAgICAgICA8L2ItZm9ybS1ncm91cD5cbiAgICAgIDwvYi1jYXJkPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZ1ZVdyYXBwZXIgZnJvbSAnLi4vLi4vdnVlLXdyYXBwZXInO1xuaW1wb3J0IHsgQ3JlcHVzY3VsYXJSYXlzQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5pbXBvcnQgeyBQb2ludDJEIH0gZnJvbSAnfi9saWIvY29yZS9wb2ludC0yZCc7XG5pbXBvcnQgeyBIZWxwZXIgfSBmcm9tICd+L2xpYi9jb3JlL2hlbHBlcic7XG5cbkBDb21wb25lbnRcbmNsYXNzIENyZXB1c2N1bGFyUmF5cyBleHRlbmRzIFZ1ZVdyYXBwZXIge1xuICB3ZWlnaHQgPSAyNTA7XG5cbiAgZGVjYXkgPSA4MDA7XG5cbiAgZXhwb3N1cmUgPSA4MDA7XG5cbiAgZGVuc2l0eSA9IDQ1MDtcblxuICBzYW1wbGVzID0gMjA7XG5cbiAgc2VsZWN0ZWRCdXR0b25zID0gWydkcmF3TGlnaHQnLCAnZHJhd01hc2snLCAnZHJhd0JhY2tncm91bmQnXTtcblxuICBidXR0b25PcHRpb25zID0gW1xuICAgIHsgdGV4dDogJ0RyYXcgTGlnaHQnLCB2YWx1ZTogJ2RyYXdMaWdodCcgfSxcbiAgICB7IHRleHQ6ICdEcmF3IE1hc2snLCB2YWx1ZTogJ2RyYXdNYXNrJyB9LFxuICAgIHsgdGV4dDogJ0RyYXcgQmFja2dyb3VuZCcsIHZhbHVlOiAnZHJhd0JhY2tncm91bmQnIH0sXG4gICAgeyB0ZXh0OiAnRGlydHkgU3VyZmFjZScsIHZhbHVlOiAnZGlydHlTdXJmYWNlJyB9XG4gIF07XG5cbiAgcmFkc1BlclNlY29uZCA9IDAuNjtcblxuICByYWRpdXMgPSA0MDtcblxuICBncmlkUG9zWCA9IC0xMjA7XG5cbiAgZ3JpZFBvc1kgPSAtMjAwO1xuXG4gIG5vVXBkYXRlcyA9IGZhbHNlO1xuXG4gIGxpZ2h0cyA9IFtcbiAgICB7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBkcmF3TGlnaHQ6IHRydWUsXG4gICAgICBwb3NpdGlvbjogbmV3IFBvaW50MkQoMTYwLCAxMDApLFxuXG4gICAgICByYWRpdXNQZXJTZWNvbmQ6IC0wLjksXG4gICAgICByYWRpdXNYOiA4MCxcbiAgICAgIHJhZGl1c1k6IDgwLFxuICAgICAgb3JpZ2luOiBuZXcgUG9pbnQyRCgxNjAsIDEwMCksXG5cbiAgICAgIHdlaWdodDogdGhpcy53ZWlnaHQgLyAxMDAwLFxuICAgICAgZGVjYXk6IHRoaXMuZGVjYXkgLyAxMDAwLFxuICAgICAgZXhwb3N1cmU6IHRoaXMuZXhwb3N1cmUgLyAxMDAwLFxuICAgICAgZGVuc2l0eTogdGhpcy5kZW5zaXR5IC8gMTAwMCxcbiAgICAgIHNhbXBsZXM6IHRoaXMuc2FtcGxlcyxcbiAgICAgIGltYWdlVXJsOiAnLi9yZXNvdXJjZXMvYXBwcy9jcmVwdXNjdWxhci1yYXlzL2xpZ2h0LnBuZydcbiAgICB9XG4gIF07XG5cblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICBjb25zdCBhcHAgPSBuZXcgQ3JlcHVzY3VsYXJSYXlzQXBwKCdzdXJmYWNlJywgJy4vcmVzb3VyY2VzL2FwcHMvY3JlcHVzY3VsYXItcmF5cy9iZy5wbmcnLCAnLi9yZXNvdXJjZXMvYXBwcy9jcmVwdXNjdWxhci1yYXlzL21hc2szLnBuZycsICcuL3Jlc291cmNlcy9hcHBzL2NyZXB1c2N1bGFyLXJheXMvbGlnaHQucG5nJyk7XG5cbiAgICBhcHAuYWRkTGlnaHQodGhpcy5saWdodHMpO1xuXG4gICAgcmV0dXJuIGFwcDtcbiAgfVxuXG5cbiAgdGljaygpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcDtcblxuXG4gICAgaWYgKCF0aGlzLm5vVXBkYXRlcykge1xuICAgICAgY29uc3QgbGlnaHRzID0gdGhpcy5saWdodHM7XG5cbiAgICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3QgcnVuVGltZSA9IChjdXJUaW1lLmdldFRpbWUoKSAtIGFwcC5zdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDAuMDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpZ2h0c1tpXS5wb3NpdGlvbi5zZXQoXG4gICAgICAgICAgbGlnaHRzW2ldLm9yaWdpbi54ICsgbGlnaHRzW2ldLnJhZGl1c1ggKiBNYXRoLnNpbihsaWdodHNbaV0ucmFkaXVzUGVyU2Vjb25kICogcnVuVGltZSksXG4gICAgICAgICAgbGlnaHRzW2ldLm9yaWdpbi55ICsgbGlnaHRzW2ldLnJhZGl1c1kgKiBNYXRoLmNvcyhsaWdodHNbaV0ucmFkaXVzUGVyU2Vjb25kICogcnVuVGltZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHAuZHJhdygpO1xuICB9XG5cblxuICB0b2dnbGVCdXR0b25zKHZhbCkge1xuICAgIHRoaXMuYXBwLmxpZ2h0c1swXS5kcmF3TGlnaHQgPSAodmFsLmluZGV4T2YoJ2RyYXdMaWdodCcpID49IDApO1xuICAgIHRoaXMuYXBwLmRyYXdNYXNrID0gKHZhbC5pbmRleE9mKCdkcmF3TWFzaycpID49IDApO1xuICAgIHRoaXMuYXBwLmRyYXdCYWNrZ3JvdW5kID0gKHZhbC5pbmRleE9mKCdkcmF3QmFja2dyb3VuZCcpID49IDApO1xuICAgIHRoaXMuYXBwLmRpcnR5U3VyZmFjZSA9ICh2YWwuaW5kZXhPZignZGlydHlTdXJmYWNlJykgPj0gMCk7XG4gIH1cblxuXG4gIHVwZGF0ZVdlaWdodCh2YWwpIHtcbiAgICB0aGlzLmFwcC5saWdodHNbMF0ud2VpZ2h0ID0gdmFsIC8gMTAwMDtcbiAgfVxuXG5cbiAgdXBkYXRlRGVjYXkodmFsKSB7XG4gICAgdGhpcy5hcHAubGlnaHRzWzBdLmRlY2F5ID0gdmFsIC8gMTAwMDtcbiAgfVxuXG5cbiAgdXBkYXRlRGVuc2l0eSh2YWwpIHtcbiAgICB0aGlzLmFwcC5saWdodHNbMF0uZGVuc2l0eSA9IHZhbCAvIDEwMDA7XG4gIH1cblxuXG4gIHVwZGF0ZUV4cG9zdXJlKHZhbCkge1xuICAgIHRoaXMuYXBwLmxpZ2h0c1swXS5leHBvc3VyZSA9IHZhbCAvIDEwMDA7XG4gIH1cblxuXG4gIHVwZGF0ZVNhbXBsZXModmFsKSB7XG4gICAgdGhpcy5hcHAubGlnaHRzWzBdLnNhbXBsZXMgPSBNYXRoLnJvdW5kKHZhbCk7XG4gIH1cblxuXG4gIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgY29uc3QgY29vcmRzID0gSGVscGVyLmdldENhbnZhc0Nvb3JkaW5hdGVzKGV2ZW50LCAnc3VyZmFjZScpO1xuXG4gICAgdGhpcy5hcHAubGlnaHRzWzBdLnBvc2l0aW9uLnNldChjb29yZHMueCwgY29vcmRzLnkpO1xuICB9XG5cblxuICBvbk1vdXNlT3ZlcihldmVudCkge1xuICAgIHRoaXMubm9VcGRhdGVzID0gdHJ1ZTtcbiAgfVxuXG5cbiAgb25Nb3VzZU91dChldmVudCkge1xuICAgIHRoaXMubm9VcGRhdGVzID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3JlcHVzY3VsYXJSYXlzO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wM2ZlZDkwYSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLl9tKDApfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI4NTNcIixcImhlaWdodFwiOlwiNDcwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJGaXNoZXllIExlbnNcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzdG9ydGlvbl8ob3B0aWNzKVwifX0sW192bS5fdihcInJhZGlhbCBiYXJyZWwgZGlzdG9ydGlvblwiKV0pLF92bS5fdihcIi5cIildKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgSGVscGVyIH0gZnJvbSAnLi9oZWxwZXInO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vdGV4dHVyZSc7XG5pbXBvcnQgeyBWaXJ0dWFsU3VyZmFjZSB9IGZyb20gJy4vdmlydHVhbC1zdXJmYWNlJztcblxuZXhwb3J0IGNsYXNzIEVtcHR5VGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuICBjb25zdHJ1Y3RvcihjYW52YXNFbGVtZW50SWQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5jYW52YXMgPSBIZWxwZXIuZ2V0RWxlbWVudChjYW52YXNFbGVtZW50SWQpO1xuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICB0aGlzLmNyZWF0ZSgpO1xuXG4gICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICB9O1xuXG5cbiAgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gIH07XG5cblxuICBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICB9O1xuXG5cbiAgZ2V0UGl4ZWxzKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH07XG5cblxuICBjcmVhdGUoKSB7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5jb250ZXh0LmNyZWF0ZUltYWdlRGF0YSh0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgIHRoaXMud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcblxuICAgIHRoaXMudmlydHVhbFN1cmZhY2UgPSBuZXcgVmlydHVhbFN1cmZhY2UodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMuZGF0YS5kYXRhKTtcbiAgfTtcblxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICB0aGlzLndpZHRoID0gMDtcbiAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnfi9saWIvY29yZS9hcHAnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dHVyZSB9IGZyb20gJ34vbGliL2NvcmUvY2FudmFzLXRleHR1cmUnO1xuaW1wb3J0IHsgRW1wdHlUZXh0dXJlIH0gZnJvbSAnfi9saWIvY29yZS9lbXB0eS10ZXh0dXJlJztcblxuZXhwb3J0IGNsYXNzIEZpc2hleWVMZW5zQXBwIGV4dGVuZHMgQXBwIHtcbiAgLyoqXG4gICAqIEBsaW5rIGh0dHA6Ly9wb3BzY2FuLmJsb2dzcG90LmNvLnVrLzIwMTIvMDQvZmlzaGV5ZS1sZW5zLWVxdWF0aW9uLXNpbXBsZS1maXNoZXllLmh0bWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldENhbnZhc0lkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiZ0ltYWdlVXJsXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7YXBwLmpzfVxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0Q2FudmFzSWQsIGJnSW1hZ2VVcmwpIHtcbiAgICBzdXBlcih0YXJnZXRDYW52YXNJZCk7XG5cbiAgICB0aGlzLmJnSW1hZ2UgPSBuZXcgQ2FudmFzVGV4dHVyZShiZ0ltYWdlVXJsKTtcbiAgICB0aGlzLnRleHR1cmVzID0gW25ldyBFbXB0eVRleHR1cmUodGFyZ2V0Q2FudmFzSWQpLCBuZXcgRW1wdHlUZXh0dXJlKHRhcmdldENhbnZhc0lkKV07XG4gICAgdGhpcy5sZW5zZXMgPSBbXTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgbGVuc1xuICAgKlxuICAgKiA8Y29kZT5cbiAgICogdmFyIGxlbnMgPSB7XG4gICAqICB4OiAwLFxuICAgKiAgeTogMCxcbiAgICogIHJhZGl1czogNTBcbiAgICogfTtcbiAgICogPC9jb2RlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGVuc1xuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRMZW5zKGxlbnMpIHtcbiAgICB0aGlzLmxlbnNlcy5wdXNoKGxlbnMpO1xuICB9XG5cblxuICBkcmF3KCkge1xuICAgIHRoaXMuZHJhd2luZyA9IHRydWU7XG4gICAgdGhpcy50ZXh0dXJlc1swXS5kYXRhID0gdGhpcy5iZ0ltYWdlLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMudGV4dHVyZXNbMF0uZ2V0V2lkdGgoKSxcbiAgICAgIHRoaXMudGV4dHVyZXNbMF0uZ2V0SGVpZ2h0KCkpO1xuXG4gICAgbGV0IGN1clNvdXJjZUNhbnZhcyA9IDA7XG4gICAgbGV0IGN1ckRlc3RDYW52YXMgPSAxO1xuXG4gICAgLy8gdGhpcyBpcyB2ZXJ5IHVub3B0aW1pemVkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbnNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy50ZXh0dXJlc1tjdXJEZXN0Q2FudmFzXS5kYXRhLmRhdGEuc2V0KG5ldyBVaW50OENsYW1wZWRBcnJheSh0aGlzLnRleHR1cmVzW2N1clNvdXJjZUNhbnZhc10uZGF0YS5kYXRhKSk7XG5cbiAgICAgIHRoaXMuZHJhd0xlbnMoXG4gICAgICAgIE1hdGgucm91bmQodGhpcy5sZW5zZXNbaV0ueCksXG4gICAgICAgIE1hdGgucm91bmQodGhpcy5sZW5zZXNbaV0ueSksXG4gICAgICAgIE1hdGgucm91bmQodGhpcy5sZW5zZXNbaV0ucmFkaXVzKSxcbiAgICAgICAgdGhpcy50ZXh0dXJlc1tjdXJEZXN0Q2FudmFzXSwgdGhpcy50ZXh0dXJlc1tjdXJTb3VyY2VDYW52YXNdXG4gICAgICApO1xuXG4gICAgICBjdXJTb3VyY2VDYW52YXMgPSAxIC0gY3VyU291cmNlQ2FudmFzO1xuICAgICAgY3VyRGVzdENhbnZhcyA9IDEgLSBjdXJEZXN0Q2FudmFzO1xuICAgIH1cblxuICAgIHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJykucHV0SW1hZ2VEYXRhKHRoaXMudGV4dHVyZXNbY3VyU291cmNlQ2FudmFzXS5kYXRhLCAwLCAwKTtcblxuICAgIHRoaXMuZHJhd2luZyA9IGZhbHNlO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtpbnR9IHBvc1hcbiAgICogQHBhcmFtIHtpbnR9IHBvc1lcbiAgICogQHBhcmFtIHtpbnR9IHJhZGl1c1xuICAgKiBAcGFyYW0ge0NhbnZhc1RleHR1cmV9IGRlc3RDYW52YXNUZXh0dXJlXG4gICAqIEBwYXJhbSB7Q2FudmFzVGV4dHVyZX0gc291cmNlQ2FudmFzVGV4dHVyZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZHJhd0xlbnMocG9zWCwgcG9zWSwgcmFkaXVzLCBkZXN0Q2FudmFzVGV4dHVyZSwgc291cmNlQ2FudmFzVGV4dHVyZSkge1xuICAgIGNvbnN0IGRlc3REYXRhID0gZGVzdENhbnZhc1RleHR1cmUuZGF0YS5kYXRhO1xuICAgIGNvbnN0IHNvdXJjZURhdGEgPSBzb3VyY2VDYW52YXNUZXh0dXJlLmRhdGEuZGF0YTtcbiAgICBjb25zdCBzb3VyY2VXaWR0aCA9IHNvdXJjZUNhbnZhc1RleHR1cmUuZ2V0V2lkdGgoKTtcblxuICAgIGNvbnN0IGhhbGZSYWRpdXMgPSAwLjUgKiByYWRpdXM7XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHJhZGl1czsgeSsrKSB7XG4gICAgICBsZXQgcHRyID0gKHBvc1ggKyAoeSArIHBvc1kpICogZGVzdENhbnZhc1RleHR1cmUuZ2V0V2lkdGgoKSkgKiA0O1xuXG4gICAgICBjb25zdCBueSA9ICh5IC8gaGFsZlJhZGl1cykgLSAxLjA7XG4gICAgICBjb25zdCBueTIgPSBueSAqIG55O1xuXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHJhZGl1czsgeCsrKSB7XG4gICAgICAgIGNvbnN0IG54ID0gKHggLyBoYWxmUmFkaXVzKSAtIDEuMDtcbiAgICAgICAgY29uc3QgciA9IE1hdGguc3FydChueCAqIG54ICsgbnkyKTtcblxuICAgICAgICBpZiAoKHIgPj0gMC4wKSAmJiAociA8PSAxLjApKSB7XG4gICAgICAgICAgY29uc3QgdGhldGEgPSBNYXRoLmF0YW4yKG55LCBueCk7XG4gICAgICAgICAgY29uc3QgcmQgPSAociArICgxIC0gTWF0aC5zcXJ0KDEgLSAociAqIHIpKSkpIC8gMjtcblxuICAgICAgICAgIGlmIChyZCA8PSAxLjApIHtcbiAgICAgICAgICAgIGNvbnN0IGZueCA9IHJkICogTWF0aC5jb3ModGhldGEpO1xuICAgICAgICAgICAgY29uc3QgZm55ID0gcmQgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgICAgICBjb25zdCBweCA9IHBvc1ggKyBNYXRoLnJvdW5kKChmbnggKyAxLjApICogaGFsZlJhZGl1cyk7XG4gICAgICAgICAgICBjb25zdCBweSA9IHBvc1kgKyBNYXRoLnJvdW5kKChmbnkgKyAxLjApICogaGFsZlJhZGl1cyk7XG5cbiAgICAgICAgICAgIGxldCBiZ1B0ciA9IChweSAqIHNvdXJjZVdpZHRoICsgcHgpICogNDtcblxuICAgICAgICAgICAgZGVzdERhdGFbcHRyKytdID0gc291cmNlRGF0YVtiZ1B0cisrXTtcbiAgICAgICAgICAgIGRlc3REYXRhW3B0cisrXSA9IHNvdXJjZURhdGFbYmdQdHIrK107XG4gICAgICAgICAgICBkZXN0RGF0YVtwdHIrK10gPSBzb3VyY2VEYXRhW2JnUHRyKytdO1xuXG4gICAgICAgICAgICBwdHIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRyICs9IDQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB0ciArPSA0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9Jzg1MycgaGVpZ2h0PSc0NzAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5GaXNoZXllIExlbnM8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIDxhIGhyZWY9J2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzdG9ydGlvbl8ob3B0aWNzKSc+cmFkaWFsIGJhcnJlbCBkaXN0b3J0aW9uPC9hPi48L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBGaXNoZXllTGVuc0FwcCB9IGZyb20gJy4vYXBwJztcblxuaW1wb3J0IHsgSGVscGVyIH0gZnJvbSAnfi9saWIvY29yZS9oZWxwZXInO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBGaXNoZXllTGVucyBleHRlbmRzIFZ1ZVdyYXBwZXIge1xuICBsZW5zZXMgPSBbXG4gICAge1xuICAgICAgeDogMTYzLFxuICAgICAgeTogNDgsXG4gICAgICByYWRpdXM6IDI1MCxcbiAgICAgIGRpclg6IC0xLFxuICAgICAgZGlyWTogMCxcbiAgICAgIHNwZWVkWDogLTEuNixcbiAgICAgIHNwZWVkWTogMC4wXG4gICAgfSxcbiAgICB7XG4gICAgICB4OiAyNjMsXG4gICAgICB5OiA5OCxcbiAgICAgIHJhZGl1czogMzAwLFxuICAgICAgZGlyWDogMi4zLFxuICAgICAgZGlyWTogMCxcbiAgICAgIHNwZWVkWDogMSxcbiAgICAgIHNwZWVkWTogMC4wXG4gICAgfVxuICBdO1xuXG5cbiAgbW92ZUxlbnNlcygpIHtcbiAgICBjb25zdCBjYW52YXMgPSBIZWxwZXIuZ2V0RWxlbWVudCgnc3VyZmFjZScpO1xuICAgIGNvbnN0IGxlbnNlcyA9IHRoaXMubGVuc2VzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5zZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxlbnNlc1tpXS54ICs9IGxlbnNlc1tpXS5zcGVlZFg7XG4gICAgICBsZW5zZXNbaV0ueSArPSBsZW5zZXNbaV0uc3BlZWRZO1xuXG4gICAgICBsZW5zZXNbaV0uc3BlZWRZICs9IDAuNztcblxuICAgICAgaWYgKChsZW5zZXNbaV0ueCArIGxlbnNlc1tpXS5yYWRpdXMgPj0gY2FudmFzLndpZHRoKSAmJiAobGVuc2VzW2ldLnNwZWVkWCA+PSAwKSkge1xuICAgICAgICBsZW5zZXNbaV0ueCA9IGNhbnZhcy53aWR0aCAtIGxlbnNlc1tpXS5yYWRpdXM7XG4gICAgICAgIGxlbnNlc1tpXS5zcGVlZFggPSAtTWF0aC5taW4oOC4wLCBNYXRoLmFicyhsZW5zZXNbaV0uc3BlZWRYKSAqICgwLjcgKyBNYXRoLnJhbmRvbSgpKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgobGVuc2VzW2ldLnggPCAwKSAmJiAobGVuc2VzW2ldLnNwZWVkWCA8PSAwKSkge1xuICAgICAgICBsZW5zZXNbaV0ueCA9IDA7XG4gICAgICAgIGxlbnNlc1tpXS5zcGVlZFggPSBNYXRoLm1pbig4LjAsIE1hdGguYWJzKGxlbnNlc1tpXS5zcGVlZFgpICogKDAuNSArIE1hdGgucmFuZG9tKCkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChsZW5zZXNbaV0ueSA8IDApICYmIChsZW5zZXNbaV0uc3BlZWRZIDw9IDApKSB7XG4gICAgICAgIGxlbnNlc1tpXS55ID0gMDtcbiAgICAgICAgbGVuc2VzW2ldLnNwZWVkWSA9IC1sZW5zZXNbaV0uc3BlZWRZICogMC45O1xuICAgICAgfVxuXG4gICAgICBpZiAoKGxlbnNlc1tpXS55ICsgbGVuc2VzW2ldLnJhZGl1cyA+PSBjYW52YXMuaGVpZ2h0KSAmJiAobGVuc2VzW2ldLnNwZWVkWSA+PSAwKSkge1xuICAgICAgICBsZW5zZXNbaV0ueSA9IGNhbnZhcy5oZWlnaHQgLSBsZW5zZXNbaV0ucmFkaXVzO1xuICAgICAgICBsZW5zZXNbaV0uc3BlZWRZID0gLWxlbnNlc1tpXS5zcGVlZFkgKiAwLjg1O1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhsZW5zZXNbaV0uc3BlZWRZKSA8IDgpIHtcbiAgICAgICAgICBsZW5zZXNbaV0uc3BlZWRZICo9IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBGaXNoZXllTGVuc0FwcCgnc3VyZmFjZScsICcuL3Jlc291cmNlcy9hcHBzL2Zpc2hleWUtbGVucy9iZy5qcGcnKTtcbiAgICBjb25zdCBsZW5zZXMgPSB0aGlzLmxlbnNlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcHAuYWRkTGVucyhsZW5zZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcHA7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgdGhpcy5tb3ZlTGVuc2VzKCk7XG5cbiAgICB0aGlzLmFwcC5kcmF3KCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlzaGV5ZUxlbnM7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWE2ZDdjMmFlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJyb3dcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbC1tZC0xMlwifSxbX2MoJ2NhbnZhcycse3JlZjpcIm1ldGFiYWxsc0NhbnZhc1wiLGF0dHJzOntcImlkXCI6XCJzdXJmYWNlXCIsXCJ3aWR0aFwiOlwiNjQwXCIsXCJoZWlnaHRcIjpcIjQ4MFwifX0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6XCJzdWJ0aXRsZVwifSxbX3ZtLl92KFwiTWV0YWJhbGxzXCIpXSksX3ZtLl92KFwiIFwiKSxfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnYi1jYXJkJyx7c3RhdGljQ2xhc3M6XCJvcHRpb25zXCIsYXR0cnM6e1wic3ViLXRpdGxlXCI6XCJPcHRpb25zXCJ9fSxbX2MoJ2ItaW5wdXQtZ3JvdXAnLHtzdGF0aWNDbGFzczpcIm1iLTNcIixhdHRyczp7XCJwcmVwZW5kXCI6XCJNaW4gVGhyZXNob2xkXCIsXCJzaXplXCI6XCJzbVwifX0sW19jKCdiLWZvcm0taW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6XCIxXCIsXCJtYXhcIjpcIjEyMDBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZU1pblRocmVzaG9sZH0sbW9kZWw6e3ZhbHVlOihfdm0ubWluVGhyZXNob2xkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLm1pblRocmVzaG9sZD0kJHZ9LGV4cHJlc3Npb246XCJtaW5UaHJlc2hvbGRcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIk1heCBUaHJlc2hvbGRcIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjFcIixcIm1heFwiOlwiMzEwMFwifSxvbjp7XCJ1cGRhdGVcIjpfdm0udXBkYXRlTWF4VGhyZXNob2xkfSxtb2RlbDp7dmFsdWU6KF92bS5tYXhUaHJlc2hvbGQpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0ubWF4VGhyZXNob2xkPSQkdn0sZXhwcmVzc2lvbjpcIm1heFRocmVzaG9sZFwifX0pXSwxKV0sMSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3AnLFtfdm0uX3YoXCJBIHB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBcIiksX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01ldGFiYWxsc1wifX0sW192bS5fdihcIkJsaW5uJ3MgTWV0YWJhbGxzXCIpXSksX3ZtLl92KFwiLlwiKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICd+L2xpYi9jb3JlL3BvaW50LTJkJztcbmltcG9ydCB7IE5vcm1hbGl6ZWRDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvbm9ybWFsaXplZC1jb2xvcic7XG5pbXBvcnQgeyBEcmF3IH0gZnJvbSAnfi9saWIvY29yZS9kcmF3JztcblxuZXhwb3J0IGNsYXNzIE1ldGFiYWxsc0FwcCBleHRlbmRzIEFwcCB7XG4gIGJhbGxzID0gW107XG5cbiAgY29uc3RydWN0b3IodGFyZ2V0Q2FudmFzSWQsIGJhbGxDb3VudCwgbWluVGhyZXNob2xkID0gMC4wMDEsIG1heFRocmVzaG9sZCA9IDEwMDApIHtcbiAgICBzdXBlcih0YXJnZXRDYW52YXNJZCk7XG5cbiAgICB0aGlzLnRocmVzaG9sZE1pbiA9IG1pblRocmVzaG9sZDtcbiAgICB0aGlzLnRocmVzaG9sZE1heCA9IG1heFRocmVzaG9sZDtcblxuICAgIHRoaXMuaW5pdEJhbGxzKGJhbGxDb3VudCk7XG4gIH1cblxuXG4gIGluaXRCYWxscyhiYWxsQ291bnQpIHtcbiAgICBjb25zdCBjYW52YXNXaWR0aCA9IHRoaXMuY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGNhbnZhc0hlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFsbENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHJhZGl1cyA9IDI1ICsgMjUgKiBNYXRoLnJhbmRvbSgpO1xuICAgICAgY29uc3QgcG93ZXIgPSAwLjUgKyBNYXRoLnJhbmRvbSgpICogMC41O1xuXG4gICAgICB0aGlzLmJhbGxzLnB1c2goXG4gICAgICAgIHtcbiAgICAgICAgICBwb3M6IG5ldyBQb2ludDJEKFxuICAgICAgICAgICAgcmFkaXVzICsgKGNhbnZhc1dpZHRoIC0gcmFkaXVzICogMikgKiBNYXRoLnJhbmRvbSgpLFxuICAgICAgICAgICAgcmFkaXVzICsgKGNhbnZhc0hlaWdodCAtIHJhZGl1cyAqIDIpICogTWF0aC5yYW5kb20oKVxuICAgICAgICAgICksXG4gICAgICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICAgICAgcG93ZXI6IHBvd2VyLFxuICAgICAgICAgIHJhZGl1c1RpbWVzUG93ZXI6IHJhZGl1cyAqIHBvd2VyLFxuICAgICAgICAgIGRpcmVjdGlvbjogbmV3IFBvaW50MkQoLTEgKyBNYXRoLnJhbmRvbSgpICogMiwgLTEgKyBNYXRoLnJhbmRvbSgpKSxcbiAgICAgICAgICB0aW50OiBuZXcgTm9ybWFsaXplZENvbG9yKDAuNyArIDAuMyAqIE1hdGgucmFuZG9tKCksIDAuNyArIDAuMyAqIE1hdGgucmFuZG9tKCksIDAuNyArIDAuMyAqIE1hdGgucmFuZG9tKCkpXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cblxuICBtb3ZlQmFsbHMoKSB7XG4gICAgY29uc3QgY2FudmFzV2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBjYW52YXNIZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmFsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGIgPSB0aGlzLmJhbGxzW2ldO1xuXG4gICAgICBiLnBvcy5hZGQoYi5kaXJlY3Rpb24pO1xuXG4gICAgICBpZiAoKGIucG9zLnggPCBiLnJhZGl1cykgJiYgKGIuZGlyZWN0aW9uLnggPCAwKSkge1xuICAgICAgICBiLmRpcmVjdGlvbi54ID0gLWIuZGlyZWN0aW9uLng7XG4gICAgICAgIGIucG9zLnggPSBiLnJhZGl1cztcbiAgICAgIH1cblxuICAgICAgaWYgKChiLnBvcy55IDwgYi5yYWRpdXMpICYmIChiLmRpcmVjdGlvbi55IDwgMCkpIHtcbiAgICAgICAgYi5kaXJlY3Rpb24ueSA9IC1iLmRpcmVjdGlvbi55O1xuICAgICAgICBiLnBvcy55ID0gYi5yYWRpdXM7XG4gICAgICB9XG5cbiAgICAgIGlmICgoYi5wb3MueCA+IGNhbnZhc1dpZHRoIC0gYi5yYWRpdXMpICYmIChiLmRpcmVjdGlvbi54ID4gMCkpIHtcbiAgICAgICAgYi5kaXJlY3Rpb24ueCA9IC1iLmRpcmVjdGlvbi54O1xuICAgICAgICBiLnBvcy54ID0gY2FudmFzV2lkdGggLSBiLnJhZGl1cztcbiAgICAgIH1cblxuICAgICAgaWYgKChiLnBvcy55ID4gY2FudmFzSGVpZ2h0IC0gYi5yYWRpdXMpICYmIChiLmRpcmVjdGlvbi55ID4gMCkpIHtcbiAgICAgICAgYi5kaXJlY3Rpb24ueSA9IC1iLmRpcmVjdGlvbi55O1xuICAgICAgICBiLnBvcy55ID0gY2FudmFzSGVpZ2h0IC0gYi5yYWRpdXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBkcmF3KCkge1xuICAgIHRoaXMuc3RhcnREcmF3aW5nKCk7XG5cbiAgICBEcmF3LmJnQ29sb3Iuc2V0KDAsIDAsIDApO1xuXG4gICAgRHJhdy5zZXRTdXJmYWNlKHRoaXMudmlydHVhbFN1cmZhY2UpO1xuICAgIERyYXcuY2xlYXIoKTtcblxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldERhdGEoKTtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMudmlydHVhbFN1cmZhY2UuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gICAgbGV0IHB0ciA9IDA7XG5cbiAgICBjb25zdCBiYWxscyA9IHRoaXMuYmFsbHM7XG4gICAgY29uc3QgYmFsbENvdW50ID0gYmFsbHMubGVuZ3RoO1xuICAgIGNvbnN0IHRocmVzaG9sZE1pbiA9IHRoaXMudGhyZXNob2xkTWluO1xuICAgIGNvbnN0IHRocmVzaG9sZE1heCA9IHRoaXMudGhyZXNob2xkTWF4O1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIGxldCBwb3dlciA9IDA7XG4gICAgICAgIGxldCBjb2xSID0gMDtcbiAgICAgICAgbGV0IGNvbEcgPSAwO1xuICAgICAgICBsZXQgY29sQiA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGIgPSBiYWxsc1tpXTtcbiAgICAgICAgICBjb25zdCB4RGlmZiA9IHggLSBiLnBvcy54O1xuICAgICAgICAgIGNvbnN0IHlEaWZmID0geSAtIGIucG9zLnk7XG4gICAgICAgICAgY29uc3QgdGludCA9IGIudGludDtcblxuICAgICAgICAgIGlmICgoeERpZmYgPT09IDApICYmICh5RGlmZiA9PT0gMCkpIHtcbiAgICAgICAgICAgIHBvd2VyICs9IGIucG93ZXI7XG4gICAgICAgICAgICBjb2xSICs9IHRpbnQucjtcbiAgICAgICAgICAgIGNvbEcgKz0gdGludC5nO1xuICAgICAgICAgICAgY29sQiArPSB0aW50LmI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGQgPSBiLnJhZGl1c1RpbWVzUG93ZXIgLyBNYXRoLnNxcnQoeERpZmYgKiB4RGlmZiArIHlEaWZmICogeURpZmYpO1xuXG4gICAgICAgICAgICBjb2xSICs9IHRpbnQuciAqIGQ7XG4gICAgICAgICAgICBjb2xHICs9IHRpbnQuZyAqIGQ7XG4gICAgICAgICAgICBjb2xCICs9IHRpbnQuYiAqIGQ7XG4gICAgICAgICAgICBwb3dlciArPSBkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKChwb3dlciA+PSB0aHJlc2hvbGRNaW4pICYmIChwb3dlciA8PSB0aHJlc2hvbGRNYXgpKSB7XG4gICAgICAgICAgLy8gdGhpcyBoZWxwcyB3aXRoIHRoZSBmYWxsLW9mZlxuICAgICAgICAgIGlmIChwb3dlciA8IDEuMCkge1xuICAgICAgICAgICAgY29uc3Qgc2luZSA9IE1hdGguc2luKDAuNSAqIE1hdGguUEkgKiBwb3dlcik7XG4gICAgICAgICAgICBjb25zdCBtID0gc2luZSAqIHNpbmUgKiBzaW5lO1xuXG4gICAgICAgICAgICBjb2xSICo9IG07XG4gICAgICAgICAgICBjb2xHICo9IG07XG4gICAgICAgICAgICBjb2xCICo9IG07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sUiA9IE1hdGgucm91bmQoTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBjb2xSICogMjU1KSkpO1xuICAgICAgICAgIGNvbEcgPSBNYXRoLnJvdW5kKE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgY29sRyAqIDI1NSkpKTtcbiAgICAgICAgICBjb2xCID0gTWF0aC5yb3VuZChNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIGNvbEIgKiAyNTUpKSk7XG5cbiAgICAgICAgICBkYXRhW3B0cisrXSA9IGNvbFI7XG4gICAgICAgICAgZGF0YVtwdHIrK10gPSBjb2xHO1xuICAgICAgICAgIGRhdGFbcHRyKytdID0gY29sQjtcbiAgICAgICAgICBwdHIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdHIgKz0gNDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDgwJyByZWY9XCJtZXRhYmFsbHNDYW52YXNcIj48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+TWV0YWJhbGxzPC9oMj5cbiAgICAgIDxwPkEgcHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIDxhIGhyZWY9J2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWV0YWJhbGxzJz5CbGlubidzIE1ldGFiYWxsczwvYT4uPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIk1pbiBUaHJlc2hvbGRcIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J21pblRocmVzaG9sZCcgdHlwZT0ncmFuZ2UnIG1pbj0nMScgbWF4PScxMjAwJyBAdXBkYXRlPVwidXBkYXRlTWluVGhyZXNob2xkXCIvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIk1heCBUaHJlc2hvbGRcIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J21heFRocmVzaG9sZCcgdHlwZT0ncmFuZ2UnIG1pbj0nMScgbWF4PSczMTAwJyBAdXBkYXRlPVwidXBkYXRlTWF4VGhyZXNob2xkXCIvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG4gICAgICA8L2ItY2FyZD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IE1ldGFiYWxsc0FwcCB9IGZyb20gJy4vYXBwJztcblxuQENvbXBvbmVudFxuY2xhc3MgTWV0YWJhbGxzIGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIG1pblRocmVzaG9sZCA9IDE7XG5cbiAgbWF4VGhyZXNob2xkID0gMzEwMDtcblxuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIC8vIHRoaXMuaW50ZXJ2YWxGcmVxdWVuY3kgPSAxMDtcblxuICAgIHJldHVybiBuZXcgTWV0YWJhbGxzQXBwKCdzdXJmYWNlJywgOCwgdGhpcy5taW5UaHJlc2hvbGQgLyAxMDAwLCAodGhpcy5tYXhUaHJlc2hvbGQgPT09IDMxMDAgPyAxMDAwMDAwIDogdGhpcy5tYXhUaHJlc2hvbGQpIC8gMTAwMCk7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHA7XG5cbiAgICBhcHAubW92ZUJhbGxzKCk7XG5cbiAgICBhcHAuZHJhdygpO1xuICB9XG5cblxuICB1cGRhdGVNaW5UaHJlc2hvbGQodmFsKSB7XG4gICAgdGhpcy5hcHAudGhyZXNob2xkTWluID0gdmFsIC8gMTAwMC4wO1xuICB9XG5cblxuICB1cGRhdGVNYXhUaHJlc2hvbGQodmFsKSB7XG4gICAgaWYgKHZhbCA+PSAzMDAwKSB7XG4gICAgICB2YWwgPSAxMDAwMDAwO1xuICAgIH1cblxuICAgIHRoaXMuYXBwLnRocmVzaG9sZE1heCA9IHZhbCAvIDEwMDAuMDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXRhYmFsbHM7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTYxOTVjYzZmJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfdm0uX20oMCl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjY0MFwiLFwiaGVpZ2h0XCI6XCI0ODBcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIlBsYXNtYSBFZmZlY3RcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyxbX3ZtLl92KFwiQSBwdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QbGFzbWFfZWZmZWN0XCJ9fSxbX3ZtLl92KFwicGxhc21hIGVmZmVjdFwiKV0pLF92bS5fdihcIi5cIildKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnfi9saWIvY29yZS9hcHAnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICd+L2xpYi9jb3JlL2NvbG9yJztcbmltcG9ydCB7IE5vcm1hbGl6ZWRDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvbm9ybWFsaXplZC1jb2xvcic7XG5cbmV4cG9ydCBjbGFzcyBQbGFzbWFBcHAgZXh0ZW5kcyBBcHAge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXRDYW52YXNJZCkge1xuICAgIHN1cGVyKHRhcmdldENhbnZhc0lkKTtcblxuICAgIHRoaXMuQ09MT1JfQ09VTlQgPSAxMDAwO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcblxuICAgIHRoaXMuY2FsY3VsYXRlUGxhc21hKCk7XG4gICAgdGhpcy5jYWxjdWxhdGVQYWxldHRlKCk7XG4gIH1cblxuICBkcmF3KCkge1xuICAgIHRoaXMuc3RhcnREcmF3aW5nKCk7XG5cbiAgICBjb25zdCBkYXRhID0gdGhpcy52aXJ0dWFsU3VyZmFjZS5nZXREYXRhKCk7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldFdpZHRoKCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy52aXJ0dWFsU3VyZmFjZS5nZXRIZWlnaHQoKTtcblxuICAgIGNvbnN0IHB0ck1heCA9IHdpZHRoICogaGVpZ2h0ICogNDtcblxuICAgIGxldCBwdHIgPSAwO1xuICAgIGxldCBwcmVjYWxjUHRyID0gMDtcblxuICAgIGNvbnN0IHByZWNhbGNUYWJsZSA9IHRoaXMucHJlY2FsY1RhYmxlO1xuICAgIGNvbnN0IHByZWNhbGNDb2xvcnMgPSB0aGlzLnByZWNhbGNDb2xvcnM7XG5cbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9mZnNldCAlIHRoaXMuQ09MT1JfQ09VTlQ7XG4gICAgY29uc3QgY29sb3JDb3VudCA9IHRoaXMuQ09MT1JfQ09VTlQ7XG5cbiAgICB3aGlsZSAocHRyIDwgcHRyTWF4KSB7XG4gICAgICBsZXQgcHJlY2FsY1ZhbCA9IHByZWNhbGNUYWJsZVtwcmVjYWxjUHRyKytdICsgb2Zmc2V0OyAvLyBNYXRoLnJvdW5kKCBwcmVjYWxjVGFibGVbIHByZWNhbGNQdHIrKyBdIC8gUGxhc21hLkNPTE9SX0NPVU5UICogMjU1ICk7XG5cbiAgICAgIGlmIChwcmVjYWxjVmFsID49IGNvbG9yQ291bnQpIHtcbiAgICAgICAgcHJlY2FsY1ZhbCAtPSBjb2xvckNvdW50O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmVjYWxjQ29sID0gcHJlY2FsY0NvbG9yc1twcmVjYWxjVmFsXTtcblxuICAgICAgZGF0YVtwdHIrK10gPSBwcmVjYWxjQ29sLnI7XG4gICAgICBkYXRhW3B0cisrXSA9IHByZWNhbGNDb2wuZztcbiAgICAgIGRhdGFbcHRyKytdID0gcHJlY2FsY0NvbC5iO1xuICAgICAgcHRyKys7XG4gICAgfVxuXG4gICAgdGhpcy5vZmZzZXQrKztcblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfTtcblxuXG4gIGNhbGN1bGF0ZVBhbGV0dGUoKSB7XG4gICAgdGhpcy5wcmVjYWxjQ29sb3JzID0gbmV3IEFycmF5KHRoaXMuQ09MT1JfQ09VTlQpO1xuICAgIGNvbnN0IGRlZ3JlZXMgPSAxODA7XG4gICAgY29uc3QgZGVncmVlT2Zmc2V0ID0gNDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuQ09MT1JfQ09VTlQ7IGkrKykge1xuICAgICAgY29uc3Qgbm9ybWFsID0gTWF0aC5zaW4oaSAvIHRoaXMuQ09MT1JfQ09VTlQgKiBNYXRoLlBJKTtcbiAgICAgIGNvbnN0IGh1ZSA9IChub3JtYWwgKiBkZWdyZWVzKSArIGRlZ3JlZU9mZnNldDtcblxuICAgICAgY29uc3QgY29sID0gbmV3IE5vcm1hbGl6ZWRDb2xvcigpO1xuXG4gICAgICAvLyBOb3JtYWxpemVkQ29sb3IuaHN2VG9SZ2IoIGh1ZSwgMS4wLCAxLjAsIGNvbCApO1xuICAgICAgTm9ybWFsaXplZENvbG9yLmhzdlRvUmdiKGh1ZSwgbm9ybWFsLCAxIC0gbm9ybWFsLCBjb2wpO1xuXG4gICAgICBjb25zdCBmaW5hbENvbG9yID0gbmV3IENvbG9yKCk7XG5cbiAgICAgIGNvbC5nZXRDb2xvcihmaW5hbENvbG9yKTtcbiAgICAgIHRoaXMucHJlY2FsY0NvbG9yc1tpXSA9IGZpbmFsQ29sb3I7XG4gICAgfVxuICB9XG5cblxuICBjYWxjdWxhdGVQbGFzbWEoKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldFdpZHRoKCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy52aXJ0dWFsU3VyZmFjZS5nZXRIZWlnaHQoKTtcblxuICAgIGxldCBwdHIgPSAwO1xuICAgIGxldCBtaW4gPSBmYWxzZTtcbiAgICBsZXQgbWF4ID0gZmFsc2U7XG5cbiAgICB0aGlzLnByZWNhbGNUYWJsZSA9IG5ldyBBcnJheSh3aWR0aCAqIGhlaWdodCk7XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgY29uc3QgdmFsID0gKHRoaXMuQ09MT1JfQ09VTlQgLyAyKSArICh0aGlzLkNPTE9SX0NPVU5UIC8gMiAtIDEpICpcbiAgICAgICAgICBNYXRoLnNpbih4IC8gMTAwICogTWF0aC5jb3MoeSAvIDEwMDApICogTWF0aC50YW4ocHRyIC8gMTAwMDAwMCkpICpcbiAgICAgICAgICBNYXRoLmNvcyh5IC8gMTAwICogTWF0aC5zaW4oeCAvIDEwMCkgKiBNYXRoLnRhbihwdHIgLyAxMDAwMDAwKSk7XG5cbiAgICAgICAgdGhpcy5wcmVjYWxjVGFibGVbcHRyKytdID0gTWF0aC5yb3VuZCh2YWwpO1xuXG4gICAgICAgIGlmICgobWluID09PSBmYWxzZSkgfHwgKHZhbCA8IG1pbikpIHtcbiAgICAgICAgICBtaW4gPSB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKG1heCA9PT0gZmFsc2UpIHx8ICh2YWwgPiBtYXgpKSB7XG4gICAgICAgICAgbWF4ID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDgwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+UGxhc21hIEVmZmVjdDwvaDI+XG4gICAgICA8cD5BIHB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiA8YSBocmVmPSdodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BsYXNtYV9lZmZlY3QnPnBsYXNtYSBlZmZlY3Q8L2E+LjwvcD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IFBsYXNtYUFwcCB9IGZyb20gJy4vYXBwJztcblxuQENvbXBvbmVudFxuY2xhc3MgUGxhc21hIGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIHJldHVybiBuZXcgUGxhc21hQXBwKCdzdXJmYWNlJyk7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgdGhpcy5hcHAuZHJhdygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXNtYTtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTc0OTU2OTImXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI4NTNcIixcImhlaWdodFwiOlwiNDcwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJXYXZlIERpc3RvcnRpb25cIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIkFtcGxpdHVkZVwiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMTAwXCIsXCJtYXhcIjpcIjE2MDAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVBbXBsaXR1ZGV9LG1vZGVsOnt2YWx1ZTooX3ZtLmFtcGxpdHVkZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5hbXBsaXR1ZGU9JCR2fSxleHByZXNzaW9uOlwiYW1wbGl0dWRlXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2ItaW5wdXQtZ3JvdXAnLHtzdGF0aWNDbGFzczpcIm1iLTNcIixhdHRyczp7XCJwcmVwZW5kXCI6XCJGcmVxdWVuY3lcIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjMwMFwiLFwibWF4XCI6XCIxMDAwMDBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZUZyZXF1ZW5jeX0sbW9kZWw6e3ZhbHVlOihfdm0uZnJlcXVlbmN5KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmZyZXF1ZW5jeT0kJHZ9LGV4cHJlc3Npb246XCJmcmVxdWVuY3lcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzdG9ydGlvbl8ob3B0aWNzKVwifX0sW192bS5fdihcIndhdmUgZGlzdG9ydGlvblwiKV0pLF92bS5fdihcIi5cIildKX1dXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICd+L2xpYi9jb3JlL2FwcCc7XG5pbXBvcnQgeyBDYW52YXNUZXh0dXJlIH0gZnJvbSAnfi9saWIvY29yZS9jYW52YXMtdGV4dHVyZSc7XG5cblxuZXhwb3J0IGNsYXNzIFdhdmVEaXN0b3J0aW9uQXBwIGV4dGVuZHMgQXBwIHtcbiAgYW1wbGl0dWRlID0gMjguMjE7XG5cbiAgZnJlcXVlbmN5ID0gMzUuNjI7XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldENhbnZhc0lkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiZ0ltYWdlVXJsXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyB7YXBwLmpzfVxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0Q2FudmFzSWQsIGJnSW1hZ2VVcmwsIGFtcGxpdHVkZSA9IDI4LjIxLCBmcmVxdWVuY3kgPSAzNS42Mikge1xuICAgIHN1cGVyKHRhcmdldENhbnZhc0lkKTtcblxuICAgIHRoaXMuYmdJbWFnZSA9IG5ldyBDYW52YXNUZXh0dXJlKGJnSW1hZ2VVcmwpO1xuXG4gICAgdGhpcy5waGFzZSA9IDA7XG4gICAgdGhpcy5hbXBsaXR1ZGUgPSBhbXBsaXR1ZGU7XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxdWVuY3k7XG4gIH07XG5cblxuICBkcmF3KCkge1xuICAgIHRoaXMuc3RhcnREcmF3aW5nKCk7XG5cbiAgICBsZXQgeDtcbiAgICBsZXQgeTtcblxuICAgIGNvbnN0IGRlc3QgPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmRhdGE7XG4gICAgY29uc3QgZGVzdFdpZHRoID0gdGhpcy52aXJ0dWFsU3VyZmFjZS53aWR0aDtcbiAgICBjb25zdCBkZXN0SGVpZ2h0ID0gdGhpcy52aXJ0dWFsU3VyZmFjZS5oZWlnaHQ7XG5cbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmJnSW1hZ2UuZGF0YTtcbiAgICBjb25zdCBzb3VyY2VXaWR0aCA9IHRoaXMuYmdJbWFnZS5nZXRXaWR0aCgpO1xuICAgIGNvbnN0IHNvdXJjZUhlaWdodCA9IHRoaXMuYmdJbWFnZS5nZXRIZWlnaHQoKTtcblxuICAgIGNvbnN0IHBlcmlvZEluY3JlbWVudCA9IE1hdGguUEkgLyB0aGlzLmZyZXF1ZW5jeTtcbiAgICBjb25zdCBwaGFzZSA9IHRoaXMucGhhc2U7XG4gICAgY29uc3QgYW1wbGl0dWRlID0gdGhpcy5hbXBsaXR1ZGU7XG4gICAgY29uc3QgZGlzcGxhY2VtZW50WSA9IG5ldyBBcnJheShkZXN0SGVpZ2h0KTtcbiAgICBjb25zdCBkaXNwbGFjZW1lbnRYID0gbmV3IEFycmF5KGRlc3RXaWR0aCk7XG5cbiAgICBsZXQgZGVzdFB0ciA9IDA7XG4gICAgbGV0IHBlcmlvZCA9IDA7XG4gICAgbGV0IHBlcmlvZFkgPSBwZXJpb2Q7XG4gICAgbGV0IHBlcmlvZFggPSBwZXJpb2Q7XG5cbiAgICBpZiAoKCFzb3VyY2UpIHx8ICghZGVzdCkpIHtcbiAgICAgIHRoaXMuZW5kRHJhd2luZyhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh5ID0gMDsgeSA8IGRlc3RIZWlnaHQ7IHkrKykge1xuICAgICAgZGlzcGxhY2VtZW50WVt5XSA9IE1hdGgucm91bmQoYW1wbGl0dWRlICogTWF0aC5zaW4ocGhhc2UgKyBwZXJpb2RZKSk7XG4gICAgICBwZXJpb2RZICs9IHBlcmlvZEluY3JlbWVudDtcbiAgICB9XG5cbiAgICBmb3IgKHggPSAwOyB4IDwgZGVzdFdpZHRoOyB4KyspIHtcbiAgICAgIGRpc3BsYWNlbWVudFhbeF0gPSBNYXRoLnJvdW5kKGFtcGxpdHVkZSAqIE1hdGguY29zKHBoYXNlICsgcGVyaW9kWCkpO1xuICAgICAgcGVyaW9kWCArPSBwZXJpb2RJbmNyZW1lbnQ7XG4gICAgfVxuXG5cbiAgICBmb3IgKHkgPSAwOyB5IDwgZGVzdEhlaWdodDsgeSsrKSB7XG4gICAgICBjb25zdCBkeCA9IGRpc3BsYWNlbWVudFlbeV07XG5cbiAgICAgIGZvciAoeCA9IDA7IHggPCBkZXN0V2lkdGg7IHgrKykge1xuICAgICAgICBjb25zdCBkeSA9IGRpc3BsYWNlbWVudFhbeF07XG5cbiAgICAgICAgY29uc3QgeHAgPSB4ICsgZHg7XG4gICAgICAgIGNvbnN0IHlwID0geSArIGR5O1xuXG4gICAgICAgIGlmICgoeHAgPj0gMCkgJiYgKHhwIDwgc291cmNlV2lkdGgpICYmICh5cCA+PSAwKSAmJiAoeXAgPCBzb3VyY2VIZWlnaHQpKSB7XG4gICAgICAgICAgbGV0IHNvdXJjZVB0ciA9ICh5cCAqIHNvdXJjZVdpZHRoICsgeHApICogNDtcblxuICAgICAgICAgIGRlc3RbZGVzdFB0cisrXSA9IHNvdXJjZVtzb3VyY2VQdHIrK107XG4gICAgICAgICAgZGVzdFtkZXN0UHRyKytdID0gc291cmNlW3NvdXJjZVB0cisrXTtcbiAgICAgICAgICBkZXN0W2Rlc3RQdHIrK10gPSBzb3VyY2Vbc291cmNlUHRyKytdO1xuXG4gICAgICAgICAgZGVzdFB0cisrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlc3RbZGVzdFB0cisrXSA9IDA7XG4gICAgICAgICAgZGVzdFtkZXN0UHRyKytdID0gMDtcbiAgICAgICAgICBkZXN0W2Rlc3RQdHIrK10gPSAwO1xuICAgICAgICAgIGRlc3RQdHIrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwZXJpb2QgKz0gcGVyaW9kSW5jcmVtZW50O1xuICAgIH1cblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc4NTMnIGhlaWdodD0nNDcwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+V2F2ZSBEaXN0b3J0aW9uPC9oMj5cbiAgICAgIDxwPlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiA8YSBocmVmPSdodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Rpc3RvcnRpb25fKG9wdGljcyknPndhdmUgZGlzdG9ydGlvbjwvYT4uPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkFtcGxpdHVkZVwiIHNpemU9XCJzbVwiIGNsYXNzPVwibWItM1wiPlxuICAgICAgICAgIDxiLWZvcm0taW5wdXQgdi1tb2RlbD0nYW1wbGl0dWRlJyB0eXBlPSdyYW5nZScgbWluPScxMDAnIG1heD0nMTYwMDAnIEB1cGRhdGU9XCJ1cGRhdGVBbXBsaXR1ZGVcIiAvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIkZyZXF1ZW5jeVwiIHNpemU9XCJzbVwiIGNsYXNzPVwibWItM1wiPlxuICAgICAgICAgIDxiLWZvcm0taW5wdXQgdi1tb2RlbD0nZnJlcXVlbmN5JyB0eXBlPSdyYW5nZScgbWluPSczMDAnIG1heD0nMTAwMDAwJyBAdXBkYXRlPVwidXBkYXRlRnJlcXVlbmN5XCIgLz5cbiAgICAgICAgPC9iLWlucHV0LWdyb3VwPlxuICAgICAgPC9iLWNhcmQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBXYXZlRGlzdG9ydGlvbkFwcCB9IGZyb20gJy4vYXBwJztcblxuQENvbXBvbmVudFxuY2xhc3MgV2F2ZURpc3RvcnRpb24gZXh0ZW5kcyBWdWVXcmFwcGVyIHtcbiAgYW1wbGl0dWRlID0gMjIzNTtcblxuICBmcmVxdWVuY3kgPSAyNzcxMjtcblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICByZXR1cm4gbmV3IFdhdmVEaXN0b3J0aW9uQXBwKCdzdXJmYWNlJywgJy4vcmVzb3VyY2VzL2FwcHMvd2F2ZS1kaXN0b3J0aW9uL2JnLmpwZycsIHRoaXMuYW1wbGl0dWRlIC8gMTAwLCB0aGlzLmZyZXF1ZW5jeSAvIDEwMCk7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgdGhpcy5hcHAucGhhc2UgKz0gMC4xO1xuXG4gICAgdGhpcy5hcHAuZHJhdygpO1xuICB9XG5cblxuICB1cGRhdGVBbXBsaXR1ZGUodmFsKSB7XG4gICAgdGhpcy5hcHAuYW1wbGl0dWRlID0gdmFsIC8gMTAwO1xuICB9XG5cblxuICB1cGRhdGVGcmVxdWVuY3kodmFsKSB7XG4gICAgdGhpcy5hcHAuZnJlcXVlbmN5ID0gdmFsIC8gMTAwO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdhdmVEaXN0b3J0aW9uO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mZWY3MWRjYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjY0MFwiLFwiaGVpZ2h0XCI6XCI0ODBcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIkZsYXQgUG9seWdvbiBQcm9qZWN0aW9uXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCAobm90IFdlYkdMKSBpbXBsZW1lbnRhdGlvbiBvZiBub24tc2hhZGVkIHBvbHlnb24gcHJvamVjdGlvbi5cIildKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1mb3JtLWdyb3VwJyxbX2MoJ2ItZm9ybS1yYWRpby1ncm91cCcse2F0dHJzOntcIm9wdGlvbnNcIjpfdm0ub2JqZWN0T3B0aW9ucyxcImJ1dHRvbnNcIjpcIlwiLFwic2l6ZVwiOlwic21cIn0sb246e1wiY2hhbmdlXCI6X3ZtLnN3aXRjaE9iamVjdH0sbW9kZWw6e3ZhbHVlOihfdm0uYWN0aXZlT2JqZWN0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmFjdGl2ZU9iamVjdD0kJHZ9LGV4cHJlc3Npb246XCJhY3RpdmVPYmplY3RcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJyb3dcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbC1tZC0xMlwifSxbX2MoJ2NhbnZhcycse2F0dHJzOntcImlkXCI6XCJzdXJmYWNlXCIsXCJ3aWR0aFwiOlwiNjQwXCIsXCJoZWlnaHRcIjpcIjQ4MFwifX0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6XCJzdWJ0aXRsZVwifSxbX3ZtLl92KFwiVmVydGV4IFByb2plY3Rpb25cIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1mb3JtLWdyb3VwJyxbX2MoJ2ItZm9ybS1yYWRpby1ncm91cCcse2F0dHJzOntcIm9wdGlvbnNcIjpfdm0ub2JqZWN0T3B0aW9ucyxcImJ1dHRvbnNcIjpcIlwiLFwic2l6ZVwiOlwic21cIn0sb246e1wiY2hhbmdlXCI6X3ZtLnN3aXRjaE9iamVjdH0sbW9kZWw6e3ZhbHVlOihfdm0uYWN0aXZlT2JqZWN0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmFjdGl2ZU9iamVjdD0kJHZ9LGV4cHJlc3Npb246XCJhY3RpdmVPYmplY3RcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvM0RfcHJvamVjdGlvblwifX0sW192bS5fdihcImNhbWVyYSBwcm9qZWN0aW9uLlwiKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgQ2FudmFzVGV4dHVyZSB9IGZyb20gJy4vY2FudmFzLXRleHR1cmUnO1xuXG5leHBvcnQgY2xhc3MgQ2FudmFzVGV4dHVyZUNvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGV4dHVyZXMgPSB7fTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIHRleHR1cmUgdG8gY29udGFpbmVyXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlTmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZCh0ZXh0dXJlTmFtZSwgc3JjKSB7XG4gICAgaWYgKHRoaXMuZXhpc3RzKHRleHR1cmVOYW1lKSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yZW1vdmUodGV4dHVyZU5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGN0ID0gbmV3IENhbnZhc1RleHR1cmUoc3JjKTtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICB0aGlzLnRleHR1cmVzW3RleHR1cmVOYW1lXSA9IGN0O1xuXG4gICAgY3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWUuZXZlbnRJbWFnZUxvYWRlZCh0ZXh0dXJlTmFtZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEFkZCBtdWx0aXBsZSBjYW52YXMgdGV4dHVyZXNcbiAgICpcbiAgICogVXNhZ2U6XG4gICAqXG4gICAqIHNyY1JlZmVyZW5jZU9iamVjdCA9IHtcbiAgICogICBteVRleHR1cmUxIDogJ2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9sb2dvLnBuZycsXG4gICAqICAgbXlUZXh0dXJlMiA6ICdodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vbG9nby5wbmcnLFxuICAgKiAgIC4uLlxuICAgKiB9O1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3JjUmVmZXJlbmNlT2JqZWN0XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZE1hbnkoc3JjUmVmZXJlbmNlT2JqZWN0KSB7XG4gICAgZm9yIChjb25zdCB0ZXh0dXJlTmFtZSBpbiBzcmNSZWZlcmVuY2VPYmplY3QpIHtcbiAgICAgIGlmIChzcmNSZWZlcmVuY2VPYmplY3QuaGFzT3duUHJvcGVydHkodGV4dHVyZU5hbWUpKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHR1cmVzLmhhc093blByb3BlcnR5KHRleHR1cmVOYW1lKSkge1xuICAgICAgICAgIHRoaXMuYWRkKHRleHR1cmVOYW1lLCBzcmNSZWZlcmVuY2VPYmplY3RbdGV4dHVyZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZU5hbWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlKHRleHR1cmVOYW1lKSB7XG4gICAgaWYgKHRoaXMudGV4dHVyZXNbdGV4dHVyZU5hbWVdICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnRleHR1cmVzW3RleHR1cmVOYW1lXS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMudGV4dHVyZXNbdGV4dHVyZU5hbWVdO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVOYW1lXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKiBAcHVibGljXG4gICAqL1xuICBleGlzdHModGV4dHVyZU5hbWUpIHtcbiAgICByZXR1cm4gKHRoaXMuZ2V0KHRleHR1cmVOYW1lKSAhPT0gbnVsbCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnRleHR1cmVzKSB7XG4gICAgICBpZiAodGhpcy50ZXh0dXJlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlcyA9IHt9O1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVOYW1lXG4gICAqIEByZXR1cm5zIHtDYW52YXNUZXh0dXJlfG51bGx9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCh0ZXh0dXJlTmFtZSkge1xuICAgIGlmICh0aGlzLnRleHR1cmVzLmhhc093blByb3BlcnR5KHRleHR1cmVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZXNbdGV4dHVyZU5hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICAvKipcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBpc0xvYWRlZCgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnRleHR1cmVzKSB7XG4gICAgICBpZiAodGhpcy50ZXh0dXJlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHR1cmVzW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodGhpcy50ZXh0dXJlc1trZXldLmxvYWRlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZU5hbWVcbiAgICovXG4gIGV2ZW50SW1hZ2VMb2FkZWQodGV4dHVyZU5hbWUpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCgpID09PSB0cnVlKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub25sb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub25sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQb2ludDJEIH0gZnJvbSAnLi9wb2ludC0yZCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3InO1xuXG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVkVHJpYW5nbGUgPSB7XG4gIHAxOiBuZXcgUG9pbnQyRCgwLCAwKSxcbiAgcDI6IG5ldyBQb2ludDJEKDAsIDApLFxuICBwMzogbmV3IFBvaW50MkQoMCwgMCksXG5cbiAgYzE6IG5ldyBDb2xvcigwLCAwLCAwKSxcbiAgYzI6IG5ldyBDb2xvcigwLCAwLCAwKSxcbiAgYzM6IG5ldyBDb2xvcigwLCAwLCAwKSxcbiAgY0ludEw6IG5ldyBDb2xvcigwLCAwLCAwKSxcbiAgY0ludFI6IG5ldyBDb2xvcigwLCAwLCAwKSxcblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gYzFcbiAgICogQHBhcmFtIHtDb2xvcn0gYzJcbiAgICogQHBhcmFtIHtDb2xvcn0gYzNcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgY2FsY3VsYXRlQm91bmRzKHAxLCBwMiwgcDMsIGMxLCBjMiwgYzMpIHtcbiAgICB0aGlzLnNvcnRQb2ludHMocDEsIHAyLCBwMywgYzEsIGMyLCBjMyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgclNpemVBZGRlcjogKHAzLnggLSBwMS54KSAvIChwMy55IC0gcDEueSksXG4gICAgICBsU2l6ZUFkZGVyOiAocDIueCAtIHAxLngpIC8gKHAyLnkgLSBwMS55ICsgMSksXG4gICAgICBsU2l6ZUFkZGVyMjogKHAzLnggLSBwMi54KSAvIChwMy55IC0gcDIueSksXG5cbiAgICAgIHJDb2xBZGRlcjogbmV3IENvbG9yKFxuICAgICAgICAoYzMuciAtIGMxLnIpIC8gKHAzLnkgLSBwMS55KSxcbiAgICAgICAgKGMzLmcgLSBjMS5nKSAvIChwMy55IC0gcDEueSksXG4gICAgICAgIChjMy5iIC0gYzEuYikgLyAocDMueSAtIHAxLnkpXG4gICAgICApLFxuXG4gICAgICBsQ29sQWRkZXI6IG5ldyBDb2xvcihcbiAgICAgICAgKGMyLnIgLSBjMS5yKSAvIChwMi55IC0gcDEueSArIDEpLFxuICAgICAgICAoYzIuZyAtIGMxLmcpIC8gKHAyLnkgLSBwMS55ICsgMSksXG4gICAgICAgIChjMi5iIC0gYzEuYikgLyAocDIueSAtIHAxLnkgKyAxKVxuICAgICAgKSxcblxuICAgICAgbENvbEFkZGVyMjogbmV3IENvbG9yKFxuICAgICAgICAoYzMuciAtIGMyLnIpIC8gKHAzLnkgLSBwMi55KSxcbiAgICAgICAgKGMzLmcgLSBjMi5nKSAvIChwMy55IC0gcDIueSksXG4gICAgICAgIChjMy5iIC0gYzIuYikgLyAocDMueSAtIHAyLnkpXG4gICAgICApXG4gICAgfTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwM1xuICAgKiBAcGFyYW0ge0NvbG9yfSBjMVxuICAgKiBAcGFyYW0ge0NvbG9yfSBjMlxuICAgKiBAcGFyYW0ge0NvbG9yfSBjM1xuICAgKiBAcGFyYW0ge1N1cmZhY2V9IHN1cmZhY2VcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZHJhdyhwMSwgcDIsIHAzLCBjMSwgYzIsIGMzLCBzdXJmYWNlKSB7XG4gICAgdGhpcy5wMS5zZXQocDEpO1xuICAgIHRoaXMucDIuc2V0KHAyKTtcbiAgICB0aGlzLnAzLnNldChwMyk7XG5cbiAgICB0aGlzLmMxLnNldChjMSk7XG4gICAgdGhpcy5jMi5zZXQoYzIpO1xuICAgIHRoaXMuYzMuc2V0KGMzKTtcblxuICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuY2FsY3VsYXRlQm91bmRzKHRoaXMucDEsIHRoaXMucDIsIHRoaXMucDMsIHRoaXMuYzEsIHRoaXMuYzIsIHRoaXMuYzMpO1xuXG4gICAgdGhpcy5jSW50TC5zZXQodGhpcy5jMSk7XG4gICAgdGhpcy5jSW50Ui5zZXQodGhpcy5jMSk7XG4gICAgLy8gdGhpcy5jSW50Ui5hZGQoIGJvdW5kcy5yQ29sQWRkZXIgKTtcblxuICAgIGNvbnN0IHJ4ID0gdGhpcy5kcmF3SGFsZlRyaWFuZ2xlKFxuICAgICAgdGhpcy5wMSxcbiAgICAgIHRoaXMucDIsXG4gICAgICB0aGlzLnAzLFxuICAgICAgYm91bmRzLmxTaXplQWRkZXIsXG4gICAgICBib3VuZHMuclNpemVBZGRlcixcbiAgICAgIHRoaXMucDEueCArIGJvdW5kcy5sU2l6ZUFkZGVyIC8gMixcbiAgICAgIHRoaXMucDEueCxcbiAgICAgIHRoaXMuY0ludEwsXG4gICAgICB0aGlzLmNJbnRSLFxuICAgICAgYm91bmRzLmxDb2xBZGRlcixcbiAgICAgIGJvdW5kcy5yQ29sQWRkZXIsXG4gICAgICBzdXJmYWNlXG4gICAgKTtcblxuICAgIHRoaXMucDIueSsrO1xuXG4gICAgdGhpcy5kcmF3SGFsZlRyaWFuZ2xlKFxuICAgICAgdGhpcy5wMixcbiAgICAgIHRoaXMucDMsXG4gICAgICB0aGlzLnAxLFxuICAgICAgYm91bmRzLmxTaXplQWRkZXIyLFxuICAgICAgYm91bmRzLnJTaXplQWRkZXIsXG4gICAgICB0aGlzLnAyLngsXG4gICAgICByeCxcbiAgICAgIHRoaXMuY0ludEwsXG4gICAgICB0aGlzLmNJbnRSLFxuICAgICAgYm91bmRzLmxDb2xBZGRlcjIsXG4gICAgICBib3VuZHMuckNvbEFkZGVyLFxuICAgICAgc3VyZmFjZVxuICAgICk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtmbG9hdH0gbEFkZGVyXG4gICAqIEBwYXJhbSB7ZmxvYXR9IHJBZGRlclxuICAgKiBAcGFyYW0ge2Zsb2F0fSBseFxuICAgKiBAcGFyYW0ge2Zsb2F0fSByeFxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xMZWZ0XG4gICAqIEBwYXJhbSB7Q29sb3J9IGNvbFJpZ2h0XG4gICAqIEBwYXJhbSB7Q29sb3J9IGNvbExlZnRBZGRlclxuICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xSaWdodEFkZGVyXG4gICAqIEBwYXJhbSB7U3VyZmFjZX0gc3VyZmFjZVxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBkcmF3SGFsZlRyaWFuZ2xlKHAxLCBwMiwgcDMsIGxBZGRlciwgckFkZGVyLCBseCwgcngsIGNvbExlZnQsIGNvbFJpZ2h0LCBjb2xMZWZ0QWRkZXIsIGNvbFJpZ2h0QWRkZXIsIHN1cmZhY2UpIHtcbiAgICBjb25zdCBkYXRhID0gc3VyZmFjZS5nZXREYXRhKCk7XG5cbiAgICBjb25zdCB3aWR0aCA9IHN1cmZhY2UuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBzdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gICAgbGV0IHB0ciA9IE1hdGgucm91bmQoTWF0aC5taW4obHgsIHJ4KSArIHAxLnkgKiB3aWR0aCkgKiA0O1xuXG4gICAgY29uc3QgbWluTGVmdFggPSBNYXRoLm1pbihwMS54LCBwMi54KTtcbiAgICBjb25zdCBtYXhMZWZ0WCA9IE1hdGgubWF4KHAxLngsIHAyLngpO1xuXG4gICAgY29uc3QgbWluUmlnaHRYID0gTWF0aC5taW4ocDEueCwgcDMueCwgcDIueCk7XG4gICAgY29uc3QgbWF4UmlnaHRYID0gTWF0aC5tYXgocDEueCwgcDMueCwgcDIueCk7XG5cbiAgICBjb25zdCBjb2xBZGRlciA9IG5ldyBDb2xvcigpO1xuXG4gICAgbGV0IGNvbFIsIGNvbEcsIGNvbEI7XG5cbiAgICBmb3IgKGxldCB5ID0gcDEueTsgKHkgPD0gcDIueSkgJiYgKHkgPCBoZWlnaHQpOyB5KyspIHtcbiAgICAgIGxldCBtaW5YID0gTWF0aC5yb3VuZChNYXRoLm1pbihseCwgcngpKTtcbiAgICAgIGxldCBtYXhYID0gTWF0aC5yb3VuZChNYXRoLm1heChseCwgcngpKTtcblxuICAgICAgaWYgKHkgPj0gMCkge1xuICAgICAgICBpZiAobWluWCA8IDApIHtcbiAgICAgICAgICBwdHIgKz0gTWF0aC5hYnMobWluWCkgKiA0O1xuICAgICAgICAgIG1pblggPSAwO1xuICAgICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBtaW5YKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1heFggPSBNYXRoLm1pbihtYXhYLCB3aWR0aCAtIDEpO1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbWF4WCAtIG1pblg7XG5cbiAgICAgICAgaWYgKGRpc3RhbmNlICE9PSAwKSB7XG4gICAgICAgICAgaWYgKGx4IDwgcngpIHtcbiAgICAgICAgICAgIGNvbFIgPSBjb2xMZWZ0LnI7XG4gICAgICAgICAgICBjb2xHID0gY29sTGVmdC5nO1xuICAgICAgICAgICAgY29sQiA9IGNvbExlZnQuYjtcblxuICAgICAgICAgICAgY29sQWRkZXIuc2V0KFxuICAgICAgICAgICAgICAoY29sUmlnaHQuciAtIGNvbExlZnQucikgLyBkaXN0YW5jZSxcbiAgICAgICAgICAgICAgKGNvbFJpZ2h0LmcgLSBjb2xMZWZ0LmcpIC8gZGlzdGFuY2UsXG4gICAgICAgICAgICAgIChjb2xSaWdodC5iIC0gY29sTGVmdC5iKSAvIGRpc3RhbmNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xSID0gY29sUmlnaHQucjtcbiAgICAgICAgICAgIGNvbEcgPSBjb2xSaWdodC5nO1xuICAgICAgICAgICAgY29sQiA9IGNvbFJpZ2h0LmI7XG5cbiAgICAgICAgICAgIGNvbEFkZGVyLnNldChcbiAgICAgICAgICAgICAgKGNvbExlZnQuciAtIGNvbFJpZ2h0LnIpIC8gZGlzdGFuY2UsXG4gICAgICAgICAgICAgIChjb2xMZWZ0LmcgLSBjb2xSaWdodC5nKSAvIGRpc3RhbmNlLFxuICAgICAgICAgICAgICAoY29sTGVmdC5iIC0gY29sUmlnaHQuYikgLyBkaXN0YW5jZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB4cCA9IG1pblg7IHhwIDw9IG1heFg7IHhwKyspIHtcbiAgICAgICAgICBkYXRhW3B0cl0gPSBNYXRoLnJvdW5kKGNvbFIpO1xuICAgICAgICAgIGRhdGFbcHRyICsgMV0gPSBNYXRoLnJvdW5kKGNvbEcpO1xuICAgICAgICAgIGRhdGFbcHRyICsgMl0gPSBNYXRoLnJvdW5kKGNvbEIpO1xuXG4gICAgICAgICAgcHRyICs9IDQ7XG5cbiAgICAgICAgICBjb2xSICs9IGNvbEFkZGVyLnI7XG4gICAgICAgICAgY29sRyArPSBjb2xBZGRlci5nO1xuICAgICAgICAgIGNvbEIgKz0gY29sQWRkZXIuYjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHRyICs9IChtYXhYIC0gbWluWCkgKiA0ICsgNDtcbiAgICAgIH1cblxuICAgICAgbHggKz0gbEFkZGVyO1xuICAgICAgcnggKz0gckFkZGVyO1xuXG4gICAgICBseCA9IE1hdGgubWF4KGx4LCBtaW5MZWZ0WCk7XG4gICAgICBseCA9IE1hdGgubWluKGx4LCBtYXhMZWZ0WCk7XG5cbiAgICAgIHJ4ID0gTWF0aC5tYXgocngsIG1pblJpZ2h0WCk7XG4gICAgICByeCA9IE1hdGgubWluKHJ4LCBtYXhSaWdodFgpO1xuXG4gICAgICBwdHIgKz0gKCh3aWR0aCAtIG1heFgpICsgTWF0aC5yb3VuZChNYXRoLm1pbihseCwgcngpKSkgKiA0O1xuICAgICAgcHRyIC09IDQ7XG5cbiAgICAgIGNvbExlZnQuYWRkKGNvbExlZnRBZGRlcik7XG4gICAgICBjb2xSaWdodC5hZGQoY29sUmlnaHRBZGRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ4O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFNvcnQgcDEsIHAyLCBwMyBpbiBsb3dlc3QgWSBvcmRlci5cbiAgICpcbiAgICogUmVsaWVzIG9uIGFyZ3VtZW50cyBiZWluZyB0cmVhdGVkIGFzIGJ5cmVmXG4gICAqXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDFcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAzXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMxXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMyXG4gICAqIEBwYXJhbSB7Q29sb3J9IGMzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHNvcnRQb2ludHMocDEsIHAyLCBwMywgYzEsIGMyLCBjMykge1xuICAgIHAxLnJvdW5kKCk7XG4gICAgcDIucm91bmQoKTtcbiAgICBwMy5yb3VuZCgpO1xuXG4gICAgaWYgKHAzLnkgPCBwMS55KSB7XG4gICAgICBwMy5zd2FwKHAxKTtcbiAgICAgIGMzLnN3YXAoYzEpO1xuICAgIH1cblxuICAgIGlmIChwMi55IDwgcDEueSkge1xuICAgICAgcDIuc3dhcChwMSk7XG4gICAgICBjMi5zd2FwKGMxKTtcbiAgICB9XG5cbiAgICBpZiAocDMueSA8IHAyLnkpIHtcbiAgICAgIHAzLnN3YXAocDIpO1xuICAgICAgYzMuc3dhcChjMik7XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG4gKiBZWCBub3RhdGVkIE1hdHJpeFxuICogQHBhcmFtIHtpbnR8TWF0cml4fEFycmF5fSB3aWR0aFxuICogQHBhcmFtIHtpbnR9IGhlaWdodFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRyaXgge1xuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuXG4gICAgaWYgKHdpZHRoIGluc3RhbmNlb2YgTWF0cml4KSB7XG4gICAgICB0aGlzLnNldCh3aWR0aCk7XG4gICAgfSBlbHNlIGlmICh3aWR0aCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aGlzLnNldCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICBjb25zdCBtID0gbmV3IE1hdHJpeCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgIG0uZGF0YVt5XVt4XSA9IHRoaXMuZGF0YVt5XVt4XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWF0cml4fEFycmF5fSBtYXRyaXhcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0KG1hdHJpeCkge1xuICAgIGlmIChtYXRyaXggaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5kYXRhID0gbmV3IEFycmF5KG1hdHJpeC5sZW5ndGgpO1xuXG4gICAgICB0aGlzLmhlaWdodCA9IG1hdHJpeC5sZW5ndGg7XG4gICAgICB0aGlzLndpZHRoID0gbWF0cml4WzBdLmxlbmd0aDtcblxuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBtYXRyaXgubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgdGhpcy5kYXRhW3ldID0gbWF0cml4W3ldLnNsaWNlKDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBuZXcgQXJyYXkobWF0cml4LmRhdGEubGVuZ3RoKTtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gbWF0cml4LmhlaWdodDtcbiAgICAgIHRoaXMud2lkdGggPSBtYXRyaXgud2lkdGg7XG5cbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgbWF0cml4LmRhdGEubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgdGhpcy5kYXRhW3ldID0gbWF0cml4LmRhdGFbeV0uc2xpY2UoMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtpbnR9IHdpZHRoXG4gICAqIEBwYXJhbSB7aW50fSBoZWlnaHRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLmRhdGEgPSBuZXcgQXJyYXkoaGVpZ2h0KTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICB0aGlzLmRhdGFbeV0gPSBuZXcgQXJyYXkod2lkdGgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIHNvdXJjZVBvaW50IGFuZCB0YXJnZXRQb2ludCBNVVNUIE5PVCBiZSB0aGUgc2FtZSBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtQb2ludDNEfSBzb3VyY2VQb2ludFxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHRhcmdldFBvaW50XG4gICAqIEB0b2RvIFJlbW92ZSBoYXJkY29kaW5nXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG11bHRpcGx5UG9pbnQzRChzb3VyY2VQb2ludCwgdGFyZ2V0UG9pbnQpIHtcbiAgICB0YXJnZXRQb2ludC54ID0gc291cmNlUG9pbnQueCAqIHRoaXMuZGF0YVswXVswXSArXG4gICAgICBzb3VyY2VQb2ludC55ICogdGhpcy5kYXRhWzBdWzFdICtcbiAgICAgIHNvdXJjZVBvaW50LnogKiB0aGlzLmRhdGFbMF1bMl07XG5cbiAgICB0YXJnZXRQb2ludC55ID0gc291cmNlUG9pbnQueCAqIHRoaXMuZGF0YVsxXVswXSArXG4gICAgICBzb3VyY2VQb2ludC55ICogdGhpcy5kYXRhWzFdWzFdICtcbiAgICAgIHNvdXJjZVBvaW50LnogKiB0aGlzLmRhdGFbMV1bMl07XG5cbiAgICB0YXJnZXRQb2ludC56ID0gc291cmNlUG9pbnQueCAqIHRoaXMuZGF0YVsyXVswXSArXG4gICAgICBzb3VyY2VQb2ludC55ICogdGhpcy5kYXRhWzJdWzFdICtcbiAgICAgIHNvdXJjZVBvaW50LnogKiB0aGlzLmRhdGFbMl1bMl07XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG11bHRpcGx5TWF0cml4KG1hdHJpeCkge1xuICAgIGlmICh0aGlzLmhlaWdodCAhPT0gbWF0cml4LndpZHRoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBtID0gbmV3IE1hdHJpeChtYXRyaXgud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICBjb25zdCBzaXplID0gdGhpcy5oZWlnaHQ7XG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgbWF0cml4LndpZHRoOyB4KyspIHtcbiAgICAgICAgbGV0IHZhbCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5kYXRhW3ldW2ldICogbWF0cml4LmRhdGFbaV1beF07XG4gICAgICAgIH1cblxuICAgICAgICBtLmRhdGFbeV1beF0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gICAqIEBwdWJsaWNcbiAgICovXG5cbiAgYWRkKG1hdHJpeCkge1xuICAgIGlmICgodGhpcy53aWR0aCAhPT0gbWF0cml4LndpZHRoKSB8fCAodGhpcy5oZWlnaHQgIT09IG1hdHJpeC5oZWlnaHQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG1hdHJpeC53aWR0aDsgeCsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVt5XVt4XSArPSBtYXRyaXguZGF0YVt5XVt4XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN1YnRyYWN0KG1hdHJpeCkge1xuICAgIGlmICgodGhpcy53aWR0aCAhPT0gbWF0cml4LndpZHRoKSB8fCAodGhpcy5oZWlnaHQgIT09IG1hdHJpeC5oZWlnaHQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG1hdHJpeC53aWR0aDsgeCsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVt5XVt4XSAtPSBtYXRyaXguZGF0YVt5XVt4XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxuICAgKiBAcHVibGljXG4gICAqL1xuICB0cmFuc3Bvc2UoKSB7XG4gICAgY29uc3QgdCA9IG5ldyBNYXRyaXgodGhpcy5oZWlnaHQsIHRoaXMud2lkdGgpO1xuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICB0LmRhdGFbeF1beV0gPSB0aGlzLmRhdGFbeV1beF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IEhlbHBlciB9IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7IFZpcnR1YWxTdXJmYWNlIH0gZnJvbSAnLi92aXJ0dWFsLXN1cmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgU3VyZmFjZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudElEXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gY3JlYXRlRWxlbWVudFxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRJRCwgY3JlYXRlRWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudElEID0gZWxlbWVudElEO1xuXG4gICAgaWYgKGNyZWF0ZUVsZW1lbnQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuY2FudmFzID0gSGVscGVyLmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2lkJywgZWxlbWVudElEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYW52YXMgPSBIZWxwZXIuZ2V0RWxlbWVudChlbGVtZW50SUQpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICB0aGlzLmltYWdlRGF0YSA9IG51bGw7XG4gICAgdGhpcy52aXJ0dWFsU3VyZmFjZSA9IG51bGw7XG4gICAgdGhpcy5kcmF3aW5nID0gZmFsc2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7aW50fVxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMud2lkdGg7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7aW50fVxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbWFnZURhdGEuZGF0YTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fSB3aWR0aFxuICAgKiBAcGFyYW0ge2ludH0gaGVpZ2h0XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYmVnaW5QYWludCgpIHtcbiAgICB0aGlzLmltYWdlRGF0YSA9IHRoaXMuY29udGV4dC5jcmVhdGVJbWFnZURhdGEodGhpcy5nZXRXaWR0aCgpLCB0aGlzLmdldEhlaWdodCgpKTtcbiAgICB0aGlzLnZpcnR1YWxTdXJmYWNlID0gbmV3IFZpcnR1YWxTdXJmYWNlKHRoaXMuZ2V0V2lkdGgoKSwgdGhpcy5nZXRIZWlnaHQoKSwgdGhpcy5pbWFnZURhdGEuZGF0YSk7XG5cbiAgICB0aGlzLmRyYXdpbmcgPSB0cnVlO1xuICB9XG5cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZW5kUGFpbnQoKSB7XG4gICAgdGhpcy5jb250ZXh0LnB1dEltYWdlRGF0YSh0aGlzLmltYWdlRGF0YSwgMCwgMCwgMCwgMCwgdGhpcy5nZXRXaWR0aCgpLCB0aGlzLmdldEhlaWdodCgpKTtcbiAgICAvLyB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YSh0aGlzLmltYWdlRGF0YSwgMCwgMCk7XG5cbiAgICB0aGlzLmltYWdlRGF0YSA9IG51bGw7XG4gICAgdGhpcy5kcmF3aW5nID0gZmFsc2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICogQHB1YmxpY1xuICAgKi9cblxuICBpc0RyYXdpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHJhd2luZztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29sb3J9IGJnQ29sb3JcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xlYXIoYmdDb2xvcikge1xuICAgIGlmICh0aGlzLmRyYXdpbmcgIT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwdHJNYXggPSB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuY2FudmFzLmhlaWdodCAqIDQ7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuaW1hZ2VEYXRhLmRhdGE7XG5cbiAgICBjb25zdCByID0gYmdDb2xvci5yO1xuICAgIGNvbnN0IGcgPSBiZ0NvbG9yLmc7XG4gICAgY29uc3QgYiA9IGJnQ29sb3IuYjtcbiAgICBjb25zdCBhID0gYmdDb2xvci5hO1xuXG4gICAgbGV0IHB0ciA9IDA7XG5cbiAgICB3aGlsZSAocHRyIDwgcHRyTWF4KSB7XG4gICAgICBkYXRhW3B0cisrXSA9IHI7XG4gICAgICBkYXRhW3B0cisrXSA9IGc7XG4gICAgICBkYXRhW3B0cisrXSA9IGI7XG4gICAgICBkYXRhW3B0cisrXSA9IGE7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQb2ludDJEIH0gZnJvbSAnLi9wb2ludC0yZCc7XG5cblxuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlID0ge1xuICBwMTogbmV3IFBvaW50MkQoMCwgMCksXG4gIHAyOiBuZXcgUG9pbnQyRCgwLCAwKSxcbiAgcDM6IG5ldyBQb2ludDJEKDAsIDApLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwM1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBjYWxjdWxhdGVCb3VuZHMocDEsIHAyLCBwMykge1xuICAgIHRoaXMuc29ydFBvaW50cyhwMSwgcDIsIHAzKTtcblxuICAgIHJldHVybiB7XG4gICAgICByU2l6ZUFkZGVyOiAocDMueCAtIHAxLngpIC8gKHAzLnkgLSBwMS55KSxcbiAgICAgIGxTaXplQWRkZXI6IChwMi54IC0gcDEueCkgLyAocDIueSAtIHAxLnkgKyAxKSxcbiAgICAgIGxTaXplQWRkZXIyOiAocDMueCAtIHAyLngpIC8gKHAzLnkgLSBwMi55KVxuICAgIH07XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGRyYXcocDEsIHAyLCBwMywgY29sb3IsIHN1cmZhY2UpIHtcbiAgICB0aGlzLnAxLnNldChwMSk7XG4gICAgdGhpcy5wMi5zZXQocDIpO1xuICAgIHRoaXMucDMuc2V0KHAzKTtcblxuICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuY2FsY3VsYXRlQm91bmRzKHRoaXMucDEsIHRoaXMucDIsIHRoaXMucDMpO1xuXG4gICAgY29uc3QgcnggPSB0aGlzLmRyYXdIYWxmVHJpYW5nbGUoXG4gICAgICB0aGlzLnAxLFxuICAgICAgdGhpcy5wMixcbiAgICAgIHRoaXMucDMsXG4gICAgICBib3VuZHMubFNpemVBZGRlcixcbiAgICAgIGJvdW5kcy5yU2l6ZUFkZGVyLFxuICAgICAgdGhpcy5wMS54ICsgYm91bmRzLmxTaXplQWRkZXIgLyAyLFxuICAgICAgdGhpcy5wMS54LFxuICAgICAgY29sb3IsXG4gICAgICBzdXJmYWNlXG4gICAgKTtcblxuICAgIHRoaXMucDIueSsrO1xuXG4gICAgdGhpcy5kcmF3SGFsZlRyaWFuZ2xlKHRoaXMucDIsIHRoaXMucDMsIHRoaXMucDEsIGJvdW5kcy5sU2l6ZUFkZGVyMiwgYm91bmRzLnJTaXplQWRkZXIsIHRoaXMucDIueCwgcngsIGNvbG9yLFxuICAgICAgc3VyZmFjZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwMVxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAyXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxBZGRlclxuICAgKiBAcGFyYW0ge051bWJlcn0gckFkZGVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBseFxuICAgKiBAcGFyYW0ge051bWJlcn0gcnhcbiAgICogQHBhcmFtIHtDb2xvcn0gY29sb3JcbiAgICogQHBhcmFtIHtTdXJmYWNlfSBzdXJmYWNlXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGRyYXdIYWxmVHJpYW5nbGUocDEsIHAyLCBwMywgbEFkZGVyLCByQWRkZXIsIGx4LCByeCwgY29sb3IsIHN1cmZhY2UpIHtcbiAgICBjb25zdCBkYXRhID0gc3VyZmFjZS5nZXREYXRhKCk7XG5cbiAgICBjb25zdCBjb2xSID0gY29sb3IucjtcbiAgICBjb25zdCBjb2xHID0gY29sb3IuZztcbiAgICBjb25zdCBjb2xCID0gY29sb3IuYjtcblxuICAgIGNvbnN0IHdpZHRoID0gc3VyZmFjZS5nZXRXaWR0aCgpO1xuICAgIGNvbnN0IGhlaWdodCA9IHN1cmZhY2UuZ2V0SGVpZ2h0KCk7XG5cbiAgICBsZXQgcHRyID0gTWF0aC5yb3VuZChNYXRoLm1pbihseCwgcngpICsgcDEueSAqIHdpZHRoKSAqIDQ7XG5cbiAgICBjb25zdCBtaW5MZWZ0WCA9IE1hdGgubWluKHAxLngsIHAyLngpO1xuICAgIGNvbnN0IG1heExlZnRYID0gTWF0aC5tYXgocDEueCwgcDIueCk7XG5cbiAgICBjb25zdCBtaW5SaWdodFggPSBNYXRoLm1pbihwMS54LCBwMy54LCBwMi54KTtcbiAgICBjb25zdCBtYXhSaWdodFggPSBNYXRoLm1heChwMS54LCBwMy54LCBwMi54KTtcblxuXG4gICAgZm9yIChsZXQgeSA9IHAxLnk7ICh5IDw9IHAyLnkpICYmICh5IDwgaGVpZ2h0KTsgeSsrKSB7XG4gICAgICBsZXQgbWluWCA9IE1hdGgucm91bmQoTWF0aC5taW4obHgsIHJ4KSk7XG4gICAgICBsZXQgbWF4WCA9IE1hdGgucm91bmQoTWF0aC5tYXgobHgsIHJ4KSk7XG5cbiAgICAgIGlmICh5ID49IDApIHtcbiAgICAgICAgaWYgKG1pblggPCAwKSB7XG4gICAgICAgICAgcHRyICs9IE1hdGguYWJzKG1pblgpICogNDtcbiAgICAgICAgICBtaW5YID0gMDtcbiAgICAgICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgbWluWCk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXhYID0gTWF0aC5taW4obWF4WCwgd2lkdGggLSAxKTtcblxuICAgICAgICBmb3IgKGxldCB4cCA9IG1pblg7IHhwIDw9IG1heFg7IHhwKyspIHtcbiAgICAgICAgICBkYXRhW3B0cl0gPSBjb2xSO1xuICAgICAgICAgIGRhdGFbcHRyICsgMV0gPSBjb2xHO1xuICAgICAgICAgIGRhdGFbcHRyICsgMl0gPSBjb2xCO1xuXG4gICAgICAgICAgcHRyICs9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB0ciArPSAobWF4WCAtIG1pblgpICogNCArIDQ7XG4gICAgICB9XG5cbiAgICAgIGx4ICs9IGxBZGRlcjtcbiAgICAgIHJ4ICs9IHJBZGRlcjtcblxuICAgICAgbHggPSBNYXRoLm1heChseCwgbWluTGVmdFgpO1xuICAgICAgbHggPSBNYXRoLm1pbihseCwgbWF4TGVmdFgpO1xuXG4gICAgICByeCA9IE1hdGgubWF4KHJ4LCBtaW5SaWdodFgpO1xuICAgICAgcnggPSBNYXRoLm1pbihyeCwgbWF4UmlnaHRYKTtcblxuICAgICAgcHRyICs9ICgod2lkdGggLSBtYXhYKSArIE1hdGgucm91bmQoTWF0aC5taW4obHgsIHJ4KSkpICogNDtcbiAgICAgIHB0ciAtPSA0O1xuICAgIH1cblxuICAgIHJldHVybiByeDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBTb3J0IHAxLCBwMiwgcDMgaW4gbG93ZXN0IFkgb3JkZXIuXG4gICAqXG4gICAqIFJlbGllcyBvbiBhcmd1bWVudHMgYmVpbmcgdHJlYXRlZCBhcyBieXJlZlxuICAgKlxuICAgKiBAcGFyYW0ge1BvaW50MkR9IHAxXG4gICAqIEBwYXJhbSB7UG9pbnQyRH0gcDJcbiAgICogQHBhcmFtIHtQb2ludDJEfSBwM1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzb3J0UG9pbnRzKHAxLCBwMiwgcDMpIHtcbiAgICBwMS5yb3VuZCgpO1xuICAgIHAyLnJvdW5kKCk7XG4gICAgcDMucm91bmQoKTtcblxuICAgIGlmIChwMy55IDwgcDEueSkge1xuICAgICAgcDMuc3dhcChwMSk7XG4gICAgfVxuXG4gICAgaWYgKHAyLnkgPCBwMS55KSB7XG4gICAgICBwMi5zd2FwKHAxKTtcbiAgICB9XG5cbiAgICBpZiAocDMueSA8IHAyLnkpIHtcbiAgICAgIHAzLnN3YXAocDIpO1xuICAgIH1cbiAgfVxufTtcbiIsImV4cG9ydCAqIGZyb20gJy4vYXBwJztcbmV4cG9ydCAqIGZyb20gJy4vYmV0dGVyLWludGVycG9sYXRlZC10cmlhbmdsZSc7XG5leHBvcnQgKiBmcm9tICcuL2JldHRlci10cmlhbmdsZSc7XG5leHBvcnQgKiBmcm9tICcuL2NhbnZhcy10ZXh0dXJlJztcbmV4cG9ydCAqIGZyb20gJy4vY2FudmFzLXRleHR1cmUtY29udGFpbmVyJztcbmV4cG9ydCAqIGZyb20gJy4vY29sb3InO1xuZXhwb3J0ICogZnJvbSAnLi9kcmF3JztcbmV4cG9ydCAqIGZyb20gJy4vZW1wdHktdGV4dHVyZSc7XG5leHBvcnQgKiBmcm9tICcuL2hlbHBlcic7XG5leHBvcnQgKiBmcm9tICcuL2ludGVycG9sYXRlZC10cmlhbmdsZSc7XG5leHBvcnQgKiBmcm9tICcuL2xpbmUnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXRyaXgnO1xuZXhwb3J0ICogZnJvbSAnLi9ub3JtYWxpemVkLWNvbG9yJztcbmV4cG9ydCAqIGZyb20gJy4vcG9pbnQtMmQnO1xuZXhwb3J0ICogZnJvbSAnLi9wb2ludC0zZCc7XG5leHBvcnQgKiBmcm9tICcuL3N1cmZhY2UnO1xuZXhwb3J0ICogZnJvbSAnLi90ZXh0dXJlJztcbmV4cG9ydCAqIGZyb20gJy4vdGV4dHVyZWQtdHJpYW5nbGUnO1xuZXhwb3J0ICogZnJvbSAnLi90cmlhbmdsZSc7XG5leHBvcnQgKiBmcm9tICcuL3ZlY3Rvci0zZCc7XG5leHBvcnQgKiBmcm9tICcuL3ZpcnR1YWwtc3VyZmFjZSc7XG5cblxuIiwiZXhwb3J0IGNsYXNzIENhbWVyYSB7XG5cbn1cbiIsImltcG9ydCB7IFBvaW50M0QsIFZlY3RvcjNEIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuL2NhbWVyYSc7XG5cbmV4cG9ydCBjbGFzcyBNb3ZhYmxlQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcbiAgLyoqXG4gICAqIEBsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvM0RfcHJvamVjdGlvbiNQZXJzcGVjdGl2ZV9wcm9qZWN0aW9uXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBDYW1lcmFcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFBvaW50M0QoMCwgMCwgMCk7XG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IG5ldyBWZWN0b3IzRCgwLCAwLCAxMDAuMCk7XG4gICAgdGhpcy52aWV3ZXJQb3NpdGlvbiA9IG5ldyBQb2ludDNEKC0zMjAsIC0yNDAsIDIwMC4wKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VmVydGV4W119IHZlcnRpY2VzXG4gICAqL1xuICB0cmFuc2Zvcm0odmVydGljZXMpIHtcbiAgICBjb25zdCBjYW1Qb3MgPSB0aGlzLnBvc2l0aW9uO1xuICAgIGNvbnN0IGwgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBjb25zdCBjb3NYID0gTWF0aC5jb3ModGhpcy5vcmllbnRhdGlvbi54KTtcbiAgICBjb25zdCBzaW5YID0gTWF0aC5zaW4odGhpcy5vcmllbnRhdGlvbi54KTtcblxuICAgIGNvbnN0IGNvc1kgPSBNYXRoLmNvcyh0aGlzLm9yaWVudGF0aW9uLnkpO1xuICAgIGNvbnN0IHNpblkgPSBNYXRoLnNpbih0aGlzLm9yaWVudGF0aW9uLnkpO1xuXG4gICAgY29uc3QgY29zWiA9IE1hdGguY29zKHRoaXMub3JpZW50YXRpb24ueik7XG4gICAgY29uc3Qgc2luWiA9IE1hdGguc2luKHRoaXMub3JpZW50YXRpb24ueik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICBjb25zdCBzb3VyY2VQb2ludCA9IHZlcnRleC50cmFuc2Zvcm1lZDtcbiAgICAgIGNvbnN0IHRhcmdldFBvaW50ID0gdmVydGV4LmNhbWVyYVRyYW5zZm9ybWVkO1xuXG4gICAgICBjb25zdCBzb3VyY2VNaW51c0NhbVggPSBzb3VyY2VQb2ludC54IC0gY2FtUG9zLng7XG4gICAgICBjb25zdCBzb3VyY2VNaW51c0NhbVkgPSBzb3VyY2VQb2ludC55IC0gY2FtUG9zLnk7XG4gICAgICBjb25zdCBzb3VyY2VNaW51c0NhbVogPSBzb3VyY2VQb2ludC56IC0gY2FtUG9zLno7XG5cbiAgICAgIGNvbnN0IGNvc1pTb3VyY2VNaW51c0NhbVggPSBjb3NaICogKHNvdXJjZU1pbnVzQ2FtWCk7XG4gICAgICBjb25zdCBzaW5aU291cmNlTWludXNDYW1YID0gc2luWiAqIChzb3VyY2VNaW51c0NhbVgpO1xuXG4gICAgICBjb25zdCBjb3NaU291cmNlTWludXNDYW1ZID0gY29zWiAqIChzb3VyY2VNaW51c0NhbVkpO1xuICAgICAgY29uc3Qgc2luWlNvdXJjZU1pbnVzQ2FtWSA9IHNpblogKiAoc291cmNlTWludXNDYW1ZKTtcblxuICAgICAgY29uc3QgY29zWVNvdXJjZU1pbnVzQ2FtWiA9IGNvc1kgKiAoc291cmNlTWludXNDYW1aKTtcblxuICAgICAgY29uc3Qgc2luWXNpblpjb3NaQ2FtWUNhbVggPSBzaW5ZICogKHNpblpTb3VyY2VNaW51c0NhbVkgKyBjb3NaU291cmNlTWludXNDYW1YKTtcblxuXG4gICAgICB0YXJnZXRQb2ludC54ID0gY29zWiAqXG4gICAgICAgIChcbiAgICAgICAgICBzaW5aU291cmNlTWludXNDYW1ZICtcbiAgICAgICAgICBjb3NaU291cmNlTWludXNDYW1YXG4gICAgICAgICkgLVxuICAgICAgICAoXG4gICAgICAgICAgc2luWSAqIHNvdXJjZU1pbnVzQ2FtWlxuICAgICAgICApO1xuXG4gICAgICB0YXJnZXRQb2ludC55ID0gc2luWCAqXG4gICAgICAgIChcbiAgICAgICAgICBjb3NZU291cmNlTWludXNDYW1aICtcbiAgICAgICAgICBzaW5Zc2luWmNvc1pDYW1ZQ2FtWFxuICAgICAgICApICtcbiAgICAgICAgY29zWCAqXG4gICAgICAgIChcbiAgICAgICAgICBjb3NaU291cmNlTWludXNDYW1ZIC1cbiAgICAgICAgICBzaW5aU291cmNlTWludXNDYW1YXG4gICAgICAgICk7XG5cbiAgICAgIHRhcmdldFBvaW50LnogPSBjb3NYICpcbiAgICAgICAgKFxuICAgICAgICAgIGNvc1lTb3VyY2VNaW51c0NhbVogK1xuICAgICAgICAgIHNpbllzaW5aY29zWkNhbVlDYW1YXG4gICAgICAgICkgLVxuICAgICAgICBzaW5YICpcbiAgICAgICAgKFxuICAgICAgICAgIGNvc1pTb3VyY2VNaW51c0NhbVkgLVxuICAgICAgICAgIHNpblpTb3VyY2VNaW51c0NhbVhcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZlcnRleFtdfSB2ZXJ0aWNlc1xuICAgKi9cblxuICBwcm9qZWN0KHZlcnRpY2VzKSB7XG4gICAgY29uc3QgbCA9IHZlcnRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCB2aWV3ZXJQb3NpdGlvbiA9IHRoaXMudmlld2VyUG9zaXRpb247XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICBjb25zdCBzb3VyY2VQb2ludCA9IHZlcnRleC5jYW1lcmFUcmFuc2Zvcm1lZDtcbiAgICAgIGNvbnN0IHRhcmdldFBvaW50ID0gdmVydGV4LmNhbWVyYVByb2plY3RlZDtcblxuICAgICAgY29uc3QgekRpdiA9IHZpZXdlclBvc2l0aW9uLnogLyBzb3VyY2VQb2ludC56O1xuXG4gICAgICB0YXJnZXRQb2ludC54ID0gekRpdiAqIHNvdXJjZVBvaW50LnggLSB2aWV3ZXJQb3NpdGlvbi54O1xuICAgICAgdGFyZ2V0UG9pbnQueSA9IHpEaXYgKiBzb3VyY2VQb2ludC55IC0gdmlld2VyUG9zaXRpb24ueTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFBvaW50MkQgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vY2FtZXJhJztcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUNhbWVyYSBleHRlbmRzIENhbWVyYSB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgQ2FtZXJhXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy52aWV3ZXJQb3NpdGlvbiA9IG5ldyBQb2ludDJEKDMyMCwgMjQwKTtcbiAgICB0aGlzLnBlcnNwZWN0aXZlRGVwdGggPSAxMDA7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VmVydGV4W119IHZlcnRpY2VzXG4gICAqL1xuXG4gIHRyYW5zZm9ybSh2ZXJ0aWNlcykge1xuICAgIGNvbnN0IGwgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICBjb25zdCBzb3VyY2VQb2ludCA9IHZlcnRleC50cmFuc2Zvcm1lZDtcbiAgICAgIGNvbnN0IHRhcmdldFBvaW50ID0gdmVydGV4LmNhbWVyYVRyYW5zZm9ybWVkO1xuXG4gICAgICB0YXJnZXRQb2ludC54ID0gc291cmNlUG9pbnQueDtcbiAgICAgIHRhcmdldFBvaW50LnkgPSBzb3VyY2VQb2ludC55O1xuICAgICAgdGFyZ2V0UG9pbnQueiA9IHNvdXJjZVBvaW50Lno7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtWZXJ0ZXhbXX0gdmVydGljZXNcbiAgICovXG5cbiAgcHJvamVjdCh2ZXJ0aWNlcykge1xuICAgIGNvbnN0IGwgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICBjb25zdCBzb3VyY2VQb2ludCA9IHZlcnRleC5jYW1lcmFUcmFuc2Zvcm1lZDtcbiAgICAgIGNvbnN0IHRhcmdldFBvaW50ID0gdmVydGV4LmNhbWVyYVByb2plY3RlZDtcblxuICAgICAgY29uc3QgcGQgPSB0aGlzLnBlcnNwZWN0aXZlRGVwdGggLyBzb3VyY2VQb2ludC56O1xuXG4gICAgICB0YXJnZXRQb2ludC54ID0gKHNvdXJjZVBvaW50LnggKiBwZCkgKyB0aGlzLnZpZXdlclBvc2l0aW9uLng7XG4gICAgICB0YXJnZXRQb2ludC55ID0gKHNvdXJjZVBvaW50LnkgKiBwZCkgKyB0aGlzLnZpZXdlclBvc2l0aW9uLnk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL2NhbWVyYSc7XG5leHBvcnQgKiBmcm9tICcuL21vdmFibGUtY2FtZXJhJztcbmV4cG9ydCAqIGZyb20gJy4vc2ltcGxlLWNhbWVyYSc7XG4iLCJpbXBvcnQgeyBQb2ludDNEIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBMaWdodCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGxpZ2h0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBQb2ludDNEKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VmVjdG9yM0R9IHZpZXdlckRpcmVjdGlvblxuICAgKiBAcGFyYW0ge1BvaW50M0R9IG5vcm1hbDNEUG9zaXRpb25cbiAgICogQHBhcmFtIHtWZWN0b3IzRH0gbm9ybWFsXG4gICAqIEBwYXJhbSB7TGlnaHREYXRhfSB0YXJnZXRMaWdodERhdGFcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBjYWxjdWxhdGVMaWdodERhdGEodmlld2VyRGlyZWN0aW9uLCBub3JtYWwzRFBvc2l0aW9uLCBub3JtYWwsIHRhcmdldExpZ2h0RGF0YSkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxufVxuXG4iLCJpbXBvcnQgeyBOb3JtYWxpemVkQ29sb3IgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuZXhwb3J0IGNsYXNzIExpZ2h0RGF0YSB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3BlY3VsYXJDb2xvciA9IG5ldyBOb3JtYWxpemVkQ29sb3IoMCwgMCwgMCk7XG4gICAgdGhpcy5kaWZmdXNlQ29sb3IgPSBuZXcgTm9ybWFsaXplZENvbG9yKDAsIDAsIDApO1xuICB9XG5cbiAgcmVzZXQoYW1iaWVuY2UpIHtcbiAgICBpZiAoIWFtYmllbmNlKSB7XG4gICAgICB0aGlzLnNwZWN1bGFyQ29sb3Iuc2V0KDAsIDAsIDAsIDApO1xuICAgICAgdGhpcy5kaWZmdXNlQ29sb3Iuc2V0KDAsIDAsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNwZWN1bGFyQ29sb3Iuc2V0KGFtYmllbmNlLmxpZ2h0KTtcbiAgICAgIHRoaXMuZGlmZnVzZUNvbG9yLnNldChhbWJpZW5jZS5saWdodCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IzRCwgTm9ybWFsaXplZENvbG9yIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBMaWdodCB9IGZyb20gJy4vbGlnaHQnO1xuXG5leHBvcnQgY2xhc3MgT21uaUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xuICAvKipcbiAgICogQHBhcmFtIHtQb2ludDNEfSBwb3NpdGlvblxuICAgKiBAcGFyYW0ge05vcm1hbGl6ZWRDb2xvcn0gZGlmZnVzZUNvbG9yXG4gICAqIEBsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmxpbm4lRTIlODAlOTNQaG9uZ19zaGFkaW5nX21vZGVsXG4gICAqIEBleHRlbmRzIExpZ2h0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IocG9zaXRpb24sIGRpZmZ1c2VDb2xvcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7UG9pbnQzRH1cbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Q29sb3J9XG4gICAgICovXG4gICAgdGhpcy5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3I7XG4gICAgdGhpcy5kaWZmdXNlUG93ZXIgPSAwLjU7XG5cbiAgICB0aGlzLnNwZWN1bGFySGFyZG5lc3MgPSAwLjU7XG4gICAgdGhpcy5zcGVjdWxhclBvd2VyID0gMC41O1xuICAgIHRoaXMuc3BlY3VsYXJDb2xvciA9IG5ldyBOb3JtYWxpemVkQ29sb3IoMSwgMSwgMSk7XG4gIH07XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtWZWN0b3IzRH0gdmlld2VyRGlyZWN0aW9uXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gbm9ybWFsM0RQb3NpdGlvblxuICAgKiBAcGFyYW0ge1ZlY3RvcjNEfSBub3JtYWxcbiAgICogQHBhcmFtIHtMaWdodERhdGF9IHRhcmdldExpZ2h0RGF0YVxuICAgKi9cblxuICBjYWxjdWxhdGVMaWdodERhdGEodmlld2VyRGlyZWN0aW9uLCBub3JtYWwzRFBvc2l0aW9uLCBub3JtYWwsIHRhcmdldExpZ2h0RGF0YSkge1xuICAgIGlmICh0aGlzLmRpZmZ1c2VQb3dlciA+IDApIHtcbiAgICAgIGNvbnN0IGxpZ2h0RGlyZWN0aW9uID0gbmV3IFZlY3RvcjNEKHRoaXMucG9zaXRpb24pO1xuXG4gICAgICBsaWdodERpcmVjdGlvbi5zdWJ0cmFjdChub3JtYWwzRFBvc2l0aW9uKTtcblxuICAgICAgbGV0IGRpc3RhbmNlID0gbGlnaHREaXJlY3Rpb24ubGVuZ3RoKCk7XG5cbiAgICAgIGxpZ2h0RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG4gICAgICBkaXN0YW5jZSA9IGRpc3RhbmNlICogZGlzdGFuY2U7XG5cbiAgICAgIGNvbnN0IE5kb3RMID0gbm9ybWFsLmRvdChsaWdodERpcmVjdGlvbik7XG5cbiAgICAgIGxldCBpbnRlbnNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChOZG90TCwgMC4wKSwgMS4wKTtcbiAgICAgIGxldCBpbnRlbnNpdHlQb3dlckRpc3RhbmNlID0gaW50ZW5zaXR5ICogdGhpcy5kaWZmdXNlUG93ZXIgLyBkaXN0YW5jZTtcblxuICAgICAgdGFyZ2V0TGlnaHREYXRhLmRpZmZ1c2VDb2xvci5yICs9IHRoaXMuZGlmZnVzZUNvbG9yLnIgKiBpbnRlbnNpdHlQb3dlckRpc3RhbmNlO1xuICAgICAgdGFyZ2V0TGlnaHREYXRhLmRpZmZ1c2VDb2xvci5nICs9IHRoaXMuZGlmZnVzZUNvbG9yLmcgKiBpbnRlbnNpdHlQb3dlckRpc3RhbmNlO1xuICAgICAgdGFyZ2V0TGlnaHREYXRhLmRpZmZ1c2VDb2xvci5iICs9IHRoaXMuZGlmZnVzZUNvbG9yLmIgKiBpbnRlbnNpdHlQb3dlckRpc3RhbmNlO1xuXG4gICAgICAvLyB2YXIgSCA9ICggbGlnaHREaXIgKyB2aWV3RGlyICkubm9ybWFsaXplKCk7XG4gICAgICBsaWdodERpcmVjdGlvbi5hZGQodmlld2VyRGlyZWN0aW9uKTtcbiAgICAgIGxpZ2h0RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG4gICAgICBjb25zdCBOZG90SCA9IG5vcm1hbC5kb3QobGlnaHREaXJlY3Rpb24gLyogSCAqLyk7XG5cbiAgICAgIGludGVuc2l0eSA9IE1hdGgucG93KE1hdGgubWluKE1hdGgubWF4KE5kb3RILCAwLjApLCAxLjApLCB0aGlzLnNwZWN1bGFySGFyZG5lc3MpO1xuXG4gICAgICBpbnRlbnNpdHlQb3dlckRpc3RhbmNlID0gaW50ZW5zaXR5ICogdGhpcy5zcGVjdWxhclBvd2VyIC8gZGlzdGFuY2U7XG5cbiAgICAgIHRhcmdldExpZ2h0RGF0YS5zcGVjdWxhckNvbG9yLnIgKz0gdGhpcy5zcGVjdWxhckNvbG9yLnIgKiBpbnRlbnNpdHlQb3dlckRpc3RhbmNlO1xuICAgICAgdGFyZ2V0TGlnaHREYXRhLnNwZWN1bGFyQ29sb3IuZyArPSB0aGlzLnNwZWN1bGFyQ29sb3IuZyAqIGludGVuc2l0eVBvd2VyRGlzdGFuY2U7XG4gICAgICB0YXJnZXRMaWdodERhdGEuc3BlY3VsYXJDb2xvci5iICs9IHRoaXMuc3BlY3VsYXJDb2xvci5iICogaW50ZW5zaXR5UG93ZXJEaXN0YW5jZTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vbGlnaHQnO1xuZXhwb3J0ICogZnJvbSAnLi9saWdodC1kYXRhJztcbmV4cG9ydCAqIGZyb20gJy4vb21uaS1saWdodCc7XG5cbiIsImltcG9ydCB7IFZlY3RvcjNELCBQb2ludDJELCBQb2ludDNEIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBMaWdodERhdGEgfSBmcm9tICcuL2xpZ2h0JztcblxuZXhwb3J0IGNsYXNzIFZlcnRleCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHBvaW50XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IocG9pbnQpIHtcbiAgICB0aGlzLm9yaWdpbiA9IHBvaW50O1xuXG4gICAgdGhpcy5ub3JtYWwgPSBuZXcgVmVjdG9yM0QoMCwgMCwgMCk7XG4gICAgdGhpcy50cmFuc2Zvcm1lZCA9IG5ldyBQb2ludDNEKDAsIDAsIDApO1xuICAgIHRoaXMuY2FtZXJhVHJhbnNmb3JtZWQgPSBuZXcgUG9pbnQzRCgwLCAwLCAwKTtcbiAgICB0aGlzLmNhbWVyYVByb2plY3RlZCA9IG5ldyBQb2ludDJEKDAsIDApO1xuXG4gICAgdGhpcy5saWdodERhdGEgPSBuZXcgTGlnaHREYXRhKCk7XG4gICAgdGhpcy5mYWNlcyA9IFtdO1xuICB9XG59XG5cbiIsImV4cG9ydCBjbGFzcyBFZGdlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhXG4gICAqIEBwYXJhbSBiXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoYSwgYikge1xuICAgIHRoaXMuYSA9IGE7XG4gICAgdGhpcy5iID0gYjtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ludH0gYVxuICAgKiBAcGFyYW0ge2ludH0gYlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXQoYSwgYikge1xuICAgIHRoaXMuYSA9IGE7XG4gICAgdGhpcy5iID0gYjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSGVscGVyLCBQb2ludDNELCBEcmF3IH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBWZXJ0ZXggfSBmcm9tICcuL3ZlcnRleCc7XG5pbXBvcnQgeyBFZGdlIH0gZnJvbSAnLi9lZGdlJztcblxuZXhwb3J0IGNsYXNzIE1lc2gge1xuICAvKipcbiAgICogQHBhcmFtIFtuYW1lPV1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZSB8fCAnJztcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgVmVydGV4W11cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2VzID0gW107XG5cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIEZhY2VbXVxuICAgICAqL1xuICAgIHRoaXMuZmFjZXMgPSBbXTtcblxuXG4gICAgLyoqXG4gICAgICogQHR5cGUgRWRnZVxuICAgICAqL1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtQb2ludDNEfVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQzRCgwLCAwLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtQb2ludDNEfVxuICAgICAqL1xuICAgIHRoaXMuc2NhbGUgPSBuZXcgUG9pbnQzRCgxLjAsIDEuMCwgMS4wKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtQb2ludDNEfVxuICAgICAqL1xuICAgIHRoaXMucm90YXRpb24gPSBuZXcgUG9pbnQzRCgwLjAsIDAuMCwgMC4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50M0R9IHBvaW50XG4gICAqL1xuXG4gIGFkZFZlcnRleChwb2ludCkge1xuICAgIHRoaXMudmVydGljZXMucHVzaChuZXcgVmVydGV4KHBvaW50KSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VkZ2V9IGVkZ2VcbiAgICovXG5cbiAgYWRkRWRnZShlZGdlKSB7XG4gICAgdGhpcy5lZGdlcy5wdXNoKGVkZ2UpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtGYWNlfSBmYWNlXG4gICAqL1xuXG4gIGFkZEZhY2UoZmFjZSkge1xuICAgIHRoaXMuZmFjZXMucHVzaChmYWNlKTtcblxuICAgIGNvbnN0IGZhY2VObyA9IHRoaXMuZmFjZXMubGVuZ3RoIC0gMTtcblxuICAgIGZhY2Uub3JkZXIgPSBmYWNlTm87XG5cbiAgICB0aGlzLnZlcnRpY2VzW2ZhY2UuYV0uZmFjZXMucHVzaChmYWNlTm8pO1xuICAgIHRoaXMudmVydGljZXNbZmFjZS5iXS5mYWNlcy5wdXNoKGZhY2VObyk7XG4gICAgdGhpcy52ZXJ0aWNlc1tmYWNlLmNdLmZhY2VzLnB1c2goZmFjZU5vKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUm90YXRpb25fbWF0cml4XG4gICAqL1xuXG4gIHJvdGF0ZU1hdHJpeCgpIHtcbiAgICBjb25zdCBjb3NYID0gTWF0aC5jb3ModGhpcy5yb3RhdGlvbi54KTtcbiAgICBjb25zdCBzaW5YID0gTWF0aC5zaW4odGhpcy5yb3RhdGlvbi54KTtcbiAgICBjb25zdCBjb3NZID0gTWF0aC5jb3ModGhpcy5yb3RhdGlvbi55KTtcbiAgICBjb25zdCBzaW5ZID0gTWF0aC5zaW4odGhpcy5yb3RhdGlvbi55KTtcbiAgICBjb25zdCBjb3NaID0gTWF0aC5jb3ModGhpcy5yb3RhdGlvbi56KTtcbiAgICBjb25zdCBzaW5aID0gTWF0aC5zaW4odGhpcy5yb3RhdGlvbi56KTtcblxuICAgIC8qIEknbSBub3QgdXNpbmcgbWF0cmljZXMgaGVyZSBzaW1wbHkgYmVjYXVzZSB0ZXN0aW5nIHNob3dlZFxuICAgICAqIHRoZXkncmUgYWJvdXQgMjUlIHNsb3dlciB0aGFuICdkbyBpdCB5b3Vyc2VsZicgbWV0aG9kICovXG5cbiAgICBjb25zdCBsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSBWZXJ0ZXhcbiAgICAgICAqL1xuICAgICAgY29uc3QgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tpXTtcblxuICAgICAgY29uc3Qgb3YgPSB2ZXJ0ZXgub3JpZ2luO1xuICAgICAgY29uc3QgdiA9IHZlcnRleC50cmFuc2Zvcm1lZDtcblxuICAgICAgY29uc3QgeDIgPSBvdi54O1xuICAgICAgY29uc3QgeSA9IG92Lnk7XG4gICAgICBjb25zdCB6ID0gb3YuejtcblxuICAgICAgLy8gUk9UIFhcbiAgICAgIC8vIGNvbnN0IHgyID0geDtcbiAgICAgIGNvbnN0IHkzID0geSAqIGNvc1ggLSB6ICogc2luWDtcbiAgICAgIGNvbnN0IHoyID0geSAqIHNpblggKyB6ICogY29zWDtcblxuICAgICAgLy8gUk9UIFlcbiAgICAgIGNvbnN0IHgzID0geDIgKiBjb3NZICsgejIgKiBzaW5ZO1xuICAgICAgLy8gY29uc3QgeTMgPSB5MjtcbiAgICAgIHYueiA9IHgyICogKC1zaW5ZKSArIHoyICogY29zWTtcblxuICAgICAgLy8gUk9UIFpcbiAgICAgIHYueCA9IHgzICogY29zWiAtIHkzICogc2luWjtcbiAgICAgIHYueSA9IHgzICogc2luWiArIHkzICogY29zWjtcbiAgICB9XG4gIH1cblxuXG4gIHNjYWxlTWF0cml4KCkge1xuICAgIC8vICE9IG9uIHB1cnBvc2VcbiAgICBpZiAoKHRoaXMuc2NhbGUueCAhPT0gMSkgfHwgKHRoaXMuc2NhbGUueSAhPT0gMSkgfHwgKHRoaXMuc2NhbGUueiAhPT0gMSkpIHtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy52ZXJ0aWNlc1tpXS50cmFuc2Zvcm1lZC5tdWx0aXBseSh0aGlzLnNjYWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIHRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy52ZXJ0aWNlc1tpXS50cmFuc2Zvcm1lZC5hZGQodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuICB9XG5cblxuICB0cmFuc2Zvcm1PcmlnaW4oKSB7XG4gICAgdGhpcy5yb3RhdGVNYXRyaXgoKTtcbiAgICB0aGlzLnNjYWxlTWF0cml4KCk7XG4gICAgdGhpcy50cmFuc2xhdGUoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmFcbiAgICovXG4gIHRyYW5zZm9ybUNhbWVyYShjYW1lcmEpIHtcbiAgICBjYW1lcmEudHJhbnNmb3JtKHRoaXMudmVydGljZXMpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYVxuICAgKi9cbiAgcHJvamVjdChjYW1lcmEpIHtcbiAgICBjYW1lcmEucHJvamVjdCh0aGlzLnZlcnRpY2VzKTtcbiAgfVxuXG5cbiAgZHJhd1ZlcnRpY2VzKCkge1xuICAgIGNvbnN0IGwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBEcmF3LnNldFBpeGVsKHRoaXMudmVydGljZXNbaV0uY2FtZXJhUHJvamVjdGVkLCBEcmF3LmNvbG9yKTtcbiAgICB9XG4gIH1cblxuXG4gIGRyYXdXaXJlZnJhbWUoKSB7XG4gICAgY29uc3QgbCA9IHRoaXMuZWRnZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIERyYXcubGluZSh0aGlzLnZlcnRpY2VzW3RoaXMuZWRnZXNbaV0uYV0uY2FtZXJhUHJvamVjdGVkLCB0aGlzLnZlcnRpY2VzW3RoaXMuZWRnZXNbaV0uYl0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICBEcmF3LmNvbG9yKTtcbiAgICB9XG4gIH1cblxuXG4gIGRyYXdGbGF0KCkge1xuICAgIGNvbnN0IGwgPSB0aGlzLmZhY2VzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBEcmF3LnRyaWFuZ2xlKFxuICAgICAgICB0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV0uYV0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICB0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV0uYl0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICB0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV0uY10uY2FtZXJhUHJvamVjdGVkXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG5cbiAgY2FsY3VsYXRlRmFjZU5vcm1hbHMoKSB7XG4gICAgY29uc3QgbCA9IHRoaXMuZmFjZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNvbnN0IHAxID0gdGhpcy52ZXJ0aWNlc1t0aGlzLmZhY2VzW2ldLmFdLmNhbWVyYVRyYW5zZm9ybWVkO1xuICAgICAgY29uc3QgcDIgPSB0aGlzLnZlcnRpY2VzW3RoaXMuZmFjZXNbaV0uYl0uY2FtZXJhVHJhbnNmb3JtZWQ7XG4gICAgICBjb25zdCBwMyA9IHRoaXMudmVydGljZXNbdGhpcy5mYWNlc1tpXS5jXS5jYW1lcmFUcmFuc2Zvcm1lZDtcblxuICAgICAgdGhpcy5mYWNlc1tpXS5ub3JtYWwubm9ybWFsKHAxLCBwMiwgcDMpO1xuICAgICAgdGhpcy5mYWNlc1tpXS5ub3JtYWwubm9ybWFsaXplKCk7XG5cbiAgICAgIHRoaXMuZmFjZXNbaV0ucG9zaXRpb24uc2V0VG9DZW50ZXIocDEsIHAyLCBwMyk7XG4gICAgfVxuICB9XG5cblxuICBjYWxjdWxhdGVWZXJ0ZXhOb3JtYWxzKCkge1xuICAgIGNvbnN0IGwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCB2ZXJ0ZXhGYWNlcyA9IHRoaXMudmVydGljZXNbaV0uZmFjZXM7XG4gICAgICBjb25zdCBmYWNlTGVuZ3RoID0gdmVydGV4RmFjZXMubGVuZ3RoO1xuICAgICAgY29uc3Qgbm9ybWFsVmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tpXS5ub3JtYWw7XG5cbiAgICAgIG5vcm1hbFZlcnRleC5zZXQoMCwgMCwgMCk7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZUxlbmd0aDsgaisrKSB7XG4gICAgICAgIG5vcm1hbFZlcnRleC5hZGQodGhpcy5mYWNlc1t2ZXJ0ZXhGYWNlc1tqXV0ubm9ybWFsKTtcbiAgICAgIH1cblxuICAgICAgbm9ybWFsVmVydGV4LmRpdmlkZUJ5VmFsKGZhY2VMZW5ndGgpO1xuICAgICAgbm9ybWFsVmVydGV4Lm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lXG4gICAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmFcbiAgICovXG4gIGNhbGN1bGF0ZUZhY2VMaWdodERhdGEoc2NlbmUsIGNhbWVyYSkge1xuICAgIGNvbnN0IGxpZ2h0Q291bnQgPSBzY2VuZS5saWdodHMubGVuZ3RoO1xuICAgIGNvbnN0IGZhY2VDb3VudCA9IHRoaXMuZmFjZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBmYWNlQ291bnQ7IGorKykge1xuICAgICAgY29uc3QgZmFjZSA9IHRoaXMuZmFjZXNbal07XG5cbiAgICAgIGZhY2UubGlnaHREYXRhLnJlc2V0KHNjZW5lLmFtYmllbmNlKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodENvdW50OyBpKyspIHtcbiAgICAgICAgc2NlbmUubGlnaHRzW2ldLmNhbGN1bGF0ZUxpZ2h0RGF0YShjYW1lcmEub3JpZW50YXRpb24sIGZhY2UucG9zaXRpb24sIGZhY2Uubm9ybWFsLCBmYWNlLmxpZ2h0RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcbiAgICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYVxuICAgKi9cbiAgY2FsY3VsYXRlVmVydGV4TGlnaHREYXRhKHNjZW5lLCBjYW1lcmEpIHtcbiAgICBjb25zdCBsaWdodENvdW50ID0gc2NlbmUubGlnaHRzLmxlbmd0aDtcbiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IHRoaXMudmVydGljZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB2ZXJ0ZXhDb3VudDsgaisrKSB7XG4gICAgICBjb25zdCB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzW2pdO1xuXG4gICAgICB2ZXJ0ZXgubGlnaHREYXRhLnJlc2V0KHNjZW5lLmFtYmllbmNlKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaWdodENvdW50OyBpKyspIHtcbiAgICAgICAgc2NlbmUubGlnaHRzW2ldLmNhbGN1bGF0ZUxpZ2h0RGF0YShjYW1lcmEub3JpZW50YXRpb24sIHZlcnRleC5jYW1lcmFUcmFuc2Zvcm1lZCwgdmVydGV4Lm5vcm1hbCxcbiAgICAgICAgICB2ZXJ0ZXgubGlnaHREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYVxuICAgKi9cbiAgY3VsbChjYW1lcmEpIHtcbiAgICBjb25zdCBmYWNlQ291bnQgPSB0aGlzLmZhY2VzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmFjZUNvdW50OyBqKyspIHtcbiAgICAgIGNvbnN0IGZhY2UgPSB0aGlzLmZhY2VzW2pdO1xuXG4gICAgICBmYWNlLnZpc2libGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqL1xuICBzZXROYW1lKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cblxuICAvKipcbiAgICogRmlndXJlIG91dCB3aXJlZnJhbWUgZnJvbSBmYWNlIGRhdGFcbiAgICovXG5cbiAgYnVpbGRXaXJlZnJhbWUoKSB7XG4gICAgY29uc3QgdmVydGV4TG9va3VwID0gSGVscGVyLmNyZWF0ZTJEQXJyYXkodGhpcy52ZXJ0aWNlcy5sZW5ndGgsIHRoaXMudmVydGljZXMubGVuZ3RoKTtcblxuICAgIHRoaXMuY2xlYXJFZGdlcygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZhY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZXJ0ZXhMb29rdXBbTWF0aC5taW4odGhpcy5mYWNlc1tpXS5hLCB0aGlzLmZhY2VzW2ldLmIpXVtNYXRoLm1heCh0aGlzLmZhY2VzW2ldLmEsIHRoaXMuZmFjZXNbaV0uYildID0gdHJ1ZTtcbiAgICAgIHZlcnRleExvb2t1cFtNYXRoLm1pbih0aGlzLmZhY2VzW2ldLmEsIHRoaXMuZmFjZXNbaV0uYyldW01hdGgubWF4KHRoaXMuZmFjZXNbaV0uYSwgdGhpcy5mYWNlc1tpXS5jKV0gPSB0cnVlO1xuICAgICAgdmVydGV4TG9va3VwW01hdGgubWluKHRoaXMuZmFjZXNbaV0uYiwgdGhpcy5mYWNlc1tpXS5jKV1bTWF0aC5tYXgodGhpcy5mYWNlc1tpXS5iLCB0aGlzLmZhY2VzW2ldLmMpXSA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhMb29rdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmVydGV4TG9va3VwLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICh2ZXJ0ZXhMb29rdXBbaV1bal0gPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zdCBlZGdlID0gbmV3IEVkZ2UoaSwgaik7XG4gICAgICAgICAgdGhpcy5hZGRFZGdlKGVkZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBjbGVhckVkZ2VzKCkge1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIE1hdGVyaWFsIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb2xvciA9IG51bGw7XG4gICAgdGhpcy50ZXh0dXJlID0gbnVsbDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVsbHxDb2xvcn1cbiAgICovXG5cbiAgZ2V0Q29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3I7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVsbHxDYW52YXNUZXh0dXJlfVxuICAgKi9cblxuICBnZXRUZXh0dXJlKCkge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmU7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwnO1xuXG5leHBvcnQgY2xhc3MgU29saWRDb2xvck1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuICAvKipcbiAgICogQHBhcmFtIHtDb2xvcn0gW2NvbG9yXVxuICAgKiBAZXh0ZW5kcyBNYXRlcmlhbFxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbG9yKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY29sb3IgPSBjb2xvciB8fCBuZXcgQ29sb3IoMCwgMTkyLCAwKTtcbiAgICB0aGlzLnRleHR1cmUgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vbWF0ZXJpYWwnO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZWRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzVGV4dHVyZX0gW3RleHR1cmVdXG4gICAqIEBleHRlbmRzIE1hdGVyaWFsXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IodGV4dHVyZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgIHRoaXMuY29sb3IgPSBudWxsO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL21hdGVyaWFsJztcbmV4cG9ydCAqIGZyb20gJy4vc29saWQtY29sb3ItbWF0ZXJpYWwnO1xuZXhwb3J0ICogZnJvbSAnLi90ZXh0dXJlZC1tYXRlcmlhbCc7XG5cblxuIiwiaW1wb3J0IHsgUG9pbnQzRCwgVmVjdG9yM0QgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IExpZ2h0RGF0YSB9IGZyb20gJy4vbGlnaHQnO1xuaW1wb3J0IHsgU29saWRDb2xvck1hdGVyaWFsIH0gZnJvbSAnLi9tYXRlcmlhbCc7XG5cbmV4cG9ydCBjbGFzcyBGYWNlIHtcbiAgLyoqXG4gICAqIFRyaWFkIGZhY2VcbiAgICpcbiAgICogQHBhcmFtIHtpbnR9IGFcbiAgICogQHBhcmFtIHtpbnR9IGJcbiAgICogQHBhcmFtIHtpbnR9IGNcbiAgICogQHBhcmFtIHtNYXRlcmlhbH0gW21hdGVyaWFsXVxuICAgKiBAcGFyYW0ge1BvaW50M0R9IFt1dkFdXG4gICAqIEBwYXJhbSB7UG9pbnQzRH0gW3V2Ql1cbiAgICogQHBhcmFtIHtQb2ludDNEfSBbdXZDXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGEsIGIsIGMsIG1hdGVyaWFsLCB1dkEsIHV2QiwgdXZDKSB7XG4gICAgdGhpcy5hID0gYTtcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYyA9IGM7XG5cbiAgICB0aGlzLnV2QSA9IHV2QSB8fCBuZXcgUG9pbnQzRCgpO1xuICAgIHRoaXMudXZCID0gdXZCIHx8IG5ldyBQb2ludDNEKCk7XG4gICAgdGhpcy51dkMgPSB1dkMgfHwgbmV3IFBvaW50M0QoKTtcblxuICAgIHRoaXMub3JkZXIgPSAwO1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsIHx8IG5ldyBTb2xpZENvbG9yTWF0ZXJpYWwoKTtcbiAgICB0aGlzLm5vcm1hbCA9IG5ldyBWZWN0b3IzRCgpO1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQzRCgpO1xuICAgIHRoaXMubGlnaHREYXRhID0gbmV3IExpZ2h0RGF0YSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQb2ludDNELCBDb2xvciwgQ2FudmFzVGV4dHVyZSB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21lc2gnO1xuaW1wb3J0IHsgRWRnZSB9IGZyb20gJy4uL2VkZ2UnO1xuaW1wb3J0IHsgRmFjZSB9IGZyb20gJy4uL2ZhY2UnO1xuaW1wb3J0IHsgVGV4dHVyZWRNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFsJztcblxuZXhwb3J0IGNvbnN0IEN1Ym9pZEZhY3RvcnkgPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Zsb2F0fSBoZWlnaHRcbiAgICogQHBhcmFtIHtmbG9hdH0gbGVuZ3RoXG4gICAqIEBwYXJhbSB7ZmxvYXR9IGRlcHRoXG4gICAqIEByZXR1cm5zIHtNZXNofVxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZW5lcmF0ZTogZnVuY3Rpb24gKGhlaWdodCwgbGVuZ3RoLCBkZXB0aCkge1xuICAgIGNvbnN0IGN1Ym9pZCA9IG5ldyBNZXNoKCk7XG5cbiAgICBDdWJvaWRGYWN0b3J5LmdlbmVyYXRlVmVydGljZXMoY3Vib2lkLCBoZWlnaHQsIGxlbmd0aCwgZGVwdGgpO1xuICAgIEN1Ym9pZEZhY3RvcnkuZ2VuZXJhdGVFZGdlcyhjdWJvaWQpO1xuICAgIEN1Ym9pZEZhY3RvcnkuZ2VuZXJhdGVGYWNlcyhjdWJvaWQpO1xuXG4gICAgcmV0dXJuIGN1Ym9pZDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01lc2h9IGN1Ym9pZFxuICAgKiBAcGFyYW0ge2Zsb2F0fSBoZWlnaHRcbiAgICogQHBhcmFtIHtmbG9hdH0gbGVuZ3RoXG4gICAqIEBwYXJhbSB7ZmxvYXR9IGRlcHRoXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZVZlcnRpY2VzOiBmdW5jdGlvbiAoY3Vib2lkLCBoZWlnaHQsIGxlbmd0aCwgZGVwdGgpIHtcbiAgICBjb25zdCBsMiA9IGxlbmd0aCAvIDI7XG4gICAgY29uc3QgaDIgPSBoZWlnaHQgLyAyO1xuICAgIGNvbnN0IGQyID0gZGVwdGggLyAyO1xuXG4gICAgY3Vib2lkLmFkZFZlcnRleChuZXcgUG9pbnQzRCgtbDIsIC1oMiwgLWQyKSk7XG4gICAgY3Vib2lkLmFkZFZlcnRleChuZXcgUG9pbnQzRCgtbDIsICtoMiwgLWQyKSk7XG4gICAgY3Vib2lkLmFkZFZlcnRleChuZXcgUG9pbnQzRCgrbDIsIC1oMiwgLWQyKSk7XG4gICAgY3Vib2lkLmFkZFZlcnRleChuZXcgUG9pbnQzRCgrbDIsICtoMiwgLWQyKSk7XG5cbiAgICBjdWJvaWQuYWRkVmVydGV4KG5ldyBQb2ludDNEKC1sMiwgLWgyLCArZDIpKTtcbiAgICBjdWJvaWQuYWRkVmVydGV4KG5ldyBQb2ludDNEKC1sMiwgK2gyLCArZDIpKTtcbiAgICBjdWJvaWQuYWRkVmVydGV4KG5ldyBQb2ludDNEKCtsMiwgLWgyLCArZDIpKTtcbiAgICBjdWJvaWQuYWRkVmVydGV4KG5ldyBQb2ludDNEKCtsMiwgK2gyLCArZDIpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01lc2h9IGN1Ym9pZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2VuZXJhdGVFZGdlczogZnVuY3Rpb24gKGN1Ym9pZCkge1xuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDAsIDEpKTtcbiAgICBjdWJvaWQuYWRkRWRnZShuZXcgRWRnZSgwLCAyKSk7XG4gICAgY3Vib2lkLmFkZEVkZ2UobmV3IEVkZ2UoMywgMikpO1xuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDMsIDEpKTtcblxuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDQsIDUpKTtcbiAgICBjdWJvaWQuYWRkRWRnZShuZXcgRWRnZSg0LCA2KSk7XG4gICAgY3Vib2lkLmFkZEVkZ2UobmV3IEVkZ2UoNywgNikpO1xuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDcsIDUpKTtcblxuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDAsIDQpKTtcbiAgICBjdWJvaWQuYWRkRWRnZShuZXcgRWRnZSgxLCA1KSk7XG4gICAgY3Vib2lkLmFkZEVkZ2UobmV3IEVkZ2UoMiwgNikpO1xuICAgIGN1Ym9pZC5hZGRFZGdlKG5ldyBFZGdlKDMsIDcpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01lc2h9IGN1Ym9pZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2VuZXJhdGVGYWNlczogZnVuY3Rpb24gKGN1Ym9pZCkge1xuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRleHR1cmVkTWF0ZXJpYWwobmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzLzNkL3RleHR1cmVzL2Nocm9tZS00LmpwZycpKTtcbiAgICBtYXRlcmlhbC5jb2xvciA9IG5ldyBDb2xvcigwLCAxOTIsIDApO1xuXG4gICAgY29uc3QgbWF0ZXJpYWwyID0gbmV3IFRleHR1cmVkTWF0ZXJpYWwobmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzLzNkL3RleHR1cmVzL2Nocm9tZS00LmpwZycpKTtcbiAgICBtYXRlcmlhbDIuY29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMTkyKTtcblxuICAgIGN1Ym9pZC5hZGRGYWNlKG5ldyBGYWNlKDAsIDEsIDMsIG1hdGVyaWFsKSk7XG4gICAgY3Vib2lkLmFkZEZhY2UobmV3IEZhY2UoMiwgMCwgMywgbWF0ZXJpYWwyKSk7XG5cbiAgICBjdWJvaWQuYWRkRmFjZShuZXcgRmFjZSg0LCA1LCA2LCBtYXRlcmlhbCkpO1xuICAgIGN1Ym9pZC5hZGRGYWNlKG5ldyBGYWNlKDYsIDUsIDcsIG1hdGVyaWFsMikpO1xuXG4gICAgY3Vib2lkLmFkZEZhY2UobmV3IEZhY2UoNCwgMCwgNiwgbWF0ZXJpYWwpKTtcbiAgICBjdWJvaWQuYWRkRmFjZShuZXcgRmFjZSgyLCAwLCA2LCBtYXRlcmlhbCkpO1xuXG4gICAgY3Vib2lkLmFkZEZhY2UobmV3IEZhY2UoMSwgMywgNywgbWF0ZXJpYWwpKTtcbiAgICBjdWJvaWQuYWRkRmFjZShuZXcgRmFjZSgxLCA3LCA1LCBtYXRlcmlhbCkpO1xuXG4gICAgY3Vib2lkLmFkZEZhY2UobmV3IEZhY2UoNiwgMiwgMywgbWF0ZXJpYWwpKTtcbiAgICBjdWJvaWQuYWRkRmFjZShuZXcgRmFjZSg2LCAzLCA3LCBtYXRlcmlhbCkpO1xuXG4gICAgY3Vib2lkLmFkZEZhY2UobmV3IEZhY2UoNCwgMCwgMSwgbWF0ZXJpYWwpKTtcbiAgICBjdWJvaWQuYWRkRmFjZShuZXcgRmFjZSg1LCA0LCAxLCBtYXRlcmlhbCkpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgUG9pbnQzRCwgQ29sb3IsIENhbnZhc1RleHR1cmUsIEhlbHBlciB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21lc2gnO1xuaW1wb3J0IHsgRmFjZSB9IGZyb20gJy4uL2ZhY2UnO1xuaW1wb3J0IHsgVGV4dHVyZWRNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFsJztcblxuZXhwb3J0IGNvbnN0IE9iakZhY3RvcnkgPSB7XG4gIC8qKlxuICAgKiBMb2FkIFdhdmVmcm9udCBPQkogZmlsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7U2NlbmV9IFtzY2VuZV1cbiAgICogQHJldHVybnMge01lc2h9XG4gICAqIEBsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2F2ZWZyb250Xy5vYmpfZmlsZVxuICAgKi9cbiAgbG9hZDogZnVuY3Rpb24gKHVybCwgc2NlbmUpIHtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1lc2goKTtcblxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRleHR1cmVkTWF0ZXJpYWwobmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzLzNkL3RleHR1cmVzL2Nocm9tZS00LmpwZycpKTtcbiAgICBtYXRlcmlhbC5jb2xvciA9IG5ldyBDb2xvcigwLCAxOTIsIDApO1xuXG5cbiAgICBIZWxwZXIubG9hZChcbiAgICAgIHVybCxcbiAgICAgIGZ1bmN0aW9uIChkYXRhIC8qLCB0ZXh0U3RhdHVzLCBqcVhIUiAqLykge1xuICAgICAgICBPYmpGYWN0b3J5LnByb2Nlc3MoZGF0YSwgbWVzaCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgIGlmIChzY2VuZSkge1xuICAgICAgICAgIHNjZW5lLmZhY2VTb3J0UGlsZS5yZUluaXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cbiAgICByZXR1cm4gbWVzaDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqRmlsZURhdGFcbiAgICogQHBhcmFtIHtNZXNofSBtZXNoXG4gICAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm9jZXNzOiBmdW5jdGlvbiAob2JqRmlsZURhdGEsIG1lc2gsIG1hdGVyaWFsKSB7XG4gICAgY29uc3QgbGluZXMgPSBvYmpGaWxlRGF0YS5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgdmVydGV4VGV4dHVyZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBPYmpGYWN0b3J5LmdldExpbmVQYXJhbWV0ZXJzKGxpbmVzW2ldLnRyaW0oKSk7XG5cbiAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXJzWzBdKSB7XG4gICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAvLyB2ZXJ0aWNlc1xuICAgICAgICAgICAgT2JqRmFjdG9yeS5hZGRWZXJ0ZXgocGFyYW1ldGVycywgbWVzaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgLy8gZmFjZXNcbiAgICAgICAgICAgIE9iakZhY3RvcnkuYWRkRmFjZShwYXJhbWV0ZXJzLCBtZXNoLCB2ZXJ0ZXhUZXh0dXJlcywgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgIC8vIG1lc2ggbmFtZVxuICAgICAgICAgICAgbWVzaC5zZXROYW1lKHBhcmFtZXRlcnNbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd2dCc6XG4gICAgICAgICAgICAvLyB2ZXJ0ZXggdGV4dHVyZSBjb29yZGluYXRlXG4gICAgICAgICAgICBPYmpGYWN0b3J5LmFkZFZlcnRleFRleHR1cmVDb29yZGluYXRlKHBhcmFtZXRlcnMsIHZlcnRleFRleHR1cmVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndm4nOlxuICAgICAgICAgICAgLy8gdmVydGV4IG5vcm1hbHNcbiAgICAgICAgICAgIC8vIGlnbm9yZWQgZm9yIG5vd1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXNoLmJ1aWxkV2lyZWZyYW1lKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIGdldExpbmVQYXJhbWV0ZXJzOiBmdW5jdGlvbiAobGluZSkge1xuICAgIGNvbnN0IGluaXRpYWxQYXJhbWV0ZXJzID0gbGluZS5zcGxpdCgnICcpO1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5pdGlhbFBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpbml0aWFsUGFyYW1ldGVyc1tpXSAhPT0gJycpIHtcbiAgICAgICAgcGFyYW1ldGVycy5wdXNoKGluaXRpYWxQYXJhbWV0ZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1ldGVycztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7TWVzaH0gbWVzaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkVmVydGV4OiBmdW5jdGlvbiAocGFyYW1ldGVycywgbWVzaCkge1xuICAgIGNvbnN0IHAgPSBuZXcgUG9pbnQzRChwYXJhbWV0ZXJzWzFdLCBwYXJhbWV0ZXJzWzJdLCBwYXJhbWV0ZXJzWzNdKTtcblxuICAgIG1lc2guYWRkVmVydGV4KHApO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nW119IHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtNZXNofSBtZXNoXG4gICAqIEBwYXJhbSB7UG9pbnQzRFtdfSB2ZXJ0ZXhUZXh0dXJlc1xuICAgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkRmFjZTogZnVuY3Rpb24gKHBhcmFtZXRlcnMsIG1lc2gsIHZlcnRleFRleHR1cmVzLCBtYXRlcmlhbCkge1xuICAgIGNvbnN0IGEgPSBPYmpGYWN0b3J5LnNwbGl0RmFjZVBhcmFtZXRlcihwYXJhbWV0ZXJzWzFdKTtcbiAgICBjb25zdCBiID0gT2JqRmFjdG9yeS5zcGxpdEZhY2VQYXJhbWV0ZXIocGFyYW1ldGVyc1syXSk7XG4gICAgY29uc3QgYyA9IE9iakZhY3Rvcnkuc3BsaXRGYWNlUGFyYW1ldGVyKHBhcmFtZXRlcnNbM10pO1xuXG4gICAgbGV0IHV2QSA9IG51bGw7XG4gICAgbGV0IHV2QiA9IG51bGw7XG4gICAgbGV0IHV2QyA9IG51bGw7XG5cbiAgICBpZiAoYS52dCAhPT0gbnVsbCkge1xuICAgICAgdXZBID0gbmV3IFBvaW50M0QodmVydGV4VGV4dHVyZXNbYS52dF0pO1xuICAgIH1cblxuICAgIGlmIChiLnZ0ICE9PSBudWxsKSB7XG4gICAgICB1dkIgPSBuZXcgUG9pbnQzRCh2ZXJ0ZXhUZXh0dXJlc1tiLnZ0XSk7XG4gICAgfVxuXG4gICAgaWYgKGMudnQgIT09IG51bGwpIHtcbiAgICAgIHV2QyA9IG5ldyBQb2ludDNEKHZlcnRleFRleHR1cmVzW2MudnRdKTtcbiAgICB9XG5cbiAgICBjb25zdCBmID0gbmV3IEZhY2UoYS52LCBiLnYsIGMudiwgbWF0ZXJpYWwsIHV2QSwgdXZCLCB1dkMpO1xuXG4gICAgbWVzaC5hZGRGYWNlKGYpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNwbGl0RmFjZVBhcmFtZXRlcjogZnVuY3Rpb24gKHBhcmFtZXRlcikge1xuICAgIGNvbnN0IHZhbHVlcyA9IHBhcmFtZXRlci5zcGxpdCgnLycpO1xuXG4gICAgbGV0IHZ0ID0gbnVsbDtcbiAgICBsZXQgdm4gPSBudWxsO1xuXG4gICAgY29uc3QgdiA9IHBhcnNlSW50KHZhbHVlc1swXSwgMTApO1xuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPj0gMikge1xuICAgICAgdnQgPSBwYXJzZUludCh2YWx1ZXNbMV0sIDEwKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA+PSAzKSB7XG4gICAgICB2biA9IHBhcnNlSW50KHZhbHVlc1swXSwgMTApO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHY6IHYgLSAxLFxuICAgICAgdnQ6IHZ0IC0gMSxcbiAgICAgIHZuOiB2biAtIDFcbiAgICB9O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nW119IHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtQb2ludDNEW119IHZlcnRleFRleHR1cmVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhZGRWZXJ0ZXhUZXh0dXJlQ29vcmRpbmF0ZTogZnVuY3Rpb24gKHBhcmFtZXRlcnMsIHZlcnRleFRleHR1cmVzKSB7XG4gICAgY29uc3QgcCA9IG5ldyBQb2ludDNEKHBhcmFtZXRlcnNbMV0sIHBhcmFtZXRlcnNbMl0sIHBhcmFtZXRlcnNbM10pO1xuXG4gICAgdmVydGV4VGV4dHVyZXMucHVzaChwKTtcbiAgfVxuXG5cbn07XG4iLCJpbXBvcnQgeyBQb2ludDNELCBDb2xvciwgQ2FudmFzVGV4dHVyZSB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21lc2gnO1xuaW1wb3J0IHsgRmFjZSB9IGZyb20gJy4uL2ZhY2UnO1xuaW1wb3J0IHsgRWRnZSB9IGZyb20gJy4uL2VkZ2UnO1xuaW1wb3J0IHsgVGV4dHVyZWRNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFsJztcblxuLyoqXG4gKiBUaGlzIGp1c3QgZ2VuZXJhdGVzIGEgc3BoZXJlLXNoYXBlZCBtZXNoXG4gKiBAbGluayBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85Nzg3NzQ1Lzg0NDc3MVxuICogQG5hbWVzcGFjZVxuICovXG5leHBvcnQgY29uc3QgU3BoZXJlRmFjdG9yeSA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR9IHJhZGl1c1hcbiAgICogQHBhcmFtIHtmbG9hdH0gcmFkaXVzWVxuICAgKiBAcGFyYW0ge2Zsb2F0fSByYWRpdXNaXG4gICAqIEBwYXJhbSB7aW50fSBzdGVwc1xuICAgKiBAcmV0dXJucyB7TWVzaH1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2VuZXJhdGU6IGZ1bmN0aW9uIChyYWRpdXNYLCByYWRpdXNZLCByYWRpdXNaLCBzdGVwcykge1xuICAgIGNvbnN0IHNwaGVyZSA9IG5ldyBNZXNoKCk7XG4gICAgY29uc3QgdVN0ZXBzID0gc3RlcHM7XG4gICAgY29uc3QgdlN0ZXBzID0gc3RlcHMgKiAyO1xuXG4gICAgdGhpcy5nZW5lcmF0ZVZlcnRpY2VzKHJhZGl1c1gsIHJhZGl1c1ksIHJhZGl1c1osIHNwaGVyZSwgdVN0ZXBzLCB2U3RlcHMpO1xuICAgIHRoaXMuZ2VuZXJhdGVFZGdlcyhzcGhlcmUsIHVTdGVwcywgdlN0ZXBzKTtcbiAgICB0aGlzLmdlbmVyYXRlRmFjZXMoc3BoZXJlLCB1U3RlcHMsIHZTdGVwcyk7XG5cbiAgICByZXR1cm4gc3BoZXJlO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW50fGZsb2F0fE51bWJlcn0gcmFkaXVzWFxuICAgKiBAcGFyYW0ge2ludHxmbG9hdHxOdW1iZXJ9IHJhZGl1c1lcbiAgICogQHBhcmFtIHtpbnR8ZmxvYXR8TnVtYmVyfSByYWRpdXNaXG4gICAqIEBwYXJhbSB7TWVzaH0gc3BoZXJlXG4gICAqIEBwYXJhbSB7aW50fE51bWJlcn0gdVN0ZXBzXG4gICAqIEBwYXJhbSB7aW50fE51bWJlcn0gdlN0ZXBzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZVZlcnRpY2VzOiBmdW5jdGlvbiAocmFkaXVzWCwgcmFkaXVzWSwgcmFkaXVzWiwgc3BoZXJlLCB1U3RlcHMsIHZTdGVwcykge1xuICAgIGNvbnN0IHJlc29sdXRpb24gPSBNYXRoLlBJIC8gKHVTdGVwcyk7XG5cbiAgICBsZXQgaW5jbGluYXRpb24gPSAwO1xuXG4gICAgZm9yIChsZXQgdSA9IDA7IHUgPD0gdVN0ZXBzOyB1KyspIHtcbiAgICAgIGxldCBhemltdXRoID0gMDtcblxuICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPD0gdlN0ZXBzOyB2KyspIHtcbiAgICAgICAgY29uc3QgcCA9IG5ldyBQb2ludDNEKFxuICAgICAgICAgIHJhZGl1c1ggKiBNYXRoLnNpbihpbmNsaW5hdGlvbikgKiBNYXRoLmNvcyhhemltdXRoKSxcbiAgICAgICAgICByYWRpdXNZICogTWF0aC5zaW4oaW5jbGluYXRpb24pICogTWF0aC5zaW4oYXppbXV0aCksXG4gICAgICAgICAgcmFkaXVzWiAqIE1hdGguY29zKGluY2xpbmF0aW9uKVxuICAgICAgICApO1xuXG4gICAgICAgIHNwaGVyZS5hZGRWZXJ0ZXgocCk7XG5cbiAgICAgICAgYXppbXV0aCArPSBNYXRoLmFicyhyZXNvbHV0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaW5jbGluYXRpb24gKz0gTWF0aC5hYnMocmVzb2x1dGlvbik7XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWVzaH0gc3BoZXJlXG4gICAqIEBwYXJhbSB7aW50fE51bWJlcn0gdVN0ZXBzXG4gICAqIEBwYXJhbSB7aW50fE51bWJlcn0gdlN0ZXBzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZUVkZ2VzOiBmdW5jdGlvbiAoc3BoZXJlLCB1U3RlcHMsIHZTdGVwcykge1xuICAgIGZvciAobGV0IHUgPSAwOyB1IDwgdVN0ZXBzOyB1KyspIHtcbiAgICAgIGZvciAobGV0IHYgPSAwOyB2IDwgdlN0ZXBzOyB2KyspIHtcbiAgICAgICAgY29uc3QgdGhpc1ZlcnRleCA9IHUgKiAodlN0ZXBzICsgMSkgKyB2O1xuXG4gICAgICAgIGxldCBuZXh0VUkgPSB1ICsgMTtcblxuICAgICAgICBpZiAobmV4dFVJID4gdVN0ZXBzKSB7XG4gICAgICAgICAgbmV4dFVJID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVpTmV4dFZlcnRleCA9IChuZXh0VUkgKiAodlN0ZXBzICsgMSkpICsgdjtcblxuICAgICAgICBzcGhlcmUuYWRkRWRnZShuZXcgRWRnZSh0aGlzVmVydGV4LCB1aU5leHRWZXJ0ZXgpKTtcblxuXG4gICAgICAgIGxldCBuZXh0VkkgPSB2ICsgMTtcblxuICAgICAgICBpZiAobmV4dFZJID4gdlN0ZXBzKSB7XG4gICAgICAgICAgbmV4dFZJID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZpTmV4dFZlcnRleCA9ICh1ICogKHZTdGVwcyArIDEpKSArIG5leHRWSTtcblxuICAgICAgICBzcGhlcmUuYWRkRWRnZShuZXcgRWRnZSh0aGlzVmVydGV4LCB2aU5leHRWZXJ0ZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cblxuICAvKipcbiAgICogQHBhcmFtIHtNZXNofSBzcGhlcmVcbiAgICogQHBhcmFtIHtpbnR8TnVtYmVyfSB1U3RlcHNcbiAgICogQHBhcmFtIHtpbnR8TnVtYmVyfSB2U3RlcHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdlbmVyYXRlRmFjZXM6IGZ1bmN0aW9uIChzcGhlcmUsIHVTdGVwcywgdlN0ZXBzKSB7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVGV4dHVyZWRNYXRlcmlhbChuZXcgQ2FudmFzVGV4dHVyZSgnLi9yZXNvdXJjZXMvM2QvdGV4dHVyZXMvY2hyb21lLTQuanBnJykpO1xuICAgIG1hdGVyaWFsLmNvbG9yID0gbmV3IENvbG9yKDAsIDE5MiwgMCk7XG5cbiAgICBjb25zdCBtYXRlcmlhbDIgPSBuZXcgVGV4dHVyZWRNYXRlcmlhbChuZXcgQ2FudmFzVGV4dHVyZSgnLi9yZXNvdXJjZXMvM2QvdGV4dHVyZXMvY2hyb21lLTQuanBnJykpO1xuICAgIG1hdGVyaWFsMi5jb2xvciA9IG5ldyBDb2xvcigwLCAwLCAxOTIpO1xuXG5cbiAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHVTdGVwczsgdSsrKSB7XG4gICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IHZTdGVwczsgdisrKSB7XG4gICAgICAgIGxldCBuZXh0VUkgPSB1ICsgMTtcblxuICAgICAgICBpZiAobmV4dFVJID4gdVN0ZXBzKSB7XG4gICAgICAgICAgLy8gYnJlYWs7XG4gICAgICAgICAgbmV4dFVJID0gMDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IG5leHRWSSA9IHYgKyAxO1xuXG4gICAgICAgIGlmIChuZXh0VkkgPiB2U3RlcHMpIHtcbiAgICAgICAgICAvLyBicmVhaztcbiAgICAgICAgICBuZXh0VkkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BoZXJlLmFkZEZhY2UobmV3IEZhY2UoXG4gICAgICAgICAgdSAqICh2U3RlcHMgKyAxKSArIHYsXG4gICAgICAgICAgbmV4dFVJICogKHZTdGVwcyArIDEpICsgdixcbiAgICAgICAgICBuZXh0VUkgKiAodlN0ZXBzICsgMSkgKyBuZXh0VkksXG4gICAgICAgICAgbWF0ZXJpYWwsXG4gICAgICAgICAgbmV3IFBvaW50M0QoMCwgMCwgMCksXG4gICAgICAgICAgbmV3IFBvaW50M0QoMCwgMSwgMCksXG4gICAgICAgICAgbmV3IFBvaW50M0QoMSwgMCwgMClcbiAgICAgICAgKSk7XG5cbiAgICAgICAgc3BoZXJlLmFkZEZhY2UobmV3IEZhY2UoXG4gICAgICAgICAgdSAqICh2U3RlcHMgKyAxKSArIHYsXG4gICAgICAgICAgbmV4dFVJICogKHZTdGVwcyArIDEpICsgbmV4dFZJLFxuICAgICAgICAgIHUgKiAodlN0ZXBzICsgMSkgKyBuZXh0VkksXG4gICAgICAgICAgbWF0ZXJpYWwyLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDAsIDEsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDEsIDAsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDEsIDEsIDApXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG4iLCJpbXBvcnQgeyBQb2ludDNELCBDb2xvciwgQ2FudmFzVGV4dHVyZSB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21lc2gnO1xuaW1wb3J0IHsgRmFjZSB9IGZyb20gJy4uL2ZhY2UnO1xuaW1wb3J0IHsgRWRnZSB9IGZyb20gJy4uL2VkZ2UnO1xuaW1wb3J0IHsgVGV4dHVyZWRNYXRlcmlhbCB9IGZyb20gJy4uL21hdGVyaWFsJztcblxuLyoqXG4gKiBUaGlzIGp1c3QgZ2VuZXJhdGVzIGEgdG9ydXMtc2hhcGVkIG1lc2hcbiAqIEBuYW1lc3BhY2VcbiAqIEBsaW5rIGh0dHA6Ly9nYW1lZGV2LnN0YWNrZXhjaGFuZ2UuY29tL2EvMTY4NTBcbiAqL1xuZXhwb3J0IGNvbnN0IFRvcnVzRmFjdG9yeSA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR9IG91dGVyUmFkaXVzWFxuICAgKiBAcGFyYW0ge2Zsb2F0fSBvdXRlclJhZGl1c1lcbiAgICogQHBhcmFtIHtmbG9hdH0gd2VpZ2h0XG4gICAqIEBwYXJhbSB7aW50fSBvdXRlclN0ZXBzXG4gICAqIEBwYXJhbSB7aW50fSBpbm5lclN0ZXBzXG4gICAqIEByZXR1cm5zIHtNZXNofVxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZW5lcmF0ZTogZnVuY3Rpb24gKG91dGVyUmFkaXVzWCwgb3V0ZXJSYWRpdXNZLCB3ZWlnaHQsIG91dGVyU3RlcHMsIGlubmVyU3RlcHMpIHtcbiAgICBjb25zdCB0b3J1cyA9IG5ldyBNZXNoKCk7XG5cbiAgICBUb3J1c0ZhY3RvcnkuZ2VuZXJhdGVWZXJ0aWNlcyh0b3J1cywgb3V0ZXJSYWRpdXNYLCBvdXRlclJhZGl1c1ksIHdlaWdodCwgb3V0ZXJTdGVwcywgaW5uZXJTdGVwcyk7XG4gICAgVG9ydXNGYWN0b3J5LmdlbmVyYXRlRWRnZXModG9ydXMsIG91dGVyU3RlcHMsIGlubmVyU3RlcHMpO1xuICAgIFRvcnVzRmFjdG9yeS5nZW5lcmF0ZUZhY2VzKHRvcnVzLCBvdXRlclN0ZXBzLCBpbm5lclN0ZXBzKTtcblxuICAgIHJldHVybiB0b3J1cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01lc2h9IHRvcnVzXG4gICAqIEBwYXJhbSB7ZmxvYXR9IG91dGVyUmFkaXVzWFxuICAgKiBAcGFyYW0ge2Zsb2F0fSBvdXRlclJhZGl1c1lcbiAgICogQHBhcmFtIHtmbG9hdH0gd2VpZ2h0XG4gICAqIEBwYXJhbSB7aW50fSBvdXRlclN0ZXBzXG4gICAqIEBwYXJhbSB7aW50fSBpbm5lclN0ZXBzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZVZlcnRpY2VzOiBmdW5jdGlvbiAodG9ydXMsIG91dGVyUmFkaXVzWCwgb3V0ZXJSYWRpdXNZLCB3ZWlnaHQsIG91dGVyU3RlcHMsIGlubmVyU3RlcHMpIHtcbiAgICBjb25zdCBvdXRlclJlc29sdXRpb24gPSAyICogTWF0aC5QSSAvIChvdXRlclN0ZXBzKTtcbiAgICBjb25zdCBpbm5lclJlc29sdXRpb24gPSAyICogTWF0aC5QSSAvIChpbm5lclN0ZXBzKTtcblxuICAgIGxldCB1ID0gMDtcblxuICAgIGZvciAobGV0IHVpID0gMDsgdWkgPCBvdXRlclN0ZXBzOyB1aSsrKSB7XG4gICAgICBjb25zdCBwID0gbmV3IFBvaW50M0QoXG4gICAgICAgIG91dGVyUmFkaXVzWCAqIE1hdGguY29zKHUpLFxuICAgICAgICBvdXRlclJhZGl1c1kgKiBNYXRoLnNpbih1KSxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgY29uc3QgdyA9IG5ldyBQb2ludDNEKHAueCwgcC55LCBwLnopO1xuICAgICAgdy5ub3JtYWxpemUoKTtcblxuICAgICAgbGV0IHYgPSAwO1xuXG4gICAgICBmb3IgKGxldCB2aSA9IDA7IHZpIDwgaW5uZXJTdGVwczsgdmkrKykge1xuICAgICAgICBjb25zdCBxID0gbmV3IFBvaW50M0QoXG4gICAgICAgICAgb3V0ZXJSYWRpdXNYICogdy54ICsgd2VpZ2h0ICogTWF0aC5jb3ModikgKiB3LnggKyAwLFxuICAgICAgICAgIG91dGVyUmFkaXVzWSAqIHcueSArIHdlaWdodCAqIE1hdGguY29zKHYpICogdy55ICsgMCxcbiAgICAgICAgICBvdXRlclJhZGl1c1ggKiB3LnogKyB3ZWlnaHQgKiBNYXRoLmNvcyh2KSAqIHcueiArIHdlaWdodCAqIE1hdGguc2luKHYpXG4gICAgICAgICk7XG5cbiAgICAgICAgdG9ydXMuYWRkVmVydGV4KHEpO1xuXG4gICAgICAgIHYgKz0gTWF0aC5hYnMoaW5uZXJSZXNvbHV0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdSArPSBNYXRoLmFicyhvdXRlclJlc29sdXRpb24pO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01lc2h9IHRvcnVzXG4gICAqIEBwYXJhbSB7aW50fSBvdXRlclN0ZXBzXG4gICAqIEBwYXJhbSB7aW50fSBpbm5lclN0ZXBzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZUVkZ2VzOiBmdW5jdGlvbiAodG9ydXMsIG91dGVyU3RlcHMsIGlubmVyU3RlcHMpIHtcbiAgICBjb25zdCB1aUNvdW50ID0gb3V0ZXJTdGVwcztcbiAgICBjb25zdCB2aUNvdW50ID0gaW5uZXJTdGVwcztcblxuICAgIGZvciAobGV0IHVpID0gMDsgdWkgPCB1aUNvdW50OyB1aSsrKSB7XG4gICAgICBmb3IgKGxldCB2aSA9IDA7IHZpIDwgdmlDb3VudDsgdmkrKykge1xuICAgICAgICBjb25zdCB0aGlzVmVydGV4ID0gdWkgKiB2aUNvdW50ICsgdmk7XG5cbiAgICAgICAgbGV0IG5leHRVSSA9IHVpICsgMTtcblxuICAgICAgICBpZiAobmV4dFVJID49IHVpQ291bnQpIHtcbiAgICAgICAgICBuZXh0VUkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdWlOZXh0VmVydGV4ID0gKG5leHRVSSAqIHZpQ291bnQpICsgdmk7XG5cbiAgICAgICAgdG9ydXMuYWRkRWRnZShuZXcgRWRnZSh0aGlzVmVydGV4LCB1aU5leHRWZXJ0ZXgpKTtcblxuXG4gICAgICAgIGxldCBuZXh0VkkgPSB2aSArIDE7XG5cbiAgICAgICAgaWYgKG5leHRWSSA+PSB2aUNvdW50KSB7XG4gICAgICAgICAgbmV4dFZJID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZpTmV4dFZlcnRleCA9ICh1aSAqIHZpQ291bnQpICsgbmV4dFZJO1xuXG4gICAgICAgIHRvcnVzLmFkZEVkZ2UobmV3IEVkZ2UodGhpc1ZlcnRleCwgdmlOZXh0VmVydGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWVzaH0gdG9ydXNcbiAgICogQHBhcmFtIHtpbnR9IG91dGVyU3RlcHNcbiAgICogQHBhcmFtIHtpbnR9IGlubmVyU3RlcHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdlbmVyYXRlRmFjZXM6IGZ1bmN0aW9uICh0b3J1cywgb3V0ZXJTdGVwcywgaW5uZXJTdGVwcykge1xuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRleHR1cmVkTWF0ZXJpYWwobmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzLzNkL3RleHR1cmVzL2Nocm9tZS00LmpwZycpKTtcbiAgICBtYXRlcmlhbC5jb2xvciA9IG5ldyBDb2xvcigwLCAxOTIsIDApO1xuXG4gICAgY29uc3QgbWF0ZXJpYWwyID0gbmV3IFRleHR1cmVkTWF0ZXJpYWwobmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzLzNkL3RleHR1cmVzL2Nocm9tZS00LmpwZycpKTtcbiAgICBtYXRlcmlhbDIuY29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMTkyKTtcblxuXG4gICAgY29uc3QgdWlDb3VudCA9IG91dGVyU3RlcHM7XG4gICAgY29uc3QgdmlDb3VudCA9IGlubmVyU3RlcHM7XG5cbiAgICBmb3IgKGxldCB1aSA9IDA7IHVpIDwgdWlDb3VudDsgdWkrKykge1xuICAgICAgZm9yIChsZXQgdmkgPSAwOyB2aSA8IHZpQ291bnQ7IHZpKyspIHtcbiAgICAgICAgbGV0IG5leHRVSSA9IHVpICsgMTtcblxuICAgICAgICBpZiAobmV4dFVJID49IHVpQ291bnQpIHtcbiAgICAgICAgICAvLyBicmVhaztcbiAgICAgICAgICBuZXh0VUkgPSAwO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgbmV4dFZJID0gdmkgKyAxO1xuXG4gICAgICAgIGlmIChuZXh0VkkgPj0gdmlDb3VudCkge1xuICAgICAgICAgIC8vIGJyZWFrO1xuICAgICAgICAgIG5leHRWSSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0b3J1cy5hZGRGYWNlKG5ldyBGYWNlKFxuICAgICAgICAgIHVpICogdmlDb3VudCArIHZpLFxuICAgICAgICAgIG5leHRVSSAqIHZpQ291bnQgKyB2aSxcbiAgICAgICAgICBuZXh0VUkgKiB2aUNvdW50ICsgbmV4dFZJLFxuICAgICAgICAgIG1hdGVyaWFsLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDAsIDAsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDAsIDEsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDEsIDAsIDApXG4gICAgICAgICkpO1xuXG4gICAgICAgIHRvcnVzLmFkZEZhY2UobmV3IEZhY2UoXG4gICAgICAgICAgdWkgKiB2aUNvdW50ICsgdmksXG4gICAgICAgICAgbmV4dFVJICogdmlDb3VudCArIG5leHRWSSxcbiAgICAgICAgICB1aSAqIHZpQ291bnQgKyBuZXh0VkksXG4gICAgICAgICAgbWF0ZXJpYWwyLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDAsIDEsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDEsIDAsIDApLFxuICAgICAgICAgIG5ldyBQb2ludDNEKDEsIDEsIDApXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuIiwiZXhwb3J0ICogZnJvbSAnLi9jdWJvaWQtZmFjdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL29iai1mYWN0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vc3BoZXJlLWZhY3RvcnknO1xuZXhwb3J0ICogZnJvbSAnLi90b3J1cy1mYWN0b3J5JztcbiIsImV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBSYXN0ZXJpemUgc2NlbmVcbiAgICpcbiAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBkcmF3KHNjZW5lKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG59XG5cbiIsImltcG9ydCB7IERyYXcgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBGbGF0UmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZVxuICAgKi9cbiAgZHJhdyhzY2VuZSkge1xuICAgIHNjZW5lLmZhY2VTb3J0UGlsZS5zb3J0KCk7XG5cbiAgICBjb25zdCBmYWNlTGVuZ3RoID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZUxlbmd0aDsgaSsrKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtGYWNlTG9va3VwfVxuICAgICAgICovXG4gICAgICBjb25zdCBmYWNlTG9va3VwID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlW2ldO1xuXG4gICAgICBEcmF3LmNvbG9yLnIgPSBNYXRoLnJvdW5kKDI1NSAvIChmYWNlTGVuZ3RoIC0gMSkgKiBmYWNlTG9va3VwLmZhY2Uub3JkZXIpO1xuICAgICAgRHJhdy5jb2xvci5nID0gMjU1IC0gTWF0aC5yb3VuZCgyNTUgLyAoZmFjZUxlbmd0aCAtIDEpICogZmFjZUxvb2t1cC5mYWNlLm9yZGVyKTtcblxuICAgICAgLy8gZmFjZUxvb2t1cC5mYWNlLmFcblxuICAgICAgRHJhdy50cmlhbmdsZShcbiAgICAgICAgZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzW2ZhY2VMb29rdXAuZmFjZS5hXS5jYW1lcmFQcm9qZWN0ZWQsXG4gICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYl0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICBmYWNlTG9va3VwLm1lc2gudmVydGljZXNbZmFjZUxvb2t1cC5mYWNlLmNdLmNhbWVyYVByb2plY3RlZCxcbiAgICAgICAgZmFjZUxvb2t1cC5mYWNlLm1hdGVyaWFsLmNvbG9yXG4gICAgICApO1xuXG4gICAgICAvKiBEcmF3LmxpbmUoXG4gICAgICAgICAgZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzWyBmYWNlTG9va3VwLmZhY2UuYSBdLmNhbWVyYVByb2plY3RlZCxcbiAgICAgICAgICBmYWNlTG9va3VwLm1lc2gudmVydGljZXNbIGZhY2VMb29rdXAuZmFjZS5iIF0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvclxuICAgICAgICApO1xuXG4gICAgICBEcmF3LmxpbmUoXG4gICAgICAgICAgZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzWyBmYWNlTG9va3VwLmZhY2UuYiBdLmNhbWVyYVByb2plY3RlZCxcbiAgICAgICAgICBmYWNlTG9va3VwLm1lc2gudmVydGljZXNbIGZhY2VMb29rdXAuZmFjZS5jIF0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvclxuICAgICAgICApO1xuXG4gICAgICBEcmF3LmxpbmUoXG4gICAgICAgICAgZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzWyBmYWNlTG9va3VwLmZhY2UuYyBdLmNhbWVyYVByb2plY3RlZCxcbiAgICAgICAgICBmYWNlTG9va3VwLm1lc2gudmVydGljZXNbIGZhY2VMb29rdXAuZmFjZS5hIF0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvclxuICAgICAgICApOyAqL1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3IsIERyYXcgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBGbGF0U2hhZGVyUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZVxuICAgKi9cbiAgZHJhdyA9IGZ1bmN0aW9uIChzY2VuZSkge1xuICAgIHNjZW5lLmZhY2VTb3J0UGlsZS5zb3J0KCk7XG5cbiAgICBjb25zdCBmYWNlTGVuZ3RoID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlLmxlbmd0aDtcbiAgICBjb25zdCBmYWNlQ29sb3IgPSBuZXcgQ29sb3IoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZUxlbmd0aDsgaSsrKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtGYWNlTG9va3VwfVxuICAgICAgICovXG4gICAgICBjb25zdCBmYWNlTG9va3VwID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlW2ldO1xuXG4gICAgICBmYWNlQ29sb3IuciA9IE1hdGgucm91bmQoZmFjZUxvb2t1cC5mYWNlLmxpZ2h0RGF0YS5kaWZmdXNlQ29sb3IuciAqIGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvci5yKTtcbiAgICAgIGZhY2VDb2xvci5nID0gTWF0aC5yb3VuZChmYWNlTG9va3VwLmZhY2UubGlnaHREYXRhLmRpZmZ1c2VDb2xvci5nICogZmFjZUxvb2t1cC5mYWNlLm1hdGVyaWFsLmNvbG9yLmcpO1xuICAgICAgZmFjZUNvbG9yLmIgPSBNYXRoLnJvdW5kKGZhY2VMb29rdXAuZmFjZS5saWdodERhdGEuZGlmZnVzZUNvbG9yLmIgKiBmYWNlTG9va3VwLmZhY2UubWF0ZXJpYWwuY29sb3IuYik7XG5cbiAgICAgIERyYXcudHJpYW5nbGUoXG4gICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYV0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICBmYWNlTG9va3VwLm1lc2gudmVydGljZXNbZmFjZUxvb2t1cC5mYWNlLmJdLmNhbWVyYVByb2plY3RlZCxcbiAgICAgICAgZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzW2ZhY2VMb29rdXAuZmFjZS5jXS5jYW1lcmFQcm9qZWN0ZWQsXG4gICAgICAgIGZhY2VDb2xvclxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbG9yLCBEcmF3IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXInO1xuXG5leHBvcnQgY2xhc3MgR291cmF1ZFNoYWRlclJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtTY2VuZX0gc2NlbmVcbiAgICovXG4gIGRyYXcoc2NlbmUpIHtcbiAgICBzY2VuZS5mYWNlU29ydFBpbGUuc29ydCgpO1xuXG4gICAgY29uc3QgZmFjZUxlbmd0aCA9IHNjZW5lLmZhY2VTb3J0UGlsZS5sb29rdXBUYWJsZS5sZW5ndGg7XG4gICAgY29uc3QgZmFjZUNvbG9yQSA9IG5ldyBDb2xvcigpO1xuICAgIGNvbnN0IGZhY2VDb2xvckIgPSBuZXcgQ29sb3IoKTtcbiAgICBjb25zdCBmYWNlQ29sb3JDID0gbmV3IENvbG9yKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2VMZW5ndGg7IGkrKykge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7RmFjZUxvb2t1cH1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZmFjZUxvb2t1cCA9IHNjZW5lLmZhY2VTb3J0UGlsZS5sb29rdXBUYWJsZVtpXTtcblxuICAgICAgaWYgKGZhY2VMb29rdXAuZmFjZS52aXNpYmxlID09PSB0cnVlKSB7XG4gICAgICAgIGZhY2VDb2xvckEuc2V0KGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvcik7XG4gICAgICAgIGZhY2VDb2xvckIuc2V0KGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvcik7XG4gICAgICAgIGZhY2VDb2xvckMuc2V0KGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5jb2xvcik7XG5cbiAgICAgICAgZmFjZUNvbG9yQS5tdWx0aXBseShmYWNlTG9va3VwLm1lc2gudmVydGljZXNbZmFjZUxvb2t1cC5mYWNlLmFdLmxpZ2h0RGF0YS5kaWZmdXNlQ29sb3IpO1xuICAgICAgICBmYWNlQ29sb3JCLm11bHRpcGx5KGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYl0ubGlnaHREYXRhLmRpZmZ1c2VDb2xvcik7XG4gICAgICAgIGZhY2VDb2xvckMubXVsdGlwbHkoZmFjZUxvb2t1cC5tZXNoLnZlcnRpY2VzW2ZhY2VMb29rdXAuZmFjZS5jXS5saWdodERhdGEuZGlmZnVzZUNvbG9yKTtcblxuICAgICAgICBEcmF3LmludGVycG9sYXRlZFRyaWFuZ2xlKFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYV0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYl0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuY10uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VDb2xvckEsXG4gICAgICAgICAgZmFjZUNvbG9yQixcbiAgICAgICAgICBmYWNlQ29sb3JDXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBEcmF3IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZVxuICAgKi9cbiAgZHJhdyhzY2VuZSkge1xuICAgIHNjZW5lLmZhY2VTb3J0UGlsZS5zb3J0KCk7XG5cbiAgICBjb25zdCBmYWNlTGVuZ3RoID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZUxlbmd0aDsgaSsrKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtGYWNlTG9va3VwfVxuICAgICAgICovXG4gICAgICBjb25zdCBmYWNlTG9va3VwID0gc2NlbmUuZmFjZVNvcnRQaWxlLmxvb2t1cFRhYmxlW2ldO1xuXG4gICAgICBpZiAoZmFjZUxvb2t1cC5mYWNlLnZpc2libGUgPT09IHRydWUpIHtcbiAgICAgICAgRHJhdy50ZXh0dXJlZFRyaWFuZ2xlKFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYV0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuYl0uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAubWVzaC52ZXJ0aWNlc1tmYWNlTG9va3VwLmZhY2UuY10uY2FtZXJhUHJvamVjdGVkLFxuICAgICAgICAgIGZhY2VMb29rdXAuZmFjZS51dkEsXG4gICAgICAgICAgZmFjZUxvb2t1cC5mYWNlLnV2QixcbiAgICAgICAgICBmYWNlTG9va3VwLmZhY2UudXZDLFxuICAgICAgICAgIGZhY2VMb29rdXAuZmFjZS5tYXRlcmlhbC5nZXRUZXh0dXJlKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBWZXJ0ZXhSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lXG4gICAqL1xuICBkcmF3KHNjZW5lKSB7XG4gICAgZm9yIChsZXQgbSA9IDA7IG0gPCBzY2VuZS5tZXNoZXMubGVuZ3RoOyBtKyspIHtcbiAgICAgIHNjZW5lLm1lc2hlc1ttXS5kcmF3VmVydGljZXMoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBjbGFzcyBXaXJlZnJhbWVSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lXG4gICAqL1xuICBkcmF3KHNjZW5lKSB7XG4gICAgZm9yIChsZXQgbSA9IDA7IG0gPCBzY2VuZS5tZXNoZXMubGVuZ3RoOyBtKyspIHtcbiAgICAgIHNjZW5lLm1lc2hlc1ttXS5kcmF3V2lyZWZyYW1lKCk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL2ZsYXQtcmVuZGVyZXInO1xuZXhwb3J0ICogZnJvbSAnLi9mbGF0LXNoYWRlci1yZW5kZXJlcic7XG5leHBvcnQgKiBmcm9tICcuL2dvdXJhdWQtc2hhZGVyLXJlbmRlcmVyJztcbmV4cG9ydCAqIGZyb20gJy4vcmVuZGVyZXInO1xuZXhwb3J0ICogZnJvbSAnLi90ZXh0dXJlLXJlbmRlcmVyJztcbmV4cG9ydCAqIGZyb20gJy4vdmVydGV4LXJlbmRlcmVyJztcbmV4cG9ydCAqIGZyb20gJy4vd2lyZWZyYW1lLXJlbmRlcmVyJztcbiIsImltcG9ydCB7IE5vcm1hbGl6ZWRDb2xvciB9IGZyb20gJy4uL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgQW1iaWVuY2Uge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7Tm9ybWFsaXplZENvbG9yfSBbbGlnaHRdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihsaWdodCkge1xuICAgIHRoaXMubGlnaHQgPSBsaWdodCB8fCBuZXcgTm9ybWFsaXplZENvbG9yKDAuMywgMC4zLCAwLjMpO1xuICB9XG59XG5cbiIsImV4cG9ydCBjbGFzcyBGYWNlTG9va3VwIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RmFjZX0gZmFjZVxuICAgKiBAcGFyYW0ge01lc2h9IG1lc2hcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yKGZhY2UsIG1lc2gpIHtcbiAgICB0aGlzLmZhY2UgPSBmYWNlO1xuICAgIHRoaXMubWVzaCA9IG1lc2g7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZhY2VMb29rdXAgfSBmcm9tICcuL2ZhY2UtbG9va3VwJztcblxuZXhwb3J0IGNsYXNzIEZhY2VTb3J0UGlsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gc2NlbmVcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLmxvb2t1cFRhYmxlID0gW107XG4gICAgdGhpcy5mb3JjZUluaXQgPSB0cnVlO1xuICB9XG5cblxuICBwb3B1bGF0ZSgpIHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICBjb25zdCBtZXNoTGVuZ3RoID0gdGhpcy5zY2VuZS5tZXNoZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZhY2VzID0gdGhpcy5zY2VuZS5tZXNoZXNbaV0uZmFjZXM7XG4gICAgICBjb25zdCBmYWNlTGVuZ3RoID0gZmFjZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZhY2VMZW5ndGg7IGorKykge1xuICAgICAgICB0aGlzLmxvb2t1cFRhYmxlW2lkeF0gPSBuZXcgRmFjZUxvb2t1cChmYWNlc1tqXSwgdGhpcy5zY2VuZS5tZXNoZXNbaV0pO1xuICAgICAgICBpZHgrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIHJlc2l6ZSgpIHtcbiAgICBsZXQgZmFjZUNvdW50ID0gMDtcbiAgICBjb25zdCBtZXNoTGVuZ3RoID0gdGhpcy5zY2VuZS5tZXNoZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoTGVuZ3RoOyBpKyspIHtcbiAgICAgIGZhY2VDb3VudCArPSB0aGlzLnNjZW5lLm1lc2hlc1tpXS5mYWNlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubG9va3VwVGFibGUubGVuZ3RoICE9PSBmYWNlQ291bnQpIHtcbiAgICAgIHRoaXMubG9va3VwVGFibGUgPSBuZXcgQXJyYXkoZmFjZUNvdW50KTtcbiAgICB9XG4gIH1cblxuXG4gIHJlSW5pdCgpIHtcbiAgICB0aGlzLmZvcmNlSW5pdCA9IHRydWU7XG4gIH1cblxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5mb3JjZUluaXQgPSBmYWxzZTtcblxuICAgIHRoaXMucmVzaXplKCk7XG4gICAgdGhpcy5wb3B1bGF0ZSgpO1xuICB9XG5cblxuICBzb3J0KCkge1xuICAgIGlmICh0aGlzLmZvcmNlSW5pdCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb29rdXBUYWJsZS5zb3J0KFxuICAgICAgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZmFjZS5wb3NpdGlvbi56ID4gYi5mYWNlLnBvc2l0aW9uLnopIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLmZhY2UucG9zaXRpb24ueiA8IGIuZmFjZS5wb3NpdGlvbi56KSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuXG4iLCJpbXBvcnQgeyBGYWNlU29ydFBpbGUgfSBmcm9tICcuL2ZhY2Utc29ydC1waWxlJztcbmltcG9ydCB7IEFtYmllbmNlIH0gZnJvbSAnLi9hbWJpZW5jZSc7XG5cblxuZXhwb3J0IGNsYXNzIFNjZW5lIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUgTWVzaFtdXG4gICAgICovXG4gICAgdGhpcy5tZXNoZXMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIENhbWVyYVtdXG4gICAgICovXG4gICAgdGhpcy5jYW1lcmFzID0gW107XG5cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIExpZ2h0W11cbiAgICAgKi9cbiAgICB0aGlzLmxpZ2h0cyA9IFtdO1xuXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSBNYXRlcmlhbFtdXG4gICAgICovXG4gICAgdGhpcy5tYXRlcmlhbHMgPSBbXTtcblxuXG4gICAgLyoqXG4gICAgICogQHR5cGUgUmVuZGVyZXJbXVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVyZXJzID0gW107XG5cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIEZhY2VTb3J0UGlsZVxuICAgICAqL1xuICAgIHRoaXMuZmFjZVNvcnRQaWxlID0gbmV3IEZhY2VTb3J0UGlsZSh0aGlzKTtcblxuXG4gICAgdGhpcy5hbWJpZW5jZSA9IG5ldyBBbWJpZW5jZSgpO1xuXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSBDYW1lcmFcbiAgICAgKi9cblxuICAgIHRoaXMuYWN0aXZlQ2FtZXJhID0gbnVsbDtcblxuXG4gICAgLyoqXG4gICAgICogQHR5cGUgUmVuZGVyZXJcbiAgICAgKi9cbiAgICB0aGlzLmFjdGl2ZVJlbmRlcmVyID0gbnVsbDtcblxuXG4gICAgdGhpcy5yZW5kZXJUaW1lID0gMDtcbiAgICB0aGlzLnJlbmRlckZyYW1lQ291bnQgPSAwO1xuICAgIHRoaXMucmVuZGVyRlBTID0gMC4wMDtcblxuICAgIHRoaXMuZm9yY2VSZWluaXRTb3J0ID0gdHJ1ZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmFcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkQ2FtZXJhKGNhbWVyYSkge1xuICAgIHRoaXMuY2FtZXJhcy5wdXNoKGNhbWVyYSk7XG5cbiAgICBpZiAodGhpcy5hY3RpdmVDYW1lcmEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYWN0aXZlQ2FtZXJhID0gY2FtZXJhO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NldEFzQWN0aXZlXVxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRSZW5kZXJlcihyZW5kZXJlciwgc2V0QXNBY3RpdmUpIHtcbiAgICB0aGlzLnJlbmRlcmVycy5wdXNoKHJlbmRlcmVyKTtcblxuICAgIGlmICgodGhpcy5hY3RpdmVSZW5kZXJlciA9PT0gbnVsbCkgfHwgKHNldEFzQWN0aXZlID09PSB0cnVlKSkge1xuICAgICAgdGhpcy5hY3RpdmVSZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TWVzaH0gbWVzaFxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRNZXNoKG1lc2gpIHtcbiAgICB0aGlzLm1lc2hlcy5wdXNoKG1lc2gpO1xuXG4gICAgdGhpcy5mb3JjZVJlaW5pdFNvcnQgPSB0cnVlO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtMaWdodH0gbGlnaHRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkTGlnaHQobGlnaHQpIHtcbiAgICB0aGlzLmxpZ2h0cy5wdXNoKGxpZ2h0KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm5zIHtpbnR8bnVsbH1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZmluZE1lc2hJbmRleChuYW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMubWVzaGVzW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcHVibGljXG4gICAqL1xuICByZW1vdmVNZXNoKG5hbWUpIHtcbiAgICBjb25zdCBpID0gdGhpcy5maW5kTWVzaEluZGV4KG5hbWUpO1xuXG4gICAgaWYgKGkgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubWVzaGVzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlbmRlcmVyfSBbcmVuZGVyZXJdXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbmRlcihyZW5kZXJlcikge1xuICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgIHJlbmRlcmVyID0gdGhpcy5hY3RpdmVSZW5kZXJlcjtcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJTdGFydCA9IG5ldyBEYXRlKCk7XG5cblxuICAgIC8vIHRyYW5zZm9ybSwgcHJvamVjdCwgYW5kIGNhbGN1bGF0ZSBub3JtYWxzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMubWVzaGVzW2ldLnZpc2libGUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5tZXNoZXNbaV0udHJhbnNmb3JtT3JpZ2luKCk7XG4gICAgICAgIHRoaXMubWVzaGVzW2ldLnRyYW5zZm9ybUNhbWVyYSh0aGlzLmFjdGl2ZUNhbWVyYSk7XG4gICAgICAgIHRoaXMubWVzaGVzW2ldLnByb2plY3QodGhpcy5hY3RpdmVDYW1lcmEpO1xuXG4gICAgICAgIHRoaXMubWVzaGVzW2ldLmNhbGN1bGF0ZUZhY2VOb3JtYWxzKCk7XG4gICAgICAgIHRoaXMubWVzaGVzW2ldLmNhbGN1bGF0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgdGhpcy5tZXNoZXNbaV0uY2FsY3VsYXRlRmFjZUxpZ2h0RGF0YSh0aGlzLCB0aGlzLmFjdGl2ZUNhbWVyYSk7XG4gICAgICAgIHRoaXMubWVzaGVzW2ldLmNhbGN1bGF0ZVZlcnRleExpZ2h0RGF0YSh0aGlzLCB0aGlzLmFjdGl2ZUNhbWVyYSk7XG5cbiAgICAgICAgdGhpcy5tZXNoZXNbaV0uY3VsbCh0aGlzLmFjdGl2ZUNhbWVyYSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB0aGlzLmZhY2VTb3J0UGlsZS5zb3J0KCk7XG5cblxuICAgIHJlbmRlcmVyLmRyYXcodGhpcyk7XG5cbiAgICBjb25zdCByZW5kZXJDb21wbGV0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICB0aGlzLnJlbmRlckZyYW1lQ291bnQrKztcbiAgICB0aGlzLnJlbmRlclRpbWUgKz0gKHJlbmRlckNvbXBsZXRlLmdldFRpbWUoKSAtIHJlbmRlclN0YXJ0LmdldFRpbWUoKSkgLyAxMDAwLjA7XG4gICAgdGhpcy5yZW5kZXJGUFMgPSB0aGlzLnJlbmRlckZyYW1lQ291bnQgLyB0aGlzLnJlbmRlclRpbWU7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbGVhck1lc2hlcygpIHtcbiAgICB0aGlzLm1lc2hlcyA9IFtdO1xuICAgIHRoaXMuZmFjZVNvcnRQaWxlLnJlSW5pdCgpO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL2NhbWVyYSc7XG5leHBvcnQgKiBmcm9tICcuL2ZhY3RvcnknO1xuZXhwb3J0ICogZnJvbSAnLi9saWdodCc7XG5leHBvcnQgKiBmcm9tICcuL21hdGVyaWFsJztcbmV4cG9ydCAqIGZyb20gJy4vcmVuZGVyZXInO1xuZXhwb3J0ICogZnJvbSAnLi9hbWJpZW5jZSc7XG5leHBvcnQgKiBmcm9tICcuL2VkZ2UnO1xuZXhwb3J0ICogZnJvbSAnLi9mYWNlJztcbmV4cG9ydCAqIGZyb20gJy4vZmFjZS1sb29rdXAnO1xuZXhwb3J0ICogZnJvbSAnLi9mYWNlLXNvcnQtcGlsZSc7XG5leHBvcnQgKiBmcm9tICcuL21lc2gnO1xuZXhwb3J0ICogZnJvbSAnLi9zY2VuZSc7XG5leHBvcnQgKiBmcm9tICcuL3ZlcnRleCc7XG4iLCJpbXBvcnQgeyBBcHAsIENvbG9yLCBQb2ludDNELCBOb3JtYWxpemVkQ29sb3IsIERyYXcgfSBmcm9tICd+L2xpYi9jb3JlJztcbmltcG9ydCB7IFNjZW5lLCBNb3ZhYmxlQ2FtZXJhLCBWZXJ0ZXhSZW5kZXJlciwgVG9ydXNGYWN0b3J5LCBPYmpGYWN0b3J5LCBDdWJvaWRGYWN0b3J5LCBTcGhlcmVGYWN0b3J5LCBPbW5pTGlnaHQgfSBmcm9tICd+L2xpYi8zZCc7XG5cblxuZXhwb3J0IGNsYXNzIFZlcnRleEFwcCBleHRlbmRzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldENhbnZhc0lkLCBhY3RpdmVPYmplY3QgPSAndG9ydXMnKSB7XG4gICAgc3VwZXIodGFyZ2V0Q2FudmFzSWQpO1xuXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBTY2VuZSgpO1xuXG4gICAgdGhpcy5sb2FkT2JqZWN0cygpO1xuXG4gICAgdGhpcy5pbml0T2JqZWN0KGFjdGl2ZU9iamVjdCk7XG4gICAgdGhpcy5pbml0TGlnaHRzKCk7XG4gICAgdGhpcy5pbml0Q2FtZXJhKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyZXIoKTtcbiAgfVxuXG5cbiAgbG9hZE9iamVjdHMoKSB7XG4gICAgdGhpcy5vYmplY3RzID0ge1xuICAgICAgdG9ydXM6IFRvcnVzRmFjdG9yeS5nZW5lcmF0ZSg1MDAsIDUwMCwgMzUwLCAyMCwgMTIpLFxuICAgICAgdGVhcG90OiBPYmpGYWN0b3J5LmxvYWQoJy4vcmVzb3VyY2VzLzNkL29iamVjdHMvdGVhcG90Lm9iaicsIHRoaXMuc2NlbmUpLFxuICAgICAgY3ViZTogQ3Vib2lkRmFjdG9yeS5nZW5lcmF0ZSg1MDAsIDUwMCwgNTAwKSxcbiAgICAgIHNwaGVyZTogU3BoZXJlRmFjdG9yeS5nZW5lcmF0ZSg1MDAsIDUwMCwgNTAwLCAyMClcbiAgICB9O1xuXG4gICAgdGhpcy5vYmplY3RzLnRvcnVzLnBvc2l0aW9uLnogPSAtMTIwMDtcbiAgICB0aGlzLm9iamVjdHMudGVhcG90LnBvc2l0aW9uLnogPSAtMTIwMDtcbiAgICB0aGlzLm9iamVjdHMuY3ViZS5wb3NpdGlvbi56ID0gLTEyMDA7XG4gICAgdGhpcy5vYmplY3RzLnNwaGVyZS5wb3NpdGlvbi56ID0gLTEyMDA7XG5cbiAgICB0aGlzLm9iamVjdHMudGVhcG90LnNjYWxlLnNldCg4MDAsIDgwMCwgODAwKTtcbiAgfVxuXG5cbiAgaW5pdENhbWVyYSgpIHtcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgTW92YWJsZUNhbWVyYSgpO1xuXG4gICAgdGhpcy5zY2VuZS5hZGRDYW1lcmEoY2FtZXJhKTtcbiAgfVxuXG5cbiAgaW5pdE9iamVjdChhY3RpdmVPYmplY3QpIHtcbiAgICB0aGlzLnNldE9iamVjdChhY3RpdmVPYmplY3QpO1xuICB9XG5cblxuICBpbml0UmVuZGVyZXIoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVmVydGV4UmVuZGVyZXIoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkUmVuZGVyZXIocmVuZGVyZXIsIHRydWUpO1xuICB9XG5cblxuICBpbml0TGlnaHRzKCkge1xuICAgIGNvbnN0IGxpZ2h0ID0gbmV3IE9tbmlMaWdodChuZXcgUG9pbnQzRCgtMjUwLCAwLCAtODAwKSwgbmV3IE5vcm1hbGl6ZWRDb2xvcigxLCAxLCAxKSk7XG4gICAgbGlnaHQuZGlmZnVzZVBvd2VyID0gMjAwMDA7XG5cbiAgICBjb25zdCBsaWdodDIgPSBuZXcgT21uaUxpZ2h0KG5ldyBQb2ludDNEKDAsIDAsIC0xMjAwKSwgbmV3IE5vcm1hbGl6ZWRDb2xvcigxLCAxLCAxKSk7XG4gICAgbGlnaHQyLmRpZmZ1c2VQb3dlciA9IDIwMDAwO1xuXG4gICAgdGhpcy5zY2VuZS5hZGRMaWdodChsaWdodCk7XG4gICAgdGhpcy5zY2VuZS5hZGRMaWdodChsaWdodDIpO1xuICB9XG5cblxuICBzZXRPYmplY3Qob2JqZWN0TmFtZSkge1xuICAgIHRoaXMuc2NlbmUuY2xlYXJNZXNoZXMoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkTWVzaCh0aGlzLm9iamVjdHNbb2JqZWN0TmFtZV0pO1xuXG4gICAgdGhpcy5hY3RpdmVPYmplY3QgPSBvYmplY3ROYW1lO1xuICB9XG5cblxuICByb3RhdGVNZXNoKCkge1xuICAgIHRoaXMub2JqZWN0c1t0aGlzLmFjdGl2ZU9iamVjdF0ucm90YXRpb24uYWRkQnlWYWwoMC4wMSk7XG4gIH1cblxuXG4gIGRyYXcoKSB7XG4gICAgdGhpcy5zdGFydERyYXdpbmcoKTtcblxuICAgIERyYXcuYmdDb2xvciA9IG5ldyBDb2xvcigyMjAsIDIzMCwgMjQwKTtcbiAgICBEcmF3LmNsZWFyKCk7XG5cbiAgICB0aGlzLnNjZW5lLnJlbmRlcigpO1xuXG4gICAgdGhpcy5lbmREcmF3aW5nKHRydWUpO1xuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzY0MCcgaGVpZ2h0PSc0ODAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5WZXJ0ZXggUHJvamVjdGlvbjwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgKG5vdCBXZWJHTCkgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj0naHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS8zRF9wcm9qZWN0aW9uJz5jYW1lcmEgcHJvamVjdGlvbi48L2E+PC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItZm9ybS1ncm91cD5cbiAgICAgICAgICA8Yi1mb3JtLXJhZGlvLWdyb3VwXG4gICAgICAgICAgICA6b3B0aW9ucz1cIm9iamVjdE9wdGlvbnNcIlxuICAgICAgICAgICAgdi1tb2RlbD1cImFjdGl2ZU9iamVjdFwiXG4gICAgICAgICAgICBidXR0b25zXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgQGNoYW5nZT1cInN3aXRjaE9iamVjdFwiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvYi1mb3JtLXJhZGlvLWdyb3VwPlxuICAgICAgICA8L2ItZm9ybS1ncm91cD5cbiAgICAgIDwvYi1jYXJkPlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBWZXJ0ZXhBcHAgfSBmcm9tICcuL2FwcCc7XG5cbkBDb21wb25lbnRcbmNsYXNzIFZlcnRleCBleHRlbmRzIFZ1ZVdyYXBwZXIge1xuICBhY3RpdmVPYmplY3QgPSAndGVhcG90JztcblxuICBvYmplY3RPcHRpb25zID0gW1xuICAgIHsgdGV4dDogJ0N1YmUnLCB2YWx1ZTogJ2N1YmUnIH0sXG4gICAgeyB0ZXh0OiAnU3BoZXJlJywgdmFsdWU6ICdzcGhlcmUnIH0sXG4gICAgeyB0ZXh0OiAnVG9ydXMnLCB2YWx1ZTogJ3RvcnVzJyB9LFxuICAgIHsgdGV4dDogJ1RlYXBvdCcsIHZhbHVlOiAndGVhcG90JyB9XG4gIF07XG5cbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgcmV0dXJuIG5ldyBWZXJ0ZXhBcHAoJ3N1cmZhY2UnLCB0aGlzLmFjdGl2ZU9iamVjdCk7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgdGhpcy5hcHAucm90YXRlTWVzaCgpO1xuICAgIHRoaXMuYXBwLmRyYXcoKTtcbiAgfVxuXG5cbiAgc3dpdGNoT2JqZWN0KG9iamVjdCkge1xuICAgIHRoaXMuYXBwLnNldE9iamVjdChvYmplY3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnRleDtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjQ0YzlhYzcmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IFZlcnRleEFwcCB9IGZyb20gJy4uL3ZlcnRleC9hcHAnO1xuaW1wb3J0IHsgRmxhdFJlbmRlcmVyIH0gZnJvbSAnfi9saWIvM2QnO1xuXG5leHBvcnQgY2xhc3MgRmxhdEFwcCBleHRlbmRzIFZlcnRleEFwcCB7XG4gIGluaXRSZW5kZXJlcigpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBGbGF0UmVuZGVyZXIoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkUmVuZGVyZXIocmVuZGVyZXIsIHRydWUpO1xuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzY0MCcgaGVpZ2h0PSc0ODAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5GbGF0IFBvbHlnb24gUHJvamVjdGlvbjwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgKG5vdCBXZWJHTCkgaW1wbGVtZW50YXRpb24gb2Ygbm9uLXNoYWRlZCBwb2x5Z29uIHByb2plY3Rpb24uPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItZm9ybS1ncm91cD5cbiAgICAgICAgICA8Yi1mb3JtLXJhZGlvLWdyb3VwXG4gICAgICAgICAgICA6b3B0aW9ucz1cIm9iamVjdE9wdGlvbnNcIlxuICAgICAgICAgICAgdi1tb2RlbD1cImFjdGl2ZU9iamVjdFwiXG4gICAgICAgICAgICBidXR0b25zXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgQGNoYW5nZT1cInN3aXRjaE9iamVjdFwiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvYi1mb3JtLXJhZGlvLWdyb3VwPlxuICAgICAgICA8L2ItZm9ybS1ncm91cD5cbiAgICAgIDwvYi1jYXJkPlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVmVydGV4IGZyb20gJy4uL3ZlcnRleCc7XG5pbXBvcnQgeyBGbGF0QXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBGbGF0IGV4dGVuZHMgVmVydGV4IHtcbiAgYWN0aXZlT2JqZWN0ID0gJ3RvcnVzJztcblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICByZXR1cm4gbmV3IEZsYXRBcHAoJ3N1cmZhY2UnLCB0aGlzLmFjdGl2ZU9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmxhdDtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzY4NTc1NDkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI2NDBcIixcImhlaWdodFwiOlwiNDgwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJGbGF0IFNoYWRpbmdcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1mb3JtLWdyb3VwJyxbX2MoJ2ItZm9ybS1yYWRpby1ncm91cCcse2F0dHJzOntcIm9wdGlvbnNcIjpfdm0ub2JqZWN0T3B0aW9ucyxcImJ1dHRvbnNcIjpcIlwiLFwic2l6ZVwiOlwic21cIn0sb246e1wiY2hhbmdlXCI6X3ZtLnN3aXRjaE9iamVjdH0sbW9kZWw6e3ZhbHVlOihfdm0uYWN0aXZlT2JqZWN0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmFjdGl2ZU9iamVjdD0kJHZ9LGV4cHJlc3Npb246XCJhY3RpdmVPYmplY3RcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NoYWRpbmcjRmxhdF9zaGFkaW5nXCJ9fSxbX3ZtLl92KFwiZmxhdCBzaGFkaW5nLlwiKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgVmVydGV4QXBwIH0gZnJvbSAnLi4vdmVydGV4L2FwcCc7XG5pbXBvcnQgeyBGbGF0U2hhZGVyUmVuZGVyZXIgfSBmcm9tICd+L2xpYi8zZCc7XG5cbmV4cG9ydCBjbGFzcyBGbGF0U2hhZGluZ0FwcCBleHRlbmRzIFZlcnRleEFwcCB7XG4gIGluaXRSZW5kZXJlcigpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBGbGF0U2hhZGVyUmVuZGVyZXIoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkUmVuZGVyZXIocmVuZGVyZXIsIHRydWUpO1xuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzY0MCcgaGVpZ2h0PSc0ODAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5GbGF0IFNoYWRpbmc8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIDxhIGhyZWY9J2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NoYWRpbmcjRmxhdF9zaGFkaW5nJz5mbGF0IHNoYWRpbmcuPC9hPjwvcD5cblxuICAgICAgPGItY2FyZCBzdWItdGl0bGU9XCJPcHRpb25zXCIgY2xhc3M9XCJvcHRpb25zXCI+XG4gICAgICAgIDxiLWZvcm0tZ3JvdXA+XG4gICAgICAgICAgPGItZm9ybS1yYWRpby1ncm91cFxuICAgICAgICAgICAgOm9wdGlvbnM9XCJvYmplY3RPcHRpb25zXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJhY3RpdmVPYmplY3RcIlxuICAgICAgICAgICAgYnV0dG9uc1xuICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgIEBjaGFuZ2U9XCJzd2l0Y2hPYmplY3RcIlxuICAgICAgICAgID5cbiAgICAgICAgICA8L2ItZm9ybS1yYWRpby1ncm91cD5cbiAgICAgICAgPC9iLWZvcm0tZ3JvdXA+XG4gICAgICA8L2ItY2FyZD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZlcnRleCBmcm9tICcuLi92ZXJ0ZXgnO1xuaW1wb3J0IHsgRmxhdFNoYWRpbmdBcHAgfSBmcm9tICcuL2FwcCc7XG5cbkBDb21wb25lbnRcbmNsYXNzIEZsYXRTaGFkaW5nIGV4dGVuZHMgVmVydGV4IHtcbiAgYWN0aXZlT2JqZWN0ID0gJ3RvcnVzJztcblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICByZXR1cm4gbmV3IEZsYXRTaGFkaW5nQXBwKCdzdXJmYWNlJywgdGhpcy5hY3RpdmVPYmplY3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsYXRTaGFkaW5nO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00MDQ2ZDFlOSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjY0MFwiLFwiaGVpZ2h0XCI6XCI0ODBcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIkdvdXJhdWQgU2hhZGluZ1wiKV0pLF92bS5fdihcIiBcIiksX3ZtLl9tKDApLF92bS5fdihcIiBcIiksX2MoJ2ItY2FyZCcse3N0YXRpY0NsYXNzOlwib3B0aW9uc1wiLGF0dHJzOntcInN1Yi10aXRsZVwiOlwiT3B0aW9uc1wifX0sW19jKCdiLWZvcm0tZ3JvdXAnLFtfYygnYi1mb3JtLXJhZGlvLWdyb3VwJyx7YXR0cnM6e1wib3B0aW9uc1wiOl92bS5vYmplY3RPcHRpb25zLFwiYnV0dG9uc1wiOlwiXCIsXCJzaXplXCI6XCJzbVwifSxvbjp7XCJjaGFuZ2VcIjpfdm0uc3dpdGNoT2JqZWN0fSxtb2RlbDp7dmFsdWU6KF92bS5hY3RpdmVPYmplY3QpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uYWN0aXZlT2JqZWN0PSQkdn0sZXhwcmVzc2lvbjpcImFjdGl2ZU9iamVjdFwifX0pXSwxKV0sMSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3AnLFtfdm0uX3YoXCJQdXJlIEphdmFTY3JpcHQgKG5vdCBXZWJHTCkgaW1wbGVtZW50YXRpb24gb2YgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR291cmF1ZF9zaGFkaW5nXCJ9fSxbX3ZtLl92KFwiR291cmF1ZCBzaGFkaW5nLlwiKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgVmVydGV4QXBwIH0gZnJvbSAnLi4vdmVydGV4L2FwcCc7XG5pbXBvcnQgeyBHb3VyYXVkU2hhZGVyUmVuZGVyZXIgfSBmcm9tICd+L2xpYi8zZCc7XG5cbmV4cG9ydCBjbGFzcyBHb3VyYXVkU2hhZGluZ0FwcCBleHRlbmRzIFZlcnRleEFwcCB7XG4gIGluaXRSZW5kZXJlcigpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBHb3VyYXVkU2hhZGVyUmVuZGVyZXIoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkUmVuZGVyZXIocmVuZGVyZXIsIHRydWUpO1xuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzY0MCcgaGVpZ2h0PSc0ODAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5Hb3VyYXVkIFNoYWRpbmc8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIDxhIGhyZWY9J2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dvdXJhdWRfc2hhZGluZyc+R291cmF1ZCBzaGFkaW5nLjwvYT48L3A+XG5cbiAgICAgIDxiLWNhcmQgc3ViLXRpdGxlPVwiT3B0aW9uc1wiIGNsYXNzPVwib3B0aW9uc1wiPlxuICAgICAgICA8Yi1mb3JtLWdyb3VwPlxuICAgICAgICAgIDxiLWZvcm0tcmFkaW8tZ3JvdXBcbiAgICAgICAgICAgIDpvcHRpb25zPVwib2JqZWN0T3B0aW9uc1wiXG4gICAgICAgICAgICB2LW1vZGVsPVwiYWN0aXZlT2JqZWN0XCJcbiAgICAgICAgICAgIGJ1dHRvbnNcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBAY2hhbmdlPVwic3dpdGNoT2JqZWN0XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgPC9iLWZvcm0tcmFkaW8tZ3JvdXA+XG4gICAgICAgIDwvYi1mb3JtLWdyb3VwPlxuICAgICAgPC9iLWNhcmQ+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWZXJ0ZXggZnJvbSAnLi4vdmVydGV4JztcbmltcG9ydCB7IEdvdXJhdWRTaGFkaW5nQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBHb3VyYXVkU2hhZGluZyBleHRlbmRzIFZlcnRleCB7XG4gIGFjdGl2ZU9iamVjdCA9ICd0b3J1cyc7XG5cbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgcmV0dXJuIG5ldyBHb3VyYXVkU2hhZGluZ0FwcCgnc3VyZmFjZScsIHRoaXMuYWN0aXZlT2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb3VyYXVkU2hhZGluZztcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzI3NWM1OTImXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI2NDBcIixcImhlaWdodFwiOlwiNDgwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJUZXh0dXJlIE1hcHBpbmdcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1mb3JtLWdyb3VwJyxbX2MoJ2ItZm9ybS1yYWRpby1ncm91cCcse2F0dHJzOntcIm9wdGlvbnNcIjpfdm0ub2JqZWN0T3B0aW9ucyxcImJ1dHRvbnNcIjpcIlwiLFwic2l6ZVwiOlwic21cIn0sb246e1wiY2hhbmdlXCI6X3ZtLnN3aXRjaE9iamVjdH0sbW9kZWw6e3ZhbHVlOihfdm0uYWN0aXZlT2JqZWN0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmFjdGl2ZU9iamVjdD0kJHZ9LGV4cHJlc3Npb246XCJhY3RpdmVPYmplY3RcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RleHR1cmVfbWFwcGluZ1wifX0sW192bS5fdihcInRleHR1cmUgbWFwcGluZy5cIildKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IFZlcnRleEFwcCB9IGZyb20gJy4uL3ZlcnRleC9hcHAnO1xuaW1wb3J0IHsgVGV4dHVyZVJlbmRlcmVyIH0gZnJvbSAnfi9saWIvM2QnO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZU1hcHBpbmdBcHAgZXh0ZW5kcyBWZXJ0ZXhBcHAge1xuICBpbml0UmVuZGVyZXIoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVGV4dHVyZVJlbmRlcmVyKCk7XG5cbiAgICB0aGlzLnNjZW5lLmFkZFJlbmRlcmVyKHJlbmRlcmVyLCB0cnVlKTtcbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDgwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+VGV4dHVyZSBNYXBwaW5nPC9oMj5cbiAgICAgIDxwPlB1cmUgSmF2YVNjcmlwdCAobm90IFdlYkdMKSBpbXBsZW1lbnRhdGlvbiBvZiA8YSBocmVmPSdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UZXh0dXJlX21hcHBpbmcnPnRleHR1cmUgbWFwcGluZy48L2E+PC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItZm9ybS1ncm91cD5cbiAgICAgICAgICA8Yi1mb3JtLXJhZGlvLWdyb3VwXG4gICAgICAgICAgICA6b3B0aW9ucz1cIm9iamVjdE9wdGlvbnNcIlxuICAgICAgICAgICAgdi1tb2RlbD1cImFjdGl2ZU9iamVjdFwiXG4gICAgICAgICAgICBidXR0b25zXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgQGNoYW5nZT1cInN3aXRjaE9iamVjdFwiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvYi1mb3JtLXJhZGlvLWdyb3VwPlxuICAgICAgICA8L2ItZm9ybS1ncm91cD5cbiAgICAgIDwvYi1jYXJkPlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVmVydGV4IGZyb20gJy4uL3ZlcnRleCc7XG5pbXBvcnQgeyBUZXh0dXJlTWFwcGluZ0FwcCB9IGZyb20gJy4vYXBwJztcblxuQENvbXBvbmVudFxuY2xhc3MgVGV4dHVyZU1hcHBpbmcgZXh0ZW5kcyBWZXJ0ZXgge1xuICBhY3RpdmVPYmplY3QgPSAndG9ydXMnO1xuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIHJldHVybiBuZXcgVGV4dHVyZU1hcHBpbmdBcHAoJ3N1cmZhY2UnLCB0aGlzLmFjdGl2ZU9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dHVyZU1hcHBpbmc7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ3Nzk1MTFhJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJyb3dcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbC1tZC0xMlwifSxbX2MoJ2NhbnZhcycse2F0dHJzOntcImlkXCI6XCJzdXJmYWNlXCIsXCJ3aWR0aFwiOlwiNjQwXCIsXCJoZWlnaHRcIjpcIjQ4MFwifX0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6XCJzdWJ0aXRsZVwifSxbX3ZtLl92KFwiV2lyZWZyYW1lIFByb2plY3Rpb25cIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1mb3JtLWdyb3VwJyxbX2MoJ2ItZm9ybS1yYWRpby1ncm91cCcse2F0dHJzOntcIm9wdGlvbnNcIjpfdm0ub2JqZWN0T3B0aW9ucyxcImJ1dHRvbnNcIjpcIlwiLFwic2l6ZVwiOlwic21cIn0sb246e1wiY2hhbmdlXCI6X3ZtLnN3aXRjaE9iamVjdH0sbW9kZWw6e3ZhbHVlOihfdm0uYWN0aXZlT2JqZWN0KSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmFjdGl2ZU9iamVjdD0kJHZ9LGV4cHJlc3Npb246XCJhY3RpdmVPYmplY3RcIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IChub3QgV2ViR0wpIGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dpcmUtZnJhbWVfbW9kZWxcIn19LFtfdm0uX3YoXCJ3aXJlZnJhbWUgcHJvamVjdGlvbi5cIildKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IFZlcnRleEFwcCB9IGZyb20gJy4uL3ZlcnRleC9hcHAnO1xuaW1wb3J0IHsgV2lyZWZyYW1lUmVuZGVyZXIgfSBmcm9tICd+L2xpYi8zZCc7XG5cbmV4cG9ydCBjbGFzcyBXaXJlZnJhbWVBcHAgZXh0ZW5kcyBWZXJ0ZXhBcHAge1xuICBpbml0UmVuZGVyZXIoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgV2lyZWZyYW1lUmVuZGVyZXIoKTtcblxuICAgIHRoaXMuc2NlbmUuYWRkUmVuZGVyZXIocmVuZGVyZXIsIHRydWUpO1xuICB9XG59XG5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICA8ZGl2IGNsYXNzPSdjb2wtbWQtMTInPlxuICAgICAgPGNhbnZhcyBpZD0nc3VyZmFjZScgd2lkdGg9JzY0MCcgaGVpZ2h0PSc0ODAnPjwvY2FudmFzPlxuXG4gICAgICA8aDIgY2xhc3M9J3N1YnRpdGxlJz5XaXJlZnJhbWUgUHJvamVjdGlvbjwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgKG5vdCBXZWJHTCkgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj0naHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2lyZS1mcmFtZV9tb2RlbCc+d2lyZWZyYW1lIHByb2plY3Rpb24uPC9hPjwvcD5cblxuICAgICAgPGItY2FyZCBzdWItdGl0bGU9XCJPcHRpb25zXCIgY2xhc3M9XCJvcHRpb25zXCI+XG4gICAgICAgIDxiLWZvcm0tZ3JvdXA+XG4gICAgICAgICAgPGItZm9ybS1yYWRpby1ncm91cFxuICAgICAgICAgICAgOm9wdGlvbnM9XCJvYmplY3RPcHRpb25zXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJhY3RpdmVPYmplY3RcIlxuICAgICAgICAgICAgYnV0dG9uc1xuICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgIEBjaGFuZ2U9XCJzd2l0Y2hPYmplY3RcIlxuICAgICAgICAgID5cbiAgICAgICAgICA8L2ItZm9ybS1yYWRpby1ncm91cD5cbiAgICAgICAgPC9iLWZvcm0tZ3JvdXA+XG4gICAgICA8L2ItY2FyZD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZlcnRleCBmcm9tICcuLi92ZXJ0ZXgnO1xuaW1wb3J0IHsgV2lyZWZyYW1lQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBXaXJlZnJhbWUgZXh0ZW5kcyBWZXJ0ZXgge1xuICBhY3RpdmVPYmplY3QgPSAndGVhcG90JztcblxuICBpbnN0YW50aWF0ZUFwcCgpIHtcbiAgICByZXR1cm4gbmV3IFdpcmVmcmFtZUFwcCgnc3VyZmFjZScsIHRoaXMuYWN0aXZlT2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXaXJlZnJhbWU7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM2OWI0NGYzJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJyb3dcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbC1tZC0xMlwifSxbX2MoJ2NhbnZhcycse2F0dHJzOntcImlkXCI6XCJzdXJmYWNlXCIsXCJ3aWR0aFwiOlwiNjQwXCIsXCJoZWlnaHRcIjpcIjQwMFwifX0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6XCJzdWJ0aXRsZVwifSxbX3ZtLl92KFwiTWFuZGVsYnJvdCBTZXRcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIlJlc29sdXRpb25cIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjFcIixcIm1heFwiOlwiMTAwXCJ9LG9uOntcInVwZGF0ZVwiOl92bS51cGRhdGVJdGVyYXRpb25zfSxtb2RlbDp7dmFsdWU6KF92bS5pdGVyYXRpb25zKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLml0ZXJhdGlvbnM9JCR2fSxleHByZXNzaW9uOlwiaXRlcmF0aW9uc1wifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWlucHV0LWdyb3VwJyx7c3RhdGljQ2xhc3M6XCJtYi0zXCIsYXR0cnM6e1wicHJlcGVuZFwiOlwiWm9vbVwiLFwic2l6ZVwiOlwic21cIn19LFtfYygnYi1mb3JtLWlucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwicmFuZ2VcIixcIm1pblwiOlwiMTAwXCIsXCJtYXhcIjpcIjEwMDBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZVpvb219LG1vZGVsOnt2YWx1ZTooX3ZtLnpvb20pLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uem9vbT0kJHZ9LGV4cHJlc3Npb246XCJ6b29tXCJ9fSldLDEpXSwxKV0sMSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygncCcsW192bS5fdihcIkEgcHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFuZGVsYnJvdF9zZXRcIn19LFtfdm0uX3YoXCJNYW5kZWxicm90IHNldFwiKV0pLF92bS5fdihcIiBmcmFjdGFsIHNoYXBlLlwiKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnfi9saWIvY29yZS9jb2xvcic7XG5pbXBvcnQgeyBOb3JtYWxpemVkQ29sb3IgfSBmcm9tICd+L2xpYi9jb3JlL25vcm1hbGl6ZWQtY29sb3InO1xuXG5leHBvcnQgY2xhc3MgTWFuZGVsYnJvdEFwcCBleHRlbmRzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldENhbnZhc0lkLCBtYXhJdGVyYXRpb25zID0gNDAsIHpvb20gPSAxKSB7XG4gICAgc3VwZXIodGFyZ2V0Q2FudmFzSWQpO1xuXG4gICAgdGhpcy5tYXhJdGVyYXRpb25zID0gbWF4SXRlcmF0aW9ucztcbiAgICB0aGlzLnpvb20gPSB6b29tO1xuXG4gICAgdGhpcy5jYWxjdWxhdGVQYWxldHRlKCk7XG4gIH1cblxuXG4gIGRyYXcoKSB7XG4gICAgdGhpcy5zdGFydERyYXdpbmcoKTtcblxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldERhdGEoKTtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMudmlydHVhbFN1cmZhY2UuZ2V0V2lkdGgoKTtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldEhlaWdodCgpO1xuXG4gICAgY29uc3QgbWF4SXRlcmF0aW9ucyA9IHRoaXMubWF4SXRlcmF0aW9ucztcblxuICAgIGNvbnN0IHNjYWxlWCA9IDMuNSAvIHRoaXMuem9vbTtcbiAgICBjb25zdCBzY2FsZVkgPSAyLjAgLyB0aGlzLnpvb207XG5cbiAgICBjb25zdCB5QWRkZXIgPSAtdGhpcy56b29tIC8gNDA7XG4gICAgY29uc3QgeEFkZGVyID0gLXRoaXMuem9vbSAvIDI0O1xuXG4gICAgY29uc3QgcHJlY2FsY0NvbG9ycyA9IHRoaXMucHJlY2FsY0NvbG9ycztcblxuICAgIGNvbnN0IHhQb3MgPSAoLTAuNzUgKyB4QWRkZXIpIC0gKHNjYWxlWCAvIDIpO1xuICAgIGNvbnN0IHlQb3MgPSAoMCArIHlBZGRlcikgLSAoc2NhbGVZIC8gMik7XG5cbiAgICBsZXQgcHRyID0gMDtcblxuICAgIGZvciAobGV0IHB5ID0gMDsgcHkgPCBoZWlnaHQ7IHB5KyspIHtcbiAgICAgIGZvciAobGV0IHB4ID0gMDsgcHggPCB3aWR0aDsgcHgrKykge1xuICAgICAgICBjb25zdCB4MCA9IHhQb3MgKyAocHggLyB3aWR0aCkgKiBzY2FsZVg7XG4gICAgICAgIGNvbnN0IHkwID0geVBvcyArIChweSAvIGhlaWdodCkgKiBzY2FsZVk7XG5cbiAgICAgICAgbGV0IHggPSAwLjA7XG4gICAgICAgIGxldCB5ID0gMC4wO1xuICAgICAgICBsZXQgeHggPSB4ICogeDtcbiAgICAgICAgbGV0IHl5ID0geSAqIHk7XG4gICAgICAgIGxldCBpdGVyYXRpb24gPSAwO1xuXG4gICAgICAgIHdoaWxlICgoeHggKyB5eSA8IDQpICYmIChpdGVyYXRpb24gPCBtYXhJdGVyYXRpb25zKSkge1xuICAgICAgICAgIHkgPSAyICogeCAqIHkgKyB5MDtcbiAgICAgICAgICB4ID0geHggLSB5eSArIHgwO1xuXG4gICAgICAgICAgaXRlcmF0aW9uKys7XG5cbiAgICAgICAgICB4eCA9IHggKiB4O1xuICAgICAgICAgIHl5ID0geSAqIHk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2xJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heEl0ZXJhdGlvbnMgLSAxLCBpdGVyYXRpb24pKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBwcmVjYWxjQ29sb3JzW2NvbEluZGV4XTtcblxuICAgICAgICBkYXRhW3B0cisrXSA9IGNvbG9yLnI7XG4gICAgICAgIGRhdGFbcHRyKytdID0gY29sb3IuZztcbiAgICAgICAgZGF0YVtwdHIrK10gPSBjb2xvci5iO1xuICAgICAgICBwdHIrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVuZERyYXdpbmcodHJ1ZSk7XG4gIH1cblxuXG4gIGNhbGN1bGF0ZVBhbGV0dGUoKSB7XG4gICAgdGhpcy5wcmVjYWxjQ29sb3JzID0gbmV3IEFycmF5KHRoaXMubWF4SXRlcmF0aW9ucyk7XG5cbiAgICBjb25zdCBkZWdyZWVzID0gMTYwO1xuICAgIGNvbnN0IGRlZ3JlZU9mZnNldCA9IDQ1O1xuXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWF4SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICBjb25zdCBub3JtYWwgPSBNYXRoLmNvcyhpIC8gdGhpcy5tYXhJdGVyYXRpb25zICogTWF0aC5QSSk7XG4gICAgICBjb25zdCBodWUgPSAobm9ybWFsICogZGVncmVlcykgKyBkZWdyZWVPZmZzZXQ7XG5cbiAgICAgIGNvbnN0IGNvbCA9IG5ldyBOb3JtYWxpemVkQ29sb3IoKTtcblxuICAgICAgLy8gTm9ybWFsaXplZENvbG9yLmhzdlRvUmdiKCBodWUsIDEuMCwgMS4wLCBjb2wgKTtcbiAgICAgIE5vcm1hbGl6ZWRDb2xvci5oc3ZUb1JnYihodWUsIG5vcm1hbCAvIDIsIG5vcm1hbCwgY29sKTtcblxuICAgICAgY29uc3QgZmluYWxDb2xvciA9IG5ldyBDb2xvcigpO1xuXG4gICAgICBjb2wuZ2V0Q29sb3IoZmluYWxDb2xvcik7XG4gICAgICB0aGlzLnByZWNhbGNDb2xvcnNbaV0gPSBmaW5hbENvbG9yO1xuICAgIH1cbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDAwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+TWFuZGVsYnJvdCBTZXQ8L2gyPlxuICAgICAgPHA+QSBwdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj0naHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYW5kZWxicm90X3NldCc+TWFuZGVsYnJvdCBzZXQ8L2E+IGZyYWN0YWwgc2hhcGUuPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIlJlc29sdXRpb25cIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J2l0ZXJhdGlvbnMnIHR5cGU9J3JhbmdlJyBtaW49JzEnIG1heD0nMTAwJyBAdXBkYXRlPVwidXBkYXRlSXRlcmF0aW9uc1wiIC8+XG4gICAgICAgIDwvYi1pbnB1dC1ncm91cD5cblxuICAgICAgICA8Yi1pbnB1dC1ncm91cCBwcmVwZW5kPVwiWm9vbVwiIHNpemU9XCJzbVwiIGNsYXNzPVwibWItM1wiPlxuICAgICAgICAgIDxiLWZvcm0taW5wdXQgdi1tb2RlbD0nem9vbScgdHlwZT0ncmFuZ2UnIG1pbj0nMTAwJyBtYXg9JzEwMDAnIEB1cGRhdGU9XCJ1cGRhdGVab29tXCIgLz5cbiAgICAgICAgPC9iLWlucHV0LWdyb3VwPlxuICAgICAgPC9iLWNhcmQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBNYW5kZWxicm90QXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBNYW5kZWxicm90IGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIGl0ZXJhdGlvbnMgPSA0MDtcblxuICB6b29tID0gMTAwO1xuXG5cbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgY29uc3QgYXBwID0gbmV3IE1hbmRlbGJyb3RBcHAoJ3N1cmZhY2UnLCB0aGlzLml0ZXJhdGlvbnMsIHRoaXMuem9vbSAvIDEwMCk7XG5cbiAgICBhcHAuY2FsY3VsYXRlUGFsZXR0ZSgpO1xuICAgIGFwcC5kcmF3KCk7XG5cbiAgICByZXR1cm4gYXBwO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG5cbiAgdXBkYXRlSXRlcmF0aW9ucyh2YWwpIHtcbiAgICB0aGlzLmFwcC5tYXhJdGVyYXRpb25zID0gdmFsO1xuXG4gICAgdGhpcy5hcHAuY2FsY3VsYXRlUGFsZXR0ZSgpO1xuICAgIHRoaXMuYXBwLmRyYXcoKTtcbiAgfVxuXG5cbiAgdXBkYXRlWm9vbSh2YWwpIHtcbiAgICB0aGlzLmFwcC56b29tID0gdmFsIC8gMTAwLjA7XG4gICAgdGhpcy5hcHAuZHJhdygpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hbmRlbGJyb3Q7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFiYjQ0OGM4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJyb3dcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbC1tZC0xMlwifSxbX2MoJ2NhbnZhcycse2F0dHJzOntcImlkXCI6XCJzdXJmYWNlXCIsXCJ3aWR0aFwiOlwiNjQwXCIsXCJoZWlnaHRcIjpcIjQ4MFwifX0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyx7c3RhdGljQ2xhc3M6XCJzdWJ0aXRsZVwifSxbX3ZtLl92KFwiU2llcnBpxYRza2kgVHJpYW5nbGVcIildKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdiLWNhcmQnLHtzdGF0aWNDbGFzczpcIm9wdGlvbnNcIixhdHRyczp7XCJzdWItdGl0bGVcIjpcIk9wdGlvbnNcIn19LFtfYygnYi1pbnB1dC1ncm91cCcse3N0YXRpY0NsYXNzOlwibWItM1wiLGF0dHJzOntcInByZXBlbmRcIjpcIlJlc29sdXRpb25cIixcInNpemVcIjpcInNtXCJ9fSxbX2MoJ2ItZm9ybS1pbnB1dCcse2F0dHJzOntcInR5cGVcIjpcInJhbmdlXCIsXCJtaW5cIjpcIjFcIixcIm1heFwiOlwiMzBcIn0sb246e1widXBkYXRlXCI6X3ZtLnVwZGF0ZVJlc29sdXRpb259LG1vZGVsOnt2YWx1ZTooX3ZtLnJlc29sdXRpb24pLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0ucmVzb2x1dGlvbj0kJHZ9LGV4cHJlc3Npb246XCJyZXNvbHV0aW9uXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2ItaW5wdXQtZ3JvdXAnLHtzdGF0aWNDbGFzczpcIm1iLTNcIixhdHRyczp7XCJwcmVwZW5kXCI6XCJab29tXCIsXCJzaXplXCI6XCJzbVwifX0sW19jKCdiLWZvcm0taW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwibWluXCI6XCIxMDBcIixcIm1heFwiOlwiNTAwMFwifSxvbjp7XCJ1cGRhdGVcIjpfdm0udXBkYXRlWm9vbX0sbW9kZWw6e3ZhbHVlOihfdm0uem9vbSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS56b29tPSQkdn0sZXhwcmVzc2lvbjpcInpvb21cIn19KV0sMSldLDEpXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdwJyxbX3ZtLl92KFwiQSBwdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TaWVycGklQzUlODRza2lfdHJpYW5nbGVcIn19LFtfdm0uX3YoXCJTaWVycGnFhHNraVxcbiAgICAgIHRyaWFuZ2xlXCIpXSksX3ZtLl92KFwiLlwiKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IERyYXcgfSBmcm9tICd+L2xpYi9jb3JlL2RyYXcnO1xuaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJ34vbGliL2NvcmUvcG9pbnQtMmQnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICd+L2xpYi9jb3JlL2NvbG9yJztcbmltcG9ydCB7IE5vcm1hbGl6ZWRDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvbm9ybWFsaXplZC1jb2xvcic7XG5cbmV4cG9ydCBjbGFzcyBTaWVycGluc2tpQXBwIGV4dGVuZHMgQXBwIHtcbiAgY29uc3RydWN0b3IodGFyZ2V0Q2FudmFzSWQsIHpvb20gPSAxLCBtYXhJdGVyYXRpb25zID0gMTUpIHtcbiAgICBzdXBlcih0YXJnZXRDYW52YXNJZCk7XG5cbiAgICB0aGlzLnpvb20gPSB6b29tO1xuICAgIHRoaXMubWF4SXRlcmF0aW9ucyA9IG1heEl0ZXJhdGlvbnM7XG5cbiAgICB0aGlzLmNhbGN1bGF0ZVBhbGV0dGUoKTtcbiAgfVxuXG5cbiAgZHJhd1JlY3Vyc2l2ZShzaWRlTGVuZ3RoLCBwb3NDZW50ZXIsIGNhbGN1bGF0ZWRUcmlhbmdsZUhlaWdodCwgZGVwdGgpIHtcbiAgICBpZiAoc2lkZUxlbmd0aCA8IDAuMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZGVMZW5ndGhIYWxmID0gc2lkZUxlbmd0aCAvIDI7XG4gICAgY29uc3QgdHJpYW5nbGVIZWlnaHQgPSBjYWxjdWxhdGVkVHJpYW5nbGVIZWlnaHQgfHwgTWF0aC5zcXJ0KFxuICAgICAgKHNpZGVMZW5ndGggKiBzaWRlTGVuZ3RoKSAtIChzaWRlTGVuZ3RoSGFsZiAqIHNpZGVMZW5ndGhIYWxmKSk7XG4gICAgY29uc3QgdHJpYW5nbGVIYWxmID0gdHJpYW5nbGVIZWlnaHQgLyAyO1xuXG4gICAgaWYgKFxuICAgICAgKHBvc0NlbnRlci54ICsgc2lkZUxlbmd0aEhhbGYgPCAwKSB8fFxuICAgICAgKHBvc0NlbnRlci54IC0gc2lkZUxlbmd0aEhhbGYgPiB0aGlzLnZpcnR1YWxTdXJmYWNlLmdldFdpZHRoKCkpIHx8XG4gICAgICAocG9zQ2VudGVyLnkgKyBzaWRlTGVuZ3RoSGFsZiA8IDApIHx8XG4gICAgICAocG9zQ2VudGVyLnkgLSBzaWRlTGVuZ3RoSGFsZiA+IHRoaXMudmlydHVhbFN1cmZhY2UuZ2V0V2lkdGgoKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZXB0aCA9IGRlcHRoIHx8IDA7XG5cbiAgICBjb25zdCBwb3NBID0gbmV3IFBvaW50MkQocG9zQ2VudGVyLnggLSBzaWRlTGVuZ3RoSGFsZiwgcG9zQ2VudGVyLnkgKyB0cmlhbmdsZUhhbGYpO1xuICAgIGNvbnN0IHBvc0IgPSBuZXcgUG9pbnQyRChwb3NDZW50ZXIueCArIHNpZGVMZW5ndGhIYWxmLCBwb3NDZW50ZXIueSArIHRyaWFuZ2xlSGFsZik7XG4gICAgY29uc3QgcG9zQyA9IG5ldyBQb2ludDJEKHBvc0NlbnRlci54LCBwb3NDZW50ZXIueSAtIHRyaWFuZ2xlSGFsZik7XG4gICAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3IodGhpcy5wcmVjYWxjQ29sb3JzW2RlcHRoXSk7XG5cbiAgICBjb2xvci5hID0gTWF0aC5yb3VuZCgwLjUgKiAodGhpcy5tYXhJdGVyYXRpb25zIC0gZGVwdGgpIC8gdGhpcy5tYXhJdGVyYXRpb25zICogMjU1KTtcblxuICAgIERyYXcuYmxlbmRQaXhlbChwb3NBLCBjb2xvcik7XG4gICAgRHJhdy5ibGVuZFBpeGVsKHBvc0IsIGNvbG9yKTtcbiAgICBEcmF3LmJsZW5kUGl4ZWwocG9zQywgY29sb3IpO1xuXG4gICAgaWYgKGRlcHRoICsgMSA8IHRoaXMubWF4SXRlcmF0aW9ucykge1xuICAgICAgY29uc3QgdHJpYW5nbGVEb3VibGVIYWxmID0gdHJpYW5nbGVIYWxmIC8gMjtcbiAgICAgIGNvbnN0IHNpZGVEb3VibGVIYWxmID0gc2lkZUxlbmd0aEhhbGYgLyAyO1xuXG4gICAgICB0aGlzLmRyYXdSZWN1cnNpdmUoc2lkZUxlbmd0aEhhbGYsIG5ldyBQb2ludDJEKHBvc0NlbnRlci54IC0gc2lkZURvdWJsZUhhbGYsIHBvc0NlbnRlci55ICsgdHJpYW5nbGVEb3VibGVIYWxmKSxcbiAgICAgICAgdHJpYW5nbGVIYWxmLCBkZXB0aCArIDEpO1xuICAgICAgdGhpcy5kcmF3UmVjdXJzaXZlKHNpZGVMZW5ndGhIYWxmLCBuZXcgUG9pbnQyRChwb3NDZW50ZXIueCArIHNpZGVEb3VibGVIYWxmLCBwb3NDZW50ZXIueSArIHRyaWFuZ2xlRG91YmxlSGFsZiksXG4gICAgICAgIHRyaWFuZ2xlSGFsZiwgZGVwdGggKyAxKTtcbiAgICAgIHRoaXMuZHJhd1JlY3Vyc2l2ZShzaWRlTGVuZ3RoSGFsZiwgbmV3IFBvaW50MkQocG9zQ2VudGVyLngsIHBvc0NlbnRlci55IC0gdHJpYW5nbGVEb3VibGVIYWxmKSwgdHJpYW5nbGVIYWxmLFxuICAgICAgICBkZXB0aCArIDEpO1xuICAgIH1cbiAgfTtcblxuXG4gIGRyYXcoKSB7XG4gICAgdGhpcy5zdGFydERyYXdpbmcoKTtcblxuICAgIERyYXcuYmdDb2xvci5zZXQoMjIwLCAyMzAsIDI0MCk7XG4gICAgRHJhdy5jb2xvci5zZXQoMzIsIDI1NSwgMzIpO1xuXG4gICAgRHJhdy5zZXRTdXJmYWNlKHRoaXMudmlydHVhbFN1cmZhY2UpO1xuICAgIERyYXcuY2xlYXIoKTtcblxuICAgIGNvbnN0IHNpZGVMZW5ndGggPSBNYXRoLm1pbih0aGlzLmNhbnZhcy5oZWlnaHQsIHRoaXMuY2FudmFzLndpZHRoKSAqIHRoaXMuem9vbTtcbiAgICBjb25zdCBvZmZzZXQgPSBuZXcgUG9pbnQyRCh0aGlzLnpvb20gKiAxMCwgdGhpcy56b29tICogMyk7XG4gICAgY29uc3QgcG9zQ2VudGVyID0gbmV3IFBvaW50MkQodGhpcy5jYW52YXMud2lkdGggLyAyICsgb2Zmc2V0LngsIHRoaXMuY2FudmFzLmhlaWdodCAvIDIgKyBvZmZzZXQueSk7XG5cbiAgICB0aGlzLmRyYXdSZWN1cnNpdmUoc2lkZUxlbmd0aCwgcG9zQ2VudGVyKTtcblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfTtcblxuXG4gIGNhbGN1bGF0ZVBhbGV0dGUoKSB7XG4gICAgdGhpcy5wcmVjYWxjQ29sb3JzID0gbmV3IEFycmF5KHRoaXMubWF4SXRlcmF0aW9ucyk7XG5cbiAgICBjb25zdCBkZWdyZWVzID0gNDU7XG4gICAgY29uc3QgZGVncmVlT2Zmc2V0ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXhJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vcm1hbCA9IE1hdGguY29zKGkgLyB0aGlzLm1heEl0ZXJhdGlvbnMgKiBNYXRoLlBJKTtcbiAgICAgIGNvbnN0IGh1ZSA9IChub3JtYWwgKiBkZWdyZWVzKSArIGRlZ3JlZU9mZnNldDtcblxuICAgICAgY29uc3QgY29sID0gbmV3IE5vcm1hbGl6ZWRDb2xvcigpO1xuXG4gICAgICAvLyBOb3JtYWxpemVkQ29sb3IuaHN2VG9SZ2IoIGh1ZSwgMS4wLCAxLjAsIGNvbCApO1xuICAgICAgTm9ybWFsaXplZENvbG9yLmhzdlRvUmdiKGh1ZSwgaSwgMSwgY29sKTtcblxuICAgICAgY29uc3QgZmluYWxDb2xvciA9IG5ldyBDb2xvcigpO1xuXG4gICAgICBjb2wuZ2V0Q29sb3IoZmluYWxDb2xvcik7XG4gICAgICB0aGlzLnByZWNhbGNDb2xvcnNbaV0gPSBmaW5hbENvbG9yO1xuICAgIH1cbiAgfTtcbn1cblxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDxkaXYgY2xhc3M9J2NvbC1tZC0xMic+XG4gICAgICA8Y2FudmFzIGlkPSdzdXJmYWNlJyB3aWR0aD0nNjQwJyBoZWlnaHQ9JzQ4MCc+PC9jYW52YXM+XG5cbiAgICAgIDxoMiBjbGFzcz0nc3VidGl0bGUnPlNpZXJwacWEc2tpIFRyaWFuZ2xlPC9oMj5cbiAgICAgIDxwPkEgcHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIDxhIGhyZWY9J2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2llcnBpJUM1JTg0c2tpX3RyaWFuZ2xlJz5TaWVycGnFhHNraVxuICAgICAgICB0cmlhbmdsZTwvYT4uPC9wPlxuXG4gICAgICA8Yi1jYXJkIHN1Yi10aXRsZT1cIk9wdGlvbnNcIiBjbGFzcz1cIm9wdGlvbnNcIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIlJlc29sdXRpb25cIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J3Jlc29sdXRpb24nIHR5cGU9J3JhbmdlJyBtaW49JzEnIG1heD0nMzAnIEB1cGRhdGU9XCJ1cGRhdGVSZXNvbHV0aW9uXCIvPlxuICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+XG5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgcHJlcGVuZD1cIlpvb21cIiBzaXplPVwic21cIiBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICA8Yi1mb3JtLWlucHV0IHYtbW9kZWw9J3pvb20nIHR5cGU9J3JhbmdlJyBtaW49JzEwMCcgbWF4PSc1MDAwJyBAdXBkYXRlPVwidXBkYXRlWm9vbVwiLz5cbiAgICAgICAgPC9iLWlucHV0LWdyb3VwPlxuICAgICAgPC9iLWNhcmQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBTaWVycGluc2tpQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBTaWVycGluc2tpIGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIHJlc29sdXRpb24gPSAxNTtcblxuICB6b29tID0gMTAwO1xuXG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIHJldHVybiBuZXcgU2llcnBpbnNraUFwcCgnc3VyZmFjZScsIHRoaXMuem9vbSAvIDEwMCwgdGhpcy5yZXNvbHV0aW9uKTtcbiAgfVxuXG5cbiAgdGljaygpIHtcbiAgICB0aGlzLmFwcC5kcmF3KCk7XG4gIH1cblxuXG4gIHVwZGF0ZVJlc29sdXRpb24odmFsKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHA7XG5cbiAgICBhcHAubWF4SXRlcmF0aW9ucyA9IHZhbDtcblxuICAgIGFwcC5jYWxjdWxhdGVQYWxldHRlKCk7XG4gICAgYXBwLmRyYXcoKTtcbiAgfVxuXG5cbiAgdXBkYXRlWm9vbSh2YWwpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcDtcblxuICAgIGFwcC56b29tID0gdmFsIC8gMTAwLjA7XG4gICAgYXBwLmRyYXcoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaWVycGluc2tpO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZjczNDU0NyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLl9tKDApfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI2NDBcIixcImhlaWdodFwiOlwiNDgwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJJbnRlcnBvbGF0ZWQgVHJpYW5nbGVcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyxbX3ZtLl92KFwiUHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIFwiKSxfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dvdXJhdWRfc2hhZGluZ1wifX0sW192bS5fdihcInRyaWFuZ2xlIHBvbHlnb24gaW50ZXJwb2xhdGlvblwiKV0pLF92bS5fdihcIiAoXCIpLF9jKCdpJyxbX3ZtLl92KFwibm90XCIpXSksX3ZtLl92KFwiIFwiKSxfYygnY29kZScsW192bS5fdihcImNhbnZhcy5wYXRoKClcIildKSxfdm0uX3YoXCIpXCIpXSldKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcblxuaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJ34vbGliL2NvcmUvcG9pbnQtMmQnO1xuaW1wb3J0IHsgRHJhdyB9IGZyb20gJ34vbGliL2NvcmUvZHJhdyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvY29sb3InO1xuLy8gaW1wb3J0IHsgU3VyZmFjZSB9IGZyb20gJ34vbGliL2NvcmUvc3VyZmFjZSc7XG5cblxuZXhwb3J0IGNsYXNzIEludGVycG9sYXRlZFRyaWFuZ2xlQXBwIGV4dGVuZHMgQXBwIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0cnVjdG9yKGNhbnZhc0lkKSB7XG4gICAgc3VwZXIoY2FudmFzSWQpO1xuXG4gICAgLy8gRHJhdy5iZ0NvbG9yLnNldCgyMjAsIDIyMCwgMjIwKTtcbiAgfVxuXG5cbiAgZHJhd1RyaWFuZ2xlKHJhZEFkanVzdG1lbnQsIHBvc1gsIHBvc1ksIHRyaWFuZ2xlKSB7XG4gICAgY29uc3QgdHJhbnNsYXRlZFRyaWFuZ2xlID0gW25ldyBQb2ludDJEKCksIG5ldyBQb2ludDJEKCksIG5ldyBQb2ludDJEKCldO1xuICAgIGNvbnN0IHJhZCA9IHJhZEFkanVzdG1lbnQ7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlW2pdLnggPVxuICAgICAgICBwb3NYICtcbiAgICAgICAgdHJpYW5nbGVbal0ueCAqIE1hdGguY29zKHJhZCkgLSB0cmlhbmdsZVtqXS55ICogTWF0aC5zaW4ocmFkKTtcblxuICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlW2pdLnkgPVxuICAgICAgICBwb3NZICtcbiAgICAgICAgdHJpYW5nbGVbal0ueSAqIE1hdGguY29zKHJhZCkgKyB0cmlhbmdsZVtqXS54ICogTWF0aC5zaW4ocmFkKTtcbiAgICB9XG5cbiAgICBEcmF3LmludGVycG9sYXRlZFRyaWFuZ2xlKFxuICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlWzBdLFxuICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlWzFdLFxuICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlWzJdLFxuICAgICAgbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUpLFxuICAgICAgbmV3IENvbG9yKDI1NSwgMCwgMCksXG4gICAgICBuZXcgQ29sb3IoMCwgMCwgMClcbiAgICApO1xuICB9O1xuXG5cbiAgZHJhdyhyYWQpIHtcbiAgICB0aGlzLnN0YXJ0RHJhd2luZygpO1xuXG4gICAgRHJhdy5iZ0NvbG9yLnNldCgyMjAsIDIzMCwgMjQwKTtcbiAgICBEcmF3LmNsZWFyKCk7XG4gICAgLy8gRHJhdy5jb2xvci5zZXQoMzIsIDI1NSwgMzIpO1xuXG4gICAgdGhpcy5kcmF3VHJpYW5nbGUoXG4gICAgICAvLyA3Ny40NThcbiAgICAgIHJhZFxuICAgICAgLy8gNjEuNzU4XG4gICAgICAvLyAzNi4yMzFcbiAgICAgIC8vIDkuMlxuICAgICAgLy8gOTEuNTAzXG4gICAgICAvLyAgLyoxLjEwOCovLCAzMjAsIDI0MCxcbiAgICAgICwgMzIwLCAyNDAsIC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgW25ldyBQb2ludDJEKDAsIC0xMDApLCBuZXcgUG9pbnQyRCgtMTAwLCAxMDApLCBuZXcgUG9pbnQyRCgxMDAsIDEwMCldXG4gICAgKTtcblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfVxufVxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDxkaXYgY2xhc3M9J2NvbC1tZC0xMic+XG4gICAgICA8Y2FudmFzIGlkPSdzdXJmYWNlJyB3aWR0aD0nNjQwJyBoZWlnaHQ9JzQ4MCc+PC9jYW52YXM+XG5cbiAgICAgIDxoMiBjbGFzcz0nc3VidGl0bGUnPkludGVycG9sYXRlZCBUcmlhbmdsZTwvaDI+XG4gICAgICA8cD5QdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgPGEgaHJlZj1cImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dvdXJhdWRfc2hhZGluZ1wiPnRyaWFuZ2xlIHBvbHlnb24gaW50ZXJwb2xhdGlvbjwvYT4gKDxpPm5vdDwvaT4gPGNvZGU+Y2FudmFzLnBhdGgoKTwvY29kZT4pPC9wPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZ1ZVdyYXBwZXIgZnJvbSAnLi4vLi4vdnVlLXdyYXBwZXInO1xuaW1wb3J0IHsgSW50ZXJwb2xhdGVkVHJpYW5nbGVBcHAgfSBmcm9tICcuL2FwcCc7XG5cbkBDb21wb25lbnRcbmNsYXNzIEludGVycG9sYXRlZFRyaWFuZ2xlIGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG5cbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcnBvbGF0ZWRUcmlhbmdsZUFwcCgnc3VyZmFjZScpO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJhZCA9IChjdXJUaW1lLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwO1xuXG4gICAgdGhpcy5hcHAuZHJhdyhyYWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVycG9sYXRlZFRyaWFuZ2xlO1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MWM0NTI2MSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX3ZtLl9tKDApfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvd1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sLW1kLTEyXCJ9LFtfYygnY2FudmFzJyx7YXR0cnM6e1wiaWRcIjpcInN1cmZhY2VcIixcIndpZHRoXCI6XCI2NDBcIixcImhlaWdodFwiOlwiNDgwXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygnaDInLHtzdGF0aWNDbGFzczpcInN1YnRpdGxlXCJ9LFtfdm0uX3YoXCJMaW5lXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBsaW5lIChcIiksX2MoJ2knLFtfdm0uX3YoXCJub3RcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdjb2RlJyxbX3ZtLl92KFwiY2FudmFzLmxpbmVUbygpXCIpXSksX3ZtLl92KFwiKVwiKV0pXSldKX1dXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICd+L2xpYi9jb3JlL2FwcCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJ34vbGliL2NvcmUvY29sb3InO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gJ34vbGliL2NvcmUvbGluZSc7XG5pbXBvcnQgeyBEcmF3IH0gZnJvbSAnfi9saWIvY29yZS9kcmF3JztcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICd+L2xpYi9jb3JlL3BvaW50LTJkJztcblxuXG5leHBvcnQgY2xhc3MgTGluZUFwcCBleHRlbmRzIEFwcCB7XG4gIGRyYXdMaW5lKHAxLCBwMiwgcmFkKSB7XG4gICAgY29uc3QgbGluZUNvbG9yID0gbmV3IENvbG9yKDMyLCAyNTUsIDMyKTtcbiAgICBjb25zdCBwaXhlbENvbG9yID0gbmV3IENvbG9yKDI1NSwgMCwgMCwgMTI4KTtcblxuICAgIExpbmUuZHJhdyhwMSwgcDIsIGxpbmVDb2xvciwgRHJhdy5nZXRTdXJmYWNlKCkpO1xuICAgIERyYXcuYmxlbmRQaXhlbChwMSwgcGl4ZWxDb2xvcik7XG4gICAgRHJhdy5ibGVuZFBpeGVsKHAyLCBwaXhlbENvbG9yKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZmxvYXR8aW50fE51bWJlcn0geFxuICAgKiBAcGFyYW0ge2Zsb2F0fGludHxOdW1iZXJ9IHlcbiAgICogQHBhcmFtIHtmbG9hdHxpbnR8TnVtYmVyfSBsZW5ndGhcbiAgICogQHBhcmFtIHtmbG9hdHxpbnR8TnVtYmVyfSByYWRcbiAgICovXG4gIHJvdGF0ZUxpbmUoeCwgeSwgbGVuZ3RoLCByYWQpIHtcbiAgICBjb25zdCBsaW5lQ29sb3IgPSBuZXcgQ29sb3IoMjAsIDEyMywgMjU1KTtcbiAgICBjb25zdCBwaXhlbENvbG9yID0gbmV3IENvbG9yKDI1NSwgMjM2LCA3LCAyNTUpO1xuXG4gICAgY29uc3QgbHgxID0gLWxlbmd0aCAvIDI7XG4gICAgY29uc3QgbHgyID0gbGVuZ3RoIC8gMjtcbiAgICBjb25zdCBseTEgPSAwO1xuICAgIGNvbnN0IGx5MiA9IDA7XG5cbiAgICBjb25zdCBwMSA9IG5ldyBQb2ludDJEKFxuICAgICAgeCArIGx4MSAqIE1hdGguY29zKHJhZCkgLSBseTEgKiBNYXRoLnNpbihyYWQpLFxuICAgICAgeSArIGx5MSAqIE1hdGguY29zKHJhZCkgKyBseDEgKiBNYXRoLnNpbihyYWQpXG4gICAgKTtcblxuICAgIGNvbnN0IHAyID0gbmV3IFBvaW50MkQoXG4gICAgICB4ICsgbHgyICogTWF0aC5jb3MocmFkKSAtIGx5MiAqIE1hdGguc2luKHJhZCksXG4gICAgICB5ICsgbHkyICogTWF0aC5jb3MocmFkKSArIGx4MiAqIE1hdGguc2luKHJhZClcbiAgICApO1xuXG4gICAgTGluZS5kcmF3KHAxLCBwMiwgbGluZUNvbG9yLCBEcmF3LmdldFN1cmZhY2UoKSk7XG5cbiAgICBEcmF3LmJsZW5kUGl4ZWwocDEsIHBpeGVsQ29sb3IpO1xuICAgIERyYXcuYmxlbmRQaXhlbChwMiwgcGl4ZWxDb2xvcik7XG4gIH1cblxuICBkcmF3KHJhZCkge1xuICAgIHRoaXMuc3RhcnREcmF3aW5nKCk7XG5cbiAgICBEcmF3LmJnQ29sb3Iuc2V0KDIyMCwgMjMwLCAyNDApO1xuICAgIERyYXcuY2xlYXIoKTtcblxuICAgIHRoaXMucm90YXRlTGluZSgzMjAsIDI0MCwgMjAwLCByYWQpO1xuXG4gICAgLypcbiAgICBkcmF3TGluZSggbmV3IFBvaW50MkQoIDEwLCAyMCApLCBuZXcgUG9pbnQyRCggMzAsIDQwICkgKTtcblxuICAgIGRyYXdMaW5lKCBuZXcgUG9pbnQyRCggMjAwLCAyMDAgKSwgbmV3IFBvaW50MkQoIDUwMCwgMjAwICkgKTtcbiAgICBkcmF3TGluZSggbmV3IFBvaW50MkQoIDIwMCwgMzAwICksIG5ldyBQb2ludDJEKCA1MDAsIDMwMCApICk7XG4gICAgZHJhd0xpbmUoIG5ldyBQb2ludDJEKCAyMDAsIDIwMCApLCBuZXcgUG9pbnQyRCggMjAwLCAzMDAgKSApO1xuICAgIGRyYXdMaW5lKCBuZXcgUG9pbnQyRCggNTAwLCAyMDAgKSwgbmV3IFBvaW50MkQoIDUwMCwgMzAwICkgKTtcblxuICAgIGRyYXdMaW5lKCBuZXcgUG9pbnQyRCggMjAwLCAyMDAgKSwgbmV3IFBvaW50MkQoIDUwMCwgMzAwICkgKTtcbiAgICBkcmF3TGluZSggbmV3IFBvaW50MkQoIDUwMCwgMjAwICksIG5ldyBQb2ludDJEKCAyMDAsIDMwMCApICk7XG5cbiAgICBkcmF3TGluZSggbmV3IFBvaW50MkQoIDUwMCwgNDUwICksIG5ldyBQb2ludDJEKCAyMDAsIDQ0OSApICk7XG4gICAgZHJhd0xpbmUoIG5ldyBQb2ludDJEKCA2MDAsIDEwMCApLCBuZXcgUG9pbnQyRCggNjAxLCA0MDAgKSApO1xuICAgICovXG5cbiAgICB0aGlzLmVuZERyYXdpbmcodHJ1ZSk7XG4gIH1cbn1cblxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgIDxkaXYgY2xhc3M9J2NvbC1tZC0xMic+XG4gICAgICA8Y2FudmFzIGlkPSdzdXJmYWNlJyB3aWR0aD0nNjQwJyBoZWlnaHQ9JzQ4MCc+PC9jYW52YXM+XG5cbiAgICAgIDxoMiBjbGFzcz0nc3VidGl0bGUnPkxpbmU8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIGxpbmUgKDxpPm5vdDwvaT4gPGNvZGU+Y2FudmFzLmxpbmVUbygpPC9jb2RlPik8L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5pbXBvcnQgVnVlV3JhcHBlciBmcm9tICcuLi8uLi92dWUtd3JhcHBlcic7XG5pbXBvcnQgeyBMaW5lQXBwIH0gZnJvbSAnLi9hcHAnO1xuXG5AQ29tcG9uZW50XG5jbGFzcyBMaW5lQ29tcG9uZW50IGV4dGVuZHMgVnVlV3JhcHBlciB7XG4gIGluc3RhbnRpYXRlQXBwKCkge1xuICAgIHJldHVybiBuZXcgTGluZUFwcCgnc3VyZmFjZScpO1xuICB9XG5cblxuICB0aWNrKCkge1xuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJhZCA9IChjdXJUaW1lLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwO1xuXG4gICAgdGhpcy5hcHAuZHJhdyhyYWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVDb21wb25lbnQ7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVmMDVlZTkwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfdm0uX20oMCl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjY0MFwiLFwiaGVpZ2h0XCI6XCI0ODBcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIlNvbGlkIFRyaWFuZ2xlXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0cmlhbmdsZSBwb2x5Z29uIChcIiksX2MoJ2knLFtfdm0uX3YoXCJub3RcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdjb2RlJyxbX3ZtLl92KFwiY2FudmFzLnBhdGhcIildKSxfdm0uX3YoXCIpXCIpXSldKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICd+L2xpYi9jb3JlL3BvaW50LTJkJztcbmltcG9ydCB7IERyYXcgfSBmcm9tICd+L2xpYi9jb3JlL2RyYXcnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICd+L2xpYi9jb3JlL2NvbG9yJztcblxuXG5leHBvcnQgY2xhc3MgU29saWRUcmlhbmdsZUFwcCBleHRlbmRzIEFwcCB7XG4gIGRyYXdUcmlhbmdsZXMocmFkQWRqdXN0bWVudCwgcG9zWSwgdHJpYW5nbGUpIHtcbiAgICBjb25zdCB0cmlDb3VudCA9IDEwO1xuICAgIGNvbnN0IHRyYW5zbGF0ZWRUcmlhbmdsZSA9IFtuZXcgUG9pbnQyRCgpLCBuZXcgUG9pbnQyRCgpLCBuZXcgUG9pbnQyRCgpXTtcblxuICAgIGNvbnN0IHBpeGVsQ29sb3IgPSBuZXcgQ29sb3IoMjU1LCAwLCAwLCAxMjgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCByYWQgPSBpICogKE1hdGguUEkgKiAyKSAvIHRyaUNvdW50ICsgcmFkQWRqdXN0bWVudDtcbiAgICAgIGNvbnN0IHBvc1ggPSAoRHJhdy5zdXJmYWNlLmdldFdpZHRoKCkgLyB0cmlDb3VudCkgKiAoaSArIDAuNSk7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVtqXS54ID1cbiAgICAgICAgICBwb3NYICtcbiAgICAgICAgICB0cmlhbmdsZVtqXS54ICogTWF0aC5jb3MocmFkKSAtIHRyaWFuZ2xlW2pdLnkgKiBNYXRoLnNpbihyYWQpO1xuXG4gICAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVtqXS55ID1cbiAgICAgICAgICBwb3NZICtcbiAgICAgICAgICB0cmlhbmdsZVtqXS55ICogTWF0aC5jb3MocmFkKSArIHRyaWFuZ2xlW2pdLnggKiBNYXRoLnNpbihyYWQpO1xuICAgICAgfVxuXG4gICAgICBEcmF3LnRyaWFuZ2xlKFxuICAgICAgICB0cmFuc2xhdGVkVHJpYW5nbGVbMF0sXG4gICAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVsxXSxcbiAgICAgICAgdHJhbnNsYXRlZFRyaWFuZ2xlWzJdLFxuICAgICAgICBEcmF3LmNvbG9yXG4gICAgICApO1xuXG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgIERyYXcuYmxlbmRQaXhlbCh0cmFuc2xhdGVkVHJpYW5nbGVbal0sIHBpeGVsQ29sb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgZHJhdyhyYWQpIHtcbiAgICB0aGlzLnN0YXJ0RHJhd2luZygpO1xuXG4gICAgRHJhdy5jb2xvci5zZXQoMzIsIDMyLCAyNTUpO1xuICAgIERyYXcuYmdDb2xvci5zZXQoMjIwLCAyMzAsIDI0MCk7XG5cbiAgICBEcmF3LmNsZWFyKCk7XG5cbiAgICB0aGlzLmRyYXdUcmlhbmdsZXMocmFkLCAxNTAsIFtuZXcgUG9pbnQyRCgwLCAtMTApLCBuZXcgUG9pbnQyRCgtMTAsIDEwKSwgbmV3IFBvaW50MkQoMTAsIDApXSk7XG4gICAgdGhpcy5kcmF3VHJpYW5nbGVzKHJhZCwgMjAwLCBbbmV3IFBvaW50MkQoMCwgLTgpLCBuZXcgUG9pbnQyRCg3LCA0KSwgbmV3IFBvaW50MkQoMTAsIDApXSk7XG4gICAgdGhpcy5kcmF3VHJpYW5nbGVzKHJhZCwgMjUwLCBbbmV3IFBvaW50MkQoMCwgLTEwKSwgbmV3IFBvaW50MkQoLTMwLCAxMCksIG5ldyBQb2ludDJEKDMwLCAzNSldKTtcblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDgwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+U29saWQgVHJpYW5nbGU8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRyaWFuZ2xlIHBvbHlnb24gKDxpPm5vdDwvaT4gPGNvZGU+Y2FudmFzLnBhdGg8L2NvZGU+KTwvcD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IFNvbGlkVHJpYW5nbGVBcHAgfSBmcm9tICcuL2FwcCc7XG5cbkBDb21wb25lbnRcbmNsYXNzIFNvbGlkVHJpYW5nbGUgZXh0ZW5kcyBWdWVXcmFwcGVyIHtcbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgcmV0dXJuIG5ldyBTb2xpZFRyaWFuZ2xlQXBwKCdzdXJmYWNlJyk7XG4gIH1cblxuICB0aWNrKCkge1xuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJhZCA9IChjdXJUaW1lLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwO1xuXG4gICAgdGhpcy5hcHAuZHJhdyhyYWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvbGlkVHJpYW5nbGU7XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBkZDA5OTQwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfdm0uX20oMCl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm93XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2wtbWQtMTJcIn0sW19jKCdjYW52YXMnLHthdHRyczp7XCJpZFwiOlwic3VyZmFjZVwiLFwid2lkdGhcIjpcIjY0MFwiLFwiaGVpZ2h0XCI6XCI0ODBcIn19KSxfdm0uX3YoXCIgXCIpLF9jKCdoMicse3N0YXRpY0NsYXNzOlwic3VidGl0bGVcIn0sW192bS5fdihcIlRleHR1cmVkIFRyaWFuZ2xlXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlB1cmUgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0ZXh0dXJlZCB0cmlhbmdsZSBwb2x5Z29uIChcIiksX2MoJ2knLFtfdm0uX3YoXCJub3RcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdjb2RlJyxbX3ZtLl92KFwiY2FudmFzLnBhdGhcIildKSxfdm0uX3YoXCIpXCIpXSldKV0pfV1cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IEFwcCB9IGZyb20gJ34vbGliL2NvcmUvYXBwJztcbmltcG9ydCB7IENhbnZhc1RleHR1cmUgfSBmcm9tICd+L2xpYi9jb3JlL2NhbnZhcy10ZXh0dXJlJztcbmltcG9ydCB7IERyYXcgfSBmcm9tICd+L2xpYi9jb3JlL2RyYXcnO1xuaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJ34vbGliL2NvcmUvcG9pbnQtMmQnO1xuaW1wb3J0IHsgUG9pbnQzRCB9IGZyb20gJ34vbGliL2NvcmUvcG9pbnQtM2QnO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZWRUcmlhbmdsZUFwcCBleHRlbmRzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldENhbnZhc0lkKSB7XG4gICAgc3VwZXIodGFyZ2V0Q2FudmFzSWQpO1xuXG4gICAgdGhpcy50ZXh0dXJlID0gbmV3IENhbnZhc1RleHR1cmUoJy4vcmVzb3VyY2VzL2FwcHMvdGV4dHVyZWQtdHJpYW5nbGUvc21pbGV5Mi5wbmcnKTtcbiAgfVxuXG4gIGRyYXdUcmlhbmdsZShyYWRBZGp1c3RtZW50LCBwb3NYLCBwb3NZLCB0cmlhbmdsZSwgdXYpIHtcbiAgICBjb25zdCB0cmFuc2xhdGVkVHJpYW5nbGUgPSBbbmV3IFBvaW50MkQoKSwgbmV3IFBvaW50MkQoKSwgbmV3IFBvaW50MkQoKV07XG4gICAgY29uc3QgcmFkID0gcmFkQWRqdXN0bWVudDtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICB0cmFuc2xhdGVkVHJpYW5nbGVbal0ueCA9XG4gICAgICAgIHBvc1ggK1xuICAgICAgICB0cmlhbmdsZVtqXS54ICogTWF0aC5jb3MocmFkKSAtIHRyaWFuZ2xlW2pdLnkgKiBNYXRoLnNpbihyYWQpO1xuXG4gICAgICB0cmFuc2xhdGVkVHJpYW5nbGVbal0ueSA9XG4gICAgICAgIHBvc1kgK1xuICAgICAgICB0cmlhbmdsZVtqXS55ICogTWF0aC5jb3MocmFkKSArIHRyaWFuZ2xlW2pdLnggKiBNYXRoLnNpbihyYWQpO1xuICAgIH1cblxuICAgIERyYXcudGV4dHVyZWRUcmlhbmdsZShcbiAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVswXSxcbiAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVsxXSxcbiAgICAgIHRyYW5zbGF0ZWRUcmlhbmdsZVsyXSxcbiAgICAgIHV2WzBdLFxuICAgICAgdXZbMV0sXG4gICAgICB1dlsyXSxcbiAgICAgIHRoaXMudGV4dHVyZVxuICAgICk7XG4gIH1cblxuXG4gIGRyYXcocmFkKSB7XG4gICAgdGhpcy5zdGFydERyYXdpbmcoKTtcblxuICAgIERyYXcuYmdDb2xvci5zZXQoMjIwLCAyMzAsIDI0MCk7XG4gICAgRHJhdy5jb2xvci5zZXQoMzIsIDI1NSwgMzIpO1xuXG4gICAgRHJhdy5jbGVhcigpO1xuXG4gICAgY29uc3QgcyA9IDEgKyAoTWF0aC5jb3MocmFkKSAqIDAuMyk7IC8vIE1hdGguY29zKHJhZCk7XG5cbiAgICB0aGlzLmRyYXdUcmlhbmdsZShcbiAgICAgIHJhZCwgMzIwLCAzMDAsXG4gICAgICBbbmV3IFBvaW50MkQocyAqIDEwMCwgcyAqIC0xMDApLCBuZXcgUG9pbnQyRChzICogMTAwLCBzICogMTAwKSwgbmV3IFBvaW50MkQocyAqIC0xMDAsIHMgKiAxMDApXSxcbiAgICAgIFtuZXcgUG9pbnQzRCgxLCAwLCAwKSwgbmV3IFBvaW50M0QoMSwgMSwgMCksIG5ldyBQb2ludDNEKDAsIDEsIDApXVxuICAgICk7XG5cblxuICAgIHRoaXMuZHJhd1RyaWFuZ2xlKFxuICAgICAgcmFkLCAzMjAsIDE1MCxcbiAgICAgIFtuZXcgUG9pbnQyRChzICogMTAwLCBzICogLTEwMCksIG5ldyBQb2ludDJEKHMgKiAxMDAsIHMgKiAxMDApLCBuZXcgUG9pbnQyRChzICogLTEwMCwgcyAqIDEwMCldLFxuICAgICAgW25ldyBQb2ludDNEKDAuMjUsIDAuNzUsIDApLCBuZXcgUG9pbnQzRCgwLjUsIDAuMjUsIDApLCBuZXcgUG9pbnQzRCgwLjc1LCAwLjc1LCAwKV1cbiAgICAgIC8vIFsgbmV3IFBvaW50M0QoIDEsIDAsIDAgKSwgbmV3IFBvaW50M0QoIDEsIDEsIDAgKSwgbmV3IFBvaW50M0QoIDAsIDEsIDAgKSBdXG4gICAgKTtcblxuICAgIHRoaXMuZW5kRHJhd2luZyh0cnVlKTtcbiAgfVxufVxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgPGRpdiBjbGFzcz0nY29sLW1kLTEyJz5cbiAgICAgIDxjYW52YXMgaWQ9J3N1cmZhY2UnIHdpZHRoPSc2NDAnIGhlaWdodD0nNDgwJz48L2NhbnZhcz5cblxuICAgICAgPGgyIGNsYXNzPSdzdWJ0aXRsZSc+VGV4dHVyZWQgVHJpYW5nbGU8L2gyPlxuICAgICAgPHA+UHVyZSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRleHR1cmVkIHRyaWFuZ2xlIHBvbHlnb24gKDxpPm5vdDwvaT4gPGNvZGU+Y2FudmFzLnBhdGg8L2NvZGU+KTwvcD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IENvbXBvbmVudCBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmltcG9ydCBWdWVXcmFwcGVyIGZyb20gJy4uLy4uL3Z1ZS13cmFwcGVyJztcbmltcG9ydCB7IFRleHR1cmVkVHJpYW5nbGVBcHAgfSBmcm9tICcuL2FwcCc7XG5cbkBDb21wb25lbnRcbmNsYXNzIFRleHR1cmVkVHJpYW5nbGUgZXh0ZW5kcyBWdWVXcmFwcGVyIHtcbiAgaW5zdGFudGlhdGVBcHAoKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0dXJlZFRyaWFuZ2xlQXBwKCdzdXJmYWNlJyk7XG4gIH1cblxuXG4gIHRpY2soKSB7XG4gICAgY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgcmFkID0gKGN1clRpbWUuZ2V0VGltZSgpIC0gdGhpcy5zdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDA7XG5cbiAgICB0aGlzLmFwcC5kcmF3KHJhZCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dHVyZWRUcmlhbmdsZTtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmU2NWRmMzEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIndyYXBwZXJcIiA6Y2xhc3M9XCJ7J3NpZGViYXItYWN0aXZlJzogc2lkZWJhckFjdGl2ZX1cIj5cbiAgICA8Yi1uYXYgcGlsbHMgdmVydGljYWwgYWxpZ249XCJsZWZ0XCIgY2xhc3M9XCJzaWRlYmFyXCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwga2V5LCBpbmRleCkgaW4gc2lkZWJhckl0ZW1zXCI+XG4gICAgICAgIDxoMyB2LWlmPVwiaXRlbS50eXBlID09PSAndGl0bGUnXCIgOmtleT1cIml0ZW0uaWQgfHwgYHNpZGViYXItdGl0bGUtJHtpbmRleH1gXCIgY2xhc3M9XCJzdWJ0aXRsZVwiIDpjbGFzcz1cIml0ZW0uY2xhc3Nlc1wiPnt7IGl0ZW0udGl0bGUgfX08L2gzPlxuICAgICAgICA8Yi1uYXYtaXRlbSB2LWVsc2UgOmNsYXNzPVwiaXRlbS5jbGFzc2VzXCIgOmtleT1cIml0ZW0uaWQgfHwgYHNpZGViYXItbmF2LWl0ZW0tJHtpbmRleH1gXCIgOmFjdGl2ZT1cImFjdGl2ZUl0ZW0gPT09IGl0ZW0uaWRcIiBAY2xpY2s9bWVudVNlbGVjdChpdGVtKT57eyBpdGVtLnRpdGxlIH19PC9iLW5hdi1pdGVtPlxuICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgPGRpdiBjbGFzcz1cInRvZ2dsZS1zaWRlYmFyIGJhY2tkcm9wXCIgQGNsaWNrPVwidG9nZ2xlU2lkZWJhcigpXCI+PC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwidG9nZ2xlLXNpZGViYXJcIiBAY2xpY2s9XCJ0b2dnbGVTaWRlYmFyKClcIj7ilrY8L2J1dHRvbj5cbiAgICA8L2ItbmF2PlxuXG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiIHJlZj1cImFwcENvbnRhaW5lclwiPjwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ3Z1ZS1jbGFzcy1jb21wb25lbnQnO1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG5pbXBvcnQgTWFpbiBmcm9tICd+L2NvbXBvbmVudHMvbWFpbic7XG5cbi8vIGltcG9ydCBMb2dvIGZyb20gJ34vY29tcG9uZW50cy9Mb2dvLnZ1ZSc7XG5pbXBvcnQgQmlsaW5lYXJJbnRlcnBvbGF0b3IgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9iaWxpbmVhci1pbnRlcnBvbGF0b3InO1xuaW1wb3J0IEJ1bXBNYXBwaW5nIGZyb20gJ34vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvYnVtcC1tYXBwaW5nJztcbmltcG9ydCBDcmVwdXNjdWxhclJheXMgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9jcmVwdXNjdWxhci1yYXlzJztcbmltcG9ydCBGaXNoZXllTGVucyBmcm9tICd+L2NvbXBvbmVudHMvYXBwcy9lZmZlY3RzL2Zpc2hleWUtbGVucyc7XG5pbXBvcnQgTWV0YWJhbGxzIGZyb20gJ34vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvbWV0YWJhbGxzJztcbmltcG9ydCBQbGFzbWEgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvZWZmZWN0cy9wbGFzbWEnO1xuaW1wb3J0IFdhdmVEaXN0b3J0aW9uIGZyb20gJ34vY29tcG9uZW50cy9hcHBzL2VmZmVjdHMvd2F2ZS1kaXN0b3J0aW9uJztcblxuaW1wb3J0IEZsYXQgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvM2QvZmxhdCc7XG5pbXBvcnQgRmxhdFNoYWRpbmcgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvM2QvZmxhdC1zaGFkaW5nJztcbmltcG9ydCBHb3VyYXVkU2hhZGluZyBmcm9tICd+L2NvbXBvbmVudHMvYXBwcy8zZC9nb3VyYXVkLXNoYWRpbmcnO1xuaW1wb3J0IFRleHR1cmVNYXBwaW5nIGZyb20gJ34vY29tcG9uZW50cy9hcHBzLzNkL3RleHR1cmUtbWFwcGluZyc7XG5pbXBvcnQgVmVydGV4IGZyb20gJ34vY29tcG9uZW50cy9hcHBzLzNkL3ZlcnRleCc7XG5pbXBvcnQgV2lyZWZyYW1lIGZyb20gJ34vY29tcG9uZW50cy9hcHBzLzNkL3dpcmVmcmFtZSc7XG5cbmltcG9ydCBNYW5kZWxicm90IGZyb20gJ34vY29tcG9uZW50cy9hcHBzL2ZyYWN0YWxzL21hbmRlbGJyb3QnO1xuaW1wb3J0IFNpZXJwaW5za2kgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvZnJhY3RhbHMvc2llcnBpbnNraSc7XG5cbmltcG9ydCBJbnRlcnBvbGF0ZWRUcmlhbmdsZSBmcm9tICd+L2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2ludGVycG9sYXRlZC10cmlhbmdsZSc7XG5pbXBvcnQgTGluZUNvbXBvbmVudCBmcm9tICd+L2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL2xpbmUnO1xuaW1wb3J0IFNvbGlkVHJpYW5nbGUgZnJvbSAnfi9jb21wb25lbnRzL2FwcHMvcHJpbWl0aXZlcy9zb2xpZC10cmlhbmdsZSc7XG5pbXBvcnQgVGV4dHVyZWRUcmlhbmdsZSBmcm9tICd+L2NvbXBvbmVudHMvYXBwcy9wcmltaXRpdmVzL3RleHR1cmVkLXRyaWFuZ2xlJztcblxuQENvbXBvbmVudChcbiAge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIC8vIExvZ28sXG4gICAgfVxuICB9XG4pXG5jbGFzcyBJbmRleFBhZ2UgZXh0ZW5kcyBWdWUge1xuICBzaWRlYmFyQWN0aXZlID0gZmFsc2U7XG5cbiAgYWN0aXZlSXRlbSA9IG51bGw7XG5cbiAgY3VySW5zdGFuY2UgPSBudWxsO1xuXG4gIHNpZGViYXJJdGVtcyA9IFtcbiAgICB7XG4gICAgICB0eXBlOiAndGl0bGUnLFxuICAgICAgdGl0bGU6ICdKUy1WRlgnLFxuICAgICAgaWQ6ICdKc3ZmeE1haW4nLFxuICAgICAgY2xhc3NlczogJ21haW4nXG4gICAgfSxcblxuICAgIHtcbiAgICAgIHR5cGU6ICd0aXRsZScsXG4gICAgICB0aXRsZTogJ0VmZmVjdHMnLFxuICAgICAgaWQ6ICdFZmZlY3RzVGl0bGUnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0JpbGluZWFyIEludGVycG9sYXRpb24nLFxuICAgICAgY29tcG9uZW50OiBCaWxpbmVhckludGVycG9sYXRvcixcbiAgICAgIGlkOiAnQmlsaW5lYXJJbnRlcnBvbGF0b3InXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0J1bXAgTWFwcGluZycsXG4gICAgICBjb21wb25lbnQ6IEJ1bXBNYXBwaW5nLFxuICAgICAgaWQ6ICdCdW1wTWFwcGluZydcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnQ3JlcHVzY3VsYXIgUmF5cycsXG4gICAgICBjb21wb25lbnQ6IENyZXB1c2N1bGFyUmF5cyxcbiAgICAgIGlkOiAnQ3JlcHVzY3VsYXJSYXlzJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdGaXNoZXllIExlbnMnLFxuICAgICAgY29tcG9uZW50OiBGaXNoZXllTGVucyxcbiAgICAgIGlkOiAnRmlzaGV5ZUxlbnMnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ01ldGFiYWxscycsXG4gICAgICBjb21wb25lbnQ6IE1ldGFiYWxscyxcbiAgICAgIGlkOiAnTWV0YWJhbGxzJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdQbGFzbWEnLFxuICAgICAgY29tcG9uZW50OiBQbGFzbWEsXG4gICAgICBpZDogJ1BsYXNtYSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnV2F2ZSBEaXN0b3J0aW9uJyxcbiAgICAgIGNvbXBvbmVudDogV2F2ZURpc3RvcnRpb24sXG4gICAgICBpZDogJ1dhdmVEaXN0b3J0aW9uJ1xuICAgIH0sXG5cbiAgICB7XG4gICAgICB0eXBlOiAndGl0bGUnLFxuICAgICAgdGl0bGU6ICczRCcsXG4gICAgICBpZDogJzNEVGl0bGUnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0ZsYXQgUG9seWdvbicsXG4gICAgICBjb21wb25lbnQ6IEZsYXQsXG4gICAgICBpZDogJ0ZsYXRQb2x5Z29uJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdGbGF0IFNoYWRpbmcnLFxuICAgICAgY29tcG9uZW50OiBGbGF0U2hhZGluZyxcbiAgICAgIGlkOiAnRmxhdFNoYWRpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0dvdXJhdWQgU2hhZGluZycsXG4gICAgICBjb21wb25lbnQ6IEdvdXJhdWRTaGFkaW5nLFxuICAgICAgaWQ6ICdHb3VyYXVkU2hhZGluZydcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnVGV4dHVyZSBNYXBwaW5nJyxcbiAgICAgIGNvbXBvbmVudDogVGV4dHVyZU1hcHBpbmcsXG4gICAgICBpZDogJ1RleHR1cmVNYXBwaW5nJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdWZXJ0ZXgnLFxuICAgICAgY29tcG9uZW50OiBWZXJ0ZXgsXG4gICAgICBpZDogJ1ZlcnRleCdcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnV2lyZWZyYW1lJyxcbiAgICAgIGNvbXBvbmVudDogV2lyZWZyYW1lLFxuICAgICAgaWQ6ICdXaXJlZnJhbWUnXG4gICAgfSxcblxuICAgIHtcbiAgICAgIHR5cGU6ICd0aXRsZScsXG4gICAgICB0aXRsZTogJ0ZyYWN0YWxzJyxcbiAgICAgIGlkOiAnRnJhY3RhbHNUaXRsZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOiAnTWFuZGVsYnJvdCBTZXQnLFxuICAgICAgY29tcG9uZW50OiBNYW5kZWxicm90LFxuICAgICAgaWQ6ICdNYW5kZWxicm90J1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTaWVycGnFhHNraSBUcmlhbmdsZScsXG4gICAgICBjb21wb25lbnQ6IFNpZXJwaW5za2ksXG4gICAgICBpZDogJ1NpZXJwaW5za2knXG4gICAgfSxcbiAgICB7XG4gICAgICB0eXBlOiAndGl0bGUnLFxuICAgICAgdGl0bGU6ICdQcmltaXRpdmVzJyxcbiAgICAgIGlkOiAnUHJpbWl0aXZlc1RpdGxlJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdJbnRlcnBvbGF0ZWQgVHJpYW5nbGUnLFxuICAgICAgY29tcG9uZW50OiBJbnRlcnBvbGF0ZWRUcmlhbmdsZSxcbiAgICAgIGlkOiAnSW50ZXJwb2xhdGVkVHJpYW5nbGUnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ0xpbmUnLFxuICAgICAgY29tcG9uZW50OiBMaW5lQ29tcG9uZW50LFxuICAgICAgaWQ6ICdMaW5lQ29tcG9uZW50J1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdTb2xpZCBUcmlhbmdsZScsXG4gICAgICBjb21wb25lbnQ6IFNvbGlkVHJpYW5nbGUsXG4gICAgICBpZDogJ1NvbGlkVHJpYW5nbGUnXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1RleHR1cmVkIFRyaWFuZ2xlJyxcbiAgICAgIGNvbXBvbmVudDogVGV4dHVyZWRUcmlhbmdsZSxcbiAgICAgIGlkOiAnVGV4dHVyZWRUcmlhbmdsZSdcbiAgICB9XG4gIF07XG5cblxuICBkZXN0cm95Q3VyQXBwKCkge1xuICAgIGlmICh0aGlzLmN1ckluc3RhbmNlKSB7XG4gICAgICB0aGlzLmN1ckluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB0aGlzLmN1ckluc3RhbmNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IHRoaXMuJHJlZnMuYXBwQ29udGFpbmVyO1xuXG4gICAgZWwuY2hpbGROb2Rlcy5mb3JFYWNoKGMgPT4gZWwucmVtb3ZlQ2hpbGQoYykpO1xuICB9XG5cblxuICBtZW51U2VsZWN0KGl0ZW0pIHtcbiAgICB0aGlzLnNlbGVjdEFwcChpdGVtKTtcblxuICAgIGlmICgod2luZG93LmlubmVyV2lkdGggPD0gNjQwKSAmJiAodGhpcy5zaWRlYmFyQWN0aXZlKSkge1xuICAgICAgdGhpcy50b2dnbGVTaWRlYmFyKCk7XG4gICAgfVxuICB9XG5cblxuICBzZWxlY3RBcHAoaXRlbSkge1xuICAgIGlmICh0aGlzLmFjdGl2ZUl0ZW0gPT09IGl0ZW0uaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJJbnN0YW5jZSkge1xuICAgICAgdGhpcy5kZXN0cm95Q3VyQXBwKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyRWwgPSB0aGlzLiRyZWZzLmFwcENvbnRhaW5lcjtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IFZ1ZUNvbXBvbmVudCA9IGl0ZW0uY29tcG9uZW50O1xuXG4gICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gICAgdGhpcy5jdXJJbnN0YW5jZSA9IG5ldyBWdWVDb21wb25lbnQoKTtcblxuICAgIHRoaXMuY3VySW5zdGFuY2UuJG1vdW50KGVsKTtcblxuICAgIHRoaXMuYWN0aXZlSXRlbSA9IGl0ZW0uaWQ7XG4gIH1cblxuXG4gIHRvZ2dsZVNpZGViYXIoKSB7XG4gICAgdGhpcy5zaWRlYmFyQWN0aXZlID0gIXRoaXMuc2lkZWJhckFjdGl2ZTtcbiAgfVxuXG5cbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnNlbGVjdEFwcChcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdNYWluJyxcbiAgICAgICAgaWQ6ICdNYWluJyxcbiAgICAgICAgY29tcG9uZW50OiBNYWluXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEluZGV4UGFnZTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuJHRTcGVlZDogMC4zcztcblxuLmNvbnRhaW5lciB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnRpdGxlIHtcbiAgZm9udC1mYW1pbHk6ICdRdWlja3NhbmQnLCAnU291cmNlIFNhbnMgUHJvJywgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LFxuICAgICdTZWdvZSBVSScsIFJvYm90bywgJ0hlbHZldGljYSBOZXVlJywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXNpemU6IDEwMHB4O1xuICBjb2xvcjogIzM1NDk1ZTtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbn1cblxuLnN1YnRpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgZm9udC1zaXplOiA0MnB4O1xuICBjb2xvcjogIzUyNjQ4ODtcbiAgd29yZC1zcGFjaW5nOiA1cHg7XG4gIHBhZGRpbmctYm90dG9tOiAxNXB4O1xufVxuXG4ubGlua3Mge1xuICBwYWRkaW5nLXRvcDogMTVweDtcbn1cblxuLndyYXBwZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuXG4gIGNhbnZhcyB7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB0O1xuICAgIGJveC1zaGFkb3c6IDFweCAycHggM3B4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KTtcbiAgfVxuXG4gIC5jb250YWluZXIge1xuICAgIG1hcmdpbi1sZWZ0OiAxNHJlbTtcbiAgICBwYWRkaW5nLXRvcDogMXJlbTtcbiAgICBtYXgtd2lkdGg6IDcyMHB4O1xuICB9XG5cbiAgLm9wdGlvbnMuY2FyZCB7XG4gICAgb3BhY2l0eTogMC40O1xuICAgIG1hcmdpbi10b3A6IDNyZW07XG5cbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgfVxuXG4gIC5vcHRpb25zLmNhcmQ6aG92ZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAuc2lkZWJhciB7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICBiYWNrZ3JvdW5kOiAjNWY2MzYzO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICB3aWR0aDogMTRyZW07XG4gICAgYm9yZGVyLXJpZ2h0OiA0cHggc29saWQgIzcyNzc3NztcbiAgICB6LWluZGV4OiAxMDAwO1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuNSk7XG5cbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBvdmVyZmxvdzogYXV0bztcblxuICAgIC50b2dnbGUtc2lkZWJhciB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIGEubmF2LWxpbmsge1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgcGFkZGluZzogMC4yNXJlbSAxcmVtO1xuXG4gICAgICB0cmFuc2l0aW9uOiBhbGwgMC4xcztcbiAgICB9XG5cbiAgICBhLm5hdi1saW5rLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNykgIWltcG9ydGFudDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICB9XG5cbiAgICAubmF2LXBpbGxzIC5uYXYtbGluay5hY3RpdmUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyNSk7XG4gICAgICBib3JkZXI6IHNvbGlkIDJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB9XG5cbiAgICBhLm5hdi1saW5rOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wMyk7XG4gICAgfVxuXG4gICAgbGkubmF2LWl0ZW0ge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG5cbiAgICBoMyB7XG4gICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxMjUlO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGZvbnQtc2l6ZTogMjAwJTtcbiAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcblxuICAgICAgJi5tYWluIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcbiAgICAgICAgZm9udC1zaXplOiAyNjAlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbkBtZWRpYSAobWF4LXdpZHRoOiA2NDBweCkge1xuICAud3JhcHBlciB7XG4gICAgLnNpZGViYXIge1xuICAgICAgd2lkdGg6IDFyZW07XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgJHRTcGVlZDtcblxuICAgICAgLy8gZGlzcGxheTogZmxleDtcbiAgICAgIG92ZXJmbG93OiBpbml0aWFsO1xuXG4gICAgICBoMyxcbiAgICAgIGEubmF2LWxpbmsge1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgfVxuXG4gICAgICAqIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgJHRTcGVlZDtcbiAgICAgIH1cblxuICAgICAgYnV0dG9uLnRvZ2dsZS1zaWRlYmFyIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcmlnaHQ6IC0xLjI1cmVtO1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgJHRTcGVlZDtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yMHJlbSk7ICovXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZjQyNDI7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgIGhlaWdodDogM3JlbTtcbiAgICAgICAgLyogYm9yZGVyOiAzcHggc29saWQgIzg4OGU4ZTsgKi9cbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAvKiBtYXJnaW4tdG9wOiAyMHJlbTsgKi9cbiAgICAgICAgLyogbWFyZ2luLWJvdHRvbTogMjByZW07ICovXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICAgIH1cblxuICAgICAgLnRvZ2dsZS1zaWRlYmFyLmJhY2tkcm9wIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwKTtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMnJlbTtcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAkdFNwZWVkLCBsZWZ0ICR0U3BlZWQsIHdpZHRoIDBzICR0U3BlZWQsIGJhY2tkcm9wLWZpbHRlciAkdFNwZWVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5jb250YWluZXIge1xuICAgICAgbWFyZ2luLWxlZnQ6IDFyZW07XG4gICAgfVxuXG4gICAgJi5zaWRlYmFyLWFjdGl2ZSB7XG4gICAgICAuc2lkZWJhciB7XG4gICAgICAgIHdpZHRoOiAxNHJlbTtcblxuICAgICAgICAqIHtcbiAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uLnRvZ2dsZS1zaWRlYmFyIHtcbiAgICAgICAgICByaWdodDogLTEuNjZyZW07XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpIHJvdGF0ZSgxODBkZWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRvZ2dsZS1zaWRlYmFyLmJhY2tkcm9wIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgICAgbGVmdDogMTRyZW07XG4gICAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCkgZ3JheXNjYWxlKDAuNjUpO1xuICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgJHRTcGVlZCwgbGVmdCAkdFNwZWVkLCB3aWR0aCAwcywgYmFja2Ryb3AtZmlsdGVyICR0U3BlZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OWUyZDA2YWEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///193\n')}}]);