(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{184:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(195);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(52).default\nvar update = add(\"265da9ba\", content, true, {\"sourceMap\":false});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/ZWRlNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUEwVjtBQUNoWCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLEVBQTBEO0FBQzVFLDZDQUE2QyxrQkFBa0IiLCJmaWxlIjoiMTg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIyNjVkYTliYVwiLCBjb250ZW50LCB0cnVlLCB7XCJzb3VyY2VNYXBcIjpmYWxzZX0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///184\n")},194:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(184);\n/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_1_3_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy9pbmRleC52dWU/MWMxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBdWEsQ0FBZ0IsdWVBQUcsRUFBQyIsImZpbGUiOiIxOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTktb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTktb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTktb25lT2YtMS0zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///194\n")},195:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(51)(false);\n// Module\nexports.push([module.i, ".title{font-family:Quicksand,Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;display:block;font-weight:300;font-size:100px;color:#35495e;letter-spacing:1px}.subtitle{font-weight:300;font-size:42px;color:#526488;word-spacing:5px;padding-bottom:15px}.links{padding-top:15px}.wrapper{display:flex}.wrapper canvas{width:100%;margin-bottom:20pt;box-shadow:1px 2px 3px 0 rgba(0,0,0,.15)}.wrapper force-wrapper{display:none}.wrapper .app-wrapper{position:relative;margin-left:17rem;margin-right:.5rem;max-height:100%;max-width:720px;min-height:100%;overflow-x:hidden;overflow-y:auto;overflow:hidden auto;overscroll-behavior-x:none}.wrapper .app-wrapper .app-container{padding-top:1.5rem;overflow:hidden;text-align:center}.wrapper .options.card{opacity:.4;margin-top:3rem;transition:all .2s}.wrapper .options.card:hover{opacity:1}.wrapper .sidebar-wrapper{height:100%;left:0;top:0;position:fixed;z-index:1000;display:block;overflow:visible;width:14rem;min-height:100vh;background:#5f6363;padding-left:10px;padding-right:10px;border-right:4px solid #727777;box-shadow:0 0 5px 0 rgba(0,0,0,.5)}.wrapper .sidebar-wrapper .toggle-sidebar{display:none}.wrapper .sidebar-wrapper .sidebar{display:block;max-height:100%;overflow-x:visible;overflow-y:auto;overflow:visible auto;overscroll-behavior-x:none}.wrapper .sidebar-wrapper .sidebar a.nav-link{color:#fff;padding:.25rem 1rem;transition:all .1s}.wrapper .sidebar-wrapper .sidebar a.nav-link.active{background-color:hsla(0,0%,100%,.07)!important;font-weight:500}.wrapper .sidebar-wrapper .sidebar .nav-pills .nav-link.active{background-color:hsla(0,0%,100%,.125);border:2px solid rgba(0,0,0,.1);font-weight:700}.wrapper .sidebar-wrapper .sidebar a.nav-link:hover{background-color:hsla(0,0%,100%,.03)}.wrapper .sidebar-wrapper .sidebar li.nav-item{text-align:left}.wrapper .sidebar-wrapper .sidebar h3{color:hsla(0,0%,100%,.4);margin-bottom:0;line-height:125%;padding:0;font-size:200%;margin-top:.5rem}.wrapper .sidebar-wrapper .sidebar h3.main{margin-bottom:1rem;color:hsla(0,0%,100%,.9);font-size:260%}.wrapper .mobile-navi{display:none}@media (max-width:1024px) and (min-width:641px){.wrapper .app-wrapper{margin-left:15rem;margin-right:1rem}}@media (max-width:640px){.wrapper force-wrapper{display:block;line-height:0;margin:0;border:0;padding:0}.wrapper h1.title{font-size:90px}.wrapper .sidebar-wrapper{width:1rem;transition:all .3s}.wrapper .sidebar-wrapper .sidebar a.nav-link,.wrapper .sidebar-wrapper .sidebar h3{white-space:nowrap}.wrapper .sidebar-wrapper .sidebar *{opacity:0;pointer-events:none;transition:opacity .3s}.wrapper .sidebar-wrapper button.toggle-sidebar{display:block;position:absolute;opacity:1;right:-1.25rem;transition:all .3s;top:50%;transform:translateY(-50%);background-color:#3f4242;border:0;color:#fff;border-radius:3px;height:3rem;text-align:center;margin-left:1rem;margin-right:1rem;line-height:0;pointer-events:auto}.wrapper .sidebar-wrapper .toggle-sidebar.backdrop{background:transparent;opacity:1;display:block;position:absolute;top:0;left:0;width:2rem;height:100%;margin:0;padding:0;pointer-events:auto;transition:background-color .3s,left .3s,width 0s .3s,-webkit-backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s .3s,backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s .3s,backdrop-filter .3s,-webkit-backdrop-filter .3s}.wrapper .app-wrapper{position:fixed;margin:0;left:2.5rem;right:1rem;overflow-x:hidden;overflow-y:auto;overflow:hidden auto;overscroll-behavior-x:none;display:flex;min-height:100%}.wrapper .app-wrapper .app-container{margin-top:auto;margin-bottom:auto}.wrapper.sidebar-active .sidebar-wrapper{width:14rem}.wrapper.sidebar-active .sidebar-wrapper .sidebar *{opacity:1;pointer-events:auto}.wrapper.sidebar-active .sidebar-wrapper button.toggle-sidebar{right:-1.66rem;transform:translateY(-50%) rotate(180deg)}.wrapper.sidebar-active .sidebar-wrapper .toggle-sidebar.backdrop{background:rgba(0,0,0,.1);opacity:1;width:100vw;left:14rem;-webkit-backdrop-filter:blur(5px) grayscale(.65);backdrop-filter:blur(5px) grayscale(.65);transition:background-color .3s,left .3s,width 0s,-webkit-backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s,backdrop-filter .3s;transition:background-color .3s,left .3s,width 0s,backdrop-filter .3s,-webkit-backdrop-filter .3s}.wrapper .mobile-navi{position:fixed;right:0;bottom:0;margin:.75rem;display:block;z-index:100}.wrapper .mobile-navi button{display:inline-block;margin-right:.5rem;width:3.5rem;font-size:175%;margin-bottom:auto;margin-top:auto;position:relative;background-color:#5f6363}.wrapper .mobile-navi button:last-child{margin-right:0}}", ""]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///195\n')},196:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./pages/index.vue?vue&type=template&id=458c71a5&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"wrapper",class:{\'sidebar-active\': _vm.sidebarActive}},[_c(\'div\',{staticClass:"sidebar-wrapper"},[_c(\'b-nav\',{staticClass:"sidebar",attrs:{"pills":"","vertical":"","align":"left"}},[_vm._l((_vm.sidebarItems),function(item,key,index){return [(item.type === \'title\')?_c(\'h3\',{key:item.id || ("sidebar-title-" + index),staticClass:"subtitle",class:item.classes,on:{"click":function($event){(item.component ? _vm.menuSelect(item) : null)}}},[_vm._v(_vm._s(item.title))]):_c(\'b-nav-item\',{key:item.id || ("sidebar-nav-item-" + index),class:item.classes,attrs:{"active":_vm.activeItem === item.id},on:{"click":function($event){return _vm.menuSelect(item)}}},[_vm._v(_vm._s(item.title))])]})],2),_vm._v(" "),_c(\'div\',{staticClass:"toggle-sidebar backdrop",on:{"click":function($event){return _vm.toggleSidebar()}}}),_vm._v(" "),_c(\'button\',{staticClass:"toggle-sidebar",on:{"click":function($event){return _vm.toggleSidebar()}}},[_vm._v("▶")])],1),_vm._v(" "),_c(\'div\',{staticClass:"app-wrapper"},[_c(\'div\',{ref:"appContainer",staticClass:"app-container"})]),_vm._v(" "),_c(\'div\',{staticClass:"mobile-navi"},[_c(\'b-button\',{on:{"click":function($event){return _vm.prevItem()}}},[_vm._v("‹")]),_vm._v(" "),_c(\'b-button\',{on:{"click":function($event){return _vm.nextItem()}}},[_vm._v("›")])],1)])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./pages/index.vue?vue&type=template&id=458c71a5&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find-index.js\nvar es6_array_find_index = __webpack_require__(189);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js\nvar es6_array_find = __webpack_require__(80);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(56);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(36);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(58);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(57);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js\nvar vue_class_component_esm = __webpack_require__(181);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js\nvar vue_runtime_esm = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(182);\nvar lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/main/index.vue?vue&type=template&id=51fbb1e3&\nvar mainvue_type_template_id_51fbb1e3_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'h1\',{staticClass:"title"},[_vm._v("\\n        JS-VFX\\n      ")]),_vm._v(" "),_c(\'div\',[_c(\'p\',[_vm._v("Pure JavaScript visual effects "),_c(\'force-wrapper\'),_vm._v(" implemented with HTML5 "),_c(\'code\',[_vm._v("canvas")]),_vm._v(".")],1),_vm._v(" "),_c(\'p\',[_vm._v("No dependencies, no WebGL, just pure, unadulterated code written from the ground up.")]),_vm._v(" "),_vm._m(0)])])}\nvar mainvue_type_template_id_51fbb1e3_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Check out the source at "),_c(\'a\',{attrs:{"href":"https://github.com/salieri/js-vfx","target":"_blank"}},[_vm._v("GitHub")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/main/index.vue?vue&type=template&id=51fbb1e3&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/main/index.vue?vue&type=script&lang=js&\n\n\n\n\n\nvar _class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nvar mainvue_type_script_lang_js_Main = Object(vue_class_component_esm["a" /* default */])(_class =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(Main, _Vue);\n\n  function Main() {\n    Object(classCallCheck["a" /* default */])(this, Main);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Main).apply(this, arguments));\n  }\n\n  return Main;\n}(vue_runtime_esm["default"])) || _class;\n\n/* harmony default export */ var mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_Main);\n// CONCATENATED MODULE: ./components/main/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(41);\n\n// CONCATENATED MODULE: ./components/main/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar main_component = Object(componentNormalizer["a" /* default */])(\n  components_mainvue_type_script_lang_js_,\n  mainvue_type_template_id_51fbb1e3_render,\n  mainvue_type_template_id_51fbb1e3_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var main = (main_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bilinear-interpolator/index.vue?vue&type=template&id=ce247d7a&\nvar bilinear_interpolatorvue_type_template_id_ce247d7a_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar bilinear_interpolatorvue_type_template_id_ce247d7a_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"480","height":"360"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Bilinear Interpolation")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Bilinear_interpolation"}},[_vm._v("bilinear interpolation")]),_vm._v(".")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue?vue&type=template&id=ce247d7a&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./components/apps/vue-wrapper.js\n\n\n\n\n\n\n\n\nvar _dec, vue_wrapper_class, _temp;\n\n\n\nvar vue_wrapper_VueWrapper = (_dec = Object(vue_class_component_esm["a" /* default */])(), _dec(vue_wrapper_class = (_temp =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(VueWrapper, _Vue);\n\n  function VueWrapper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, VueWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(VueWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "interval", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "intervalFrequency", 25);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "startTime", new Date());\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(VueWrapper, [{\n    key: "mounted",\n    value: function mounted() {\n      this.start();\n    }\n  }, {\n    key: "beforeDestroy",\n    value: function beforeDestroy() {\n      this.stop();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      this.interval = null;\n      this.app = null;\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      throw new Error(\'Not implemented\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      throw new Error(\'Not implemented\');\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      var _this2 = this;\n\n      this.stop();\n      this.app = this.instantiateApp();\n\n      if (this.intervalFrequency === 0) {\n        return;\n      }\n\n      this.interval = setInterval(function () {\n        var app = _this2.app;\n\n        if (!app) {\n          return;\n        }\n\n        if (app.isDrawing() === true || app.isPaused() === true) {\n          return;\n        }\n\n        _this2.tick();\n      }, this.intervalFrequency);\n    }\n  }]);\n\n  return VueWrapper;\n}(vue_runtime_esm["default"]), _temp)) || vue_wrapper_class);\n/* harmony default export */ var vue_wrapper = (vue_wrapper_VueWrapper);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.float32-array.js\nvar es6_typed_float32_array = __webpack_require__(185);\n\n// CONCATENATED MODULE: ./lib/core/helper.js\n\nvar Helper = {\n  /**\n   * @param {Event} event\n   * @param {String} elementID\n   *\n   * @link http://stackoverflow.com/a/5932203/844771\n   * @author Ryan Artecona\n   * @public\n   */\n  getCanvasCoordinates: function getCanvasCoordinates(event, elementID) {\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var canvasX = 0;\n    var canvasY = 0;\n    var element = Helper.getElement(elementID);\n    var initialEl = element;\n\n    do {\n      totalOffsetX += element.offsetLeft - element.scrollLeft;\n      totalOffsetY += element.offsetTop - element.scrollTop;\n      element = element.offsetParent;\n    } while (element);\n\n    canvasX = event.pageX - totalOffsetX;\n    canvasY = event.pageY - totalOffsetY;\n\n    if (initialEl && initialEl.clientWidth && initialEl.clientHeight && initialEl.width && initialEl.height) {\n      canvasX *= initialEl.width / initialEl.clientWidth;\n      canvasY *= initialEl.height / initialEl.clientHeight;\n    }\n\n    return {\n      x: canvasX,\n      y: canvasY\n    };\n  },\n\n  /**\n   * @param {String} elementType Type of element\n   * @param {String} [elementID] Element ID\n   * @returns {Element}\n   * @public\n   */\n  createElement: function createElement(elementType, elementID) {\n    var element = document.createElement(elementType);\n\n    if (elementID) {\n      element.setAttribute(\'id\', elementID);\n    }\n\n    return element;\n  },\n\n  /**\n   * @param {Element} element\n   * @public\n   */\n  removeElement: function removeElement(element) {\n    element.parentNode.removeChild(element);\n  },\n\n  /**\n   * @param {String} elementID Element ID\n   * @public\n   */\n  getElement: function getElement(elementID) {\n    return document.getElementById(elementID);\n  },\n\n  /**\n   * @param {Object} object\n   * @returns {Object}\n   * @public\n   */\n  extend: function extend(object) {\n    return lodash["merge"]({}, object);\n  },\n\n  /**\n   * Load data from URL\n   * @param {String} url\n   * @param {Function} successFunction\n   * @param {Function} [errorFunction]\n   * @public\n   */\n  load: function load(url, successFunction, errorFunction) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\'get\', url);\n\n    xhr.onload = function () {\n      return successFunction(xhr.response, xhr.statusText, xhr);\n    };\n\n    xhr.onerror = function () {\n      return errorFunction(xhr.statusText, xhr);\n    };\n\n    xhr.send();\n  },\n\n  /**\n   * Create an empty two dimensional array\n   *\n   * @param {int} sizeA\n   * @param {int} sizeB\n   * @returns {Array}\n   * @public\n   */\n  create2DArray: function create2DArray(sizeA, sizeB) {\n    var a = new Array(sizeA);\n\n    for (var i = 0; i < sizeA; i++) {\n      a[i] = new Array(sizeB);\n    }\n\n    return a;\n  }\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js\nvar es6_typed_uint8_clamped_array = __webpack_require__(188);\n\n// CONCATENATED MODULE: ./lib/core/color.js\n\n\nvar color_Color =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|Color} [r=0]\n   * @param {int} [g=0]\n   * @param {int} [b=0]\n   * @param {int} [a=255]\n   */\n  function Color(r, g, b, a) {\n    Object(classCallCheck["a" /* default */])(this, Color);\n\n    if (r instanceof Color) {\n      this.set(r);\n    } else {\n      this.r = r || 0;\n      this.g = g || 0;\n      this.b = b || 0;\n      this.a = a || 255;\n    }\n  }\n  /**\n   * @param {int|Color} [r=0]\n   * @param {int} [g=0]\n   * @param {int} [b=0]\n   * @param {int} [a=255]\n   */\n\n\n  Object(createClass["a" /* default */])(Color, [{\n    key: "set",\n    value: function set(r, g, b, a) {\n      if (r instanceof Color) {\n        this.r = r.r;\n        this.g = r.g;\n        this.b = r.b;\n        this.a = r.a;\n      } else {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a || 255;\n      }\n    }\n    /**\n     * @param {NormalizedColor} normalizedColor\n     */\n\n  }, {\n    key: "getNormalizedColor",\n    value: function getNormalizedColor(normalizedColor) {\n      normalizedColor.r = this.r / 255;\n      normalizedColor.g = this.g / 255;\n      normalizedColor.b = this.b / 255;\n      normalizedColor.a = this.a / 255;\n    }\n    /**\n     * @param {Color} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "add",\n    value: function add(color, skipSafety) {\n      this.r = this.r + color.r;\n      this.g = this.g + color.g;\n      this.b = this.b + color.b;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(color, skipSafety) {\n      this.r = this.r - color.r;\n      this.g = this.g - color.g;\n      this.b = this.b - color.b;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} color\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(color) {\n      var tmpR = color.r;\n      var tmpG = color.g;\n      var tmpB = color.b;\n      var tmpA = color.a;\n      color.r = this.r;\n      this.r = tmpR;\n      color.g = this.g;\n      this.g = tmpG;\n      color.b = this.b;\n      this.b = tmpB;\n      color.a = this.a;\n      this.a = tmpA;\n    }\n    /**\n     * @param {Color|NormalizedColor} color\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "multiply",\n    value: function multiply(color, skipSafety) {\n      this.r = color.r * this.r;\n      this.g = color.g * this.g;\n      this.b = color.b * this.b;\n      this.a = color.a * this.a;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {float|int|number} value\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(value, skipSafety) {\n      this.r = this.r * value;\n      this.g = this.g * value;\n      this.b = this.b * value;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {int|float|number} divisor\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "divideByVal",\n    value: function divideByVal(divisor, skipSafety) {\n      this.r = this.r / divisor;\n      this.g = this.g / divisor;\n      this.b = this.b / divisor;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n    /**\n     * @param {Color} colorA\n     * @param {Color} colorB\n     * @param {int} stepCount\n     * @param {boolean} [skipSafety=false]\n     */\n\n  }, {\n    key: "interpolate",\n    value: function interpolate(colorA, colorB, stepCount, skipSafety) {\n      this.r = (colorB.r - colorA.r) / stepCount;\n      this.g = (colorB.g - colorA.g) / stepCount;\n      this.b = (colorB.b - colorA.b) / stepCount;\n\n      if (skipSafety !== true) {\n        this.round();\n        this.clamp();\n      }\n    }\n  }, {\n    key: "round",\n    value: function round() {\n      this.r = Math.round(this.r);\n      this.g = Math.round(this.g);\n      this.b = Math.round(this.b);\n      this.a = Math.round(this.a);\n    }\n  }, {\n    key: "clamp",\n    value: function clamp() {\n      this.r = Math.max(Math.min(this.r, 255), 0);\n      this.g = Math.max(Math.min(this.g, 255), 0);\n      this.b = Math.max(Math.min(this.b, 255), 0);\n      this.a = Math.max(Math.min(this.a, 255), 0);\n    }\n  }]);\n\n  return Color;\n}();\n// CONCATENATED MODULE: ./lib/core/virtual-surface.js\n\n\n\n\nvar virtual_surface_VirtualSurface =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int} width\n   * @param {int} height\n   * @param {Uint8ClampedArray} [data]\n   */\n  function VirtualSurface(width, height, data) {\n    Object(classCallCheck["a" /* default */])(this, VirtualSurface);\n\n    var doClear = false;\n\n    if (!data) {\n      data = new Uint8ClampedArray(width * height * 4);\n      doClear = true;\n    }\n\n    this.data = data;\n    this.width = width;\n    this.height = height;\n\n    if (doClear) {\n      this.clear();\n    }\n  }\n\n  Object(createClass["a" /* default */])(VirtualSurface, [{\n    key: "getWidth",\n\n    /**\n     * @returns {int}\n     */\n    value: function getWidth() {\n      return this.width;\n    }\n    /**\n     * @returns {int}\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.height;\n    }\n    /**\n     * @returns {Uint8ClampedArray}\n     * @public\n     */\n\n  }, {\n    key: "getData",\n    value: function getData() {\n      return this.data;\n    }\n    /**\n     * @param {Point2D} pos\n     * @param {Color} destColor\n     * @public\n     */\n\n  }, {\n    key: "getPixel",\n    value: function getPixel(pos, destColor) {\n      var ptr = (Math.round(pos.x) + Math.round(pos.y) * this.width) * 4;\n      destColor.set(this.data[ptr], this.data[ptr + 1], this.data[ptr + 2]);\n    }\n  }, {\n    key: "clear",\n    value: function clear(color) {\n      var maxPtr = this.data.length;\n\n      if (!color) {\n        color = new color_Color(0, 0, 0, 255);\n      }\n\n      var ptr = 0;\n      var r = color.r;\n      var b = color.b;\n      var g = color.g;\n      var a = color.a;\n\n      while (ptr < maxPtr) {\n        this.data[ptr++] = r;\n        this.data[ptr++] = g;\n        this.data[ptr++] = b;\n        this.data[ptr++] = a;\n      }\n    }\n  }]);\n\n  return VirtualSurface;\n}();\n// CONCATENATED MODULE: ./lib/core/line.js\nvar Line = {\n  /**\n   * @public\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @returns {object}\n   */\n  calculate: function calculate(p1, p2) {\n    var variables = {\n      px1: Math.round(p1.x),\n      py1: Math.round(p1.y),\n      px2: Math.round(p2.x),\n      py2: Math.round(p2.y),\n      done: false,\n      pxStart: 0,\n      lastPlotX: 0,\n      traversed: 0,\n      traverseLength: 0\n    };\n    variables.dx = Math.abs(variables.px2 - variables.px1);\n    variables.dy = Math.abs(variables.py2 - variables.py1);\n    variables.traverseLength = Math.sqrt(variables.dx * variables.dx + variables.dy * variables.dy);\n\n    if (variables.traverseLength < 1) {\n      variables.traverseLength = 1;\n    }\n\n    variables.err = variables.dx - variables.dy;\n    variables.e2 = (variables.dx - variables.dy) * 2;\n    variables.sx = -1;\n    variables.sy = -1;\n\n    if (variables.px1 < variables.px2) {\n      variables.sx = 1;\n    }\n\n    if (variables.py1 < variables.py2) {\n      variables.sy = 1;\n    }\n\n    return variables;\n  },\n\n  /**\n   * @public\n   * @param {object} line\n   */\n  step: function step(line) {\n    line.pxStart = line.px1;\n\n    while (true) {\n      // plot here\n      line.traversed++;\n      line.lastPlotX = line.px1;\n\n      if (line.px1 === line.px2 && line.py1 === line.py2) {\n        line.done = true;\n        break;\n      }\n\n      if (line.e2 > -line.dy) {\n        line.err = line.err - line.dy;\n        line.e2 = line.err + line.err;\n        line.px1 += line.sx;\n      }\n\n      if (line.px1 === line.px2 && line.py1 === line.py2) {\n        // plot here\n        line.traversed++;\n        line.lastPlotX = line.px1;\n        line.done = true;\n        break;\n      }\n\n      if (line.e2 < line.dx) {\n        line.err = line.err + line.dx;\n        line.e2 = line.err + line.err;\n        line.py1 += line.sy;\n        break;\n      }\n    }\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   * @link http://en.wikipedia.org/wiki/Bresenham\'s_line_algorithm\n   */\n  draw: function draw(p1, p2, color, surface) {\n    var px1 = Math.round(p1.x);\n    var py1 = Math.round(p1.y);\n    var px2 = Math.round(p2.x);\n    var py2 = Math.round(p2.y);\n    var dx = Math.abs(px2 - px1);\n    var dy = Math.abs(py2 - py1);\n    var sx = px1 < px2 ? 1 : -1;\n    var sy = py1 < py2 ? 1 : -1;\n    var sx4 = sx * 4;\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var err = dx - dy;\n    var e2 = err * 2;\n    var ptr = (px1 + py1 * width) * 4;\n    var lineAdd = sy * width * 4;\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n\n    while (true) {\n      if (px1 >= 0 && px1 < width && py1 >= 0 && py1 < height) {\n        data[ptr] = colR;\n        data[ptr + 1] = colG;\n        data[ptr + 2] = colB;\n      }\n\n      if (px1 === px2 && py1 === py2) {\n        break;\n      }\n\n      if (e2 > -dy) {\n        err = err - dy;\n        e2 = err + err;\n        px1 += sx;\n        ptr += sx4;\n      }\n\n      if (px1 === px2 && py1 === py2) {\n        if (px1 >= 0 && px1 < width && py1 >= 0 && py1 < height) {\n          data[ptr] = colR;\n          data[ptr + 1] = colG;\n          data[ptr + 2] = colB;\n        }\n\n        break;\n      }\n\n      if (e2 < dx) {\n        err = err + dx;\n        e2 = err + err;\n        py1 += sy;\n        ptr += lineAdd;\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/point-3d.js\n\n\nvar point_3d_Point3D =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|Vector3D|Point3D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @param {int|float|Number} [z=0]\n   * @constructor\n   */\n  function Point3D(x, y, z) {\n    Object(classCallCheck["a" /* default */])(this, Point3D);\n\n    // works with Vector3D too, since it\'s a subclass\n    if (x instanceof Point3D) {\n      this.x = x.x;\n      this.y = x.y;\n      this.z = x.z;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n  }\n\n  Object(createClass["a" /* default */])(Point3D, [{\n    key: "clone",\n\n    /**\n     * @returns {Point3D}\n     * @public\n     */\n    value: function clone() {\n      return new Point3D(this.x, this.y, this.z);\n    }\n    /**\n     * @param {Point3D} p\n     * @public\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(p) {\n      var tx = p.x;\n      var ty = p.y;\n      var tz = p.z;\n      p.x = this.x;\n      p.y = this.y;\n      p.z = this.z;\n      this.x = tx;\n      this.y = ty;\n      this.z = tz;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "round",\n    value: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "normalize",\n    value: function normalize() {\n      var d = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      this.x = this.x * (1.0 / d);\n      this.y = this.y * (1.0 / d);\n      this.z = this.z * (1.0 / d);\n    }\n    /**\n     * @param {int|float|Number|Vector3D|Point3D} x\n     * @param {int|float|Number} [y]\n     * @param {int|float|Number} [z]\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(x, y, z) {\n      if (x instanceof Point3D) {\n        this.x = x.x;\n        this.y = x.y;\n        this.z = x.z;\n      } else {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n      }\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(point) {\n      this.x += point.x;\n      this.y += point.y;\n      this.z += point.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(point) {\n      this.x -= point.x;\n      this.y -= point.y;\n      this.z -= point.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} point\n     * @public\n     */\n\n  }, {\n    key: "multiply",\n    value: function multiply(point) {\n      this.x *= point.x;\n      this.y *= point.y;\n      this.z *= point.z;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "divideByVal",\n    value: function divideByVal(value) {\n      this.x /= value;\n      this.y /= value;\n      this.z /= value;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(value) {\n      this.x *= value;\n      this.y *= value;\n      this.z *= value;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "negate",\n    value: function negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n    }\n    /**\n     * @param {Point3D|Vector3D} p1\n     * @param {Point3D|Vector3D} p2\n     * @param {Point3D|Vector3D} p3\n     * @public\n     */\n\n  }, {\n    key: "setToCenter",\n    value: function setToCenter(p1, p2, p3) {\n      var minX = Math.min(p1.x, p2.x, p3.x);\n      var minY = Math.min(p1.y, p2.y, p3.y);\n      var minZ = Math.min(p1.z, p2.z, p3.z);\n      this.x = minX + (Math.max(p1.x, p2.x, p3.x) - minX) / 2;\n      this.y = minY + (Math.max(p1.y, p2.y, p3.y) - minY) / 2;\n      this.z = minZ + (Math.max(p1.z, p2.z, p3.z) - minZ) / 2;\n    }\n    /**\n     * @param {Point3D} pointA\n     * @param {Point3D} pointB\n     * @param {int} stepCount\n     * @public\n     */\n\n  }, {\n    key: "interpolate",\n    value: function interpolate(pointA, pointB, stepCount) {\n      this.x = (pointB.x - pointA.x) / stepCount;\n      this.y = (pointB.y - pointA.y) / stepCount;\n      this.z = (pointB.z - pointA.z) / stepCount;\n    }\n    /**\n     * @param {float|int|Number} value\n     * @public\n     */\n\n  }, {\n    key: "addByVal",\n    value: function addByVal(value) {\n      this.x += value;\n      this.y += value;\n      this.z += value;\n    }\n  }]);\n\n  return Point3D;\n}();\n// CONCATENATED MODULE: ./lib/core/vector-3d.js\n\n\n\n\n\n\n/*\n * Loosely based on http://evanw.github.io/lightgl.js/docs/vector.html\n */\n\nvar vector_3d_Vector3D =\n/*#__PURE__*/\nfunction (_Point3D) {\n  Object(inherits["a" /* default */])(Vector3D, _Point3D);\n\n  /**\n   * @param {Number|int|float|Vector3D|Point3D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @param {int|float|Number} [z=0]\n   * @constructor\n   * @extends {Point3D}\n   */\n  function Vector3D(x, y, z) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Vector3D);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Vector3D).call(this));\n\n    if (x instanceof Vector3D || x instanceof point_3d_Point3D) {\n      _this.x = x.x;\n      _this.y = x.y;\n      _this.z = x.z;\n    } else {\n      _this.x = x || 0;\n      _this.y = y || 0;\n      _this.z = z || 0;\n    }\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Vector3D, [{\n    key: "clone",\n\n    /**\n     * @returns {Vector3D}\n     * @public\n     */\n    value: function clone() {\n      return new Vector3D(this.x, this.y, this.z);\n    }\n  }, {\n    key: "distance",\n\n    /**\n     * Distance from a point\n     * @param {int|float|Number} x\n     * @param {int|float|Number} y\n     * @param {int|float|Number} z\n     * @returns {Number}\n     * @public\n     */\n    value: function distance(x, y, z) {\n      var xd = this.x - x;\n      var yd = this.y - y;\n      var zd = this.z - z;\n      return Math.sqrt(xd * xd + yd * yd + zd * zd);\n    }\n  }, {\n    key: "length",\n\n    /**\n     * Vector length\n     *\n     * @returns {Number}\n     * @public\n     */\n    value: function length() {\n      return Math.sqrt(this.dot(this));\n    }\n  }, {\n    key: "dot",\n\n    /**\n     * Dot product\n     *\n     * @param {Vector3D} vector\n     * @returns {Number}\n     * @public\n     */\n    value: function dot(vector) {\n      return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n    }\n  }, {\n    key: "cross",\n\n    /**\n     * Cross product\n     *\n     * @param {Vector3D} vector\n     * @public\n     */\n    value: function cross(vector) {\n      this.x = this.y * vector.z - this.z * vector.y;\n      this.y = this.z * vector.x - this.x * vector.z;\n      this.z = this.x * vector.y - this.y * vector.x;\n    }\n  }, {\n    key: "normalize",\n\n    /**\n     * Normalize Vector (get a unit vector)\n     * @public\n     */\n    value: function normalize() {\n      var vectorLength = this.length();\n      this.x = this.x / vectorLength;\n      this.y = this.y / vectorLength;\n      this.z = this.z / vectorLength;\n    }\n  }, {\n    key: "normal",\n\n    /**\n     * @param {Point3D|Vector3D} p1\n     * @param {Point3D|Vector3D} p2\n     * @param {Point3D|Vector3D} p3\n     * @link http://www.opengl.org/wiki/Calculating_a_Surface_Normal\n     * @public\n     */\n    value: function normal(p1, p2, p3) {\n      var ux = p2.x - p1.x;\n      var uy = p2.y - p1.y;\n      var uz = p2.z - p1.z;\n      var vx = p3.x - p1.x;\n      var vy = p3.y - p1.y;\n      var vz = p3.z - p1.z;\n      this.x = uy * vz - uz * vy;\n      this.y = uz * vx - ux * vz;\n      this.z = ux * vy - uy * vx;\n    }\n  }]);\n\n  return Vector3D;\n}(point_3d_Point3D);\n// CONCATENATED MODULE: ./lib/core/point-2d.js\n\n\n\n\nvar point_2d_Point2D =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|Vector3D|Point3D|Point2D} [x=0]\n   * @param {int|float|Number} [y=0]\n   * @constructor\n   */\n  function Point2D(x, y) {\n    Object(classCallCheck["a" /* default */])(this, Point2D);\n\n    if (x instanceof vector_3d_Vector3D || x instanceof point_3d_Point3D || x instanceof Point2D) {\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n    }\n  }\n  /**\n   * @returns {Point2D}\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Point2D, [{\n    key: "clone",\n    value: function clone() {\n      return new Point2D(this.x, this.y);\n    }\n    /**\n     * @param {Point2D} p\n     * @public\n     */\n\n  }, {\n    key: "swap",\n    value: function swap(p) {\n      var tx = p.x;\n      var ty = p.y;\n      p.x = this.x;\n      p.y = this.y;\n      this.x = tx;\n      this.y = ty;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "round",\n    value: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n    }\n    /**\n     * @param {int|float|Number|Vector3D|Point3D|Point2D} [x=0]\n     * @param {int|float|Number} [y=0]\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(x, y) {\n      if (x instanceof vector_3d_Vector3D || x instanceof point_3d_Point3D || x instanceof Point2D) {\n        this.x = x.x;\n        this.y = x.y;\n      } else {\n        this.x = x;\n        this.y = y;\n      }\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "distance",\n    value: function distance(point) {\n      var a = point.x - this.x;\n      var b = point.y - this.y;\n      return Math.sqrt(a * a + b * b);\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(point) {\n      this.x -= point.x;\n      this.y -= point.y;\n    }\n    /**\n     * @param {Point2D} point\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(point) {\n      this.x += point.x;\n      this.y += point.y;\n    }\n    /**\n     * @param {int|float|number} val\n     * @public\n     */\n\n  }, {\n    key: "multiplyByVal",\n    value: function multiplyByVal(val) {\n      this.x *= val;\n      this.y *= val;\n    }\n  }]);\n\n  return Point2D;\n}();\n// CONCATENATED MODULE: ./lib/core/better-triangle.js\n// import { Color } from \'./color\';\n\n\nvar BetterTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, color, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    BetterTriangle.sortPoints(this.p1, this.p2, this.p3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3); // Line.step( line23 );\n\n    BetterTriangle.drawHalf(line12, line13, color, false, surface);\n    BetterTriangle.drawHalf(line23, line13, color, true, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Color} color\n   * @param {boolean} secondHalf\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, color, secondHalf, surface) {\n    var data = surface.getData();\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height) {\n        for (var x = minX; x <= maxX; x++) {\n          data[ptr++] = colR;\n          data[ptr++] = colG;\n          data[ptr++] = colB;\n          ptr++;\n        }\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      y += lineA.sy;\n    }\n    /* if( ( secondHalf === true ) && ( ( lineA.done !== true ) || ( lineB.done !== true ) ) )\n    {\n      y = y;\n    } */\n\n  },\n\n  /**\n   * @protected\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   */\n  sortPoints: function sortPoints(p1, p2, p3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/better-interpolated-triangle.js\n\n\n\nvar BetterInterpolatedTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n  c1: new color_Color(),\n  c2: new color_Color(),\n  c3: new color_Color(),\n  c1c2: new color_Color(),\n  c1c3: new color_Color(),\n  c2c3: new color_Color(),\n  colSlider: new color_Color(),\n  cLeft: new color_Color(),\n  cLeft2: new color_Color(),\n  cRight: new color_Color(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @param {Surface} surface\n   */\n  draw: function draw(p1, p2, p3, c1, c2, c3, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.c1.set(c1);\n    this.c2.set(c2);\n    this.c3.set(c3);\n    this.sortPoints(this.p1, this.p2, this.p3, this.c1, this.c2, this.c3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3);\n    this.c1c2.interpolate(this.c1, this.c2, this.p1.distance(this.p2), true);\n    this.c1c3.interpolate(this.c1, this.c3, this.p1.distance(this.p3), true);\n    this.c2c3.interpolate(this.c2, this.c3, this.p2.distance(this.p3), true);\n    this.c1c2.multiplyByVal(Math.abs(this.p1.distance(this.p2) / (line12.py1 - line12.py2)), true);\n    this.c1c3.multiplyByVal(Math.abs(this.p1.distance(this.p3) / (line13.py1 - line13.py2)), true);\n    this.c2c3.multiplyByVal(Math.abs(this.p2.distance(this.p3) / (line23.py1 - line23.py2)), true);\n    this.cLeft.set(this.c1);\n    this.cRight.set(this.c1);\n    this.cLeft2.set(this.c2);\n    this.cRight.add(this.c1c3, true);\n    Line.step(line23);\n    this.cLeft2.add(this.c2c3, true);\n    this.drawHalf(line12, line13, this.cLeft, this.cRight, this.c1c2, this.c1c3, false, surface);\n    this.drawHalf(line23, line13, this.cLeft2, this.cRight, this.c2c3, this.c1c3, true, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Color} colLeft\n   * @param {Color} colRight\n   * @param {Color} colAdderLeft\n   * @param {Color} colAdderRight\n   * @param {boolean} secondHalf\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, colLeft, colRight, colAdderLeft, colAdderRight, secondHalf, surface) {\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height && minX <= maxX) {\n        var colR = void 0,\n            colG = void 0,\n            colB = void 0;\n\n        if (Math.min(lineA.lastPlotX, lineA.pxStart) < Math.min(lineB.lastPlotX, lineB.pxStart)) {\n          this.colSlider.set(colRight);\n          this.colSlider.subtract(colLeft, true);\n          colR = colLeft.r;\n          colG = colLeft.g;\n          colB = colLeft.b;\n        } else {\n          this.colSlider.set(colLeft);\n          this.colSlider.subtract(colRight, true);\n          colR = colRight.r;\n          colG = colRight.g;\n          colB = colRight.b;\n        }\n\n        this.colSlider.divideByVal(maxX - minX + 1, true);\n\n        for (var x = minX; x <= maxX; x++) {\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colR)));\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colG)));\n          data[ptr++] = Math.min(255, Math.max(0, Math.round(colB)));\n          ptr++;\n          colR += this.colSlider.r;\n          colG += this.colSlider.g;\n          colB += this.colSlider.b;\n        }\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      colLeft.add(colAdderLeft, true);\n      colRight.add(colAdderRight, true);\n      y += lineA.sy;\n    }\n  },\n\n  /**\n   * @protected\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   */\n  sortPoints: function sortPoints(p1, p2, p3, c1, c2, c3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      c3.swap(c1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      c2.swap(c1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      c3.swap(c2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/textured-triangle.js\n\n\n\nvar textured_triangle_TexturedTriangle = {\n  p1: new point_2d_Point2D(),\n  p2: new point_2d_Point2D(),\n  p3: new point_2d_Point2D(),\n  uv1: new point_3d_Point3D(),\n  uv2: new point_3d_Point3D(),\n  uv3: new point_3d_Point3D(),\n  uvMul: new point_3d_Point3D(),\n  uv12: new point_3d_Point3D(),\n  uv13: new point_3d_Point3D(),\n  uv23: new point_3d_Point3D(),\n  uvLeft: new point_3d_Point3D(),\n  uvRight: new point_3d_Point3D(),\n  uvLeft2: new point_3d_Point3D(),\n  uvPos: new point_3d_Point3D(),\n  uvSlider: new point_3d_Point3D(),\n  ud: new point_2d_Point2D(),\n  pd: new point_2d_Point2D(),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} uv3\n   * @param {Texture} texture\n   * @param {Surface} surface\n   */\n  draw: function draw(p1, p2, p3, uv1, uv2, uv3, texture, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.uv1.set(uv1);\n    this.uv2.set(uv2);\n    this.uv3.set(uv3);\n    this.sortPoints(this.p1, this.p2, this.p3, this.uv1, this.uv2, this.uv3);\n    var line12 = Line.calculate(this.p1, this.p2);\n    var line13 = Line.calculate(this.p1, this.p3);\n    var line23 = Line.calculate(this.p2, this.p3); // Convert UV 0..1 range to real texture coordinates\n\n    this.uvMul.set(texture.getWidth() - 1, texture.getHeight() - 1, 1);\n    this.uv1.multiply(this.uvMul);\n    this.uv2.multiply(this.uvMul);\n    this.uv3.multiply(this.uvMul);\n    this.uv1.round();\n    this.uv2.round();\n    this.uv3.round();\n    this.interpolate(line12, this.uv1, this.uv2, this.uv12);\n    this.interpolate(line13, this.uv1, this.uv3, this.uv13);\n    this.interpolate(line23, this.uv2, this.uv3, this.uv23);\n    Line.step(line23);\n    this.uvLeft.set(this.uv1);\n    this.uvRight.set(this.uv1);\n    this.uvLeft2.set(this.uv2);\n    var uv12Length = Math.sqrt((this.uv2.x - this.uv1.x) * (this.uv2.x - this.uv1.x) + (this.uv2.y - this.uv1.y) * (this.uv2.y - this.uv1.y));\n    var uv13Length = Math.sqrt((this.uv3.x - this.uv1.x) * (this.uv3.x - this.uv1.x) + (this.uv3.y - this.uv1.y) * (this.uv3.y - this.uv1.y));\n    var uv23Length = Math.sqrt((this.uv3.x - this.uv2.x) * (this.uv3.x - this.uv2.x) + (this.uv3.y - this.uv2.y) * (this.uv3.y - this.uv2.y));\n    this.uvRight.add(this.uv13, true);\n    this.uvLeft.add(this.uv12, true);\n    this.uvLeft2.add(this.uv23);\n    this.drawHalf(line12, line13, this.uvLeft, this.uvRight, this.uv12, this.uv13, texture, false, uv12Length, uv13Length, surface);\n    this.drawHalf(line23, line13, this.uvLeft2, this.uvRight, this.uv23, this.uv13, texture, true, uv23Length, uv13Length, surface);\n  },\n\n  /**\n   * @protected\n   * @param {object} line\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} resultLine\n   */\n  interpolate: function interpolate(line, uv1, uv2, resultLine) {\n    resultLine.x = (uv2.x - uv1.x) / ((line.dy + 1) * line.sy);\n    resultLine.y = (uv2.y - uv1.y) / ((line.dy + 1) * line.sy);\n  },\n\n  /**\n   * @protected\n   * @param {object} lineA\n   * @param {object} lineB\n   * @param {Point3D} uvLeft\n   * @param {Point3D} uvRight\n   * @param {Point3D} uvAdderLeft\n   * @param {Point3D} uvAdderRight\n   * @param {Material} texture\n   * @param {Boolean} secondHalf\n   * @param {Number} uvLeftLength\n   * @param {Number} uvRightLength\n   * @param {Surface} surface\n   */\n  drawHalf: function drawHalf(lineA, lineB, uvLeft, uvRight, uvAdderLeft, uvAdderRight, texture, secondHalf, uvLeftLength, uvRightLength, surface) {\n    if (!surface || !texture) {\n      return;\n    }\n\n    var data = surface.getData();\n    var uvData = texture.data;\n\n    if (!data || !uvData) {\n      return;\n    }\n\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var uvWidth = texture.getWidth();\n    var y = lineA.py1;\n    var maxX = width;\n    var minX = 0;\n    var ptr = y * width + 1 << 2; // jshint ignore:line\n\n    while ( // eslint-disable-next-line no-unmodified-loop-condition\n    secondHalf === true && (lineA.done !== true || lineB.done !== true) || lineA.done !== true && lineB.done !== true) {\n      Line.step(lineA);\n      Line.step(lineB);\n      minX = Math.max(0, Math.min(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n      ptr += width - maxX + minX - 1 << 2; // jshint ignore:line\n\n      maxX = Math.min(width - 1, Math.max(lineA.lastPlotX, lineA.pxStart, lineB.lastPlotX, lineB.pxStart));\n\n      if (y >= 0 && y < height && minX <= maxX) {\n        if (Math.min(lineA.lastPlotX, lineA.pxStart) < Math.min(lineB.lastPlotX, lineB.pxStart)) {\n          this.uvSlider.set(uvRight);\n          this.uvSlider.subtract(uvLeft, true);\n          this.uvPos.set(uvLeft);\n        } else {\n          this.uvSlider.set(uvLeft);\n          this.uvSlider.subtract(uvRight, true);\n          this.uvPos.set(uvRight);\n        }\n\n        this.uvSlider.divideByVal(Math.max(maxX - minX + 1, 1)); // y = y; // debug\n\n        for (var x = minX; x <= maxX; x++) {\n          var uvX = Math.round(this.uvPos.x);\n          var uvY = Math.round(this.uvPos.y);\n          var uvPtr = uvY * uvWidth + uvX << 2; // jshint ignore:line\n\n          data[ptr++] = uvData[uvPtr];\n          data[ptr++] = uvData[uvPtr + 1];\n          data[ptr++] = uvData[uvPtr + 2];\n          ptr++;\n          this.uvPos.add(this.uvSlider);\n        }\n\n        this.uvPos.subtract(this.uvSlider); // y = y; // debug\n      } else {\n        ptr += maxX - minX + 1 << 2; // jshint ignore:line\n      }\n\n      uvLeft.add(uvAdderLeft);\n      uvRight.add(uvAdderRight);\n      y += lineA.sy;\n    }\n\n    uvLeft.subtract(uvAdderLeft);\n    uvRight.subtract(uvAdderRight); // uvRightOrig.set( uvRight );\n  },\n  sortPoints: function sortPoints(p1, p2, p3, uv1, uv2, uv3) {\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      uv3.swap(uv1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      uv2.swap(uv1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      uv3.swap(uv2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/draw.js\n// import { Surface } from \'./surface\';\n // import { Point2D } from \'./point-2d\';\n// import { Point3D } from \'./point-3d\';\n// import { CanvasTexture } from \'./canvas-texture\';\n\n\n\n\n\nvar Draw = {\n  /**\n   * @type {Surface}\n   */\n  surface: null,\n\n  /**\n   * @type {Color}\n   */\n  color: new color_Color(255, 0, 0),\n\n  /**\n   * @type {Color}\n   */\n  bgColor: new color_Color(64, 64, 64),\n\n  /**\n   * @param {Surface} surface\n   * @public\n   */\n  setSurface: function setSurface(surface) {\n    Draw.surface = surface;\n  },\n\n  /**\n   * @returns {Surface}\n   * @public\n   */\n  getSurface: function getSurface() {\n    return Draw.surface;\n  },\n\n  /**\n   * @public\n   */\n  beginPaint: function beginPaint() {\n    Draw.surface.beginPaint();\n    Draw.clear();\n  },\n\n  /**\n   * @public\n   */\n  endPaint: function endPaint() {\n    Draw.surface.endPaint();\n  },\n\n  /**\n   * @returns {Boolean}\n   * @public\n   */\n  isDrawing: function isDrawing() {\n    return Draw.surface.isDrawing();\n  },\n\n  /**\n   * @public\n   */\n  clear: function clear() {\n    Draw.surface.clear(Draw.bgColor);\n  },\n\n  /**\n   * @param {Point2D} point\n   * @param {Color} color\n   * @public\n   */\n  setPixel: function setPixel(point, color) {\n    var x = Math.round(point.x);\n    var y = Math.round(point.y);\n\n    if (x < 0 || y < 0 || x >= Draw.surface.getWidth() || y >= Draw.surface.getHeight()) {\n      return;\n    }\n\n    var data = Draw.surface.getData();\n    var ptr = (x + y * Draw.surface.getWidth()) * 4;\n    data[ptr++] = color.r;\n    data[ptr++] = color.g;\n    data[ptr] = color.b;\n  },\n\n  /**\n   * @param {Point2D} point\n   * @param {Color} color\n   * @public\n   */\n  blendPixel: function blendPixel(point, color) {\n    var x = Math.round(point.x);\n    var y = Math.round(point.y);\n\n    if (x < 0 || y < 0 || x >= Draw.surface.getWidth() || y >= Draw.surface.getHeight()) {\n      return;\n    }\n\n    var data = Draw.surface.getData();\n    var ptr = (x + y * Draw.surface.getWidth()) * 4;\n    var ptrpp = ptr + 1;\n    var ptrp2 = ptr + 2;\n    var colMul = color.a / 255;\n    var rd = (color.r - data[ptr]) * colMul;\n    var gd = (color.g - data[ptrpp]) * colMul;\n    var bd = (color.b - data[ptrp2]) * colMul;\n    data[ptr] += rd;\n    data[ptrpp] += gd;\n    data[ptrp2] += bd;\n  },\n  blendValue: function blendValue(bgValue, fgValue, opacity) {\n    if (opacity === 255) {\n      return fgValue;\n    }\n\n    if (opacity === 0) {\n      return bgValue;\n    }\n\n    return Math.min(255, Math.max(0, bgValue + Math.round((fgValue - bgValue) * (opacity / 255))));\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Color} color\n   * @public\n   */\n  line: function line(p1, p2, color) {\n    Line.draw(p1, p2, color, Draw.surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @public\n   */\n  triangle: function triangle(p1, p2, p3, color) {\n    BetterTriangle.draw(p1, p2, p3, color, Draw.surface); // BetterTexturedTriangle.draw( p1, p2, p3, color );\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @public\n   */\n  interpolatedTriangle: function interpolatedTriangle(p1, p2, p3, c1, c2, c3) {\n    BetterInterpolatedTriangle.draw(p1, p2, p3, c1, c2, c3, Draw.surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Point3D} uv1\n   * @param {Point3D} uv2\n   * @param {Point3D} uv3\n   * @param {CanvasTexture} texture\n   * @public\n   */\n  texturedTriangle: function texturedTriangle(p1, p2, p3, uv1, uv2, uv3, texture) {\n    textured_triangle_TexturedTriangle.draw(p1, p2, p3, uv1, uv2, uv3, texture, Draw.surface);\n  }\n};\n// CONCATENATED MODULE: ./lib/core/app.js\n\n\n\n\n\nvar app_App =\n/*#__PURE__*/\nfunction () {\n  function App(canvasElementId) {\n    Object(classCallCheck["a" /* default */])(this, App);\n\n    this.drawing = false;\n    this.paused = false;\n    this.startTime = new Date();\n\n    if (canvasElementId) {\n      this.canvasId = canvasElementId;\n      this.canvas = Helper.getElement(this.canvasId);\n      this.canvasContext = this.canvas.getContext(\'2d\');\n      this.canvasPixels = this.canvas.getContext(\'2d\').createImageData(this.canvas.width, this.canvas.height);\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.canvas.width, this.canvas.height, this.canvasPixels.data);\n      this.virtualSurface.clear();\n    } else {\n      this.canvas = null;\n      this.canvasId = \'\';\n      this.canvasContext = null;\n      this.canvasPixels = null;\n      this.virtualSurface = null;\n    }\n  }\n  /**\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(App, [{\n    key: "startDrawing",\n    value: function startDrawing() {\n      this.drawing = true;\n      Draw.setSurface(this.virtualSurface); // Draw.setSurface( this.virtualSurface );\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "endDrawing",\n    value: function endDrawing(pushToCanvas) {\n      if (pushToCanvas === true) {\n        this.canvas.getContext(\'2d\').putImageData(this.canvasPixels, 0, 0);\n      }\n\n      this.drawing = false;\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isDrawing",\n    value: function isDrawing() {\n      return this.drawing;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {}\n    /**\n     * @returns {boolean}\n     * @public\n     */\n\n  }, {\n    key: "isPaused",\n    value: function isPaused() {\n      return this.paused;\n    }\n    /**\n     * @public\n     * @param {boolean} isPaused\n     */\n\n  }, {\n    key: "setPaused",\n    value: function setPaused(isPaused) {\n      this.paused = isPaused;\n    }\n  }]);\n\n  return App;\n}();\n// CONCATENATED MODULE: ./lib/core/normalized-color.js\n\n\n\nvar normalized_color_NormalizedColor =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {int|float|Number|NormalizedColor|Color} [r=0]\n   * @param {int|float|Number} [g=0]\n   * @param {int|float|Number} [b=0]\n   * @param {int|float|Number} [a=1]\n   * @constructor\n   */\n  function NormalizedColor(r, g, b, a) {\n    Object(classCallCheck["a" /* default */])(this, NormalizedColor);\n\n    this.set(r, g, b, a);\n  }\n  /**\n   * @param {float|Color|NormalizedColor} [r=0]\n   * @param {int|float|Number} [g=0]\n   * @param {int|float|Number} [b=0]\n   * @param {int|float|Number} [a=1]\n   */\n\n\n  Object(createClass["a" /* default */])(NormalizedColor, [{\n    key: "set",\n    value: function set(r, g, b, a) {\n      if (r instanceof color_Color) {\n        r.getNormalizedColor(this);\n      } else if (r instanceof NormalizedColor) {\n        this.r = r.r;\n        this.g = r.g;\n        this.b = r.b;\n        this.a = r.a;\n      } else {\n        this.r = Math.max(Math.min(r, 1), 0) || 0;\n        this.g = Math.max(Math.min(g, 1), 0) || 0;\n        this.b = Math.max(Math.min(b, 1), 0) || 0;\n        this.a = Math.max(Math.min(a, 1), 0) || 1;\n      }\n    }\n    /**\n     * @param {Color} color\n     */\n\n  }, {\n    key: "getColor",\n    value: function getColor(color) {\n      color.r = Math.round(this.r * 255);\n      color.g = Math.round(this.g * 255);\n      color.b = Math.round(this.b * 255);\n      color.a = Math.round(this.a * 255);\n    }\n    /**\n     * @param {NormalizedColor} color\n     */\n\n  }, {\n    key: "add",\n    value: function add(color) {\n      this.r = this.r + color.r;\n      this.g = this.g + color.g;\n      this.b = this.b + color.b;\n    }\n  }]);\n\n  return NormalizedColor;\n}();\n/**\n * @link http://www.cs.rit.edu/~ncs/color/t_convert.html\n * @param {Number} hue 0..359\n * @param {Number} saturation 0..1\n * @param {Number} value 0..1\n * @param {NormalizedColor} targetColor\n * @static\n * @public\n */\n\nnormalized_color_NormalizedColor.hsvToRgb = function (hue, saturation, value, targetColor) {\n  if (saturation === 0) {\n    targetColor.set(value, value, value);\n    return;\n  }\n\n  var sector = hue / 60.0;\n  var flooredHue = Math.floor(sector);\n  var factorial = sector - flooredHue;\n  var p = value * (1 - saturation);\n  var q = value * (1 - saturation * factorial);\n  var t = value * (1 - saturation * (1 - factorial));\n\n  switch (flooredHue) {\n    case 0:\n      targetColor.set(value, t, p);\n      break;\n\n    case 1:\n      targetColor.set(q, value, p);\n      break;\n\n    case 2:\n      targetColor.set(p, value, t);\n      break;\n\n    case 3:\n      targetColor.set(p, q, value);\n      break;\n\n    case 4:\n      targetColor.set(t, p, value);\n      break;\n\n    default:\n      targetColor.set(value, p, q);\n      break;\n  }\n};\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/app.js\n\n\n\n\n\n\n\n\n\nvar app_BilinearInterpolatorApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(BilinearInterpolatorApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {number} q11\n   * @param {number} q12\n   * @param {number} q21\n   * @param {number} q22\n   * @constructor\n   * @extends {app.js}\n   */\n  function BilinearInterpolatorApp(targetCanvasId, q11, q12, q21, q22) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BilinearInterpolatorApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(BilinearInterpolatorApp).call(this, targetCanvasId));\n    _this.q11 = q11;\n    _this.q12 = q12;\n    _this.q21 = q21;\n    _this.q22 = q22;\n\n    _this.initializeLookupTable();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BilinearInterpolatorApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var width = this.canvas.width;\n      var height = this.canvas.height;\n      var widthMinus = width - 1;\n      var heightMinus = height - 1;\n      var ptr = 0;\n      var canvasPixels = this.canvasPixels;\n      var canvasData = canvasPixels.data;\n      var x1 = 0;\n      var x2 = widthMinus;\n      var y1 = 0;\n      var y2 = heightMinus;\n      var normalColor = new normalized_color_NormalizedColor();\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var x2MinusX = x2 - x;\n          var y2MinusY = y2 - y;\n          var xMinusX1 = x - x1;\n          var yMinusY1 = y - y1;\n          var hue = this.q11 * this.lookupTable[x2MinusX][y2MinusY] + this.q21 * this.lookupTable[xMinusX1][y2MinusY] + this.q12 * this.lookupTable[x2MinusX][yMinusY1] + this.q22 * this.lookupTable[xMinusX1][yMinusY1];\n          normalized_color_NormalizedColor.hsvToRgb(hue, 1.0, 1.0, normalColor);\n          canvasData[ptr++] = Math.round(normalColor.r * 255);\n          canvasData[ptr++] = Math.round(normalColor.g * 255);\n          canvasData[ptr++] = Math.round(normalColor.b * 255);\n          canvasData[ptr++] = 255;\n        }\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(canvasPixels, 0, 0);\n      this.endDrawing();\n    }\n    /**\n     * @private\n     * @returns {Array}\n     */\n\n  }, {\n    key: "createMultidimensionalArray",\n    value: function createMultidimensionalArray() {\n      if (arguments.length > 1) {\n        var thisDimension = new Array(arguments[0]);\n        var slicedArguments = Array.prototype.slice.call(arguments);\n        slicedArguments.shift();\n\n        for (var i = 0; i < thisDimension.length; i++) {\n          thisDimension[i] = this.createMultidimensionalArray(slicedArguments);\n        }\n\n        return thisDimension;\n      } else if (arguments.length === 1) {\n        return new Float32Array(lodash["isArray"](arguments[0]) ? arguments[0][0] : arguments[0]);\n      }\n\n      throw new Error(\'Failed to create the specified array\');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: "initializeLookupTable",\n    value: function initializeLookupTable() {\n      var width = this.canvas.width;\n      var height = this.canvas.height;\n      var heightMinus = height - 1;\n      var widthMinus = width - 1;\n      var x1 = 0;\n      var x2 = widthMinus;\n      var y1 = 0;\n      var y2 = heightMinus;\n      var oneDivX2MinusX1MulY2MinusY1 = 1 / ((x2 - x1) * (y2 - y1)) * 359.0;\n      this.lookupTable = this.createMultidimensionalArray(width, height);\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          this.lookupTable[x2 - x][y2 - y] = (x2 - x) * (y2 - y) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x - x1][y2 - y] = (x - x1) * (y2 - y) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x2 - x][y - y1] = (x2 - x) * (y - y1) * oneDivX2MinusX1MulY2MinusY1;\n          this.lookupTable[x - x1][y - y1] = (x - x1) * (y - y1) * oneDivX2MinusX1MulY2MinusY1;\n        }\n      }\n    }\n  }]);\n\n  return BilinearInterpolatorApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bilinear-interpolator/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n\nvar bilinear_interpolatorvue_type_script_lang_js_class, bilinear_interpolatorvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar bilinear_interpolatorvue_type_script_lang_js_BilinearInterpolator = Object(vue_class_component_esm["a" /* default */])(bilinear_interpolatorvue_type_script_lang_js_class = (bilinear_interpolatorvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(BilinearInterpolator, _VueWrapper);\n\n  function BilinearInterpolator() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BilinearInterpolator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(BilinearInterpolator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "directions", [{\n      name: \'q11\',\n      speed: 0.005,\n      direction: -1\n    }, {\n      name: \'q12\',\n      speed: 0.0035,\n      direction: 1\n    }, {\n      name: \'q21\',\n      speed: 0.0015,\n      direction: 1\n    }, {\n      name: \'q22\',\n      speed: 0.002,\n      direction: -1\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BilinearInterpolator, [{\n    key: "updateDirections",\n    value: function updateDirections() {\n      var app = this.app;\n      var directions = this.directions;\n\n      if (!app) {\n        return;\n      }\n\n      for (var i = 0; i < 4; i++) {\n        var val = app[directions[i].name];\n        val += directions[i].speed * directions[i].direction;\n\n        if (val < 0) {\n          directions[i].direction = 1;\n          val = 0;\n        }\n\n        if (val > 1) {\n          directions[i].direction = -1;\n          val = 1;\n        }\n\n        app[directions[i].name] = val;\n      }\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_BilinearInterpolatorApp(\'surface\', 1.0, 0.7, 0.5, 0.3);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.updateDirections();\n      this.app.draw();\n    }\n  }]);\n\n  return BilinearInterpolator;\n}(vue_wrapper), bilinear_interpolatorvue_type_script_lang_js_temp)) || bilinear_interpolatorvue_type_script_lang_js_class;\n\n/* harmony default export */ var bilinear_interpolatorvue_type_script_lang_js_ = (bilinear_interpolatorvue_type_script_lang_js_BilinearInterpolator);\n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_bilinear_interpolatorvue_type_script_lang_js_ = (bilinear_interpolatorvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/bilinear-interpolator/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar bilinear_interpolator_component = Object(componentNormalizer["a" /* default */])(\n  effects_bilinear_interpolatorvue_type_script_lang_js_,\n  bilinear_interpolatorvue_type_template_id_ce247d7a_render,\n  bilinear_interpolatorvue_type_template_id_ce247d7a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var bilinear_interpolator = (bilinear_interpolator_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bump-mapping/index.vue?vue&type=template&id=68d7948e&\nvar bump_mappingvue_type_template_id_68d7948e_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"320","height":"200"},on:{"mousemove":_vm.onMouseMove,"mouseout":_vm.onMouseOut,"mouseover":_vm.onMouseOver}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Bump Mapping")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Light Distance","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"512"},on:{"update":_vm.updateDistance},model:{value:(_vm.distance),callback:function ($$v) {_vm.distance=$$v},expression:"distance"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Emboss Depth","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"1000"},on:{"update":_vm.updateEmboss},model:{value:(_vm.emboss),callback:function ($$v) {_vm.emboss=$$v},expression:"emboss"}})],1)],1)],1)}\nvar bump_mappingvue_type_template_id_68d7948e_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Normal_mapping"}},[_vm._v("bump mapping")]),_vm._v("\\n        (normal mapping) on a 2D surface. Move your mouse over the canvas to control the light source.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue?vue&type=template&id=68d7948e&\n\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/app.js\n\n\n\n\n\n\n\nvar app_BumpMappingApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(BumpMappingApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {CanvasTexture} texture\n   * @param {CanvasTexture} heightMapTexture\n   * @constructor\n   * @extends {app.js}\n   */\n  function BumpMappingApp(targetCanvasId, texture, heightMapTexture) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BumpMappingApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(BumpMappingApp).call(this, targetCanvasId));\n    _this.heightMapTexture = heightMapTexture;\n    _this.texture = texture;\n    _this.lightPosition = new vector_3d_Vector3D();\n    _this.drawing = false;\n    _this.precalculated = false;\n    _this.precalculatedNormals = [];\n    _this.embossDepth = 48 / 50;\n\n    _this.heightMapTexture.onload = function () {\n      _this.precalculateNormals();\n    };\n\n    return _this;\n  }\n  /**\n   * @param {float} pointHeight Height at X, Y\n   * @param {float} pointHeightRight Height at X + 1, Y\n   * @param {float} pointHeightAbove Height at X, Y - 1\n   * @return {Vector3D} Bump map normal\n   * @private\n   */\n\n\n  Object(createClass["a" /* default */])(BumpMappingApp, [{\n    key: "calculateNormal",\n    value: function calculateNormal(pointHeight, pointHeightRight, pointHeightAbove) {\n      var phphaDifference = pointHeight - pointHeightAbove;\n      var phphrDifference = pointHeight - pointHeightRight;\n      var divisor = Math.sqrt(phphaDifference * phphaDifference + phphrDifference * phphrDifference + this.embossDepth);\n      /**\n       * Note: Have taken out z / divisor here, because it softens the image\n       * image too much for my taste.\n       */\n\n      return new vector_3d_Vector3D(phphaDifference / divisor, phphrDifference / divisor, this.embossDepth\n      /* / divisor */\n      );\n    }\n    /**\n     * Calculates a normal for each pixel in the height map\n     * @private\n     */\n\n  }, {\n    key: "precalculateNormals",\n    value: function precalculateNormals() {\n      var width = this.heightMapTexture.getWidth();\n      var height = this.heightMapTexture.getHeight();\n      var widthMinus = width - 1;\n      var pixels = this.heightMapTexture.getPixels();\n      var data = pixels.data;\n      var abovePtr = 0;\n      var ptr = width * 4; // ignore first line\n\n      var singlePtr = width;\n      this.precalculatedNormals = new Array(width * height);\n\n      for (var y = 1; y < height; y++) {\n        for (var x = 0; x < widthMinus; x++) {\n          var bumpNormal = this.calculateNormal(data[ptr], data[ptr + 4], data[abovePtr]);\n          bumpNormal.normalize();\n          this.precalculatedNormals[singlePtr] = bumpNormal;\n          abovePtr += 4;\n          ptr += 4;\n          singlePtr++;\n        } // Take in account width - 1\n\n\n        abovePtr += 4;\n        ptr += 4;\n        singlePtr++;\n      }\n\n      this.precalculated = true;\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (this.isLoaded() !== true) {\n        return;\n      }\n\n      if (this.hasPrecalculated() !== true) {\n        this.precalculateNormals();\n      }\n\n      this.startDrawing();\n      var width = this.heightMapTexture.getWidth();\n      var height = this.heightMapTexture.getHeight();\n      var widthMinus = width - 1;\n      var texturePixels = this.texture.getPixels();\n      var textureData = texturePixels.data;\n      var precalc = this.precalculatedNormals;\n      var realLightPos = new vector_3d_Vector3D();\n      var lightPos = this.lightPosition;\n      var lightPosZDiv2 = lightPos.z / 2;\n      var ptr = width * 4; // ignore top line\n\n      var singlePtr = width;\n\n      for (var y = 1; y < height; y++) {\n        for (var x = 0; x < widthMinus; x++) {\n          realLightPos.set(-(lightPos.y - y), lightPos.x - x, lightPosZDiv2);\n          var bumpDot = realLightPos.dot(precalc[singlePtr]);\n          var distMul = bumpDot / lightPos.distance(x, y, 0);\n          var ptrpp = ptr + 1;\n          var ptrp2 = ptr + 2;\n          textureData[ptr] = textureData[ptr] * distMul;\n          textureData[ptrpp] = textureData[ptrpp] * distMul;\n          textureData[ptrp2] = textureData[ptrp2] * distMul;\n          ptr += 4;\n          singlePtr++;\n        } // take in account width - 1\n\n\n        ptr += 4;\n        singlePtr++;\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(texturePixels, 0, 0);\n      this.endDrawing();\n    }\n    /**\n     * @param {float|int} x\n     * @param {float|int} y\n     * @param {float|int} z\n     * @public\n     */\n\n  }, {\n    key: "setLightPos",\n    value: function setLightPos(x, y, z) {\n      this.lightPosition.x = x;\n      this.lightPosition.y = y;\n      this.lightPosition.z = z;\n    }\n    /**\n     * @param {float|int} depth\n     * @public\n     */\n\n  }, {\n    key: "setEmbossDepth",\n    value: function setEmbossDepth(depth) {\n      this.embossDepth = depth;\n      this.precalculateNormals();\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isLoaded",\n    value: function isLoaded() {\n      return this.heightMapTexture.loaded === true && this.texture.loaded === true;\n    }\n    /**\n     * @returns {Boolean}\n     * @private\n     */\n\n  }, {\n    key: "hasPrecalculated",\n    value: function hasPrecalculated() {\n      return this.precalculated;\n    }\n  }]);\n\n  return BumpMappingApp;\n}(app_App);\n// CONCATENATED MODULE: ./lib/core/texture.js\n\n\n\nvar texture_Texture =\n/*#__PURE__*/\nfunction () {\n  function Texture() {\n    Object(classCallCheck["a" /* default */])(this, Texture);\n\n    this.loaded = false;\n    this.canvas = null;\n    this.context = null;\n    this.data = null;\n    this.virtualSurface = null;\n  }\n\n  Object(createClass["a" /* default */])(Texture, [{\n    key: "getWidth",\n\n    /**\n     * @return {int}\n     * @abstract\n     * @public\n     */\n    value: function getWidth() {\n      return 0;\n    }\n    /**\n     * @return {int}\n     * @abstract\n     * @public\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return 0;\n    }\n    /**\n     * @return {CanvasPixelArray}\n     * @abstract\n     * @public\n     **/\n\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      return null;\n    }\n    /**\n     * @param {CanvasPixelArray} pixels\n     * @public\n     */\n\n  }, {\n    key: "setPixels",\n    value: function setPixels(pixels) {\n      this.context.putImageData(pixels, 0, 0);\n    }\n    /**\n     * @public\n     * @returns {VirtualSurface}\n     */\n\n  }, {\n    key: "getVirtualSurface",\n    value: function getVirtualSurface() {\n      return this.virtualSurface;\n    }\n    /**\n     * @public\n     * @abstract\n     */\n\n  }, {\n    key: "create",\n    value: function create() {}\n    /**\n     * @public\n     * @abstract\n     */\n\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n    /**\n     * @param {VirtualSurface} destVirtualSurface\n     * @param {int} posX\n     * @param {int} posY\n     * @param {int} [offsetX=0]\n     * @param {int} [offsetY=0]\n     * @param {int} [offsetWidth=sourceTexture.getWidth()]\n     * @param {int} [offsetHeight=sourceTexture.getHeight()]\n     * @public\n     */\n\n  }, {\n    key: "draw",\n    value: function draw(destVirtualSurface, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight) {\n      Texture.draw(destVirtualSurface, this, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight);\n    }\n  }]);\n\n  return Texture;\n}();\n/**\n * @param {VirtualSurface} destVirtualSurface\n * @param {Texture} sourceTexture\n * @param {int} posX\n * @param {int} posY\n * @param {int} [offsetX=0]\n * @param {int} [offsetY=0]\n * @param {int} [offsetWidth=sourceTexture.getWidth()]\n * @param {int} [offsetHeight=sourceTexture.getHeight()]\n * @public\n */\n\ntexture_Texture.draw = function (destVirtualSurface, sourceTexture, posX, posY, offsetX, offsetY, offsetWidth, offsetHeight) {\n  if (!sourceTexture || !destVirtualSurface) {\n    return;\n  }\n\n  var destData = destVirtualSurface.getData();\n  var destWidth = destVirtualSurface.getWidth();\n  var destHeight = destVirtualSurface.getHeight();\n  var textureWidth = sourceTexture.getWidth();\n  var textureHeight = sourceTexture.getHeight();\n\n  if (posX >= textureWidth || posY >= textureHeight || posX + textureWidth <= 0 || posY + textureHeight <= 0) {\n    return;\n  }\n\n  offsetX = Math.round(Math.min(textureWidth - 1, Math.max(0, offsetX || 0)));\n  offsetY = Math.round(Math.min(textureHeight - 1, Math.max(0, offsetY || 0)));\n  offsetWidth = Math.round(Math.min(textureWidth, Math.max(0, offsetWidth || textureWidth)));\n  offsetHeight = Math.round(Math.min(textureHeight, Math.max(0, offsetHeight || textureHeight)));\n  posX = Math.round(posX);\n  posY = Math.round(posY);\n\n  if (posX < 0) {\n    offsetX += -posX;\n    offsetWidth += posX;\n    posX = 0;\n  }\n\n  if (posY < 0) {\n    offsetY += -posY;\n    offsetHeight += posY;\n    posY = 0;\n  }\n\n  if (posX + offsetWidth > destWidth) {\n    offsetWidth = destWidth - posX;\n  }\n\n  if (posY + offsetHeight > destHeight) {\n    offsetHeight = destHeight - posY;\n  }\n\n  if (offsetWidth <= 0 || offsetHeight <= 0) {\n    return;\n  }\n\n  var destPtr = (posX + posY * destWidth) * 4;\n  var sourcePtr = (offsetX + offsetY * textureWidth) * 4;\n  var sourceOffsetAdder = (textureWidth - offsetWidth) * 4;\n  var destOffsetAdder = (destWidth - offsetWidth) * 4;\n  var sourceData = sourceTexture.getPixels().data;\n\n  for (var y = 0; y < offsetHeight; y++) {\n    for (var x = 0; x < offsetWidth; x++) {\n      var fgAlpha = sourceData[sourcePtr + 3];\n\n      if (fgAlpha === 0) {\n        sourcePtr += 3;\n        destPtr += 3;\n      } else if (fgAlpha === 255) {\n        destData[destPtr++] = sourceData[sourcePtr++];\n        destData[destPtr++] = sourceData[sourcePtr++];\n        destData[destPtr++] = sourceData[sourcePtr++];\n      } else {\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n        destData[destPtr] = Draw.blendValue(destData[destPtr], sourceData[sourcePtr++], fgAlpha);\n        destPtr++;\n      }\n\n      destPtr++;\n      sourcePtr++;\n    }\n\n    sourcePtr += sourceOffsetAdder;\n    destPtr += destOffsetAdder;\n  }\n};\n// CONCATENATED MODULE: ./lib/core/canvas-texture.js\n\n\n\n\n\n\n\n\n/**\n * @param {string} src URI/URL to texture resource\n * @constructor\n * @extends {Texture}\n */\n\nvar canvas_texture_CanvasTexture =\n/*#__PURE__*/\nfunction (_Texture) {\n  Object(inherits["a" /* default */])(CanvasTexture, _Texture);\n\n  function CanvasTexture(src) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CanvasTexture);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(CanvasTexture).call(this));\n    _this.canvas = _this.create();\n    _this.context = _this.canvas.getContext(\'2d\');\n    _this.loaded = false;\n    _this.image = new Image();\n    _this.image.crossOrigin = \'Anonymous\';\n    _this.image.src = src;\n    _this.wasDrawn = false; // Let\'s update stuff once the image has loaded\n\n    _this.image.onload = function () {\n      _this.loaded = true;\n      _this.canvas.width = _this.image.width;\n      _this.canvas.height = _this.image.height;\n      _this.data = _this.getPixels().data;\n      _this.wasDrawn = false;\n      _this.virtualSurface = new virtual_surface_VirtualSurface(_this.image.width, _this.image.height, _this.data);\n\n      if (typeof _this.onload === \'function\') {\n        _this.onload();\n      }\n    };\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CanvasTexture, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.image.width;\n    }\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.image.height;\n    }\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      if (this.wasDrawn === false) {\n        this.context.drawImage(this.image, 0, 0);\n        this.wasDrawn = true;\n      }\n\n      return this.context.getImageData(0, 0, this.getWidth(), this.getHeight());\n    }\n  }, {\n    key: "create",\n    value: function create() {\n      var canvas = Helper.createElement(\'canvas\');\n      canvas.width = 1;\n      canvas.height = 1;\n      return canvas;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      Helper.removeElement(this.canvas);\n      this.loaded = false;\n      this.image = null;\n      this.context = null;\n      this.canvas = null;\n    }\n  }]);\n\n  return CanvasTexture;\n}(texture_Texture);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/bump-mapping/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar bump_mappingvue_type_script_lang_js_class, bump_mappingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\nvar bump_mappingvue_type_script_lang_js_BumpMapping = Object(vue_class_component_esm["a" /* default */])(bump_mappingvue_type_script_lang_js_class = (bump_mappingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(BumpMapping, _VueWrapper);\n\n  function BumpMapping() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, BumpMapping);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(BumpMapping)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radsPerSecond", 0.8);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radius", 120);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lightPosX", 160);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lightPosY", 100);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "distance", 100);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "emboss", 48);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(BumpMapping, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var heightmap = new canvas_texture_CanvasTexture(\'./resources/apps/bump-mapping/mbaco-heightmap2.png\');\n      var texture = new canvas_texture_CanvasTexture(\'./resources/apps/bump-mapping/mbaco-texture.png\');\n      var app = new app_BumpMappingApp(\'surface\', texture, heightmap);\n      app.setLightPos(this.lightPosX, this.lightPosY, this.distance); // app.setEmbossDepth(this.emboss / 50);\n\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var runTime = (curTime.getTime() - this.app.startTime.getTime()) / 1000.00;\n      var x = this.lightPosX + this.radius * Math.sin(this.radsPerSecond * runTime);\n      var y = this.lightPosY + this.radius * Math.cos(this.radsPerSecond * runTime);\n      var z = this.app.lightPosition.z;\n      this.app.setLightPos(x, y, z);\n      this.app.draw();\n    }\n  }, {\n    key: "updateDistance",\n    value: function updateDistance(val) {\n      var app = this.app;\n      app.setLightPos(app.lightPosition.x, app.lightPosition.y, val);\n    }\n  }, {\n    key: "updateEmboss",\n    value: function updateEmboss(val) {\n      var app = this.app;\n      app.setEmbossDepth(val / 50);\n    }\n  }, {\n    key: "onMouseMove",\n    value: function onMouseMove(event) {\n      var coordinates = Helper.getCanvasCoordinates(event, \'surface\');\n      this.app.setLightPos(coordinates.x, coordinates.y, this.app.lightPosition.z);\n      this.app.draw();\n    }\n  }, {\n    key: "onMouseOver",\n    value: function onMouseOver(event) {\n      this.app.setPaused(true);\n    }\n  }, {\n    key: "onMouseOut",\n    value: function onMouseOut(event) {\n      this.app.setPaused(false);\n    }\n  }]);\n\n  return BumpMapping;\n}(vue_wrapper), bump_mappingvue_type_script_lang_js_temp)) || bump_mappingvue_type_script_lang_js_class;\n\n/* harmony default export */ var bump_mappingvue_type_script_lang_js_ = (bump_mappingvue_type_script_lang_js_BumpMapping);\n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_bump_mappingvue_type_script_lang_js_ = (bump_mappingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/bump-mapping/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar bump_mapping_component = Object(componentNormalizer["a" /* default */])(\n  effects_bump_mappingvue_type_script_lang_js_,\n  bump_mappingvue_type_template_id_68d7948e_render,\n  bump_mappingvue_type_template_id_68d7948e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var bump_mapping = (bump_mapping_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/crepuscular-rays/index.vue?vue&type=template&id=5e19d612&\nvar crepuscular_raysvue_type_template_id_5e19d612_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"320","height":"200"},on:{"mousemove":_vm.onMouseMove,"mouseout":_vm.onMouseOut,"mouseover":_vm.onMouseOver}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Crepuscular Rays")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Weight","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"200"},on:{"update":_vm.updateWeight},model:{value:(_vm.weight),callback:function ($$v) {_vm.weight=$$v},expression:"weight"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Decay","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateDecay},model:{value:(_vm.decay),callback:function ($$v) {_vm.decay=$$v},expression:"decay"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Exposure","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateExposure},model:{value:(_vm.exposure),callback:function ($$v) {_vm.exposure=$$v},expression:"exposure"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Density","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"2000"},on:{"update":_vm.updateDensity},model:{value:(_vm.density),callback:function ($$v) {_vm.density=$$v},expression:"density"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Samples","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"0","max":"150"},on:{"update":_vm.updateSamples},model:{value:(_vm.samples),callback:function ($$v) {_vm.samples=$$v},expression:"samples"}})],1),_vm._v(" "),_c(\'b-form-group\',[_c(\'b-form-checkbox-group\',{attrs:{"options":_vm.buttonOptions,"buttons":"","size":"sm"},on:{"change":_vm.toggleButtons},model:{value:(_vm.selectedButtons),callback:function ($$v) {_vm.selectedButtons=$$v},expression:"selectedButtons"}})],1)],1)],1)}\nvar crepuscular_raysvue_type_template_id_5e19d612_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Crepuscular_rays"}},[_vm._v("crepuscular rays")]),_vm._v(" (\\"god rays\\")\\n    on a 2D surface. Move your mouse over the canvas to control the light source.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue?vue&type=template&id=5e19d612&\n\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/app.js\n\n\n\n\n\n\n\n\n\nvar app_CrepuscularRaysApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(CrepuscularRaysApp, _App);\n\n  function CrepuscularRaysApp(targetCanvasId, backgroundImageUrl, maskImageUrl) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CrepuscularRaysApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(CrepuscularRaysApp).call(this, targetCanvasId));\n    _this.bgImage = new canvas_texture_CanvasTexture(backgroundImageUrl);\n    _this.maskImage = new canvas_texture_CanvasTexture(maskImageUrl);\n    _this.maskImagePosition = new point_2d_Point2D(-120, -180);\n    _this.drawMask = true;\n    _this.drawBackground = true;\n    _this.dirtySurface = false;\n    _this.drawArea = new virtual_surface_VirtualSurface(_this.canvas.width, _this.canvas.height);\n    _this.totalDrawTime = 0;\n    _this.totalDrawCount = 0;\n    _this.lights = [];\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CrepuscularRaysApp, [{\n    key: "draw",\n    value: function draw() {\n      var drawDest = this.dirtySurface ? this.virtualSurface : this.drawArea;\n      this.startDrawing();\n\n      if (this.drawBackground === true) {\n        this.bgImage.draw(drawDest, 0, 0);\n      }\n\n      for (var i = 0; i < this.lights.length; i++) {\n        if (this.lights[i].active === true && this.lights[i].drawLight === true) {\n          this.lights[i].image.draw(drawDest, this.lights[i].position.x - this.lights[i].image.getWidth() / 2, this.lights[i].position.y - this.lights[i].image.getHeight() / 2);\n        }\n      }\n\n      if (this.drawMask === true) {\n        this.maskImage.draw(drawDest, this.maskImagePosition.x, this.maskImagePosition.y);\n      }\n\n      for (var _i = 0; _i < this.lights.length; _i++) {\n        if (this.lights[_i].active === true) {\n          this.processRays(this.lights[_i], this.virtualSurface.data, drawDest.data);\n        }\n      }\n\n      this.endDrawing(true); // console.log(\'pushed\');\n    }\n  }, {\n    key: "addLight",\n\n    /**\n     * <code>\n     * var lightObject = {\n     *   active: true,\n     *   position: new Point2D( 0, 0 ),\n     *   height: 0.2,\n     *   decay: 0.3,\n     *   exposur: 1,\n     *   density: 0.4,\n     *   samples: 10,\n     *   imageUr: \'resources/light.png\'\n     * };\n     * </code>\n     *\n     * @public\n     * @param {object|Array} lightObject\n     */\n    value: function addLight(lightObject) {\n      if (lightObject instanceof Array) {\n        for (var i = 0; i < lightObject.length; i++) {\n          lightObject[i].image = new canvas_texture_CanvasTexture(lightObject[i].imageUrl);\n          this.lights.push(lightObject[i]);\n        }\n      } else {\n        lightObject.image = new canvas_texture_CanvasTexture(lightObject.imageUrl);\n        this.lights.push(lightObject);\n      }\n    }\n  }, {\n    key: "processRays",\n    value: function processRays(light, dest, source) {\n      var dataPtr = 0;\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var samples = light.samples;\n      var weight = light.weight;\n      var decay = light.decay;\n      var exposure = light.exposure;\n      var lightPosX = light.position.x;\n      var lightPosY = light.position.y;\n      var normalSamplesByDensity = 1.0 / samples * light.density;\n      var maxPtr = width * height * 4;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          // curPos.set( x, y );\n          // deltaTex.set( curPos );\n          // this is faster:\n          var curPosX = x;\n          var curPosY = y;\n          var deltaTexX = x;\n          var deltaTexY = y; // deltaTex.subtract( light.position );\n          // deltaTex.multiplyByVal( normalSamplesByDensity );\n          // this is faster:\n\n          deltaTexX -= lightPosX;\n          deltaTexY -= lightPosY;\n          deltaTexX *= normalSamplesByDensity;\n          deltaTexY *= normalSamplesByDensity; // this.virtualSurface.getPixel( curPos, initialColor );\n          // this is faster:\n\n          var initialR = source[dataPtr];\n          var initialG = source[dataPtr + 1];\n          var initialB = source[dataPtr + 2];\n          var illuminationDecay = 1.0;\n\n          for (var i = 0; i < samples; i++) {\n            // curPos.subtract( deltaTex );\n            // this is faster:\n            curPosX -= deltaTexX;\n            curPosY -= deltaTexY; // this.virtualSurface.getPixel( curPos, curColor );\n            // this is faster:\n\n            var curPtr = (Math.round(curPosX) + Math.round(curPosY) * width) * 4;\n\n            if (curPtr >= 0 && curPtr < maxPtr) {\n              // curColor.multiplyByVal( illuminationDecay * weight, true );\n              // initialColor.add( curColor, true );\n              // this is faster:\n              var curMul = illuminationDecay * weight;\n              var curR = source[curPtr++] * curMul;\n              var curG = source[curPtr++] * curMul;\n              var curB = source[curPtr] * curMul;\n              initialR += curR;\n              initialG += curG;\n              initialB += curB;\n              illuminationDecay *= decay;\n            }\n          } // this is faster:\n\n\n          initialR = Math.max(0, Math.min(255, Math.round(initialR * exposure)));\n          initialG = Math.max(0, Math.min(255, Math.round(initialG * exposure)));\n          initialB = Math.max(0, Math.min(255, Math.round(initialB * exposure)));\n          dest[dataPtr++] = initialR;\n          dest[dataPtr++] = initialG;\n          dest[dataPtr++] = initialB;\n          dataPtr++;\n        }\n      }\n    }\n  }]);\n\n  return CrepuscularRaysApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/crepuscular-rays/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar crepuscular_raysvue_type_script_lang_js_class, crepuscular_raysvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\nvar crepuscular_raysvue_type_script_lang_js_CrepuscularRays = Object(vue_class_component_esm["a" /* default */])(crepuscular_raysvue_type_script_lang_js_class = (crepuscular_raysvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(CrepuscularRays, _VueWrapper);\n\n  function CrepuscularRays() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, CrepuscularRays);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(CrepuscularRays)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "weight", 250);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "decay", 800);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "exposure", 800);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "density", 450);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "samples", 20);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "selectedButtons", [\'drawLight\', \'drawMask\', \'drawBackground\']);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "buttonOptions", [{\n      text: \'Draw Light\',\n      value: \'drawLight\'\n    }, {\n      text: \'Draw Mask\',\n      value: \'drawMask\'\n    }, {\n      text: \'Draw Background\',\n      value: \'drawBackground\'\n    }, {\n      text: \'Dirty Surface\',\n      value: \'dirtySurface\'\n    }]);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radsPerSecond", 0.6);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "radius", 40);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "gridPosX", -120);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "gridPosY", -200);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "noUpdates", false);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lights", [{\n      active: true,\n      drawLight: true,\n      position: new point_2d_Point2D(160, 100),\n      radiusPerSecond: -0.9,\n      radiusX: 80,\n      radiusY: 80,\n      origin: new point_2d_Point2D(160, 100),\n      weight: _this.weight / 1000,\n      decay: _this.decay / 1000,\n      exposure: _this.exposure / 1000,\n      density: _this.density / 1000,\n      samples: _this.samples,\n      imageUrl: \'./resources/apps/crepuscular-rays/light.png\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(CrepuscularRays, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_CrepuscularRaysApp(\'surface\', \'./resources/apps/crepuscular-rays/bg.png\', \'./resources/apps/crepuscular-rays/mask3.png\', \'./resources/apps/crepuscular-rays/light.png\');\n      app.addLight(this.lights);\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var app = this.app;\n\n      if (!this.noUpdates) {\n        var lights = this.lights;\n        var curTime = new Date();\n        var runTime = (curTime.getTime() - app.startTime.getTime()) / 1000.00;\n\n        for (var i = 0; i < lights.length; i++) {\n          lights[i].position.set(lights[i].origin.x + lights[i].radiusX * Math.sin(lights[i].radiusPerSecond * runTime), lights[i].origin.y + lights[i].radiusY * Math.cos(lights[i].radiusPerSecond * runTime));\n        }\n      }\n\n      app.draw();\n    }\n  }, {\n    key: "toggleButtons",\n    value: function toggleButtons(val) {\n      this.app.lights[0].drawLight = val.indexOf(\'drawLight\') >= 0;\n      this.app.drawMask = val.indexOf(\'drawMask\') >= 0;\n      this.app.drawBackground = val.indexOf(\'drawBackground\') >= 0;\n      this.app.dirtySurface = val.indexOf(\'dirtySurface\') >= 0;\n    }\n  }, {\n    key: "updateWeight",\n    value: function updateWeight(val) {\n      this.app.lights[0].weight = val / 1000;\n    }\n  }, {\n    key: "updateDecay",\n    value: function updateDecay(val) {\n      this.app.lights[0].decay = val / 1000;\n    }\n  }, {\n    key: "updateDensity",\n    value: function updateDensity(val) {\n      this.app.lights[0].density = val / 1000;\n    }\n  }, {\n    key: "updateExposure",\n    value: function updateExposure(val) {\n      this.app.lights[0].exposure = val / 1000;\n    }\n  }, {\n    key: "updateSamples",\n    value: function updateSamples(val) {\n      this.app.lights[0].samples = Math.round(val);\n    }\n  }, {\n    key: "onMouseMove",\n    value: function onMouseMove(event) {\n      var coords = Helper.getCanvasCoordinates(event, \'surface\');\n      this.app.lights[0].position.set(coords.x, coords.y);\n    }\n  }, {\n    key: "onMouseOver",\n    value: function onMouseOver(event) {\n      this.noUpdates = true;\n    }\n  }, {\n    key: "onMouseOut",\n    value: function onMouseOut(event) {\n      this.noUpdates = false;\n    }\n  }]);\n\n  return CrepuscularRays;\n}(vue_wrapper), crepuscular_raysvue_type_script_lang_js_temp)) || crepuscular_raysvue_type_script_lang_js_class;\n\n/* harmony default export */ var crepuscular_raysvue_type_script_lang_js_ = (crepuscular_raysvue_type_script_lang_js_CrepuscularRays);\n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_crepuscular_raysvue_type_script_lang_js_ = (crepuscular_raysvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/crepuscular-rays/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar crepuscular_rays_component = Object(componentNormalizer["a" /* default */])(\n  effects_crepuscular_raysvue_type_script_lang_js_,\n  crepuscular_raysvue_type_template_id_5e19d612_render,\n  crepuscular_raysvue_type_template_id_5e19d612_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var crepuscular_rays = (crepuscular_rays_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/fisheye-lens/index.vue?vue&type=template&id=d6a2c11c&\nvar fisheye_lensvue_type_template_id_d6a2c11c_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar fisheye_lensvue_type_template_id_d6a2c11c_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"853","height":"470"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Fisheye Lens")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Distortion_(optics)"}},[_vm._v("radial barrel distortion")]),_vm._v(".")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue?vue&type=template&id=d6a2c11c&\n\n// CONCATENATED MODULE: ./lib/core/empty-texture.js\n\n\n\n\n\n\n\n\nvar empty_texture_EmptyTexture =\n/*#__PURE__*/\nfunction (_Texture) {\n  Object(inherits["a" /* default */])(EmptyTexture, _Texture);\n\n  function EmptyTexture(canvasElementId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, EmptyTexture);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(EmptyTexture).call(this));\n    _this.canvas = Helper.getElement(canvasElementId);\n    _this.context = _this.canvas.getContext(\'2d\');\n\n    _this.create();\n\n    _this.loaded = true;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(EmptyTexture, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.width;\n    }\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.height;\n    }\n  }, {\n    key: "getPixels",\n    value: function getPixels() {\n      return this.data;\n    }\n  }, {\n    key: "create",\n    value: function create() {\n      this.data = this.context.createImageData(this.canvas.width, this.canvas.height);\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.width, this.height, this.data.data);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.loaded = false;\n      this.context = null;\n      this.canvas = null;\n      this.width = 0;\n      this.height = 0;\n      this.data = null;\n    }\n  }]);\n\n  return EmptyTexture;\n}(texture_Texture);\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/app.js\n\n\n\n\n\n\n\n\n\nvar app_FisheyeLensApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(FisheyeLensApp, _App);\n\n  /**\n   * @link http://popscan.blogspot.co.uk/2012/04/fisheye-lens-equation-simple-fisheye.html\n   * @param {string} targetCanvasId\n   * @param {string} bgImageUrl\n   * @constructor\n   * @extends {app.js}\n   */\n  function FisheyeLensApp(targetCanvasId, bgImageUrl) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FisheyeLensApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FisheyeLensApp).call(this, targetCanvasId));\n    _this.bgImage = new canvas_texture_CanvasTexture(bgImageUrl);\n    _this.textures = [new empty_texture_EmptyTexture(targetCanvasId), new empty_texture_EmptyTexture(targetCanvasId)];\n    _this.lenses = [];\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FisheyeLensApp, [{\n    key: "addLens",\n\n    /**\n     * Add a new lens\n     *\n     * <code>\n     * var lens = {\n     *  x: 0,\n     *  y: 0,\n     *  radius: 50\n     * };\n     * </code>\n     *\n     * @param {object} lens\n     * @public\n     */\n    value: function addLens(lens) {\n      this.lenses.push(lens);\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.drawing = true;\n      this.textures[0].data = this.bgImage.context.getImageData(0, 0, this.textures[0].getWidth(), this.textures[0].getHeight());\n      var curSourceCanvas = 0;\n      var curDestCanvas = 1; // this is very unoptimized\n\n      for (var i = 0; i < this.lenses.length; i++) {\n        this.textures[curDestCanvas].data.data.set(new Uint8ClampedArray(this.textures[curSourceCanvas].data.data));\n        this.drawLens(Math.round(this.lenses[i].x), Math.round(this.lenses[i].y), Math.round(this.lenses[i].radius), this.textures[curDestCanvas], this.textures[curSourceCanvas]);\n        curSourceCanvas = 1 - curSourceCanvas;\n        curDestCanvas = 1 - curDestCanvas;\n      }\n\n      this.canvas.getContext(\'2d\').putImageData(this.textures[curSourceCanvas].data, 0, 0);\n      this.drawing = false;\n    }\n    /**\n     * @param {int} posX\n     * @param {int} posY\n     * @param {int} radius\n     * @param {CanvasTexture} destCanvasTexture\n     * @param {CanvasTexture} sourceCanvasTexture\n     * @private\n     */\n\n  }, {\n    key: "drawLens",\n    value: function drawLens(posX, posY, radius, destCanvasTexture, sourceCanvasTexture) {\n      var destData = destCanvasTexture.data.data;\n      var sourceData = sourceCanvasTexture.data.data;\n      var sourceWidth = sourceCanvasTexture.getWidth();\n      var halfRadius = 0.5 * radius;\n\n      for (var y = 0; y < radius; y++) {\n        var ptr = (posX + (y + posY) * destCanvasTexture.getWidth()) * 4;\n        var ny = y / halfRadius - 1.0;\n        var ny2 = ny * ny;\n\n        for (var x = 0; x < radius; x++) {\n          var nx = x / halfRadius - 1.0;\n          var r = Math.sqrt(nx * nx + ny2);\n\n          if (r >= 0.0 && r <= 1.0) {\n            var theta = Math.atan2(ny, nx);\n            var rd = (r + (1 - Math.sqrt(1 - r * r))) / 2;\n\n            if (rd <= 1.0) {\n              var fnx = rd * Math.cos(theta);\n              var fny = rd * Math.sin(theta);\n              var px = posX + Math.round((fnx + 1.0) * halfRadius);\n              var py = posY + Math.round((fny + 1.0) * halfRadius);\n              var bgPtr = (py * sourceWidth + px) * 4;\n              destData[ptr++] = sourceData[bgPtr++];\n              destData[ptr++] = sourceData[bgPtr++];\n              destData[ptr++] = sourceData[bgPtr++];\n              ptr++;\n            } else {\n              ptr += 4;\n            }\n          } else {\n            ptr += 4;\n          }\n        }\n      }\n    }\n  }]);\n\n  return FisheyeLensApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/fisheye-lens/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar fisheye_lensvue_type_script_lang_js_class, fisheye_lensvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\nvar fisheye_lensvue_type_script_lang_js_FisheyeLens = Object(vue_class_component_esm["a" /* default */])(fisheye_lensvue_type_script_lang_js_class = (fisheye_lensvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(FisheyeLens, _VueWrapper);\n\n  function FisheyeLens() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FisheyeLens);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FisheyeLens)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "lenses", [{\n      x: 163,\n      y: 48,\n      radius: 250,\n      dirX: -1,\n      dirY: 0,\n      speedX: -1.6,\n      speedY: 0.0\n    }, {\n      x: 263,\n      y: 98,\n      radius: 300,\n      dirX: 2.3,\n      dirY: 0,\n      speedX: 1,\n      speedY: 0.0\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FisheyeLens, [{\n    key: "moveLenses",\n    value: function moveLenses() {\n      var canvas = Helper.getElement(\'surface\');\n      var lenses = this.lenses;\n\n      for (var i = 0; i < lenses.length; i++) {\n        lenses[i].x += lenses[i].speedX;\n        lenses[i].y += lenses[i].speedY;\n        lenses[i].speedY += 0.7;\n\n        if (lenses[i].x + lenses[i].radius >= canvas.width && lenses[i].speedX >= 0) {\n          lenses[i].x = canvas.width - lenses[i].radius;\n          lenses[i].speedX = -Math.min(8.0, Math.abs(lenses[i].speedX) * (0.7 + Math.random()));\n        }\n\n        if (lenses[i].x < 0 && lenses[i].speedX <= 0) {\n          lenses[i].x = 0;\n          lenses[i].speedX = Math.min(8.0, Math.abs(lenses[i].speedX) * (0.5 + Math.random()));\n        }\n\n        if (lenses[i].y < 0 && lenses[i].speedY <= 0) {\n          lenses[i].y = 0;\n          lenses[i].speedY = -lenses[i].speedY * 0.9;\n        }\n\n        if (lenses[i].y + lenses[i].radius >= canvas.height && lenses[i].speedY >= 0) {\n          lenses[i].y = canvas.height - lenses[i].radius;\n          lenses[i].speedY = -lenses[i].speedY * 0.85;\n\n          if (Math.abs(lenses[i].speedY) < 8) {\n            lenses[i].speedY *= 2;\n          }\n        }\n      }\n    }\n  }, {\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_FisheyeLensApp(\'surface\', \'./resources/apps/fisheye-lens/bg.jpg\');\n      var lenses = this.lenses;\n\n      for (var i = 0; i < lenses.length; i++) {\n        app.addLens(lenses[i]);\n      }\n\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.moveLenses();\n      this.app.draw();\n    }\n  }]);\n\n  return FisheyeLens;\n}(vue_wrapper), fisheye_lensvue_type_script_lang_js_temp)) || fisheye_lensvue_type_script_lang_js_class;\n\n/* harmony default export */ var fisheye_lensvue_type_script_lang_js_ = (fisheye_lensvue_type_script_lang_js_FisheyeLens);\n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_fisheye_lensvue_type_script_lang_js_ = (fisheye_lensvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/fisheye-lens/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar fisheye_lens_component = Object(componentNormalizer["a" /* default */])(\n  effects_fisheye_lensvue_type_script_lang_js_,\n  fisheye_lensvue_type_template_id_d6a2c11c_render,\n  fisheye_lensvue_type_template_id_d6a2c11c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var fisheye_lens = (fisheye_lens_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/metaballs/index.vue?vue&type=template&id=44c8b1e4&\nvar metaballsvue_type_template_id_44c8b1e4_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{ref:"metaballsCanvas",attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Metaballs")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Min Threshold","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"1200"},on:{"update":_vm.updateMinThreshold},model:{value:(_vm.minThreshold),callback:function ($$v) {_vm.minThreshold=$$v},expression:"minThreshold"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Max Threshold","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"3100"},on:{"update":_vm.updateMaxThreshold},model:{value:(_vm.maxThreshold),callback:function ($$v) {_vm.maxThreshold=$$v},expression:"maxThreshold"}})],1)],1)],1)}\nvar metaballsvue_type_template_id_44c8b1e4_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Metaballs"}},[_vm._v("Blinn\'s Metaballs")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue?vue&type=template&id=44c8b1e4&\n\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/app.js\n\n\n\n\n\n\n\n\n\n\n\nvar app_MetaballsApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(MetaballsApp, _App);\n\n  function MetaballsApp(targetCanvasId, ballCount) {\n    var _this;\n\n    var minThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;\n    var maxThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n\n    Object(classCallCheck["a" /* default */])(this, MetaballsApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MetaballsApp).call(this, targetCanvasId));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "balls", []);\n\n    _this.thresholdMin = minThreshold;\n    _this.thresholdMax = maxThreshold;\n\n    _this.initBalls(ballCount);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(MetaballsApp, [{\n    key: "initBalls",\n    value: function initBalls(ballCount) {\n      var canvasWidth = this.canvas.width;\n      var canvasHeight = this.canvas.height;\n\n      for (var i = 0; i < ballCount; i++) {\n        var radius = 25 + 25 * Math.random();\n        var power = 0.5 + Math.random() * 0.5;\n        this.balls.push({\n          pos: new point_2d_Point2D(radius + (canvasWidth - radius * 2) * Math.random(), radius + (canvasHeight - radius * 2) * Math.random()),\n          radius: radius,\n          power: power,\n          radiusTimesPower: radius * power,\n          direction: new point_2d_Point2D(-1 + Math.random() * 2, -1 + Math.random()),\n          tint: new normalized_color_NormalizedColor(0.7 + 0.3 * Math.random(), 0.7 + 0.3 * Math.random(), 0.7 + 0.3 * Math.random())\n        });\n      }\n    }\n  }, {\n    key: "moveBalls",\n    value: function moveBalls() {\n      var canvasWidth = this.canvas.width;\n      var canvasHeight = this.canvas.height;\n\n      for (var i = 0; i < this.balls.length; i++) {\n        var b = this.balls[i];\n        b.pos.add(b.direction);\n\n        if (b.pos.x < b.radius && b.direction.x < 0) {\n          b.direction.x = -b.direction.x;\n          b.pos.x = b.radius;\n        }\n\n        if (b.pos.y < b.radius && b.direction.y < 0) {\n          b.direction.y = -b.direction.y;\n          b.pos.y = b.radius;\n        }\n\n        if (b.pos.x > canvasWidth - b.radius && b.direction.x > 0) {\n          b.direction.x = -b.direction.x;\n          b.pos.x = canvasWidth - b.radius;\n        }\n\n        if (b.pos.y > canvasHeight - b.radius && b.direction.y > 0) {\n          b.direction.y = -b.direction.y;\n          b.pos.y = canvasHeight - b.radius;\n        }\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor.set(0, 0, 0);\n      Draw.setSurface(this.virtualSurface);\n      Draw.clear();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptr = 0;\n      var balls = this.balls;\n      var ballCount = balls.length;\n      var thresholdMin = this.thresholdMin;\n      var thresholdMax = this.thresholdMax;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var power = 0;\n          var colR = 0;\n          var colG = 0;\n          var colB = 0;\n\n          for (var i = 0; i < ballCount; i++) {\n            var b = balls[i];\n            var xDiff = x - b.pos.x;\n            var yDiff = y - b.pos.y;\n            var tint = b.tint;\n\n            if (xDiff === 0 && yDiff === 0) {\n              power += b.power;\n              colR += tint.r;\n              colG += tint.g;\n              colB += tint.b;\n            } else {\n              var d = b.radiusTimesPower / Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n              colR += tint.r * d;\n              colG += tint.g * d;\n              colB += tint.b * d;\n              power += d;\n            }\n          }\n\n          if (power >= thresholdMin && power <= thresholdMax) {\n            // this helps with the fall-off\n            if (power < 1.0) {\n              var sine = Math.sin(0.5 * Math.PI * power);\n              var m = sine * sine * sine;\n              colR *= m;\n              colG *= m;\n              colB *= m;\n            }\n\n            colR = Math.round(Math.min(255, Math.max(0, colR * 255)));\n            colG = Math.round(Math.min(255, Math.max(0, colG * 255)));\n            colB = Math.round(Math.min(255, Math.max(0, colB * 255)));\n            data[ptr++] = colR;\n            data[ptr++] = colG;\n            data[ptr++] = colB;\n            ptr++;\n          } else {\n            ptr += 4;\n          }\n        }\n      }\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return MetaballsApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/metaballs/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar metaballsvue_type_script_lang_js_class, metaballsvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar metaballsvue_type_script_lang_js_Metaballs = Object(vue_class_component_esm["a" /* default */])(metaballsvue_type_script_lang_js_class = (metaballsvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Metaballs, _VueWrapper);\n\n  function Metaballs() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Metaballs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Metaballs)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "minThreshold", 1);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "maxThreshold", 3100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Metaballs, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      // this.intervalFrequency = 10;\n      return new app_MetaballsApp(\'surface\', 8, this.minThreshold / 1000, (this.maxThreshold === 3100 ? 1000000 : this.maxThreshold) / 1000);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var app = this.app;\n      app.moveBalls();\n      app.draw();\n    }\n  }, {\n    key: "updateMinThreshold",\n    value: function updateMinThreshold(val) {\n      this.app.thresholdMin = val / 1000.0;\n    }\n  }, {\n    key: "updateMaxThreshold",\n    value: function updateMaxThreshold(val) {\n      if (val >= 3000) {\n        val = 1000000;\n      }\n\n      this.app.thresholdMax = val / 1000.0;\n    }\n  }]);\n\n  return Metaballs;\n}(vue_wrapper), metaballsvue_type_script_lang_js_temp)) || metaballsvue_type_script_lang_js_class;\n\n/* harmony default export */ var metaballsvue_type_script_lang_js_ = (metaballsvue_type_script_lang_js_Metaballs);\n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_metaballsvue_type_script_lang_js_ = (metaballsvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/metaballs/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar metaballs_component = Object(componentNormalizer["a" /* default */])(\n  effects_metaballsvue_type_script_lang_js_,\n  metaballsvue_type_template_id_44c8b1e4_render,\n  metaballsvue_type_template_id_44c8b1e4_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var metaballs = (metaballs_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/plasma/index.vue?vue&type=template&id=d54f13ca&\nvar plasmavue_type_template_id_d54f13ca_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar plasmavue_type_template_id_d54f13ca_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Plasma Effect")]),_vm._v(" "),_c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Plasma_effect"}},[_vm._v("plasma effect")]),_vm._v(".")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue?vue&type=template&id=d54f13ca&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.uint32-array.js\nvar es6_typed_uint32_array = __webpack_require__(193);\n\n// CONCATENATED MODULE: ./components/apps/effects/plasma/app.js\n\n\n\n\n\n\n\n\n\nvar app_PlasmaApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(PlasmaApp, _App);\n\n  function PlasmaApp(targetCanvasId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, PlasmaApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(PlasmaApp).call(this, targetCanvasId));\n    _this.COLOR_COUNT = 1000;\n    _this.offset = 0;\n\n    _this.calculatePlasma();\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(PlasmaApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptrMax = width * height * 4;\n      var ptr = 0;\n      var precalcPtr = 0;\n      var precalcTable = this.precalcTable;\n      var precalcColors = this.precalcColors;\n      var offset = this.offset % this.COLOR_COUNT;\n      var colorCount = this.COLOR_COUNT;\n\n      while (ptr < ptrMax) {\n        var precalcVal = precalcTable[precalcPtr++] + offset; // Math.round( precalcTable[ precalcPtr++ ] / Plasma.COLOR_COUNT * 255 );\n\n        if (precalcVal >= colorCount) {\n          precalcVal -= colorCount;\n        }\n\n        var precalcCol = precalcColors[precalcVal];\n        data[ptr++] = precalcCol.r;\n        data[ptr++] = precalcCol.g;\n        data[ptr++] = precalcCol.b;\n        ptr++;\n      }\n\n      this.offset++;\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.COLOR_COUNT);\n      var degrees = 180;\n      var degreeOffset = 40;\n\n      for (var i = 0; i < this.COLOR_COUNT; i++) {\n        var normal = Math.sin(i / this.COLOR_COUNT * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, normal, 1 - normal, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }, {\n    key: "calculatePlasma",\n    value: function calculatePlasma() {\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var ptr = 0;\n      var min = false;\n      var max = false;\n      this.precalcTable = new Uint32Array(width * height);\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var val = this.COLOR_COUNT / 2 + (this.COLOR_COUNT / 2 - 1) * Math.sin(x / 100 * Math.cos(y / 1000) * Math.tan(ptr / 1000000)) * Math.cos(y / 100 * Math.sin(x / 100) * Math.tan(ptr / 1000000));\n          this.precalcTable[ptr++] = Math.round(val);\n\n          if (min === false || val < min) {\n            min = val;\n          }\n\n          if (max === false || val > max) {\n            max = val;\n          }\n        }\n      }\n    }\n  }]);\n\n  return PlasmaApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/plasma/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar plasmavue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar plasmavue_type_script_lang_js_Plasma = Object(vue_class_component_esm["a" /* default */])(plasmavue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Plasma, _VueWrapper);\n\n  function Plasma() {\n    Object(classCallCheck["a" /* default */])(this, Plasma);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(Plasma).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(Plasma, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_PlasmaApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.draw();\n    }\n  }]);\n\n  return Plasma;\n}(vue_wrapper)) || plasmavue_type_script_lang_js_class;\n\n/* harmony default export */ var plasmavue_type_script_lang_js_ = (plasmavue_type_script_lang_js_Plasma);\n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_plasmavue_type_script_lang_js_ = (plasmavue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/plasma/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar plasma_component = Object(componentNormalizer["a" /* default */])(\n  effects_plasmavue_type_script_lang_js_,\n  plasmavue_type_template_id_d54f13ca_render,\n  plasmavue_type_template_id_d54f13ca_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var plasma = (plasma_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/wave-distortion/index.vue?vue&type=template&id=e75a6a0e&\nvar wave_distortionvue_type_template_id_e75a6a0e_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"853","height":"470"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Wave Distortion")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Amplitude","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"16000"},on:{"update":_vm.updateAmplitude},model:{value:(_vm.amplitude),callback:function ($$v) {_vm.amplitude=$$v},expression:"amplitude"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Frequency","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"300","max":"100000"},on:{"update":_vm.updateFrequency},model:{value:(_vm.frequency),callback:function ($$v) {_vm.frequency=$$v},expression:"frequency"}})],1)],1)],1)}\nvar wave_distortionvue_type_template_id_e75a6a0e_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Distortion_(optics)"}},[_vm._v("wave distortion")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue?vue&type=template&id=e75a6a0e&\n\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_WaveDistortionApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(WaveDistortionApp, _App);\n\n  /**\n   * @param {string} targetCanvasId\n   * @param {string} bgImageUrl\n   * @constructor\n   * @extends {app.js}\n   */\n  function WaveDistortionApp(targetCanvasId, bgImageUrl) {\n    var _this;\n\n    var amplitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 28.21;\n    var frequency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 35.62;\n\n    Object(classCallCheck["a" /* default */])(this, WaveDistortionApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WaveDistortionApp).call(this, targetCanvasId));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "amplitude", 28.21);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "frequency", 35.62);\n\n    _this.bgImage = new canvas_texture_CanvasTexture(bgImageUrl);\n    _this.phase = 0;\n    _this.amplitude = amplitude;\n    _this.frequency = frequency;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(WaveDistortionApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var x;\n      var y;\n      var dest = this.virtualSurface.data;\n      var destWidth = this.virtualSurface.width;\n      var destHeight = this.virtualSurface.height;\n      var source = this.bgImage.data;\n      var sourceWidth = this.bgImage.getWidth();\n      var sourceHeight = this.bgImage.getHeight();\n      var periodIncrement = Math.PI / this.frequency;\n      var phase = this.phase;\n      var amplitude = this.amplitude;\n      var displacementY = new Float32Array(destHeight); // new Array(destHeight);\n\n      var displacementX = new Float32Array(destWidth); // new Array(destWidth);\n\n      var destPtr = 0;\n      var period = 0;\n      var periodY = period;\n      var periodX = period;\n\n      if (!source || !dest) {\n        this.endDrawing(false);\n        return;\n      }\n\n      for (y = 0; y < destHeight; y++) {\n        displacementY[y] = Math.round(amplitude * Math.sin(phase + periodY));\n        periodY += periodIncrement;\n      }\n\n      for (x = 0; x < destWidth; x++) {\n        displacementX[x] = Math.round(amplitude * Math.cos(phase + periodX));\n        periodX += periodIncrement;\n      }\n\n      for (y = 0; y < destHeight; y++) {\n        var dx = displacementY[y];\n\n        for (x = 0; x < destWidth; x++) {\n          var dy = displacementX[x];\n          var xp = x + dx;\n          var yp = y + dy;\n\n          if (xp >= 0 && xp < sourceWidth && yp >= 0 && yp < sourceHeight) {\n            var sourcePtr = (yp * sourceWidth + xp) * 4;\n            dest[destPtr++] = source[sourcePtr++];\n            dest[destPtr++] = source[sourcePtr++];\n            dest[destPtr++] = source[sourcePtr++];\n            destPtr++;\n          } else {\n            dest[destPtr++] = 0;\n            dest[destPtr++] = 0;\n            dest[destPtr++] = 0;\n            destPtr++;\n          }\n        }\n\n        period += periodIncrement;\n      }\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return WaveDistortionApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/effects/wave-distortion/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar wave_distortionvue_type_script_lang_js_class, wave_distortionvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar wave_distortionvue_type_script_lang_js_WaveDistortion = Object(vue_class_component_esm["a" /* default */])(wave_distortionvue_type_script_lang_js_class = (wave_distortionvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(WaveDistortion, _VueWrapper);\n\n  function WaveDistortion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, WaveDistortion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(WaveDistortion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "amplitude", 2235);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "frequency", 27712);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(WaveDistortion, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_WaveDistortionApp(\'surface\', \'./resources/apps/wave-distortion/bg.jpg\', this.amplitude / 100, this.frequency / 100);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.phase += 0.1;\n      this.app.draw();\n    }\n  }, {\n    key: "updateAmplitude",\n    value: function updateAmplitude(val) {\n      this.app.amplitude = val / 100;\n    }\n  }, {\n    key: "updateFrequency",\n    value: function updateFrequency(val) {\n      this.app.frequency = val / 100;\n    }\n  }]);\n\n  return WaveDistortion;\n}(vue_wrapper), wave_distortionvue_type_script_lang_js_temp)) || wave_distortionvue_type_script_lang_js_class;\n\n/* harmony default export */ var wave_distortionvue_type_script_lang_js_ = (wave_distortionvue_type_script_lang_js_WaveDistortion);\n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var effects_wave_distortionvue_type_script_lang_js_ = (wave_distortionvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/effects/wave-distortion/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar wave_distortion_component = Object(componentNormalizer["a" /* default */])(\n  effects_wave_distortionvue_type_script_lang_js_,\n  wave_distortionvue_type_template_id_e75a6a0e_render,\n  wave_distortionvue_type_template_id_e75a6a0e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var wave_distortion = (wave_distortion_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat/index.vue?vue&type=template&id=2cd2beae&\nvar flatvue_type_template_id_2cd2beae_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Flat Polygon Projection")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of non-shaded polygon projection.")]),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar flatvue_type_template_id_2cd2beae_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue?vue&type=template&id=2cd2beae&\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/vertex/index.vue?vue&type=template&id=90903d4c&\nvar vertexvue_type_template_id_90903d4c_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Vertex Projection")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar vertexvue_type_template_id_90903d4c_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/3D_projection"}},[_vm._v("camera projection.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue?vue&type=template&id=90903d4c&\n\n// CONCATENATED MODULE: ./lib/core/canvas-texture-container.js\n\n\n\nvar canvas_texture_container_CanvasTextureContainer =\n/*#__PURE__*/\nfunction () {\n  function CanvasTextureContainer() {\n    Object(classCallCheck["a" /* default */])(this, CanvasTextureContainer);\n\n    this.textures = {};\n  }\n\n  Object(createClass["a" /* default */])(CanvasTextureContainer, [{\n    key: "add",\n\n    /**\n     * Add texture to container\n     *\n     * @param {string} textureName\n     * @param {string} src\n     * @public\n     */\n    value: function add(textureName, src) {\n      if (this.exists(textureName) === true) {\n        this.remove(textureName);\n      }\n\n      var ct = new canvas_texture_CanvasTexture(src);\n      var me = this;\n      this.textures[textureName] = ct;\n\n      ct.onload = function () {\n        me.eventImageLoaded(textureName);\n      };\n\n      return ct;\n    }\n    /**\n     * Add multiple canvas textures\n     *\n     * Usage:\n     *\n     * srcReferenceObject = {\n     *   myTexture1 : \'http://www.google.com/logo.png\',\n     *   myTexture2 : \'http://www.microsoft.com/logo.png\',\n     *   ...\n     * };\n     *\n     * @param {Object} srcReferenceObject\n     * @public\n     */\n\n  }, {\n    key: "addMany",\n    value: function addMany(srcReferenceObject) {\n      for (var textureName in srcReferenceObject) {\n        if (srcReferenceObject.hasOwnProperty(textureName)) {\n          if (this.textures.hasOwnProperty(textureName)) {\n            this.add(textureName, srcReferenceObject[textureName]);\n          }\n        }\n      }\n    }\n    /**\n     * @param {string} textureName\n     * @public\n     */\n\n  }, {\n    key: "remove",\n    value: function remove(textureName) {\n      if (this.textures[textureName] !== null) {\n        this.textures[textureName].destroy();\n      }\n\n      delete this.textures[textureName];\n    }\n    /**\n     * @param {string} textureName\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "exists",\n    value: function exists(textureName) {\n      return this.get(textureName) !== null;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "reset",\n    value: function reset() {\n      for (var key in this.textures) {\n        if (this.textures.hasOwnProperty(key)) {\n          this.remove(key);\n        }\n      }\n\n      this.textures = {};\n    }\n    /**\n     * @param {string} textureName\n     * @returns {CanvasTexture|null}\n     * @public\n     */\n\n  }, {\n    key: "get",\n    value: function get(textureName) {\n      if (this.textures.hasOwnProperty(textureName)) {\n        return this.textures[textureName];\n      }\n\n      return null;\n    }\n    /**\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: "isLoaded",\n    value: function isLoaded() {\n      for (var key in this.textures) {\n        if (this.textures.hasOwnProperty(key)) {\n          if (this.textures[key] !== null) {\n            if (this.textures[key].loaded !== true) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }\n    /**\n     * @public\n     * @param {string} textureName\n     */\n\n  }, {\n    key: "eventImageLoaded",\n    value: function eventImageLoaded(textureName) {\n      if (this.isLoaded() === true) {\n        if (typeof this.onload === \'function\') {\n          this.onload();\n        }\n      }\n    }\n  }]);\n\n  return CanvasTextureContainer;\n}();\n// CONCATENATED MODULE: ./lib/core/interpolated-triangle.js\n\n\nvar interpolated_triangle_InterpolatedTriangle = {\n  p1: new point_2d_Point2D(0, 0),\n  p2: new point_2d_Point2D(0, 0),\n  p3: new point_2d_Point2D(0, 0),\n  c1: new color_Color(0, 0, 0),\n  c2: new color_Color(0, 0, 0),\n  c3: new color_Color(0, 0, 0),\n  cIntL: new color_Color(0, 0, 0),\n  cIntR: new color_Color(0, 0, 0),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @protected\n   */\n  calculateBounds: function calculateBounds(p1, p2, p3, c1, c2, c3) {\n    this.sortPoints(p1, p2, p3, c1, c2, c3);\n    return {\n      rSizeAdder: (p3.x - p1.x) / (p3.y - p1.y),\n      lSizeAdder: (p2.x - p1.x) / (p2.y - p1.y + 1),\n      lSizeAdder2: (p3.x - p2.x) / (p3.y - p2.y),\n      rColAdder: new color_Color((c3.r - c1.r) / (p3.y - p1.y), (c3.g - c1.g) / (p3.y - p1.y), (c3.b - c1.b) / (p3.y - p1.y)),\n      lColAdder: new color_Color((c2.r - c1.r) / (p2.y - p1.y + 1), (c2.g - c1.g) / (p2.y - p1.y + 1), (c2.b - c1.b) / (p2.y - p1.y + 1)),\n      lColAdder2: new color_Color((c3.r - c2.r) / (p3.y - p2.y), (c3.g - c2.g) / (p3.y - p2.y), (c3.b - c2.b) / (p3.y - p2.y))\n    };\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, c1, c2, c3, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    this.c1.set(c1);\n    this.c2.set(c2);\n    this.c3.set(c3);\n    var bounds = this.calculateBounds(this.p1, this.p2, this.p3, this.c1, this.c2, this.c3);\n    this.cIntL.set(this.c1);\n    this.cIntR.set(this.c1); // this.cIntR.add( bounds.rColAdder );\n\n    var rx = this.drawHalfTriangle(this.p1, this.p2, this.p3, bounds.lSizeAdder, bounds.rSizeAdder, this.p1.x + bounds.lSizeAdder / 2, this.p1.x, this.cIntL, this.cIntR, bounds.lColAdder, bounds.rColAdder, surface);\n    this.p2.y++;\n    this.drawHalfTriangle(this.p2, this.p3, this.p1, bounds.lSizeAdder2, bounds.rSizeAdder, this.p2.x, rx, this.cIntL, this.cIntR, bounds.lColAdder2, bounds.rColAdder, surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {float} lAdder\n   * @param {float} rAdder\n   * @param {float} lx\n   * @param {float} rx\n   * @param {Color} colLeft\n   * @param {Color} colRight\n   * @param {Color} colLeftAdder\n   * @param {Color} colRightAdder\n   * @param {Surface} surface\n   * @returns {Number}\n   * @protected\n   */\n  drawHalfTriangle: function drawHalfTriangle(p1, p2, p3, lAdder, rAdder, lx, rx, colLeft, colRight, colLeftAdder, colRightAdder, surface) {\n    var data = surface.getData();\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var ptr = Math.round(Math.min(lx, rx) + p1.y * width) * 4;\n    var minLeftX = Math.min(p1.x, p2.x);\n    var maxLeftX = Math.max(p1.x, p2.x);\n    var minRightX = Math.min(p1.x, p3.x, p2.x);\n    var maxRightX = Math.max(p1.x, p3.x, p2.x);\n    var colAdder = new color_Color();\n    var colR, colG, colB;\n\n    for (var y = p1.y; y <= p2.y && y < height; y++) {\n      var minX = Math.round(Math.min(lx, rx));\n      var maxX = Math.round(Math.max(lx, rx));\n\n      if (y >= 0) {\n        if (minX < 0) {\n          ptr += Math.abs(minX) * 4;\n          minX = 0;\n          maxX = Math.max(maxX, minX);\n        }\n\n        maxX = Math.min(maxX, width - 1);\n        var distance = maxX - minX;\n\n        if (distance !== 0) {\n          if (lx < rx) {\n            colR = colLeft.r;\n            colG = colLeft.g;\n            colB = colLeft.b;\n            colAdder.set((colRight.r - colLeft.r) / distance, (colRight.g - colLeft.g) / distance, (colRight.b - colLeft.b) / distance);\n          } else {\n            colR = colRight.r;\n            colG = colRight.g;\n            colB = colRight.b;\n            colAdder.set((colLeft.r - colRight.r) / distance, (colLeft.g - colRight.g) / distance, (colLeft.b - colRight.b) / distance);\n          }\n        }\n\n        for (var xp = minX; xp <= maxX; xp++) {\n          data[ptr] = Math.round(colR);\n          data[ptr + 1] = Math.round(colG);\n          data[ptr + 2] = Math.round(colB);\n          ptr += 4;\n          colR += colAdder.r;\n          colG += colAdder.g;\n          colB += colAdder.b;\n        }\n      } else {\n        ptr += (maxX - minX) * 4 + 4;\n      }\n\n      lx += lAdder;\n      rx += rAdder;\n      lx = Math.max(lx, minLeftX);\n      lx = Math.min(lx, maxLeftX);\n      rx = Math.max(rx, minRightX);\n      rx = Math.min(rx, maxRightX);\n      ptr += (width - maxX + Math.round(Math.min(lx, rx))) * 4;\n      ptr -= 4;\n      colLeft.add(colLeftAdder);\n      colRight.add(colRightAdder);\n    }\n\n    return rx;\n  },\n\n  /**\n   * Sort p1, p2, p3 in lowest Y order.\n   *\n   * Relies on arguments being treated as byref\n   *\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} c1\n   * @param {Color} c2\n   * @param {Color} c3\n   * @protected\n   */\n  sortPoints: function sortPoints(p1, p2, p3, c1, c2, c3) {\n    p1.round();\n    p2.round();\n    p3.round();\n\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n      c3.swap(c1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n      c2.swap(c1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n      c3.swap(c2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/matrix.js\n\n\n\n/**\n * YX notated Matrix\n * @param {int|Matrix|Array} width\n * @param {int} height\n * @constructor\n */\nvar matrix_Matrix =\n/*#__PURE__*/\nfunction () {\n  function Matrix(width, height) {\n    Object(classCallCheck["a" /* default */])(this, Matrix);\n\n    this.data = [];\n    this.width = 0;\n    this.height = 0;\n\n    if (width instanceof Matrix) {\n      this.set(width);\n    } else if (width instanceof Array) {\n      this.set(width);\n    } else {\n      this.resize(width, height);\n    }\n  }\n\n  Object(createClass["a" /* default */])(Matrix, [{\n    key: "clone",\n\n    /**\n     * @returns {Matrix}\n     * @public\n     */\n    value: function clone() {\n      var m = new Matrix(this.width, this.height);\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < this.width; x++) {\n          m.data[y][x] = this.data[y][x];\n        }\n      }\n\n      return m;\n    }\n    /**\n     * @param {Matrix|Array} matrix\n     * @public\n     */\n\n  }, {\n    key: "set",\n    value: function set(matrix) {\n      if (matrix instanceof Array) {\n        this.data = new Array(matrix.length);\n        this.height = matrix.length;\n        this.width = matrix[0].length;\n\n        for (var y = 0; y < matrix.length; y++) {\n          this.data[y] = matrix[y].slice(0);\n        }\n      } else {\n        this.data = new Array(matrix.data.length);\n        this.height = matrix.height;\n        this.width = matrix.width;\n\n        for (var _y = 0; _y < matrix.data.length; _y++) {\n          this.data[_y] = matrix.data[_y].slice(0);\n        }\n      }\n    }\n    /**\n     * @param {int} width\n     * @param {int} height\n     * @public\n     */\n\n  }, {\n    key: "resize",\n    value: function resize(width, height) {\n      this.data = new Array(height);\n      this.width = width;\n      this.height = height;\n\n      for (var y = 0; y < height; y++) {\n        this.data[y] = new Array(width);\n      }\n    }\n    /**\n     * sourcePoint and targetPoint MUST NOT be the same object\n     *\n     * @param {Point3D} sourcePoint\n     * @param {Point3D} targetPoint\n     * @todo Remove hardcoding\n     * @public\n     */\n\n  }, {\n    key: "multiplyPoint3D",\n    value: function multiplyPoint3D(sourcePoint, targetPoint) {\n      targetPoint.x = sourcePoint.x * this.data[0][0] + sourcePoint.y * this.data[0][1] + sourcePoint.z * this.data[0][2];\n      targetPoint.y = sourcePoint.x * this.data[1][0] + sourcePoint.y * this.data[1][1] + sourcePoint.z * this.data[1][2];\n      targetPoint.z = sourcePoint.x * this.data[2][0] + sourcePoint.y * this.data[2][1] + sourcePoint.z * this.data[2][2];\n    }\n    /**\n     * @param {Matrix} matrix\n     * @returns {Matrix}\n     * @public\n     */\n\n  }, {\n    key: "multiplyMatrix",\n    value: function multiplyMatrix(matrix) {\n      if (this.height !== matrix.width) {\n        return null;\n      }\n\n      var m = new Matrix(matrix.width, this.height);\n      var size = this.height;\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          var val = 0;\n\n          for (var i = 0; i < size; i++) {\n            val += this.data[y][i] * matrix.data[i][x];\n          }\n\n          m.data[y][x] = val;\n        }\n      }\n\n      return m;\n    }\n    /**\n     * @param {Matrix} matrix\n     * @public\n     */\n\n  }, {\n    key: "add",\n    value: function add(matrix) {\n      if (this.width !== matrix.width || this.height !== matrix.height) {\n        return;\n      }\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          this.data[y][x] += matrix.data[y][x];\n        }\n      }\n    }\n    /**\n     * @param {Matrix} matrix\n     * @public\n     */\n\n  }, {\n    key: "subtract",\n    value: function subtract(matrix) {\n      if (this.width !== matrix.width || this.height !== matrix.height) {\n        return;\n      }\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < matrix.width; x++) {\n          this.data[y][x] -= matrix.data[y][x];\n        }\n      }\n    }\n    /**\n     * @returns {Matrix}\n     * @public\n     */\n\n  }, {\n    key: "transpose",\n    value: function transpose() {\n      var t = new Matrix(this.height, this.width);\n\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < this.width; x++) {\n          t.data[x][y] = this.data[y][x];\n        }\n      }\n\n      return t;\n    }\n  }]);\n\n  return Matrix;\n}();\n// CONCATENATED MODULE: ./lib/core/surface.js\n\n\n\n\nvar surface_Surface =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} elementID\n   * @param {Boolean} createElement\n   * @constructor\n   */\n  function Surface(elementID, createElement) {\n    Object(classCallCheck["a" /* default */])(this, Surface);\n\n    this.elementID = elementID;\n\n    if (createElement === true) {\n      this.canvas = Helper.createElement(\'canvas\');\n      this.canvas.setAttribute(\'id\', elementID);\n    } else {\n      this.canvas = Helper.getElement(elementID);\n    }\n\n    this.context = this.canvas.getContext(\'2d\');\n    this.imageData = null;\n    this.virtualSurface = null;\n    this.drawing = false;\n  }\n  /**\n   * @returns {int}\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Surface, [{\n    key: "getWidth",\n    value: function getWidth() {\n      return this.canvas.width;\n    }\n    /**\n     * @returns {int}\n     * @public\n     */\n\n  }, {\n    key: "getHeight",\n    value: function getHeight() {\n      return this.canvas.height;\n    }\n    /**\n     * @returns {Array}\n     * @public\n     */\n\n  }, {\n    key: "getData",\n    value: function getData() {\n      return this.imageData.data;\n    }\n    /**\n     * @param {int} width\n     * @param {int} height\n     * @public\n     */\n\n  }, {\n    key: "setSize",\n    value: function setSize(width, height) {\n      this.canvas.width = width;\n      this.canvas.height = height;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "beginPaint",\n    value: function beginPaint() {\n      this.imageData = this.context.createImageData(this.getWidth(), this.getHeight());\n      this.virtualSurface = new virtual_surface_VirtualSurface(this.getWidth(), this.getHeight(), this.imageData.data);\n      this.drawing = true;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "endPaint",\n    value: function endPaint() {\n      this.context.putImageData(this.imageData, 0, 0, 0, 0, this.getWidth(), this.getHeight()); // this.canvas.getContext(\'2d\').putImageData(this.imageData, 0, 0);\n\n      this.imageData = null;\n      this.drawing = false;\n    }\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n\n  }, {\n    key: "isDrawing",\n    value: function isDrawing() {\n      return this.drawing;\n    }\n    /**\n     * @param {Color} bgColor\n     * @public\n     */\n\n  }, {\n    key: "clear",\n    value: function clear(bgColor) {\n      if (this.drawing !== true) {\n        return;\n      }\n\n      var ptrMax = this.canvas.width * this.canvas.height * 4;\n      var data = this.imageData.data;\n      var r = bgColor.r;\n      var g = bgColor.g;\n      var b = bgColor.b;\n      var a = bgColor.a;\n      var ptr = 0;\n\n      while (ptr < ptrMax) {\n        data[ptr++] = r;\n        data[ptr++] = g;\n        data[ptr++] = b;\n        data[ptr++] = a;\n      }\n    }\n  }]);\n\n  return Surface;\n}();\n// CONCATENATED MODULE: ./lib/core/triangle.js\n\nvar Triangle = {\n  p1: new point_2d_Point2D(0, 0),\n  p2: new point_2d_Point2D(0, 0),\n  p3: new point_2d_Point2D(0, 0),\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @protected\n   */\n  calculateBounds: function calculateBounds(p1, p2, p3) {\n    this.sortPoints(p1, p2, p3);\n    return {\n      rSizeAdder: (p3.x - p1.x) / (p3.y - p1.y),\n      lSizeAdder: (p2.x - p1.x) / (p2.y - p1.y + 1),\n      lSizeAdder2: (p3.x - p2.x) / (p3.y - p2.y)\n    };\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Color} color\n   * @param {Surface} surface\n   * @public\n   */\n  draw: function draw(p1, p2, p3, color, surface) {\n    this.p1.set(p1);\n    this.p2.set(p2);\n    this.p3.set(p3);\n    var bounds = this.calculateBounds(this.p1, this.p2, this.p3);\n    var rx = this.drawHalfTriangle(this.p1, this.p2, this.p3, bounds.lSizeAdder, bounds.rSizeAdder, this.p1.x + bounds.lSizeAdder / 2, this.p1.x, color, surface);\n    this.p2.y++;\n    this.drawHalfTriangle(this.p2, this.p3, this.p1, bounds.lSizeAdder2, bounds.rSizeAdder, this.p2.x, rx, color, surface);\n  },\n\n  /**\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @param {Number} lAdder\n   * @param {Number} rAdder\n   * @param {Number} lx\n   * @param {Number} rx\n   * @param {Color} color\n   * @param {Surface} surface\n   * @returns {Number}\n   * @protected\n   */\n  drawHalfTriangle: function drawHalfTriangle(p1, p2, p3, lAdder, rAdder, lx, rx, color, surface) {\n    var data = surface.getData();\n    var colR = color.r;\n    var colG = color.g;\n    var colB = color.b;\n    var width = surface.getWidth();\n    var height = surface.getHeight();\n    var ptr = Math.round(Math.min(lx, rx) + p1.y * width) * 4;\n    var minLeftX = Math.min(p1.x, p2.x);\n    var maxLeftX = Math.max(p1.x, p2.x);\n    var minRightX = Math.min(p1.x, p3.x, p2.x);\n    var maxRightX = Math.max(p1.x, p3.x, p2.x);\n\n    for (var y = p1.y; y <= p2.y && y < height; y++) {\n      var minX = Math.round(Math.min(lx, rx));\n      var maxX = Math.round(Math.max(lx, rx));\n\n      if (y >= 0) {\n        if (minX < 0) {\n          ptr += Math.abs(minX) * 4;\n          minX = 0;\n          maxX = Math.max(maxX, minX);\n        }\n\n        maxX = Math.min(maxX, width - 1);\n\n        for (var xp = minX; xp <= maxX; xp++) {\n          data[ptr] = colR;\n          data[ptr + 1] = colG;\n          data[ptr + 2] = colB;\n          ptr += 4;\n        }\n      } else {\n        ptr += (maxX - minX) * 4 + 4;\n      }\n\n      lx += lAdder;\n      rx += rAdder;\n      lx = Math.max(lx, minLeftX);\n      lx = Math.min(lx, maxLeftX);\n      rx = Math.max(rx, minRightX);\n      rx = Math.min(rx, maxRightX);\n      ptr += (width - maxX + Math.round(Math.min(lx, rx))) * 4;\n      ptr -= 4;\n    }\n\n    return rx;\n  },\n\n  /**\n   * Sort p1, p2, p3 in lowest Y order.\n   *\n   * Relies on arguments being treated as byref\n   *\n   * @param {Point2D} p1\n   * @param {Point2D} p2\n   * @param {Point2D} p3\n   * @protected\n   */\n  sortPoints: function sortPoints(p1, p2, p3) {\n    p1.round();\n    p2.round();\n    p3.round();\n\n    if (p3.y < p1.y) {\n      p3.swap(p1);\n    }\n\n    if (p2.y < p1.y) {\n      p2.swap(p1);\n    }\n\n    if (p3.y < p2.y) {\n      p3.swap(p2);\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/core/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/camera/camera.js\n\nvar camera_Camera = function Camera() {\n  Object(classCallCheck["a" /* default */])(this, Camera);\n};\n// CONCATENATED MODULE: ./lib/3d/camera/movable-camera.js\n\n\n\n\n\n\n\nvar movable_camera_MovableCamera =\n/*#__PURE__*/\nfunction (_Camera) {\n  Object(inherits["a" /* default */])(MovableCamera, _Camera);\n\n  /**\n   * @link http://en.wikipedia.org/wiki/3D_projection#Perspective_projection\n   * @constructor\n   * @extends Camera\n   */\n  function MovableCamera() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, MovableCamera);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MovableCamera).call(this));\n    _this.position = new point_3d_Point3D(0, 0, 0);\n    _this.orientation = new vector_3d_Vector3D(0, 0, 100.0);\n    _this.viewerPosition = new point_3d_Point3D(-320, -240, 200.0);\n    return _this;\n  }\n  /**\n   * @param {Vertex[]} vertices\n   */\n\n\n  Object(createClass["a" /* default */])(MovableCamera, [{\n    key: "transform",\n    value: function transform(vertices) {\n      var camPos = this.position;\n      var l = vertices.length;\n      var cosX = Math.cos(this.orientation.x);\n      var sinX = Math.sin(this.orientation.x);\n      var cosY = Math.cos(this.orientation.y);\n      var sinY = Math.sin(this.orientation.y);\n      var cosZ = Math.cos(this.orientation.z);\n      var sinZ = Math.sin(this.orientation.z);\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.transformed;\n        var targetPoint = vertex.cameraTransformed;\n        var sourceMinusCamX = sourcePoint.x - camPos.x;\n        var sourceMinusCamY = sourcePoint.y - camPos.y;\n        var sourceMinusCamZ = sourcePoint.z - camPos.z;\n        var cosZSourceMinusCamX = cosZ * sourceMinusCamX;\n        var sinZSourceMinusCamX = sinZ * sourceMinusCamX;\n        var cosZSourceMinusCamY = cosZ * sourceMinusCamY;\n        var sinZSourceMinusCamY = sinZ * sourceMinusCamY;\n        var cosYSourceMinusCamZ = cosY * sourceMinusCamZ;\n        var sinYsinZcosZCamYCamX = sinY * (sinZSourceMinusCamY + cosZSourceMinusCamX);\n        targetPoint.x = cosZ * (sinZSourceMinusCamY + cosZSourceMinusCamX) - sinY * sourceMinusCamZ;\n        targetPoint.y = sinX * (cosYSourceMinusCamZ + sinYsinZcosZCamYCamX) + cosX * (cosZSourceMinusCamY - sinZSourceMinusCamX);\n        targetPoint.z = cosX * (cosYSourceMinusCamZ + sinYsinZcosZCamYCamX) - sinX * (cosZSourceMinusCamY - sinZSourceMinusCamX);\n      }\n    }\n    /**\n     * @param {Vertex[]} vertices\n     */\n\n  }, {\n    key: "project",\n    value: function project(vertices) {\n      var l = vertices.length;\n      var viewerPosition = this.viewerPosition;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.cameraTransformed;\n        var targetPoint = vertex.cameraProjected;\n        var zDiv = viewerPosition.z / sourcePoint.z;\n        targetPoint.x = zDiv * sourcePoint.x - viewerPosition.x;\n        targetPoint.y = zDiv * sourcePoint.y - viewerPosition.y;\n      }\n    }\n  }]);\n\n  return MovableCamera;\n}(camera_Camera);\n// CONCATENATED MODULE: ./lib/3d/camera/simple-camera.js\n\n\n\n\n\n\n\nvar simple_camera_SimpleCamera =\n/*#__PURE__*/\nfunction (_Camera) {\n  Object(inherits["a" /* default */])(SimpleCamera, _Camera);\n\n  /**\n   * @constructor\n   * @extends Camera\n   */\n  function SimpleCamera() {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, SimpleCamera);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SimpleCamera).call(this));\n    _this.viewerPosition = new point_2d_Point2D(320, 240);\n    _this.perspectiveDepth = 100;\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(SimpleCamera, [{\n    key: "transform",\n\n    /**\n     * @param {Vertex[]} vertices\n     */\n    value: function transform(vertices) {\n      var l = vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.transformed;\n        var targetPoint = vertex.cameraTransformed;\n        targetPoint.x = sourcePoint.x;\n        targetPoint.y = sourcePoint.y;\n        targetPoint.z = sourcePoint.z;\n      }\n    }\n    /**\n     * @param {Vertex[]} vertices\n     */\n\n  }, {\n    key: "project",\n    value: function project(vertices) {\n      var l = vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertex = vertices[i];\n        var sourcePoint = vertex.cameraTransformed;\n        var targetPoint = vertex.cameraProjected;\n        var pd = this.perspectiveDepth / sourcePoint.z;\n        targetPoint.x = sourcePoint.x * pd + this.viewerPosition.x;\n        targetPoint.y = sourcePoint.y * pd + this.viewerPosition.y;\n      }\n    }\n  }]);\n\n  return SimpleCamera;\n}(camera_Camera);\n// CONCATENATED MODULE: ./lib/3d/camera/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/light/light.js\n\n\n\nvar light_Light =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new light\n   * @constructor\n   */\n  function Light() {\n    Object(classCallCheck["a" /* default */])(this, Light);\n\n    this.position = new point_3d_Point3D();\n  }\n\n  Object(createClass["a" /* default */])(Light, [{\n    key: "calculateLightData",\n\n    /**\n     * @param {Vector3D} viewerDirection\n     * @param {Point3D} normal3DPosition\n     * @param {Vector3D} normal\n     * @param {LightData} targetLightData\n     * @abstract\n     */\n    value: function calculateLightData(viewerDirection, normal3DPosition, normal, targetLightData) {// do nothing\n    }\n  }]);\n\n  return Light;\n}();\n// CONCATENATED MODULE: ./lib/3d/light/light-data.js\n\n\n\nvar light_data_LightData =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function LightData() {\n    Object(classCallCheck["a" /* default */])(this, LightData);\n\n    this.specularColor = new normalized_color_NormalizedColor(0, 0, 0);\n    this.diffuseColor = new normalized_color_NormalizedColor(0, 0, 0);\n  }\n\n  Object(createClass["a" /* default */])(LightData, [{\n    key: "reset",\n    value: function reset(ambience) {\n      if (!ambience) {\n        this.specularColor.set(0, 0, 0, 0);\n        this.diffuseColor.set(0, 0, 0);\n      } else {\n        this.specularColor.set(ambience.light);\n        this.diffuseColor.set(ambience.light);\n      }\n    }\n  }]);\n\n  return LightData;\n}();\n// CONCATENATED MODULE: ./lib/3d/light/omni-light.js\n\n\n\n\n\n\n\nvar omni_light_OmniLight =\n/*#__PURE__*/\nfunction (_Light) {\n  Object(inherits["a" /* default */])(OmniLight, _Light);\n\n  /**\n   * @param {Point3D} position\n   * @param {NormalizedColor} diffuseColor\n   * @link http://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n   * @extends Light\n   * @constructor\n   */\n  function OmniLight(position, diffuseColor) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, OmniLight);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(OmniLight).call(this));\n    /**\n     * @type {Point3D}\n     */\n\n    _this.position = position;\n    /**\n     * @type {Color}\n     */\n\n    _this.diffuseColor = diffuseColor;\n    _this.diffusePower = 0.5;\n    _this.specularHardness = 0.5;\n    _this.specularPower = 0.5;\n    _this.specularColor = new normalized_color_NormalizedColor(1, 1, 1);\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(OmniLight, [{\n    key: "calculateLightData",\n\n    /**\n     * @param {Vector3D} viewerDirection\n     * @param {Point3D} normal3DPosition\n     * @param {Vector3D} normal\n     * @param {LightData} targetLightData\n     */\n    value: function calculateLightData(viewerDirection, normal3DPosition, normal, targetLightData) {\n      if (this.diffusePower > 0) {\n        var lightDirection = new vector_3d_Vector3D(this.position);\n        lightDirection.subtract(normal3DPosition);\n        var distance = lightDirection.length();\n        lightDirection.normalize();\n        distance = distance * distance;\n        var NdotL = normal.dot(lightDirection);\n        var intensity = Math.min(Math.max(NdotL, 0.0), 1.0);\n        var intensityPowerDistance = intensity * this.diffusePower / distance;\n        targetLightData.diffuseColor.r += this.diffuseColor.r * intensityPowerDistance;\n        targetLightData.diffuseColor.g += this.diffuseColor.g * intensityPowerDistance;\n        targetLightData.diffuseColor.b += this.diffuseColor.b * intensityPowerDistance; // var H = ( lightDir + viewDir ).normalize();\n\n        lightDirection.add(viewerDirection);\n        lightDirection.normalize();\n        var NdotH = normal.dot(lightDirection\n        /* H */\n        );\n        intensity = Math.pow(Math.min(Math.max(NdotH, 0.0), 1.0), this.specularHardness);\n        intensityPowerDistance = intensity * this.specularPower / distance;\n        targetLightData.specularColor.r += this.specularColor.r * intensityPowerDistance;\n        targetLightData.specularColor.g += this.specularColor.g * intensityPowerDistance;\n        targetLightData.specularColor.b += this.specularColor.b * intensityPowerDistance;\n      }\n    }\n  }]);\n\n  return OmniLight;\n}(light_Light);\n// CONCATENATED MODULE: ./lib/3d/light/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/vertex.js\n\n\n\nvar vertex_Vertex =\n/**\n * @param {Point3D} point\n * @constructor\n */\nfunction Vertex(point) {\n  Object(classCallCheck["a" /* default */])(this, Vertex);\n\n  this.origin = point;\n  this.normal = new vector_3d_Vector3D(0, 0, 0);\n  this.transformed = new point_3d_Point3D(0, 0, 0);\n  this.cameraTransformed = new point_3d_Point3D(0, 0, 0);\n  this.cameraProjected = new point_2d_Point2D(0, 0);\n  this.lightData = new light_data_LightData();\n  this.faces = [];\n};\n// CONCATENATED MODULE: ./lib/3d/edge.js\n\n\nvar edge_Edge =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param a\n   * @param b\n   * @constructor\n   */\n  function Edge(a, b) {\n    Object(classCallCheck["a" /* default */])(this, Edge);\n\n    this.a = a;\n    this.b = b;\n  }\n\n  Object(createClass["a" /* default */])(Edge, [{\n    key: "set",\n\n    /**\n     * @param {int} a\n     * @param {int} b\n     * @public\n     */\n    value: function set(a, b) {\n      this.a = a;\n      this.b = b;\n    }\n  }]);\n\n  return Edge;\n}();\n// CONCATENATED MODULE: ./lib/3d/mesh.js\n\n\n\n\n\n\nvar mesh_Mesh =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param [name=]\n   * @constructor\n   */\n  function Mesh(name) {\n    Object(classCallCheck["a" /* default */])(this, Mesh);\n\n    this.name = name || \'\';\n    this.visible = true;\n    /**\n     * @type Vertex[]\n     */\n\n    this.vertices = [];\n    /**\n     * @type Face[]\n     */\n\n    this.faces = [];\n    /**\n     * @type Edge\n     */\n\n    this.edges = [];\n    /**\n     * @type {Point3D}\n     */\n\n    this.position = new point_3d_Point3D(0, 0, 0);\n    /**\n     * @type {Point3D}\n     */\n\n    this.scale = new point_3d_Point3D(1.0, 1.0, 1.0);\n    /**\n     * @type {Point3D}\n     */\n\n    this.rotation = new point_3d_Point3D(0.0, 0.0, 0.0);\n  }\n  /**\n   * @param {Point3D} point\n   */\n\n\n  Object(createClass["a" /* default */])(Mesh, [{\n    key: "addVertex",\n    value: function addVertex(point) {\n      this.vertices.push(new vertex_Vertex(point));\n    }\n    /**\n     * @param {Edge} edge\n     */\n\n  }, {\n    key: "addEdge",\n    value: function addEdge(edge) {\n      this.edges.push(edge);\n    }\n    /**\n     * @param {Face} face\n     */\n\n  }, {\n    key: "addFace",\n    value: function addFace(face) {\n      this.faces.push(face);\n      var faceNo = this.faces.length - 1;\n      face.order = faceNo;\n      this.vertices[face.a].faces.push(faceNo);\n      this.vertices[face.b].faces.push(faceNo);\n      this.vertices[face.c].faces.push(faceNo);\n    }\n    /**\n     * @link http://en.wikipedia.org/wiki/Rotation_matrix\n     */\n\n  }, {\n    key: "rotateMatrix",\n    value: function rotateMatrix() {\n      var cosX = Math.cos(this.rotation.x);\n      var sinX = Math.sin(this.rotation.x);\n      var cosY = Math.cos(this.rotation.y);\n      var sinY = Math.sin(this.rotation.y);\n      var cosZ = Math.cos(this.rotation.z);\n      var sinZ = Math.sin(this.rotation.z);\n      /* I\'m not using matrices here simply because testing showed\n       * they\'re about 25% slower than \'do it yourself\' method */\n\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        /**\n         * @type Vertex\n         */\n        var vertex = this.vertices[i];\n        var ov = vertex.origin;\n        var v = vertex.transformed;\n        var x2 = ov.x;\n        var y = ov.y;\n        var z = ov.z; // ROT X\n        // const x2 = x;\n\n        var y3 = y * cosX - z * sinX;\n        var z2 = y * sinX + z * cosX; // ROT Y\n\n        var x3 = x2 * cosY + z2 * sinY; // const y3 = y2;\n\n        v.z = x2 * -sinY + z2 * cosY; // ROT Z\n\n        v.x = x3 * cosZ - y3 * sinZ;\n        v.y = x3 * sinZ + y3 * cosZ;\n      }\n    }\n  }, {\n    key: "scaleMatrix",\n    value: function scaleMatrix() {\n      // != on purpose\n      if (this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1) {\n        var l = this.vertices.length;\n\n        for (var i = 0; i < l; i++) {\n          this.vertices[i].transformed.multiply(this.scale);\n        }\n      }\n    }\n  }, {\n    key: "translate",\n    value: function translate() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        this.vertices[i].transformed.add(this.position);\n      }\n    }\n  }, {\n    key: "transformOrigin",\n    value: function transformOrigin() {\n      this.rotateMatrix();\n      this.scaleMatrix();\n      this.translate();\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "transformCamera",\n    value: function transformCamera(camera) {\n      camera.transform(this.vertices);\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "project",\n    value: function project(camera) {\n      camera.project(this.vertices);\n    }\n  }, {\n    key: "drawVertices",\n    value: function drawVertices() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.setPixel(this.vertices[i].cameraProjected, Draw.color);\n      }\n    }\n  }, {\n    key: "drawWireframe",\n    value: function drawWireframe() {\n      var l = this.edges.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.line(this.vertices[this.edges[i].a].cameraProjected, this.vertices[this.edges[i].b].cameraProjected, Draw.color);\n      }\n    }\n  }, {\n    key: "drawFlat",\n    value: function drawFlat() {\n      var l = this.faces.length;\n\n      for (var i = 0; i < l; i++) {\n        Draw.triangle(this.vertices[this.faces[i].a].cameraProjected, this.vertices[this.faces[i].b].cameraProjected, this.vertices[this.faces[i].c].cameraProjected);\n      }\n    }\n  }, {\n    key: "calculateFaceNormals",\n    value: function calculateFaceNormals() {\n      var l = this.faces.length;\n\n      for (var i = 0; i < l; i++) {\n        var p1 = this.vertices[this.faces[i].a].cameraTransformed;\n        var p2 = this.vertices[this.faces[i].b].cameraTransformed;\n        var p3 = this.vertices[this.faces[i].c].cameraTransformed;\n        this.faces[i].normal.normal(p1, p2, p3);\n        this.faces[i].normal.normalize();\n        this.faces[i].position.setToCenter(p1, p2, p3);\n      }\n    }\n  }, {\n    key: "calculateVertexNormals",\n    value: function calculateVertexNormals() {\n      var l = this.vertices.length;\n\n      for (var i = 0; i < l; i++) {\n        var vertexFaces = this.vertices[i].faces;\n        var faceLength = vertexFaces.length;\n        var normalVertex = this.vertices[i].normal;\n        normalVertex.set(0, 0, 0);\n\n        for (var j = 0; j < faceLength; j++) {\n          normalVertex.add(this.faces[vertexFaces[j]].normal);\n        }\n\n        normalVertex.divideByVal(faceLength);\n        normalVertex.normalize();\n      }\n    }\n    /**\n     * @param {Scene} scene\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "calculateFaceLightData",\n    value: function calculateFaceLightData(scene, camera) {\n      var lightCount = scene.lights.length;\n      var faceCount = this.faces.length;\n\n      for (var j = 0; j < faceCount; j++) {\n        var face = this.faces[j];\n        face.lightData.reset(scene.ambience);\n\n        for (var i = 0; i < lightCount; i++) {\n          scene.lights[i].calculateLightData(camera.orientation, face.position, face.normal, face.lightData);\n        }\n      }\n    }\n    /**\n     * @param {Scene} scene\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "calculateVertexLightData",\n    value: function calculateVertexLightData(scene, camera) {\n      var lightCount = scene.lights.length;\n      var vertexCount = this.vertices.length;\n\n      for (var j = 0; j < vertexCount; j++) {\n        var vertex = this.vertices[j];\n        vertex.lightData.reset(scene.ambience);\n\n        for (var i = 0; i < lightCount; i++) {\n          scene.lights[i].calculateLightData(camera.orientation, vertex.cameraTransformed, vertex.normal, vertex.lightData);\n        }\n      }\n    }\n    /**\n     * @param {Camera} camera\n     */\n\n  }, {\n    key: "cull",\n    value: function cull(camera) {\n      var faceCount = this.faces.length;\n\n      for (var j = 0; j < faceCount; j++) {\n        var face = this.faces[j];\n        face.visible = true;\n      }\n    }\n    /**\n     * @param {String} name\n     */\n\n  }, {\n    key: "setName",\n    value: function setName(name) {\n      this.name = name;\n    }\n    /**\n     * Figure out wireframe from face data\n     */\n\n  }, {\n    key: "buildWireframe",\n    value: function buildWireframe() {\n      var vertexLookup = Helper.create2DArray(this.vertices.length, this.vertices.length);\n      this.clearEdges();\n\n      for (var i = 0; i < this.faces.length; i++) {\n        vertexLookup[Math.min(this.faces[i].a, this.faces[i].b)][Math.max(this.faces[i].a, this.faces[i].b)] = true;\n        vertexLookup[Math.min(this.faces[i].a, this.faces[i].c)][Math.max(this.faces[i].a, this.faces[i].c)] = true;\n        vertexLookup[Math.min(this.faces[i].b, this.faces[i].c)][Math.max(this.faces[i].b, this.faces[i].c)] = true;\n      }\n\n      for (var _i = 0; _i < vertexLookup.length; _i++) {\n        for (var j = 0; j < vertexLookup.length; j++) {\n          if (vertexLookup[_i][j] === true) {\n            var edge = new edge_Edge(_i, j);\n            this.addEdge(edge);\n          }\n        }\n      }\n    }\n  }, {\n    key: "clearEdges",\n    value: function clearEdges() {\n      this.edges = [];\n    }\n  }]);\n\n  return Mesh;\n}();\n// CONCATENATED MODULE: ./lib/3d/material/material.js\n\n\nvar material_Material =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function Material() {\n    Object(classCallCheck["a" /* default */])(this, Material);\n\n    this.color = null;\n    this.texture = null;\n  }\n\n  Object(createClass["a" /* default */])(Material, [{\n    key: "getColor",\n\n    /**\n     * @returns {null|Color}\n     */\n    value: function getColor() {\n      return this.color;\n    }\n    /**\n     * @returns {null|CanvasTexture}\n     */\n\n  }, {\n    key: "getTexture",\n    value: function getTexture() {\n      return this.texture;\n    }\n  }]);\n\n  return Material;\n}();\n// CONCATENATED MODULE: ./lib/3d/material/solid-color-material.js\n\n\n\n\n\n\nvar solid_color_material_SolidColorMaterial =\n/*#__PURE__*/\nfunction (_Material) {\n  Object(inherits["a" /* default */])(SolidColorMaterial, _Material);\n\n  /**\n   * @param {Color} [color]\n   * @extends Material\n   * @constructor\n   */\n  function SolidColorMaterial(color) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, SolidColorMaterial);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidColorMaterial).call(this));\n    _this.color = color || new color_Color(0, 192, 0);\n    _this.texture = null;\n    return _this;\n  }\n\n  return SolidColorMaterial;\n}(material_Material);\n// CONCATENATED MODULE: ./lib/3d/material/textured-material.js\n\n\n\n\n\nvar textured_material_TexturedMaterial =\n/*#__PURE__*/\nfunction (_Material) {\n  Object(inherits["a" /* default */])(TexturedMaterial, _Material);\n\n  /**\n   * @param {CanvasTexture} [texture]\n   * @extends Material\n   * @constructor\n   */\n  function TexturedMaterial(texture) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TexturedMaterial);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedMaterial).call(this));\n    _this.texture = texture;\n    _this.color = null;\n    return _this;\n  }\n\n  return TexturedMaterial;\n}(material_Material);\n// CONCATENATED MODULE: ./lib/3d/material/index.js\n\n\n\n// CONCATENATED MODULE: ./lib/3d/face.js\n\n\n\n\nvar face_Face =\n/**\n * Triad face\n *\n * @param {int} a\n * @param {int} b\n * @param {int} c\n * @param {Material} [material]\n * @param {Point3D} [uvA]\n * @param {Point3D} [uvB]\n * @param {Point3D} [uvC]\n * @constructor\n */\nfunction Face(a, b, c, material, uvA, uvB, uvC) {\n  Object(classCallCheck["a" /* default */])(this, Face);\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.uvA = uvA || new point_3d_Point3D();\n  this.uvB = uvB || new point_3d_Point3D();\n  this.uvC = uvC || new point_3d_Point3D();\n  this.order = 0;\n  this.visible = false;\n  this.material = material || new solid_color_material_SolidColorMaterial();\n  this.normal = new vector_3d_Vector3D();\n  this.position = new point_3d_Point3D();\n  this.lightData = new light_data_LightData();\n};\n// CONCATENATED MODULE: ./lib/3d/factory/cuboid-factory.js\n\n\n\n\n\nvar CuboidFactory = {\n  /**\n   * @param {float} height\n   * @param {float} length\n   * @param {float} depth\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(height, length, depth) {\n    var cuboid = new mesh_Mesh();\n    CuboidFactory.generateVertices(cuboid, height, length, depth);\n    CuboidFactory.generateEdges(cuboid);\n    CuboidFactory.generateFaces(cuboid);\n    return cuboid;\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @param {float} height\n   * @param {float} length\n   * @param {float} depth\n   * @private\n   */\n  generateVertices: function generateVertices(cuboid, height, length, depth) {\n    var l2 = length / 2;\n    var h2 = height / 2;\n    var d2 = depth / 2;\n    cuboid.addVertex(new point_3d_Point3D(-l2, -h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, +h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, -h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, +h2, -d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, -h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(-l2, +h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, -h2, +d2));\n    cuboid.addVertex(new point_3d_Point3D(+l2, +h2, +d2));\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @private\n   */\n  generateEdges: function generateEdges(cuboid) {\n    cuboid.addEdge(new edge_Edge(0, 1));\n    cuboid.addEdge(new edge_Edge(0, 2));\n    cuboid.addEdge(new edge_Edge(3, 2));\n    cuboid.addEdge(new edge_Edge(3, 1));\n    cuboid.addEdge(new edge_Edge(4, 5));\n    cuboid.addEdge(new edge_Edge(4, 6));\n    cuboid.addEdge(new edge_Edge(7, 6));\n    cuboid.addEdge(new edge_Edge(7, 5));\n    cuboid.addEdge(new edge_Edge(0, 4));\n    cuboid.addEdge(new edge_Edge(1, 5));\n    cuboid.addEdge(new edge_Edge(2, 6));\n    cuboid.addEdge(new edge_Edge(3, 7));\n  },\n\n  /**\n   * @param {Mesh} cuboid\n   * @private\n   */\n  generateFaces: function generateFaces(cuboid) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n    cuboid.addFace(new face_Face(0, 1, 3, material));\n    cuboid.addFace(new face_Face(2, 0, 3, material2));\n    cuboid.addFace(new face_Face(4, 5, 6, material));\n    cuboid.addFace(new face_Face(6, 5, 7, material2));\n    cuboid.addFace(new face_Face(4, 0, 6, material));\n    cuboid.addFace(new face_Face(2, 0, 6, material));\n    cuboid.addFace(new face_Face(1, 3, 7, material));\n    cuboid.addFace(new face_Face(1, 7, 5, material));\n    cuboid.addFace(new face_Face(6, 2, 3, material));\n    cuboid.addFace(new face_Face(6, 3, 7, material));\n    cuboid.addFace(new face_Face(4, 0, 1, material));\n    cuboid.addFace(new face_Face(5, 4, 1, material));\n  }\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(25);\n\n// CONCATENATED MODULE: ./lib/3d/factory/obj-factory.js\n\n\n\n\n\nvar ObjFactory = {\n  /**\n   * Load Wavefront OBJ file\n   * @param {String} url\n   * @param {Scene} [scene]\n   * @returns {Mesh}\n   * @link http://en.wikipedia.org/wiki/Wavefront_.obj_file\n   */\n  load: function load(url, scene) {\n    var mesh = new mesh_Mesh();\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    Helper.load(url, function (data\n    /*, textStatus, jqXHR */\n    ) {\n      ObjFactory.process(data, mesh, material);\n\n      if (scene) {\n        scene.faceSortPile.reInit();\n      }\n    });\n    return mesh;\n  },\n\n  /**\n   * @param {String} objFileData\n   * @param {Mesh} mesh\n   * @param {Material} material\n   * @private\n   */\n  process: function process(objFileData, mesh, material) {\n    var lines = objFileData.split(\'\\n\');\n    var vertexTextures = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      var parameters = ObjFactory.getLineParameters(lines[i].trim());\n\n      if (parameters.length > 0) {\n        switch (parameters[0]) {\n          case \'v\':\n            // vertices\n            ObjFactory.addVertex(parameters, mesh);\n            break;\n\n          case \'f\':\n            // faces\n            ObjFactory.addFace(parameters, mesh, vertexTextures, material);\n            break;\n\n          case \'g\':\n            // mesh name\n            mesh.setName(parameters[1]);\n            break;\n\n          case \'vt\':\n            // vertex texture coordinate\n            ObjFactory.addVertexTextureCoordinate(parameters, vertexTextures);\n            break;\n\n          case \'vn\':\n            // vertex normals\n            // ignored for now\n            break;\n        }\n      }\n    }\n\n    mesh.buildWireframe();\n  },\n\n  /**\n   * @private\n   * @param {String} line\n   * @returns {Array}\n   */\n  getLineParameters: function getLineParameters(line) {\n    var initialParameters = line.split(\' \');\n    var parameters = [];\n\n    for (var i = 0; i < initialParameters.length; i++) {\n      if (initialParameters[i] !== \'\') {\n        parameters.push(initialParameters[i]);\n      }\n    }\n\n    return parameters;\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Mesh} mesh\n   * @private\n   */\n  addVertex: function addVertex(parameters, mesh) {\n    var p = new point_3d_Point3D(parameters[1], parameters[2], parameters[3]);\n    mesh.addVertex(p);\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Mesh} mesh\n   * @param {Point3D[]} vertexTextures\n   * @param {Material} material\n   * @private\n   */\n  addFace: function addFace(parameters, mesh, vertexTextures, material) {\n    var a = ObjFactory.splitFaceParameter(parameters[1]);\n    var b = ObjFactory.splitFaceParameter(parameters[2]);\n    var c = ObjFactory.splitFaceParameter(parameters[3]);\n    var uvA = null;\n    var uvB = null;\n    var uvC = null;\n\n    if (a.vt !== null) {\n      uvA = new point_3d_Point3D(vertexTextures[a.vt]);\n    }\n\n    if (b.vt !== null) {\n      uvB = new point_3d_Point3D(vertexTextures[b.vt]);\n    }\n\n    if (c.vt !== null) {\n      uvC = new point_3d_Point3D(vertexTextures[c.vt]);\n    }\n\n    var f = new face_Face(a.v, b.v, c.v, material, uvA, uvB, uvC);\n    mesh.addFace(f);\n  },\n\n  /**\n   * @param {String} parameter\n   * @private\n   */\n  splitFaceParameter: function splitFaceParameter(parameter) {\n    var values = parameter.split(\'/\');\n    var vt = null;\n    var vn = null;\n    var v = parseInt(values[0], 10);\n\n    if (values.length >= 2) {\n      vt = parseInt(values[1], 10);\n    }\n\n    if (values.length >= 3) {\n      vn = parseInt(values[0], 10);\n    }\n\n    return {\n      v: v - 1,\n      vt: vt - 1,\n      vn: vn - 1\n    };\n  },\n\n  /**\n   * @param {String[]} parameters\n   * @param {Point3D[]} vertexTextures\n   * @private\n   */\n  addVertexTextureCoordinate: function addVertexTextureCoordinate(parameters, vertexTextures) {\n    var p = new point_3d_Point3D(parameters[1], parameters[2], parameters[3]);\n    vertexTextures.push(p);\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/sphere-factory.js\n\n\n\n\n\n/**\n * This just generates a sphere-shaped mesh\n * @link http://stackoverflow.com/a/9787745/844771\n * @namespace\n */\n\nvar SphereFactory = {\n  /**\n   * @param {float} radiusX\n   * @param {float} radiusY\n   * @param {float} radiusZ\n   * @param {int} steps\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(radiusX, radiusY, radiusZ, steps) {\n    var sphere = new mesh_Mesh();\n    var uSteps = steps;\n    var vSteps = steps * 2;\n    this.generateVertices(radiusX, radiusY, radiusZ, sphere, uSteps, vSteps);\n    this.generateEdges(sphere, uSteps, vSteps);\n    this.generateFaces(sphere, uSteps, vSteps);\n    return sphere;\n  },\n\n  /**\n   * @param {int|float|Number} radiusX\n   * @param {int|float|Number} radiusY\n   * @param {int|float|Number} radiusZ\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateVertices: function generateVertices(radiusX, radiusY, radiusZ, sphere, uSteps, vSteps) {\n    var resolution = Math.PI / uSteps;\n    var inclination = 0;\n\n    for (var u = 0; u <= uSteps; u++) {\n      var azimuth = 0;\n\n      for (var v = 0; v <= vSteps; v++) {\n        var p = new point_3d_Point3D(radiusX * Math.sin(inclination) * Math.cos(azimuth), radiusY * Math.sin(inclination) * Math.sin(azimuth), radiusZ * Math.cos(inclination));\n        sphere.addVertex(p);\n        azimuth += Math.abs(resolution);\n      }\n\n      inclination += Math.abs(resolution);\n    }\n  },\n\n  /**\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateEdges: function generateEdges(sphere, uSteps, vSteps) {\n    for (var u = 0; u < uSteps; u++) {\n      for (var v = 0; v < vSteps; v++) {\n        var thisVertex = u * (vSteps + 1) + v;\n        var nextUI = u + 1;\n\n        if (nextUI > uSteps) {\n          nextUI = 0;\n        }\n\n        var uiNextVertex = nextUI * (vSteps + 1) + v;\n        sphere.addEdge(new edge_Edge(thisVertex, uiNextVertex));\n        var nextVI = v + 1;\n\n        if (nextVI > vSteps) {\n          nextVI = 0;\n        }\n\n        var viNextVertex = u * (vSteps + 1) + nextVI;\n        sphere.addEdge(new edge_Edge(thisVertex, viNextVertex));\n      }\n    }\n  },\n\n  /**\n   * @param {Mesh} sphere\n   * @param {int|Number} uSteps\n   * @param {int|Number} vSteps\n   * @private\n   */\n  generateFaces: function generateFaces(sphere, uSteps, vSteps) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n\n    for (var u = 0; u < uSteps; u++) {\n      for (var v = 0; v < vSteps; v++) {\n        var nextUI = u + 1;\n\n        if (nextUI > uSteps) {\n          // break;\n          nextUI = 0;\n        }\n\n        var nextVI = v + 1;\n\n        if (nextVI > vSteps) {\n          // break;\n          nextVI = 0;\n        }\n\n        sphere.addFace(new face_Face(u * (vSteps + 1) + v, nextUI * (vSteps + 1) + v, nextUI * (vSteps + 1) + nextVI, material, new point_3d_Point3D(0, 0, 0), new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0)));\n        sphere.addFace(new face_Face(u * (vSteps + 1) + v, nextUI * (vSteps + 1) + nextVI, u * (vSteps + 1) + nextVI, material2, new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0)));\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/torus-factory.js\n\n\n\n\n\n/**\n * This just generates a torus-shaped mesh\n * @namespace\n * @link http://gamedev.stackexchange.com/a/16850\n */\n\nvar TorusFactory = {\n  /**\n   * @param {float} outerRadiusX\n   * @param {float} outerRadiusY\n   * @param {float} weight\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @returns {Mesh}\n   * @public\n   */\n  generate: function generate(outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps) {\n    var torus = new mesh_Mesh();\n    TorusFactory.generateVertices(torus, outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps);\n    TorusFactory.generateEdges(torus, outerSteps, innerSteps);\n    TorusFactory.generateFaces(torus, outerSteps, innerSteps);\n    return torus;\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {float} outerRadiusX\n   * @param {float} outerRadiusY\n   * @param {float} weight\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateVertices: function generateVertices(torus, outerRadiusX, outerRadiusY, weight, outerSteps, innerSteps) {\n    var outerResolution = 2 * Math.PI / outerSteps;\n    var innerResolution = 2 * Math.PI / innerSteps;\n    var u = 0;\n\n    for (var ui = 0; ui < outerSteps; ui++) {\n      var p = new point_3d_Point3D(outerRadiusX * Math.cos(u), outerRadiusY * Math.sin(u), 0);\n      var w = new point_3d_Point3D(p.x, p.y, p.z);\n      w.normalize();\n      var v = 0;\n\n      for (var vi = 0; vi < innerSteps; vi++) {\n        var q = new point_3d_Point3D(outerRadiusX * w.x + weight * Math.cos(v) * w.x + 0, outerRadiusY * w.y + weight * Math.cos(v) * w.y + 0, outerRadiusX * w.z + weight * Math.cos(v) * w.z + weight * Math.sin(v));\n        torus.addVertex(q);\n        v += Math.abs(innerResolution);\n      }\n\n      u += Math.abs(outerResolution);\n    }\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateEdges: function generateEdges(torus, outerSteps, innerSteps) {\n    var uiCount = outerSteps;\n    var viCount = innerSteps;\n\n    for (var ui = 0; ui < uiCount; ui++) {\n      for (var vi = 0; vi < viCount; vi++) {\n        var thisVertex = ui * viCount + vi;\n        var nextUI = ui + 1;\n\n        if (nextUI >= uiCount) {\n          nextUI = 0;\n        }\n\n        var uiNextVertex = nextUI * viCount + vi;\n        torus.addEdge(new edge_Edge(thisVertex, uiNextVertex));\n        var nextVI = vi + 1;\n\n        if (nextVI >= viCount) {\n          nextVI = 0;\n        }\n\n        var viNextVertex = ui * viCount + nextVI;\n        torus.addEdge(new edge_Edge(thisVertex, viNextVertex));\n      }\n    }\n  },\n\n  /**\n   * @param {Mesh} torus\n   * @param {int} outerSteps\n   * @param {int} innerSteps\n   * @private\n   */\n  generateFaces: function generateFaces(torus, outerSteps, innerSteps) {\n    var material = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material.color = new color_Color(0, 192, 0);\n    var material2 = new textured_material_TexturedMaterial(new canvas_texture_CanvasTexture(\'./resources/3d/textures/chrome-4.jpg\'));\n    material2.color = new color_Color(0, 0, 192);\n    var uiCount = outerSteps;\n    var viCount = innerSteps;\n\n    for (var ui = 0; ui < uiCount; ui++) {\n      for (var vi = 0; vi < viCount; vi++) {\n        var nextUI = ui + 1;\n\n        if (nextUI >= uiCount) {\n          // break;\n          nextUI = 0;\n        }\n\n        var nextVI = vi + 1;\n\n        if (nextVI >= viCount) {\n          // break;\n          nextVI = 0;\n        }\n\n        torus.addFace(new face_Face(ui * viCount + vi, nextUI * viCount + vi, nextUI * viCount + nextVI, material, new point_3d_Point3D(0, 0, 0), new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0)));\n        torus.addFace(new face_Face(ui * viCount + vi, nextUI * viCount + nextVI, ui * viCount + nextVI, material2, new point_3d_Point3D(0, 1, 0), new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0)));\n      }\n    }\n  }\n};\n// CONCATENATED MODULE: ./lib/3d/factory/index.js\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/renderer/renderer.js\n\n\nvar renderer_Renderer =\n/*#__PURE__*/\nfunction () {\n  function Renderer() {\n    Object(classCallCheck["a" /* default */])(this, Renderer);\n  }\n\n  Object(createClass["a" /* default */])(Renderer, [{\n    key: "draw",\n\n    /**\n     * Rasterize scene\n     *\n     * @param {Scene} scene\n     * @abstract\n     */\n    value: function draw(scene) {// do nothing\n    }\n  }]);\n\n  return Renderer;\n}();\n// CONCATENATED MODULE: ./lib/3d/renderer/flat-renderer.js\n\n\n\n\n\n\n\nvar flat_renderer_FlatRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(FlatRenderer, _Renderer);\n\n  function FlatRenderer() {\n    Object(classCallCheck["a" /* default */])(this, FlatRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n        Draw.color.r = Math.round(255 / (faceLength - 1) * faceLookup.face.order);\n        Draw.color.g = 255 - Math.round(255 / (faceLength - 1) * faceLookup.face.order); // faceLookup.face.a\n\n        Draw.triangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceLookup.face.material.color);\n        /* Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.a ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.b ].cameraProjected,\n            faceLookup.face.material.color\n          );\n         Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.b ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.c ].cameraProjected,\n            faceLookup.face.material.color\n          );\n         Draw.line(\n            faceLookup.mesh.vertices[ faceLookup.face.c ].cameraProjected,\n            faceLookup.mesh.vertices[ faceLookup.face.a ].cameraProjected,\n            faceLookup.face.material.color\n          ); */\n      }\n    }\n  }]);\n\n  return FlatRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/flat-shader-renderer.js\n\n\n\n\n\n\n\n\nvar flat_shader_renderer_FlatShaderRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(FlatShaderRenderer, _Renderer);\n\n  function FlatShaderRenderer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FlatShaderRenderer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FlatShaderRenderer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "draw", function (scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n      var faceColor = new color_Color();\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n        faceColor.r = Math.round(faceLookup.face.lightData.diffuseColor.r * faceLookup.face.material.color.r);\n        faceColor.g = Math.round(faceLookup.face.lightData.diffuseColor.g * faceLookup.face.material.color.g);\n        faceColor.b = Math.round(faceLookup.face.lightData.diffuseColor.b * faceLookup.face.material.color.b);\n        Draw.triangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceColor);\n      }\n    });\n\n    return _this;\n  }\n\n  return FlatShaderRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/gouraud-shader-renderer.js\n\n\n\n\n\n\n\nvar gouraud_shader_renderer_GouraudShaderRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(GouraudShaderRenderer, _Renderer);\n\n  function GouraudShaderRenderer() {\n    Object(classCallCheck["a" /* default */])(this, GouraudShaderRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(GouraudShaderRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(GouraudShaderRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n      var faceColorA = new color_Color();\n      var faceColorB = new color_Color();\n      var faceColorC = new color_Color();\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n\n        if (faceLookup.face.visible === true) {\n          faceColorA.set(faceLookup.face.material.color);\n          faceColorB.set(faceLookup.face.material.color);\n          faceColorC.set(faceLookup.face.material.color);\n          faceColorA.multiply(faceLookup.mesh.vertices[faceLookup.face.a].lightData.diffuseColor);\n          faceColorB.multiply(faceLookup.mesh.vertices[faceLookup.face.b].lightData.diffuseColor);\n          faceColorC.multiply(faceLookup.mesh.vertices[faceLookup.face.c].lightData.diffuseColor);\n          Draw.interpolatedTriangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceColorA, faceColorB, faceColorC);\n        }\n      }\n    }\n  }]);\n\n  return GouraudShaderRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/texture-renderer.js\n\n\n\n\n\n\n\nvar texture_renderer_TextureRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(TextureRenderer, _Renderer);\n\n  function TextureRenderer() {\n    Object(classCallCheck["a" /* default */])(this, TextureRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TextureRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TextureRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      scene.faceSortPile.sort();\n      var faceLength = scene.faceSortPile.lookupTable.length;\n\n      for (var i = 0; i < faceLength; i++) {\n        /**\n         * @type {FaceLookup}\n         */\n        var faceLookup = scene.faceSortPile.lookupTable[i];\n\n        if (faceLookup.face.visible === true) {\n          Draw.texturedTriangle(faceLookup.mesh.vertices[faceLookup.face.a].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.b].cameraProjected, faceLookup.mesh.vertices[faceLookup.face.c].cameraProjected, faceLookup.face.uvA, faceLookup.face.uvB, faceLookup.face.uvC, faceLookup.face.material.getTexture());\n        }\n      }\n    }\n  }]);\n\n  return TextureRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/vertex-renderer.js\n\n\n\n\n\n\nvar vertex_renderer_VertexRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(VertexRenderer, _Renderer);\n\n  function VertexRenderer() {\n    Object(classCallCheck["a" /* default */])(this, VertexRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(VertexRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(VertexRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      for (var m = 0; m < scene.meshes.length; m++) {\n        scene.meshes[m].drawVertices();\n      }\n    }\n  }]);\n\n  return VertexRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/wireframe-renderer.js\n\n\n\n\n\n\nvar wireframe_renderer_WireframeRenderer =\n/*#__PURE__*/\nfunction (_Renderer) {\n  Object(inherits["a" /* default */])(WireframeRenderer, _Renderer);\n\n  function WireframeRenderer() {\n    Object(classCallCheck["a" /* default */])(this, WireframeRenderer);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WireframeRenderer).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(WireframeRenderer, [{\n    key: "draw",\n\n    /**\n     * @param {Scene} scene\n     */\n    value: function draw(scene) {\n      for (var m = 0; m < scene.meshes.length; m++) {\n        scene.meshes[m].drawWireframe();\n      }\n    }\n  }]);\n\n  return WireframeRenderer;\n}(renderer_Renderer);\n// CONCATENATED MODULE: ./lib/3d/renderer/index.js\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./lib/3d/ambience.js\n\n\nvar ambience_Ambience =\n/**\n * @constructor\n * @param {NormalizedColor} [light]\n */\nfunction Ambience(light) {\n  Object(classCallCheck["a" /* default */])(this, Ambience);\n\n  this.light = light || new normalized_color_NormalizedColor(0.3, 0.3, 0.3);\n};\n// CONCATENATED MODULE: ./lib/3d/face-lookup.js\n\nvar face_lookup_FaceLookup =\n/**\n * @param {Face} face\n * @param {Mesh} mesh\n * @constructor\n */\nfunction FaceLookup(face, mesh) {\n  Object(classCallCheck["a" /* default */])(this, FaceLookup);\n\n  this.face = face;\n  this.mesh = mesh;\n};\n// CONCATENATED MODULE: ./lib/3d/face-sort-pile.js\n\n\n\nvar face_sort_pile_FaceSortPile =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param scene\n   * @constructor\n   */\n  function FaceSortPile(scene) {\n    Object(classCallCheck["a" /* default */])(this, FaceSortPile);\n\n    this.scene = scene;\n    this.lookupTable = [];\n    this.forceInit = true;\n  }\n\n  Object(createClass["a" /* default */])(FaceSortPile, [{\n    key: "populate",\n    value: function populate() {\n      var idx = 0;\n      var meshLength = this.scene.meshes.length;\n\n      for (var i = 0; i < meshLength; i++) {\n        var faces = this.scene.meshes[i].faces;\n        var faceLength = faces.length;\n\n        for (var j = 0; j < faceLength; j++) {\n          this.lookupTable[idx] = new face_lookup_FaceLookup(faces[j], this.scene.meshes[i]);\n          idx++;\n        }\n      }\n    }\n  }, {\n    key: "resize",\n    value: function resize() {\n      var faceCount = 0;\n      var meshLength = this.scene.meshes.length;\n\n      for (var i = 0; i < meshLength; i++) {\n        faceCount += this.scene.meshes[i].faces.length;\n      }\n\n      if (this.lookupTable.length !== faceCount) {\n        this.lookupTable = new Array(faceCount);\n      }\n    }\n  }, {\n    key: "reInit",\n    value: function reInit() {\n      this.forceInit = true;\n    }\n  }, {\n    key: "init",\n    value: function init() {\n      this.forceInit = false;\n      this.resize();\n      this.populate();\n    }\n  }, {\n    key: "sort",\n    value: function sort() {\n      if (this.forceInit === true) {\n        this.init();\n      }\n\n      this.lookupTable.sort(function (a, b) {\n        if (a.face.position.z > b.face.position.z) {\n          return 1;\n        }\n\n        if (a.face.position.z < b.face.position.z) {\n          return -1;\n        }\n\n        return 0;\n      });\n    }\n  }]);\n\n  return FaceSortPile;\n}();\n// CONCATENATED MODULE: ./lib/3d/scene.js\n\n\n\n\n\nvar scene_Scene =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function Scene() {\n    Object(classCallCheck["a" /* default */])(this, Scene);\n\n    /**\n     * @type Mesh[]\n     */\n    this.meshes = [];\n    /**\n     * @type Camera[]\n     */\n\n    this.cameras = [];\n    /**\n     * @type Light[]\n     */\n\n    this.lights = [];\n    /**\n     * @type Material[]\n     */\n\n    this.materials = [];\n    /**\n     * @type Renderer[]\n     */\n\n    this.renderers = [];\n    /**\n     * @type FaceSortPile\n     */\n\n    this.faceSortPile = new face_sort_pile_FaceSortPile(this);\n    this.ambience = new ambience_Ambience();\n    /**\n     * @type Camera\n     */\n\n    this.activeCamera = null;\n    /**\n     * @type Renderer\n     */\n\n    this.activeRenderer = null;\n    this.renderTime = 0;\n    this.renderFrameCount = 0;\n    this.renderFPS = 0.00;\n    this.forceReinitSort = true;\n  }\n  /**\n   * @param {Camera} camera\n   * @public\n   */\n\n\n  Object(createClass["a" /* default */])(Scene, [{\n    key: "addCamera",\n    value: function addCamera(camera) {\n      this.cameras.push(camera);\n\n      if (this.activeCamera === null) {\n        this.activeCamera = camera;\n      }\n    }\n    /**\n     * @param {Renderer} renderer\n     * @param {Boolean} [setAsActive]\n     * @public\n     */\n\n  }, {\n    key: "addRenderer",\n    value: function addRenderer(renderer, setAsActive) {\n      this.renderers.push(renderer);\n\n      if (this.activeRenderer === null || setAsActive === true) {\n        this.activeRenderer = renderer;\n      }\n    }\n    /**\n     * @param {Mesh} mesh\n     * @public\n     */\n\n  }, {\n    key: "addMesh",\n    value: function addMesh(mesh) {\n      this.meshes.push(mesh);\n      this.forceReinitSort = true;\n    }\n    /**\n     * @param {Light} light\n     * @public\n     */\n\n  }, {\n    key: "addLight",\n    value: function addLight(light) {\n      this.lights.push(light);\n    }\n    /**\n     * @param {String} name\n     * @returns {int|null}\n     * @public\n     */\n\n  }, {\n    key: "findMeshIndex",\n    value: function findMeshIndex(name) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        if (this.meshes[i].name === name) {\n          return i;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @param {String} name\n     * @public\n     */\n\n  }, {\n    key: "removeMesh",\n    value: function removeMesh(name) {\n      var i = this.findMeshIndex(name);\n\n      if (i !== null) {\n        this.meshes.splice(i, 1);\n      }\n    }\n    /**\n     * @param {Renderer} [renderer]\n     * @public\n     */\n\n  }, {\n    key: "render",\n    value: function render(renderer) {\n      if (!renderer) {\n        renderer = this.activeRenderer;\n      }\n\n      var renderStart = new Date(); // transform, project, and calculate normals\n\n      for (var i = 0; i < this.meshes.length; i++) {\n        if (this.meshes[i].visible === true) {\n          this.meshes[i].transformOrigin();\n          this.meshes[i].transformCamera(this.activeCamera);\n          this.meshes[i].project(this.activeCamera);\n          this.meshes[i].calculateFaceNormals();\n          this.meshes[i].calculateVertexNormals();\n          this.meshes[i].calculateFaceLightData(this, this.activeCamera);\n          this.meshes[i].calculateVertexLightData(this, this.activeCamera);\n          this.meshes[i].cull(this.activeCamera);\n        }\n      }\n\n      this.faceSortPile.sort();\n      renderer.draw(this);\n      var renderComplete = new Date();\n      this.renderFrameCount++;\n      this.renderTime += (renderComplete.getTime() - renderStart.getTime()) / 1000.0;\n      this.renderFPS = this.renderFrameCount / this.renderTime;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: "clearMeshes",\n    value: function clearMeshes() {\n      this.meshes = [];\n      this.faceSortPile.reInit();\n    }\n  }]);\n\n  return Scene;\n}();\n// CONCATENATED MODULE: ./lib/3d/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./components/apps/3d/vertex/app.js\n\n\n\n\n\n\n\nvar app_VertexApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(VertexApp, _App);\n\n  function VertexApp(targetCanvasId) {\n    var _this;\n\n    var activeObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'torus\';\n\n    Object(classCallCheck["a" /* default */])(this, VertexApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(VertexApp).call(this, targetCanvasId));\n    _this.scene = new scene_Scene();\n\n    _this.loadObjects();\n\n    _this.initObject(activeObject);\n\n    _this.initLights();\n\n    _this.initCamera();\n\n    _this.initRenderer();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(VertexApp, [{\n    key: "loadObjects",\n    value: function loadObjects() {\n      this.objects = {\n        torus: TorusFactory.generate(500, 500, 350, 20, 12),\n        teapot: ObjFactory.load(\'./resources/3d/objects/teapot.obj\', this.scene),\n        cube: CuboidFactory.generate(500, 500, 500),\n        sphere: SphereFactory.generate(500, 500, 500, 20)\n      };\n      this.objects.torus.position.z = -1200;\n      this.objects.teapot.position.z = -1200;\n      this.objects.cube.position.z = -1200;\n      this.objects.sphere.position.z = -1200;\n      this.objects.teapot.scale.set(800, 800, 800);\n    }\n  }, {\n    key: "initCamera",\n    value: function initCamera() {\n      var camera = new movable_camera_MovableCamera();\n      this.scene.addCamera(camera);\n    }\n  }, {\n    key: "initObject",\n    value: function initObject(activeObject) {\n      this.setObject(activeObject);\n    }\n  }, {\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new vertex_renderer_VertexRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }, {\n    key: "initLights",\n    value: function initLights() {\n      var light = new omni_light_OmniLight(new point_3d_Point3D(-250, 0, -800), new normalized_color_NormalizedColor(1, 1, 1));\n      light.diffusePower = 20000;\n      var light2 = new omni_light_OmniLight(new point_3d_Point3D(0, 0, -1200), new normalized_color_NormalizedColor(1, 1, 1));\n      light2.diffusePower = 20000;\n      this.scene.addLight(light);\n      this.scene.addLight(light2);\n    }\n  }, {\n    key: "setObject",\n    value: function setObject(objectName) {\n      this.scene.clearMeshes();\n      this.scene.addMesh(this.objects[objectName]);\n      this.activeObject = objectName;\n    }\n  }, {\n    key: "rotateMesh",\n    value: function rotateMesh() {\n      this.objects[this.activeObject].rotation.addByVal(0.01);\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor = new color_Color(220, 230, 240);\n      Draw.clear();\n      this.scene.render();\n      this.endDrawing(true);\n    }\n  }]);\n\n  return VertexApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/vertex/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar vertexvue_type_script_lang_js_class, vertexvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar vertexvue_type_script_lang_js_Vertex = Object(vue_class_component_esm["a" /* default */])(vertexvue_type_script_lang_js_class = (vertexvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Vertex, _VueWrapper);\n\n  function Vertex() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Vertex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Vertex)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'teapot\');\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "objectOptions", [{\n      text: \'Cube\',\n      value: \'cube\'\n    }, {\n      text: \'Sphere\',\n      value: \'sphere\'\n    }, {\n      text: \'Torus\',\n      value: \'torus\'\n    }, {\n      text: \'Teapot\',\n      value: \'teapot\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Vertex, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_VertexApp(\'surface\', this.activeObject);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.rotateMesh();\n      this.app.draw();\n    }\n  }, {\n    key: "switchObject",\n    value: function switchObject(object) {\n      this.app.setObject(object);\n    }\n  }]);\n\n  return Vertex;\n}(vue_wrapper), vertexvue_type_script_lang_js_temp)) || vertexvue_type_script_lang_js_class;\n\n/* harmony default export */ var vertexvue_type_script_lang_js_ = (vertexvue_type_script_lang_js_Vertex);\n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_vertexvue_type_script_lang_js_ = (vertexvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/vertex/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar vertex_component = Object(componentNormalizer["a" /* default */])(\n  _3d_vertexvue_type_script_lang_js_,\n  vertexvue_type_template_id_90903d4c_render,\n  vertexvue_type_template_id_90903d4c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var vertex = (vertex_component.exports);\n// CONCATENATED MODULE: ./components/apps/3d/flat/app.js\n\n\n\n\n\n\n\nvar app_FlatApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(FlatApp, _VertexApp);\n\n  function FlatApp() {\n    Object(classCallCheck["a" /* default */])(this, FlatApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new flat_renderer_FlatRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return FlatApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar flatvue_type_script_lang_js_class, flatvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar flatvue_type_script_lang_js_Flat = Object(vue_class_component_esm["a" /* default */])(flatvue_type_script_lang_js_class = (flatvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(Flat, _Vertex);\n\n  function Flat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Flat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Flat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Flat, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_FlatApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return Flat;\n}(vertex), flatvue_type_script_lang_js_temp)) || flatvue_type_script_lang_js_class;\n\n/* harmony default export */ var flatvue_type_script_lang_js_ = (flatvue_type_script_lang_js_Flat);\n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_flatvue_type_script_lang_js_ = (flatvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/flat/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar flat_component = Object(componentNormalizer["a" /* default */])(\n  _3d_flatvue_type_script_lang_js_,\n  flatvue_type_template_id_2cd2beae_render,\n  flatvue_type_template_id_2cd2beae_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var flat = (flat_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat-shading/index.vue?vue&type=template&id=365d3920&\nvar flat_shadingvue_type_template_id_365d3920_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Flat Shading")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar flat_shadingvue_type_template_id_365d3920_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Shading#Flat_shading"}},[_vm._v("flat shading.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue?vue&type=template&id=365d3920&\n\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/app.js\n\n\n\n\n\n\n\nvar app_FlatShadingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(FlatShadingApp, _VertexApp);\n\n  function FlatShadingApp() {\n    Object(classCallCheck["a" /* default */])(this, FlatShadingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(FlatShadingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(FlatShadingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new flat_shader_renderer_FlatShaderRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return FlatShadingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/flat-shading/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar flat_shadingvue_type_script_lang_js_class, flat_shadingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar flat_shadingvue_type_script_lang_js_FlatShading = Object(vue_class_component_esm["a" /* default */])(flat_shadingvue_type_script_lang_js_class = (flat_shadingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(FlatShading, _Vertex);\n\n  function FlatShading() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, FlatShading);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(FlatShading)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(FlatShading, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_FlatShadingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return FlatShading;\n}(vertex), flat_shadingvue_type_script_lang_js_temp)) || flat_shadingvue_type_script_lang_js_class;\n\n/* harmony default export */ var flat_shadingvue_type_script_lang_js_ = (flat_shadingvue_type_script_lang_js_FlatShading);\n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_flat_shadingvue_type_script_lang_js_ = (flat_shadingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/flat-shading/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar flat_shading_component = Object(componentNormalizer["a" /* default */])(\n  _3d_flat_shadingvue_type_script_lang_js_,\n  flat_shadingvue_type_template_id_365d3920_render,\n  flat_shadingvue_type_template_id_365d3920_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var flat_shading = (flat_shading_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/gouraud-shading/index.vue?vue&type=template&id=77e95246&\nvar gouraud_shadingvue_type_template_id_77e95246_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Gouraud Shading")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar gouraud_shadingvue_type_template_id_77e95246_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Gouraud_shading"}},[_vm._v("Gouraud shading.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue?vue&type=template&id=77e95246&\n\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/app.js\n\n\n\n\n\n\n\nvar app_GouraudShadingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(GouraudShadingApp, _VertexApp);\n\n  function GouraudShadingApp() {\n    Object(classCallCheck["a" /* default */])(this, GouraudShadingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(GouraudShadingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(GouraudShadingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new gouraud_shader_renderer_GouraudShaderRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return GouraudShadingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/gouraud-shading/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar gouraud_shadingvue_type_script_lang_js_class, gouraud_shadingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar gouraud_shadingvue_type_script_lang_js_GouraudShading = Object(vue_class_component_esm["a" /* default */])(gouraud_shadingvue_type_script_lang_js_class = (gouraud_shadingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(GouraudShading, _Vertex);\n\n  function GouraudShading() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, GouraudShading);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(GouraudShading)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(GouraudShading, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_GouraudShadingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return GouraudShading;\n}(vertex), gouraud_shadingvue_type_script_lang_js_temp)) || gouraud_shadingvue_type_script_lang_js_class;\n\n/* harmony default export */ var gouraud_shadingvue_type_script_lang_js_ = (gouraud_shadingvue_type_script_lang_js_GouraudShading);\n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_gouraud_shadingvue_type_script_lang_js_ = (gouraud_shadingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/gouraud-shading/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar gouraud_shading_component = Object(componentNormalizer["a" /* default */])(\n  _3d_gouraud_shadingvue_type_script_lang_js_,\n  gouraud_shadingvue_type_template_id_77e95246_render,\n  gouraud_shadingvue_type_template_id_77e95246_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var gouraud_shading = (gouraud_shading_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/texture-mapping/index.vue?vue&type=template&id=71cc48b6&\nvar texture_mappingvue_type_template_id_71cc48b6_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Texture Mapping")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar texture_mappingvue_type_template_id_71cc48b6_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Texture_mapping"}},[_vm._v("texture mapping.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue?vue&type=template&id=71cc48b6&\n\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/app.js\n\n\n\n\n\n\n\nvar app_TextureMappingApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(TextureMappingApp, _VertexApp);\n\n  function TextureMappingApp() {\n    Object(classCallCheck["a" /* default */])(this, TextureMappingApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TextureMappingApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TextureMappingApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new texture_renderer_TextureRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return TextureMappingApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/texture-mapping/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar texture_mappingvue_type_script_lang_js_class, texture_mappingvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar texture_mappingvue_type_script_lang_js_TextureMapping = Object(vue_class_component_esm["a" /* default */])(texture_mappingvue_type_script_lang_js_class = (texture_mappingvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(TextureMapping, _Vertex);\n\n  function TextureMapping() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TextureMapping);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(TextureMapping)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'torus\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(TextureMapping, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_TextureMappingApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return TextureMapping;\n}(vertex), texture_mappingvue_type_script_lang_js_temp)) || texture_mappingvue_type_script_lang_js_class;\n\n/* harmony default export */ var texture_mappingvue_type_script_lang_js_ = (texture_mappingvue_type_script_lang_js_TextureMapping);\n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_texture_mappingvue_type_script_lang_js_ = (texture_mappingvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/texture-mapping/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar texture_mapping_component = Object(componentNormalizer["a" /* default */])(\n  _3d_texture_mappingvue_type_script_lang_js_,\n  texture_mappingvue_type_template_id_71cc48b6_render,\n  texture_mappingvue_type_template_id_71cc48b6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var texture_mapping = (texture_mapping_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/wireframe/index.vue?vue&type=template&id=fb519278&\nvar wireframevue_type_template_id_fb519278_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Wireframe Projection")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-form-group\',[_c(\'b-form-radio-group\',{attrs:{"options":_vm.objectOptions,"buttons":"","size":"sm"},on:{"change":_vm.switchObject},model:{value:(_vm.activeObject),callback:function ($$v) {_vm.activeObject=$$v},expression:"activeObject"}})],1)],1)],1)}\nvar wireframevue_type_template_id_fb519278_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pure JavaScript (not WebGL) implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Wire-frame_model"}},[_vm._v("wireframe projection.")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue?vue&type=template&id=fb519278&\n\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/app.js\n\n\n\n\n\n\n\nvar app_WireframeApp =\n/*#__PURE__*/\nfunction (_VertexApp) {\n  Object(inherits["a" /* default */])(WireframeApp, _VertexApp);\n\n  function WireframeApp() {\n    Object(classCallCheck["a" /* default */])(this, WireframeApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(WireframeApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(WireframeApp, [{\n    key: "initRenderer",\n    value: function initRenderer() {\n      var renderer = new wireframe_renderer_WireframeRenderer();\n      this.scene.addRenderer(renderer, true);\n    }\n  }]);\n\n  return WireframeApp;\n}(app_VertexApp);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/3d/wireframe/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar wireframevue_type_script_lang_js_class, wireframevue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar wireframevue_type_script_lang_js_Wireframe = Object(vue_class_component_esm["a" /* default */])(wireframevue_type_script_lang_js_class = (wireframevue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vertex) {\n  Object(inherits["a" /* default */])(Wireframe, _Vertex);\n\n  function Wireframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Wireframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Wireframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeObject", \'teapot\');\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Wireframe, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_WireframeApp(\'surface\', this.activeObject);\n    }\n  }]);\n\n  return Wireframe;\n}(vertex), wireframevue_type_script_lang_js_temp)) || wireframevue_type_script_lang_js_class;\n\n/* harmony default export */ var wireframevue_type_script_lang_js_ = (wireframevue_type_script_lang_js_Wireframe);\n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var _3d_wireframevue_type_script_lang_js_ = (wireframevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/3d/wireframe/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar wireframe_component = Object(componentNormalizer["a" /* default */])(\n  _3d_wireframevue_type_script_lang_js_,\n  wireframevue_type_template_id_fb519278_render,\n  wireframevue_type_template_id_fb519278_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var wireframe = (wireframe_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/mandelbrot/index.vue?vue&type=template&id=4d778311&\nvar mandelbrotvue_type_template_id_4d778311_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"400"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Mandelbrot Set")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Resolution","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"100"},on:{"update":_vm.updateIterations},model:{value:(_vm.iterations),callback:function ($$v) {_vm.iterations=$$v},expression:"iterations"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Zoom","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"1000"},on:{"update":_vm.updateZoom},model:{value:(_vm.zoom),callback:function ($$v) {_vm.zoom=$$v},expression:"zoom"}})],1)],1)],1)}\nvar mandelbrotvue_type_template_id_4d778311_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Mandelbrot_set"}},[_vm._v("Mandelbrot set")]),_vm._v(" fractal shape.")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue?vue&type=template&id=4d778311&\n\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/app.js\n\n\n\n\n\n\n\n\nvar app_MandelbrotApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(MandelbrotApp, _App);\n\n  function MandelbrotApp(targetCanvasId) {\n    var _this;\n\n    var maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    Object(classCallCheck["a" /* default */])(this, MandelbrotApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(MandelbrotApp).call(this, targetCanvasId));\n    _this.maxIterations = maxIterations;\n    _this.zoom = zoom;\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(MandelbrotApp, [{\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      var data = this.virtualSurface.getData();\n      var width = this.virtualSurface.getWidth();\n      var height = this.virtualSurface.getHeight();\n      var maxIterations = this.maxIterations;\n      var scaleX = 3.5 / this.zoom;\n      var scaleY = 2.0 / this.zoom;\n      var yAdder = -this.zoom / 40;\n      var xAdder = -this.zoom / 24;\n      var precalcColors = this.precalcColors;\n      var xPos = -0.75 + xAdder - scaleX / 2;\n      var yPos = 0 + yAdder - scaleY / 2;\n      var ptr = 0;\n\n      for (var py = 0; py < height; py++) {\n        for (var px = 0; px < width; px++) {\n          var x0 = xPos + px / width * scaleX;\n          var y0 = yPos + py / height * scaleY;\n          var x = 0.0;\n          var y = 0.0;\n          var xx = x * x;\n          var yy = y * y;\n          var iteration = 0;\n\n          while (xx + yy < 4 && iteration < maxIterations) {\n            y = 2 * x * y + y0;\n            x = xx - yy + x0;\n            iteration++;\n            xx = x * x;\n            yy = y * y;\n          }\n\n          var colIndex = Math.max(0, Math.min(maxIterations - 1, iteration));\n          var color = precalcColors[colIndex];\n          data[ptr++] = color.r;\n          data[ptr++] = color.g;\n          data[ptr++] = color.b;\n          ptr++;\n        }\n      }\n\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.maxIterations);\n      var degrees = 160;\n      var degreeOffset = 45;\n\n      for (var i = 0; i < this.maxIterations; i++) {\n        var normal = Math.cos(i / this.maxIterations * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, normal / 2, normal, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }]);\n\n  return MandelbrotApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/mandelbrot/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar mandelbrotvue_type_script_lang_js_class, mandelbrotvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar mandelbrotvue_type_script_lang_js_Mandelbrot = Object(vue_class_component_esm["a" /* default */])(mandelbrotvue_type_script_lang_js_class = (mandelbrotvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Mandelbrot, _VueWrapper);\n\n  function Mandelbrot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Mandelbrot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Mandelbrot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "iterations", 40);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "zoom", 100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Mandelbrot, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      var app = new app_MandelbrotApp(\'surface\', this.iterations, this.zoom / 100);\n      app.calculatePalette();\n      app.draw();\n      return app;\n    }\n  }, {\n    key: "tick",\n    value: function tick() {// do nothing\n    }\n  }, {\n    key: "updateIterations",\n    value: function updateIterations(val) {\n      this.app.maxIterations = val;\n      this.app.calculatePalette();\n      this.app.draw();\n    }\n  }, {\n    key: "updateZoom",\n    value: function updateZoom(val) {\n      this.app.zoom = val / 100.0;\n      this.app.draw();\n    }\n  }]);\n\n  return Mandelbrot;\n}(vue_wrapper), mandelbrotvue_type_script_lang_js_temp)) || mandelbrotvue_type_script_lang_js_class;\n\n/* harmony default export */ var mandelbrotvue_type_script_lang_js_ = (mandelbrotvue_type_script_lang_js_Mandelbrot);\n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var fractals_mandelbrotvue_type_script_lang_js_ = (mandelbrotvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/fractals/mandelbrot/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar mandelbrot_component = Object(componentNormalizer["a" /* default */])(\n  fractals_mandelbrotvue_type_script_lang_js_,\n  mandelbrotvue_type_template_id_4d778311_render,\n  mandelbrotvue_type_template_id_4d778311_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var mandelbrot = (mandelbrot_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/sierpinski/index.vue?vue&type=template&id=36beaa6a&\nvar sierpinskivue_type_template_id_36beaa6a_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Sierpiński Triangle")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'b-card\',{staticClass:"options",attrs:{"sub-title":"Options"}},[_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Resolution","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"1","max":"30"},on:{"update":_vm.updateResolution},model:{value:(_vm.resolution),callback:function ($$v) {_vm.resolution=$$v},expression:"resolution"}})],1),_vm._v(" "),_c(\'b-input-group\',{staticClass:"mb-3",attrs:{"prepend":"Zoom","size":"sm"}},[_c(\'b-form-input\',{attrs:{"type":"range","min":"100","max":"5000"},on:{"update":_vm.updateZoom},model:{value:(_vm.zoom),callback:function ($$v) {_vm.zoom=$$v},expression:"zoom"}})],1)],1)],1)}\nvar sierpinskivue_type_template_id_36beaa6a_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("A pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"http://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle"}},[_vm._v("Sierpiński\\n        triangle")]),_vm._v(".")])}]\n\n\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue?vue&type=template&id=36beaa6a&\n\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_SierpinskiApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(SierpinskiApp, _App);\n\n  function SierpinskiApp(targetCanvasId) {\n    var _this;\n\n    var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var maxIterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;\n\n    Object(classCallCheck["a" /* default */])(this, SierpinskiApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SierpinskiApp).call(this, targetCanvasId));\n    _this.zoom = zoom;\n    _this.maxIterations = maxIterations;\n\n    _this.calculatePalette();\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(SierpinskiApp, [{\n    key: "drawRecursive",\n    value: function drawRecursive(sideLength, posCenter, calculatedTriangleHeight, depth) {\n      if (sideLength < 0.2) {\n        return;\n      }\n\n      var sideLengthHalf = sideLength / 2;\n      var triangleHeight = calculatedTriangleHeight || Math.sqrt(sideLength * sideLength - sideLengthHalf * sideLengthHalf);\n      var triangleHalf = triangleHeight / 2;\n\n      if (posCenter.x + sideLengthHalf < 0 || posCenter.x - sideLengthHalf > this.virtualSurface.getWidth() || posCenter.y + sideLengthHalf < 0 || posCenter.y - sideLengthHalf > this.virtualSurface.getWidth()) {\n        return;\n      }\n\n      depth = depth || 0;\n      var posA = new point_2d_Point2D(posCenter.x - sideLengthHalf, posCenter.y + triangleHalf);\n      var posB = new point_2d_Point2D(posCenter.x + sideLengthHalf, posCenter.y + triangleHalf);\n      var posC = new point_2d_Point2D(posCenter.x, posCenter.y - triangleHalf);\n      var color = new color_Color(this.precalcColors[depth]);\n      color.a = Math.round(0.5 * (this.maxIterations - depth) / this.maxIterations * 255);\n      Draw.blendPixel(posA, color);\n      Draw.blendPixel(posB, color);\n      Draw.blendPixel(posC, color);\n\n      if (depth + 1 < this.maxIterations) {\n        var triangleDoubleHalf = triangleHalf / 2;\n        var sideDoubleHalf = sideLengthHalf / 2;\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x - sideDoubleHalf, posCenter.y + triangleDoubleHalf), triangleHalf, depth + 1);\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x + sideDoubleHalf, posCenter.y + triangleDoubleHalf), triangleHalf, depth + 1);\n        this.drawRecursive(sideLengthHalf, new point_2d_Point2D(posCenter.x, posCenter.y - triangleDoubleHalf), triangleHalf, depth + 1);\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.color.set(32, 255, 32);\n      Draw.setSurface(this.virtualSurface);\n      Draw.clear();\n      var sideLength = Math.min(this.canvas.height, this.canvas.width) * this.zoom;\n      var offset = new point_2d_Point2D(this.zoom * 10, this.zoom * 3);\n      var posCenter = new point_2d_Point2D(this.canvas.width / 2 + offset.x, this.canvas.height / 2 + offset.y);\n      this.drawRecursive(sideLength, posCenter);\n      this.endDrawing(true);\n    }\n  }, {\n    key: "calculatePalette",\n    value: function calculatePalette() {\n      this.precalcColors = new Array(this.maxIterations);\n      var degrees = 45;\n      var degreeOffset = 0;\n\n      for (var i = 0; i < this.maxIterations; i++) {\n        var normal = Math.cos(i / this.maxIterations * Math.PI);\n        var hue = normal * degrees + degreeOffset;\n        var col = new normalized_color_NormalizedColor(); // NormalizedColor.hsvToRgb( hue, 1.0, 1.0, col );\n\n        normalized_color_NormalizedColor.hsvToRgb(hue, i, 1, col);\n        var finalColor = new color_Color();\n        col.getColor(finalColor);\n        this.precalcColors[i] = finalColor;\n      }\n    }\n  }]);\n\n  return SierpinskiApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/fractals/sierpinski/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar sierpinskivue_type_script_lang_js_class, sierpinskivue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar sierpinskivue_type_script_lang_js_Sierpinski = Object(vue_class_component_esm["a" /* default */])(sierpinskivue_type_script_lang_js_class = (sierpinskivue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(Sierpinski, _VueWrapper);\n\n  function Sierpinski() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, Sierpinski);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(Sierpinski)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "resolution", 15);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "zoom", 100);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(Sierpinski, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_SierpinskiApp(\'surface\', this.zoom / 100, this.resolution);\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      this.app.draw();\n    }\n  }, {\n    key: "updateResolution",\n    value: function updateResolution(val) {\n      var app = this.app;\n      app.maxIterations = val;\n      app.calculatePalette();\n      app.draw();\n    }\n  }, {\n    key: "updateZoom",\n    value: function updateZoom(val) {\n      var app = this.app;\n      app.zoom = val / 100.0;\n      app.draw();\n    }\n  }]);\n\n  return Sierpinski;\n}(vue_wrapper), sierpinskivue_type_script_lang_js_temp)) || sierpinskivue_type_script_lang_js_class;\n\n/* harmony default export */ var sierpinskivue_type_script_lang_js_ = (sierpinskivue_type_script_lang_js_Sierpinski);\n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var fractals_sierpinskivue_type_script_lang_js_ = (sierpinskivue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/fractals/sierpinski/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar sierpinski_component = Object(componentNormalizer["a" /* default */])(\n  fractals_sierpinskivue_type_script_lang_js_,\n  sierpinskivue_type_template_id_36beaa6a_render,\n  sierpinskivue_type_template_id_36beaa6a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var sierpinski = (sierpinski_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/interpolated-triangle/index.vue?vue&type=template&id=8b5c6c74&\nvar interpolated_trianglevue_type_template_id_8b5c6c74_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar interpolated_trianglevue_type_template_id_8b5c6c74_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Interpolated Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of "),_c(\'a\',{attrs:{"href":"https://en.wikipedia.org/wiki/Gouraud_shading"}},[_vm._v("triangle polygon interpolation")]),_vm._v(" ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path()")]),_vm._v(")")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue?vue&type=template&id=8b5c6c74&\n\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/app.js\n\n\n\n\n\n\n\n\n // import { Surface } from \'~/lib/core/surface\';\n\nvar app_InterpolatedTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(InterpolatedTriangleApp, _App);\n\n  // eslint-disable-next-line\n  function InterpolatedTriangleApp(canvasId) {\n    Object(classCallCheck["a" /* default */])(this, InterpolatedTriangleApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(InterpolatedTriangleApp).call(this, canvasId)); // Draw.bgColor.set(220, 220, 220);\n  }\n\n  Object(createClass["a" /* default */])(InterpolatedTriangleApp, [{\n    key: "drawTriangle",\n    value: function drawTriangle(radAdjustment, posX, posY, triangle) {\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var rad = radAdjustment;\n\n      for (var j = 0; j < 3; j++) {\n        translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n        translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n      }\n\n      Draw.interpolatedTriangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], new color_Color(255, 255, 255), new color_Color(255, 0, 0), new color_Color(0, 0, 0));\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear(); // Draw.color.set(32, 255, 32);\n\n      this.drawTriangle( // 77.458\n      rad // 61.758\n      // 36.231\n      // 9.2\n      // 91.503\n      //  /*1.108*/, 320, 240,\n      , 320, 240, // jshint ignore:line\n      [new point_2d_Point2D(0, -100), new point_2d_Point2D(-100, 100), new point_2d_Point2D(100, 100)]);\n      this.endDrawing(true);\n    }\n  }]);\n\n  return InterpolatedTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/interpolated-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\nvar interpolated_trianglevue_type_script_lang_js_class, interpolated_trianglevue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar interpolated_trianglevue_type_script_lang_js_InterpolatedTriangle = Object(vue_class_component_esm["a" /* default */])(interpolated_trianglevue_type_script_lang_js_class = (interpolated_trianglevue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(InterpolatedTriangle, _VueWrapper);\n\n  function InterpolatedTriangle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, InterpolatedTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(InterpolatedTriangle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "startTime", new Date());\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(InterpolatedTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_InterpolatedTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return InterpolatedTriangle;\n}(vue_wrapper), interpolated_trianglevue_type_script_lang_js_temp)) || interpolated_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var interpolated_trianglevue_type_script_lang_js_ = (interpolated_trianglevue_type_script_lang_js_InterpolatedTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_interpolated_trianglevue_type_script_lang_js_ = (interpolated_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/interpolated-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar interpolated_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_interpolated_trianglevue_type_script_lang_js_,\n  interpolated_trianglevue_type_template_id_8b5c6c74_render,\n  interpolated_trianglevue_type_template_id_8b5c6c74_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var interpolated_triangle = (interpolated_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/line/index.vue?vue&type=template&id=d0eafb5a&\nvar linevue_type_template_id_d0eafb5a_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar linevue_type_template_id_d0eafb5a_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Line")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of line ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.lineTo()")]),_vm._v(")")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue?vue&type=template&id=d0eafb5a&\n\n// CONCATENATED MODULE: ./components/apps/primitives/line/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_LineApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(LineApp, _App);\n\n  function LineApp() {\n    Object(classCallCheck["a" /* default */])(this, LineApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(LineApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(LineApp, [{\n    key: "drawLine",\n    value: function drawLine(p1, p2, rad) {\n      var lineColor = new color_Color(32, 255, 32);\n      var pixelColor = new color_Color(255, 0, 0, 128);\n      Line.draw(p1, p2, lineColor, Draw.getSurface());\n      Draw.blendPixel(p1, pixelColor);\n      Draw.blendPixel(p2, pixelColor);\n    }\n    /**\n     * @param {float|int|Number} x\n     * @param {float|int|Number} y\n     * @param {float|int|Number} length\n     * @param {float|int|Number} rad\n     */\n\n  }, {\n    key: "rotateLine",\n    value: function rotateLine(x, y, length, rad) {\n      var lineColor = new color_Color(20, 123, 255);\n      var pixelColor = new color_Color(255, 236, 7, 255);\n      var lx1 = -length / 2;\n      var lx2 = length / 2;\n      var ly1 = 0;\n      var ly2 = 0;\n      var p1 = new point_2d_Point2D(x + lx1 * Math.cos(rad) - ly1 * Math.sin(rad), y + ly1 * Math.cos(rad) + lx1 * Math.sin(rad));\n      var p2 = new point_2d_Point2D(x + lx2 * Math.cos(rad) - ly2 * Math.sin(rad), y + ly2 * Math.cos(rad) + lx2 * Math.sin(rad));\n      Line.draw(p1, p2, lineColor, Draw.getSurface());\n      Draw.blendPixel(p1, pixelColor);\n      Draw.blendPixel(p2, pixelColor);\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear();\n      this.rotateLine(320, 240, 200, rad);\n      /*\n      drawLine( new Point2D( 10, 20 ), new Point2D( 30, 40 ) );\n       drawLine( new Point2D( 200, 200 ), new Point2D( 500, 200 ) );\n      drawLine( new Point2D( 200, 300 ), new Point2D( 500, 300 ) );\n      drawLine( new Point2D( 200, 200 ), new Point2D( 200, 300 ) );\n      drawLine( new Point2D( 500, 200 ), new Point2D( 500, 300 ) );\n       drawLine( new Point2D( 200, 200 ), new Point2D( 500, 300 ) );\n      drawLine( new Point2D( 500, 200 ), new Point2D( 200, 300 ) );\n       drawLine( new Point2D( 500, 450 ), new Point2D( 200, 449 ) );\n      drawLine( new Point2D( 600, 100 ), new Point2D( 601, 400 ) );\n      */\n\n      this.endDrawing(true);\n    }\n  }]);\n\n  return LineApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/line/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar linevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar linevue_type_script_lang_js_LineComponent = Object(vue_class_component_esm["a" /* default */])(linevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(LineComponent, _VueWrapper);\n\n  function LineComponent() {\n    Object(classCallCheck["a" /* default */])(this, LineComponent);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(LineComponent).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(LineComponent, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_LineApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return LineComponent;\n}(vue_wrapper)) || linevue_type_script_lang_js_class;\n\n/* harmony default export */ var linevue_type_script_lang_js_ = (linevue_type_script_lang_js_LineComponent);\n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_linevue_type_script_lang_js_ = (linevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/line/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar line_component = Object(componentNormalizer["a" /* default */])(\n  primitives_linevue_type_script_lang_js_,\n  linevue_type_template_id_d0eafb5a_render,\n  linevue_type_template_id_d0eafb5a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var primitives_line = (line_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/solid-triangle/index.vue?vue&type=template&id=28f4190d&\nvar solid_trianglevue_type_template_id_28f4190d_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar solid_trianglevue_type_template_id_28f4190d_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Solid Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of triangle polygon ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path")]),_vm._v(")")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue?vue&type=template&id=28f4190d&\n\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/app.js\n\n\n\n\n\n\n\n\n\nvar app_SolidTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(SolidTriangleApp, _App);\n\n  function SolidTriangleApp() {\n    Object(classCallCheck["a" /* default */])(this, SolidTriangleApp);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidTriangleApp).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(SolidTriangleApp, [{\n    key: "drawTriangles",\n    value: function drawTriangles(radAdjustment, posY, triangle) {\n      var triCount = 10;\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var pixelColor = new color_Color(255, 0, 0, 128);\n\n      for (var i = 0; i < triCount; i++) {\n        var rad = i * (Math.PI * 2) / triCount + radAdjustment;\n        var posX = Draw.surface.getWidth() / triCount * (i + 0.5);\n\n        for (var j = 0; j < 3; j++) {\n          translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n          translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n        }\n\n        Draw.triangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], Draw.color);\n\n        for (var _j = 0; _j < 3; _j++) {\n          Draw.blendPixel(translatedTriangle[_j], pixelColor);\n        }\n      }\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.color.set(32, 32, 255);\n      Draw.bgColor.set(220, 230, 240);\n      Draw.clear();\n      this.drawTriangles(rad, 150, [new point_2d_Point2D(0, -10), new point_2d_Point2D(-10, 10), new point_2d_Point2D(10, 0)]);\n      this.drawTriangles(rad, 200, [new point_2d_Point2D(0, -8), new point_2d_Point2D(7, 4), new point_2d_Point2D(10, 0)]);\n      this.drawTriangles(rad, 250, [new point_2d_Point2D(0, -10), new point_2d_Point2D(-30, 10), new point_2d_Point2D(30, 35)]);\n      this.endDrawing(true);\n    }\n  }]);\n\n  return SolidTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/solid-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar solid_trianglevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar solid_trianglevue_type_script_lang_js_SolidTriangle = Object(vue_class_component_esm["a" /* default */])(solid_trianglevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(SolidTriangle, _VueWrapper);\n\n  function SolidTriangle() {\n    Object(classCallCheck["a" /* default */])(this, SolidTriangle);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(SolidTriangle).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(SolidTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_SolidTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return SolidTriangle;\n}(vue_wrapper)) || solid_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var solid_trianglevue_type_script_lang_js_ = (solid_trianglevue_type_script_lang_js_SolidTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_solid_trianglevue_type_script_lang_js_ = (solid_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/solid-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar solid_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_solid_trianglevue_type_script_lang_js_,\n  solid_trianglevue_type_template_id_28f4190d_render,\n  solid_trianglevue_type_template_id_28f4190d_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var solid_triangle = (solid_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/textured-triangle/index.vue?vue&type=template&id=e688d08c&\nvar textured_trianglevue_type_template_id_e688d08c_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar textured_trianglevue_type_template_id_e688d08c_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'canvas\',{attrs:{"id":"surface","width":"640","height":"480"}}),_vm._v(" "),_c(\'h2\',{staticClass:"subtitle"},[_vm._v("Textured Triangle")]),_vm._v(" "),_c(\'p\',[_vm._v("Pure JavaScript implementation of textured triangle polygon ("),_c(\'i\',[_vm._v("not")]),_vm._v(" "),_c(\'code\',[_vm._v("canvas.path")]),_vm._v(")")])])}]\n\n\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue?vue&type=template&id=e688d08c&\n\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/app.js\n\n\n\n\n\n\n\n\n\n\nvar app_TexturedTriangleApp =\n/*#__PURE__*/\nfunction (_App) {\n  Object(inherits["a" /* default */])(TexturedTriangleApp, _App);\n\n  function TexturedTriangleApp(targetCanvasId) {\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, TexturedTriangleApp);\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedTriangleApp).call(this, targetCanvasId));\n    _this.texture = new canvas_texture_CanvasTexture(\'./resources/apps/textured-triangle/smiley2.png\');\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(TexturedTriangleApp, [{\n    key: "drawTriangle",\n    value: function drawTriangle(radAdjustment, posX, posY, triangle, uv) {\n      var translatedTriangle = [new point_2d_Point2D(), new point_2d_Point2D(), new point_2d_Point2D()];\n      var rad = radAdjustment;\n\n      for (var j = 0; j < 3; j++) {\n        translatedTriangle[j].x = posX + triangle[j].x * Math.cos(rad) - triangle[j].y * Math.sin(rad);\n        translatedTriangle[j].y = posY + triangle[j].y * Math.cos(rad) + triangle[j].x * Math.sin(rad);\n      }\n\n      Draw.texturedTriangle(translatedTriangle[0], translatedTriangle[1], translatedTriangle[2], uv[0], uv[1], uv[2], this.texture);\n    }\n  }, {\n    key: "draw",\n    value: function draw(rad) {\n      this.startDrawing();\n      Draw.bgColor.set(220, 230, 240);\n      Draw.color.set(32, 255, 32);\n      Draw.clear();\n      var s = 1 + Math.cos(rad) * 0.3; // Math.cos(rad);\n\n      this.drawTriangle(rad, 320, 300, [new point_2d_Point2D(s * 100, s * -100), new point_2d_Point2D(s * 100, s * 100), new point_2d_Point2D(s * -100, s * 100)], [new point_3d_Point3D(1, 0, 0), new point_3d_Point3D(1, 1, 0), new point_3d_Point3D(0, 1, 0)]);\n      this.drawTriangle(rad, 320, 150, [new point_2d_Point2D(s * 100, s * -100), new point_2d_Point2D(s * 100, s * 100), new point_2d_Point2D(s * -100, s * 100)], [new point_3d_Point3D(0.25, 0.75, 0), new point_3d_Point3D(0.5, 0.25, 0), new point_3d_Point3D(0.75, 0.75, 0)] // [ new Point3D( 1, 0, 0 ), new Point3D( 1, 1, 0 ), new Point3D( 0, 1, 0 ) ]\n      );\n      this.endDrawing(true);\n    }\n  }]);\n\n  return TexturedTriangleApp;\n}(app_App);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./components/apps/primitives/textured-triangle/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nvar textured_trianglevue_type_script_lang_js_class;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nvar textured_trianglevue_type_script_lang_js_TexturedTriangle = Object(vue_class_component_esm["a" /* default */])(textured_trianglevue_type_script_lang_js_class =\n/*#__PURE__*/\nfunction (_VueWrapper) {\n  Object(inherits["a" /* default */])(TexturedTriangle, _VueWrapper);\n\n  function TexturedTriangle() {\n    Object(classCallCheck["a" /* default */])(this, TexturedTriangle);\n\n    return Object(possibleConstructorReturn["a" /* default */])(this, Object(getPrototypeOf["a" /* default */])(TexturedTriangle).apply(this, arguments));\n  }\n\n  Object(createClass["a" /* default */])(TexturedTriangle, [{\n    key: "instantiateApp",\n    value: function instantiateApp() {\n      return new app_TexturedTriangleApp(\'surface\');\n    }\n  }, {\n    key: "tick",\n    value: function tick() {\n      var curTime = new Date();\n      var rad = (curTime.getTime() - this.startTime.getTime()) / 1000;\n      this.app.draw(rad);\n    }\n  }]);\n\n  return TexturedTriangle;\n}(vue_wrapper)) || textured_trianglevue_type_script_lang_js_class;\n\n/* harmony default export */ var textured_trianglevue_type_script_lang_js_ = (textured_trianglevue_type_script_lang_js_TexturedTriangle);\n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var primitives_textured_trianglevue_type_script_lang_js_ = (textured_trianglevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./components/apps/primitives/textured-triangle/index.vue\n\n\n\n\n\n/* normalize component */\n\nvar textured_triangle_component = Object(componentNormalizer["a" /* default */])(\n  primitives_textured_trianglevue_type_script_lang_js_,\n  textured_trianglevue_type_template_id_e688d08c_render,\n  textured_trianglevue_type_template_id_e688d08c_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var textured_triangle = (textured_triangle_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./pages/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n\n\nvar lib_vue_loader_options_pagesvue_type_script_lang_js_dec, lib_vue_loader_options_pagesvue_type_script_lang_js_class, lib_vue_loader_options_pagesvue_type_script_lang_js_temp;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import * as _ from \'lodash\';\n\n\n\n // import Logo from \'~/components/Logo.vue\';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar lib_vue_loader_options_pagesvue_type_script_lang_js_IndexPage = (lib_vue_loader_options_pagesvue_type_script_lang_js_dec = Object(vue_class_component_esm["a" /* default */])({\n  components: {// Logo,\n  }\n}), lib_vue_loader_options_pagesvue_type_script_lang_js_dec(lib_vue_loader_options_pagesvue_type_script_lang_js_class = (lib_vue_loader_options_pagesvue_type_script_lang_js_temp =\n/*#__PURE__*/\nfunction (_Vue) {\n  Object(inherits["a" /* default */])(IndexPage, _Vue);\n\n  function IndexPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    Object(classCallCheck["a" /* default */])(this, IndexPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = Object(possibleConstructorReturn["a" /* default */])(this, (_getPrototypeOf2 = Object(getPrototypeOf["a" /* default */])(IndexPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "sidebarActive", false);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "activeItem", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "curInstance", null);\n\n    Object(defineProperty["a" /* default */])(Object(assertThisInitialized["a" /* default */])(_this), "sidebarItems", [{\n      type: \'title\',\n      title: \'JS-VFX\',\n      id: \'JsvfxMain\',\n      component: main,\n      classes: \'main\'\n    }, {\n      type: \'title\',\n      title: \'Effects\',\n      id: \'EffectsTitle\'\n    }, {\n      title: \'Bilinear Interpolation\',\n      component: bilinear_interpolator,\n      id: \'BilinearInterpolator\'\n    }, {\n      title: \'Bump Mapping\',\n      component: bump_mapping,\n      id: \'BumpMapping\'\n    }, {\n      title: \'Crepuscular Rays\',\n      component: crepuscular_rays,\n      id: \'CrepuscularRays\'\n    }, {\n      title: \'Fisheye Lens\',\n      component: fisheye_lens,\n      id: \'FisheyeLens\'\n    }, {\n      title: \'Metaballs\',\n      component: metaballs,\n      id: \'Metaballs\'\n    }, {\n      title: \'Plasma\',\n      component: plasma,\n      id: \'Plasma\'\n    }, {\n      title: \'Wave Distortion\',\n      component: wave_distortion,\n      id: \'WaveDistortion\'\n    }, {\n      type: \'title\',\n      title: \'3D\',\n      id: \'3DTitle\'\n    }, {\n      title: \'Flat Polygon\',\n      component: flat,\n      id: \'FlatPolygon\'\n    }, {\n      title: \'Flat Shading\',\n      component: flat_shading,\n      id: \'FlatShading\'\n    }, {\n      title: \'Gouraud Shading\',\n      component: gouraud_shading,\n      id: \'GouraudShading\'\n    }, {\n      title: \'Texture Mapping\',\n      component: texture_mapping,\n      id: \'TextureMapping\'\n    }, {\n      title: \'Vertex\',\n      component: vertex,\n      id: \'Vertex\'\n    }, {\n      title: \'Wireframe\',\n      component: wireframe,\n      id: \'Wireframe\'\n    }, {\n      type: \'title\',\n      title: \'Fractals\',\n      id: \'FractalsTitle\'\n    }, {\n      title: \'Mandelbrot Set\',\n      component: mandelbrot,\n      id: \'Mandelbrot\'\n    }, {\n      title: \'Sierpiński Triangle\',\n      component: sierpinski,\n      id: \'Sierpinski\'\n    }, {\n      type: \'title\',\n      title: \'Primitives\',\n      id: \'PrimitivesTitle\'\n    }, {\n      title: \'Interpolated Triangle\',\n      component: interpolated_triangle,\n      id: \'InterpolatedTriangle\'\n    }, {\n      title: \'Line\',\n      component: primitives_line,\n      id: \'LineComponent\'\n    }, {\n      title: \'Solid Triangle\',\n      component: solid_triangle,\n      id: \'SolidTriangle\'\n    }, {\n      title: \'Textured Triangle\',\n      component: textured_triangle,\n      id: \'TexturedTriangle\'\n    }]);\n\n    return _this;\n  }\n\n  Object(createClass["a" /* default */])(IndexPage, [{\n    key: "destroyCurApp",\n    value: function destroyCurApp() {\n      if (this.curInstance) {\n        this.curInstance.$destroy();\n        this.curInstance = null;\n      }\n\n      var el = this.$refs.appContainer;\n      el.childNodes.forEach(function (c) {\n        return el.removeChild(c);\n      });\n    }\n  }, {\n    key: "menuSelect",\n    value: function menuSelect(item) {\n      this.selectApp(item);\n\n      if (window.innerWidth <= 640 && this.sidebarActive) {\n        this.toggleSidebar();\n      }\n    }\n  }, {\n    key: "selectApp",\n    value: function selectApp(item) {\n      if (this.activeItem === item.id) {\n        return;\n      }\n\n      if (this.curInstance) {\n        this.destroyCurApp();\n      }\n\n      var containerEl = this.$refs.appContainer;\n      var el = document.createElement(\'div\');\n      var VueComponent = item.component;\n      containerEl.appendChild(el);\n      this.curInstance = new VueComponent();\n      this.curInstance.$mount(el);\n      this.activeItem = item.id;\n      this.$router.push({\n        query: {\n          component: item.id\n        }\n      });\n    }\n  }, {\n    key: "toggleSidebar",\n    value: function toggleSidebar() {\n      this.sidebarActive = !this.sidebarActive;\n    }\n  }, {\n    key: "findApp",\n    value: function findApp(appId, defaultApp) {\n      return lodash_default.a.find(this.sidebarItems, function (item) {\n        return item.id === appId;\n      }) || defaultApp;\n    }\n  }, {\n    key: "mounted",\n    value: function mounted() {\n      var _this2 = this;\n\n      var app = this.findApp(lodash_default.a.get(this, \'$router.history.current.query.component\'), {\n        title: \'Main\',\n        id: \'Main\',\n        component: main\n      });\n      this.selectApp(app);\n      this.$router.afterEach(function (to, from) {\n        var component = lodash_default.a.get(to, \'query.component\');\n\n        if (component !== _this2.activeItem) {\n          _this2.selectApp(_this2.findApp(component));\n        }\n      });\n    }\n  }, {\n    key: "findNext",\n    value: function findNext(direction) {\n      var _this3 = this;\n\n      var itemIndex = this.activeItem ? Math.max(0, lodash_default.a.findIndex(this.sidebarItems, function (item) {\n        return item.id === _this3.activeItem;\n      })) : 0;\n      var n = itemIndex;\n\n      do {\n        n += direction;\n\n        if (n < 0) {\n          n = this.sidebarItems.length - 1;\n        }\n\n        if (n >= this.sidebarItems.length) {\n          n = 0;\n        }\n\n        if (this.sidebarItems[n].component) {\n          return this.sidebarItems[n];\n        }\n      } while (n !== itemIndex);\n\n      return null;\n    }\n  }, {\n    key: "nextItem",\n    value: function nextItem() {\n      var item = this.findNext(1);\n      this.selectApp(item);\n    }\n  }, {\n    key: "prevItem",\n    value: function prevItem() {\n      var item = this.findNext(-1);\n      this.selectApp(item);\n    }\n  }]);\n\n  return IndexPage;\n}(vue_runtime_esm["default"]), lib_vue_loader_options_pagesvue_type_script_lang_js_temp)) || lib_vue_loader_options_pagesvue_type_script_lang_js_class);\n/* harmony default export */ var lib_vue_loader_options_pagesvue_type_script_lang_js_ = (lib_vue_loader_options_pagesvue_type_script_lang_js_IndexPage);\n// CONCATENATED MODULE: ./pages/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var pagesvue_type_script_lang_js_ = (lib_vue_loader_options_pagesvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./pages/index.vue?vue&type=style&index=0&lang=scss&\nvar pagesvue_type_style_index_0_lang_scss_ = __webpack_require__(194);\n\n// CONCATENATED MODULE: ./pages/index.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar pages_component = Object(componentNormalizer["a" /* default */])(\n  pagesvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var pages = __webpack_exports__["default"] = (pages_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///196\n')}}]);