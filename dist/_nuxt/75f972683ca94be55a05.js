(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{127:function(__webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony default export */ __webpack_exports__["a"] = (function(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return{ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(JSON.parse(s.responseText))},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t}),t(a())},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null)})});\n//# sourceMappingURL=unfetch.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5mZXRjaC9kaXN0L3VuZmV0Y2gubWpzPzliZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWUsdUVBQWMsY0FBYywyQkFBMkIsdUNBQXVDLGNBQWMsT0FBTyxpR0FBaUcsdUNBQXVDLGlCQUFpQixtREFBbUQsaUJBQWlCLCtDQUErQyxrQkFBa0IsZ0JBQWdCLFNBQVMsb0JBQW9CLFNBQVMsaUJBQWlCLDBCQUEwQixpQkFBaUIsK0JBQStCLDhEQUE4RCxpRkFBaUYsK0RBQStELFNBQVMscUdBQXFHLHFCQUFxQixFQUFFO0FBQ3A0QiIsImZpbGUiOiIxMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlLG4pe3JldHVybiBuPW58fHt9LG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIHM9bmV3IFhNTEh0dHBSZXF1ZXN0LG89W10sdT1bXSxpPXt9LGE9ZnVuY3Rpb24oKXtyZXR1cm57b2s6Mj09KHMuc3RhdHVzLzEwMHwwKSxzdGF0dXNUZXh0OnMuc3RhdHVzVGV4dCxzdGF0dXM6cy5zdGF0dXMsdXJsOnMucmVzcG9uc2VVUkwsdGV4dDpmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlc29sdmUocy5yZXNwb25zZVRleHQpfSxqc29uOmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnBhcnNlKHMucmVzcG9uc2VUZXh0KSl9LGJsb2I6ZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFtzLnJlc3BvbnNlXSkpfSxjbG9uZTphLGhlYWRlcnM6e2tleXM6ZnVuY3Rpb24oKXtyZXR1cm4gb30sZW50cmllczpmdW5jdGlvbigpe3JldHVybiB1fSxnZXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGlbZS50b0xvd2VyQ2FzZSgpXX0saGFzOmZ1bmN0aW9uKGUpe3JldHVybiBlLnRvTG93ZXJDYXNlKClpbiBpfX19fTtmb3IodmFyIGwgaW4gcy5vcGVuKG4ubWV0aG9kfHxcImdldFwiLGUsITApLHMub25sb2FkPWZ1bmN0aW9uKCl7cy5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5yZXBsYWNlKC9eKC4qPyk6W15cXFNcXG5dKihbXFxzXFxTXSo/KSQvZ20sZnVuY3Rpb24oZSxuLHQpe28ucHVzaChuPW4udG9Mb3dlckNhc2UoKSksdS5wdXNoKFtuLHRdKSxpW25dPWlbbl0/aVtuXStcIixcIit0OnR9KSx0KGEoKSl9LHMub25lcnJvcj1yLHMud2l0aENyZWRlbnRpYWxzPVwiaW5jbHVkZVwiPT1uLmNyZWRlbnRpYWxzLG4uaGVhZGVycylzLnNldFJlcXVlc3RIZWFkZXIobCxuLmhlYWRlcnNbbF0pO3Muc2VuZChuLmJvZHl8fG51bGwpfSl9XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmZldGNoLm1qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///127\n')},129:function(module,exports,__webpack_require__){"use strict";eval("/*!\n * vue-no-ssr v1.1.1\n * (c) 2018-present egoist <0x142857@gmail.com>\n * Released under the MIT License.\n */\n\n\nvar index = {\n  name: 'NoSsr',\n  functional: true,\n  props: {\n    placeholder: String,\n    placeholderTag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  render: function render(h, ref) {\n    var parent = ref.parent;\n    var slots = ref.slots;\n    var props = ref.props;\n\n    var ref$1 = slots();\n    var defaultSlot = ref$1.default; if ( defaultSlot === void 0 ) defaultSlot = [];\n    var placeholderSlot = ref$1.placeholder;\n\n    if (parent._isMounted) {\n      return defaultSlot\n    }\n\n    parent.$once('hook:mounted', function () {\n      parent.$forceUpdate();\n    });\n\n    if (props.placeholderTag && (props.placeholder || placeholderSlot)) {\n      return h(\n        props.placeholderTag,\n        {\n          class: ['no-ssr-placeholder']\n        },\n        props.placeholder || placeholderSlot\n      )\n    }\n\n    // Return a placeholder element for each child in the default slot\n    // Or if no children return a single placeholder\n    return defaultSlot.length > 0 ? defaultSlot.map(function () { return h(false); }) : h(false)\n  }\n};\n\nmodule.exports = index;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLW5vLXNzci9kaXN0L3Z1ZS1uby1zc3IuY29tbW9uLmpzP2Y5MmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlFQUFpRSxpQkFBaUIsRUFBRTtBQUNwRjtBQUNBOztBQUVBIiwiZmlsZSI6IjEyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogdnVlLW5vLXNzciB2MS4xLjFcbiAqIChjKSAyMDE4LXByZXNlbnQgZWdvaXN0IDwweDE0Mjg1N0BnbWFpbC5jb20+XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGluZGV4ID0ge1xuICBuYW1lOiAnTm9Tc3InLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczoge1xuICAgIHBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gICAgcGxhY2Vob2xkZXJUYWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkaXYnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoLCByZWYpIHtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgc2xvdHMgPSByZWYuc2xvdHM7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuXG4gICAgdmFyIHJlZiQxID0gc2xvdHMoKTtcbiAgICB2YXIgZGVmYXVsdFNsb3QgPSByZWYkMS5kZWZhdWx0OyBpZiAoIGRlZmF1bHRTbG90ID09PSB2b2lkIDAgKSBkZWZhdWx0U2xvdCA9IFtdO1xuICAgIHZhciBwbGFjZWhvbGRlclNsb3QgPSByZWYkMS5wbGFjZWhvbGRlcjtcblxuICAgIGlmIChwYXJlbnQuX2lzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRTbG90XG4gICAgfVxuXG4gICAgcGFyZW50LiRvbmNlKCdob29rOm1vdW50ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBwYXJlbnQuJGZvcmNlVXBkYXRlKCk7XG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHMucGxhY2Vob2xkZXJUYWcgJiYgKHByb3BzLnBsYWNlaG9sZGVyIHx8IHBsYWNlaG9sZGVyU2xvdCkpIHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICBwcm9wcy5wbGFjZWhvbGRlclRhZyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBbJ25vLXNzci1wbGFjZWhvbGRlciddXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzLnBsYWNlaG9sZGVyIHx8IHBsYWNlaG9sZGVyU2xvdFxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhIHBsYWNlaG9sZGVyIGVsZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gdGhlIGRlZmF1bHQgc2xvdFxuICAgIC8vIE9yIGlmIG5vIGNoaWxkcmVuIHJldHVybiBhIHNpbmdsZSBwbGFjZWhvbGRlclxuICAgIHJldHVybiBkZWZhdWx0U2xvdC5sZW5ndGggPiAwID8gZGVmYXVsdFNsb3QubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGgoZmFsc2UpOyB9KSA6IGgoZmFsc2UpXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZXg7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///129\n")},130:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js\nvar es7_object_get_own_property_descriptors = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.symbol.js\nvar es6_symbol = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.to-string.js\nvar es6_object_to_string = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js\nvar es6_object_keys = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(17);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.runtime.esm.js\nvar vue_runtime_esm = __webpack_require__(7);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/vue.js\n//\n// Single point of contact for Vue\n//\n// TODO:\n//   Conditionally import Vue if no global Vue\n//\n\n/* harmony default export */ var vue = (vue_runtime_esm[\"default\"]);\n// EXTERNAL MODULE: ./node_modules/bootstrap-vue/src/utils/env.js\nvar env = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/warn.js\n\n/**\n * Log a warning message to the console with BootstrapVue formatting\n * @param {string} message\n */\n\nvar warn_warn = function warn(message)\n/* istanbul ignore next */\n{\n  if (!Object(env[\"a\" /* getNoWarn */])()) {\n    console.warn(\"[BootstrapVue warn]: \".concat(message));\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nvar warn_warnNotClient = function warnNotClient(source) {\n  /* istanbul ignore else */\n  if (env[\"j\" /* isBrowser */]) {\n    return false;\n  } else {\n    warn_warn(\"\".concat(source, \": Can not be called during SSR.\"));\n    return true;\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nvar warn_warnNoPromiseSupport = function warnNoPromiseSupport(source) {\n  /* istanbul ignore else */\n  if (env[\"g\" /* hasPromiseSupport */]) {\n    return false;\n  } else {\n    warn_warn(\"\".concat(source, \": Requires Promise support.\"));\n    return true;\n  }\n};\n/**\n * Warn when no MutationObserver support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nvar warn_warnNoMutationObserverSupport = function warnNoMutationObserverSupport(source) {\n  /* istanbul ignore else */\n  if (env[\"d\" /* hasMutationObserverSupport */]) {\n    return false;\n  } else {\n    warn_warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n    return true;\n  }\n}; // Default export\n\n/* harmony default export */ var utils_warn = (warn_warn);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(18);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.iterator.js\nvar es6_string_iterator = __webpack_require__(64);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.from.js\nvar es6_array_from = __webpack_require__(176);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/array.js\n\n\n// --- Static ---\nvar array_from = Array.from;\nvar isArray = Array.isArray; // --- Instance ---\n\nvar arrayIncludes = function arrayIncludes(array, value) {\n  return array.indexOf(value) !== -1;\n};\nvar concat = function concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Array.prototype.concat.apply([], args);\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js\nvar es6_regexp_to_string = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.date.to-string.js\nvar es6_date_to_string = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.is.js\nvar es6_object_is = __webpack_require__(173);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.is-frozen.js\nvar es6_object_is_frozen = __webpack_require__(174);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.freeze.js\nvar es6_object_freeze = __webpack_require__(175);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/object.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n // --- Static ---\n\nvar object_assign = Object.assign;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar keys = Object.keys;\nvar defineProperties = Object.defineProperties;\nvar object_defineProperty = Object.defineProperty;\nvar freeze = Object.freeze;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar create = Object.create;\nvar isFrozen = Object.isFrozen;\nvar is = Object.is; // --- \"Instance\" ---\n\nvar object_hasOwnProperty = function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}; // --- Utilities ---\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n * Note object could be a complex type like array, date, etc.\n */\n\nvar object_isObject = function isObject(obj) {\n  return obj !== null && Object(esm_typeof[\"a\" /* default */])(obj) === 'object';\n};\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\n\nvar isPlainObject = function isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}; // @link https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc\n\nvar object_omit = function omit(obj, props) {\n  return keys(obj).filter(function (key) {\n    return props.indexOf(key) === -1;\n  }).reduce(function (result, key) {\n    return _objectSpread({}, result, Object(defineProperty[\"a\" /* default */])({}, key, obj[key]));\n  }, {});\n};\nvar readonlyDescriptor = function readonlyDescriptor() {\n  return {\n    enumerable: true,\n    configurable: false,\n    writable: false\n  };\n};\n/**\n * Deep-freezes and object, making it immutable / read-only.\n * Returns the same object passed-in, but frozen.\n * Freezes inner object/array/values first.\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n * Note: this method will not work for property values using Symbol() as a key\n */\n\nvar object_deepFreeze = function deepFreeze(obj) {\n  // Retrieve the property names defined on object/array\n  // Note: `keys` will ignore properties that are keyed by a `Symbol()`\n  var props = keys(obj); // Iterate over each prop and recursively freeze it\n\n  props.forEach(function (prop) {\n    var value = obj[prop]; // If value is a plain object or array, we deepFreeze it\n\n    obj[prop] = value && (isPlainObject(value) || isArray(value)) ? deepFreeze(value) : value;\n  });\n  return freeze(obj);\n};\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/clone-deep.js\n\n\n\n\n\n\n\n\nfunction clone_deep_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction clone_deep_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { clone_deep_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { clone_deep_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\nvar clone_deep_cloneDeep = function cloneDeep(obj) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : obj;\n\n  if (isArray(obj)) {\n    return obj.reduce(function (result, val) {\n      return [].concat(Object(toConsumableArray[\"a\" /* default */])(result), [cloneDeep(val, val)]);\n    }, []);\n  }\n\n  if (isPlainObject(obj)) {\n    return keys(obj).reduce(function (result, key) {\n      return clone_deep_objectSpread({}, result, Object(defineProperty[\"a\" /* default */])({}, key, cloneDeep(obj[key], obj[key])));\n    }, {});\n  }\n\n  return defaultValue;\n};\n/* harmony default export */ var clone_deep = (clone_deep_cloneDeep);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(25);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/get.js\n\n\n\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\nvar get_get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Handle array of path values\n  path = isArray(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !object_isObject(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(/\\[(\\d+)]/g, '.$1');\n  var steps = path.split('.').filter(Boolean); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // We use `!=` vs `!==` to test for both `null` and `undefined`\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(function (step) {\n    return object_isObject(obj) && step in obj && (obj = obj[step]) != null;\n  }) ? obj : defaultValue;\n};\n\n/* harmony default export */ var utils_get = (get_get);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/inspect.js\n\n\n\n\n\n/**\n * Convenience inspection utilities\n */\n\n\nvar inspect_toType = function toType(val) {\n  return Object(esm_typeof[\"a\" /* default */])(val);\n};\nvar toRawType = function toRawType(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n};\nvar toRawTypeLC = function toRawTypeLC(val) {\n  return toRawType(val).toLowerCase();\n};\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\nvar isNull = function isNull(val) {\n  return val === null;\n};\nvar isFunction = function isFunction(val) {\n  return inspect_toType(val) === 'function';\n};\nvar isBoolean = function isBoolean(val) {\n  return inspect_toType(val) === 'boolean';\n};\nvar isString = function isString(val) {\n  return inspect_toType(val) === 'string';\n};\nvar isNumber = function isNumber(val) {\n  return inspect_toType(val) === 'number';\n};\nvar isPrimitive = function isPrimitive(val) {\n  return isBoolean(val) || isString(val) || isNumber(val);\n};\nvar isDate = function isDate(val) {\n  return val instanceof Date;\n};\nvar isRegExp = function isRegExp(val) {\n  return toRawType(val) === 'RegExp';\n};\nvar isPromise = function isPromise(val) {\n  return !isUndefined(val) && !isNull(val) && isFunction(val.then) && isFunction(val.catch);\n}; // Extra convenience named re-exports\n\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/config-defaults.js\n // General BootstrapVue configuration\n//\n// BREAKPOINT DEFINITIONS\n//\n// Some components (BCol and BFormGroup) generate props based on breakpoints, and this\n// occurs when the component is first loaded (evaluated), which may happen before the\n// config is created/modified\n//\n// To get around this we make these components async (lazy evaluation)\n// The component definition is only called/executed when the first access to the\n// component is used (and cached on subsequent uses)\n//\n// See: https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\n//\n// PROP DEFAULTS\n//\n// For default values on props, we use the default value factory function approach so\n// so that the default values are pulled in at each component instantiation\n//\n//  props: {\n//    variant: {\n//      type: String,\n//      default: () => getConfigComponent('BAlert', 'variant')\n//    }\n//  }\n// prettier-ignore\n\n/* harmony default export */ var config_defaults = (object_deepFreeze({\n  // Breakpoints\n  breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n  // Component Specific defaults are keyed by the component\n  // name (PascalCase) and prop name (camelCase)\n  BAlert: {\n    dismissLabel: 'Close',\n    variant: 'info'\n  },\n  BBadge: {\n    variant: 'secondary'\n  },\n  BButton: {\n    variant: 'secondary'\n  },\n  BButtonClose: {\n    // `textVariant` is `null` to inherit the current text color\n    textVariant: null,\n    ariaLabel: 'Close'\n  },\n  BCardSubTitle: {\n    // BCard and BCardBody also inherit this prop\n    subTitleTextVariant: 'muted'\n  },\n  BCarousel: {\n    labelPrev: 'Previous Slide',\n    labelNext: 'Next Slide',\n    labelGotoSlide: 'Goto Slide',\n    labelIndicators: 'Select a slide to display'\n  },\n  BDropdown: {\n    toggleText: 'Toggle Dropdown',\n    variant: 'secondary',\n    splitVariant: null\n  },\n  BFormFile: {\n    browseText: 'Browse',\n    // Chrome default file prompt\n    placeholder: 'No file chosen',\n    dropPlaceholder: 'Drop files here'\n  },\n  BFormText: {\n    textVariant: 'muted'\n  },\n  BImg: {\n    blankColor: 'transparent'\n  },\n  BImgLazy: {\n    blankColor: 'transparent'\n  },\n  BJumbotron: {\n    bgVariant: null,\n    borderVariant: null,\n    textVariant: null\n  },\n  BListGroupItem: {\n    variant: null\n  },\n  BModal: {\n    titleTag: 'h5',\n    size: 'md',\n    headerBgVariant: null,\n    headerBorderVariant: null,\n    headerTextVariant: null,\n    headerCloseVariant: null,\n    bodyBgVariant: null,\n    bodyTextVariant: null,\n    footerBgVariant: null,\n    footerBorderVariant: null,\n    footerTextVariant: null,\n    cancelTitle: 'Cancel',\n    cancelVariant: 'secondary',\n    okTitle: 'OK',\n    okVariant: 'primary',\n    headerCloseLabel: 'Close'\n  },\n  BNavbar: {\n    variant: null\n  },\n  BNavbarToggle: {\n    label: 'Toggle navigation'\n  },\n  BPopover: {\n    boundary: 'scrollParent',\n    boundaryPadding: 5,\n    customClass: null,\n    delay: 0,\n    variant: null\n  },\n  BProgress: {\n    variant: null\n  },\n  BProgressBar: {\n    variant: null\n  },\n  BSpinner: {\n    variant: null\n  },\n  BTable: {\n    selectedVariant: 'primary',\n    headVariant: null,\n    footVariant: null\n  },\n  BToast: {\n    toaster: 'b-toaster-top-right',\n    autoHideDelay: 5000,\n    variant: null,\n    toastClass: null,\n    headerClass: null,\n    bodyClass: null,\n    solid: false\n  },\n  BToaster: {\n    ariaLive: null,\n    ariaAtomic: null,\n    role: null\n  },\n  BTooltip: {\n    boundary: 'scrollParent',\n    boundaryPadding: 5,\n    customClass: null,\n    delay: 0,\n    variant: null\n  }\n}));\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/config-set.js\n\n\n\n\n\n\n\n\n // --- Constants ---\n\nvar PROP_NAME = '$bvConfig'; // Config manager class\n\nvar config_set_BvConfig =\n/*#__PURE__*/\nfunction () {\n  function BvConfig() {\n    Object(classCallCheck[\"a\" /* default */])(this, BvConfig);\n\n    // TODO: pre-populate with default config values (needs updated tests)\n    // this.$_config = cloneDeep(DEFAULTS)\n    this.$_config = {};\n    this.$_cachedBreakpoints = null;\n  }\n\n  Object(createClass[\"a\" /* default */])(BvConfig, [{\n    key: \"getDefaults\",\n    // Returns the defaults\n    value: function getDefaults()\n    /* istanbul ignore next */\n    {\n      return this.defaults;\n    } // Method to merge in user config parameters\n\n  }, {\n    key: \"setConfig\",\n    value: function setConfig() {\n      var _this = this;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!isPlainObject(config)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var configKeys = getOwnPropertyNames(config);\n      configKeys.forEach(function (cmpName) {\n        /* istanbul ignore next */\n        if (!object_hasOwnProperty(config_defaults, cmpName)) {\n          utils_warn(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n          return;\n        }\n\n        var cmpConfig = config[cmpName];\n\n        if (cmpName === 'breakpoints') {\n          // Special case for breakpoints\n          var breakpoints = config.breakpoints;\n          /* istanbul ignore if */\n\n          if (!isArray(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n            return !isString(b) || b.length === 0;\n          })) {\n            utils_warn('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n          } else {\n            _this.$_config.breakpoints = clone_deep(breakpoints);\n          }\n        } else if (isPlainObject(cmpConfig)) {\n          // Component prop defaults\n          var props = getOwnPropertyNames(cmpConfig);\n          props.forEach(function (prop) {\n            /* istanbul ignore if */\n            if (!object_hasOwnProperty(config_defaults[cmpName], prop)) {\n              utils_warn(\"config: unknown config property \\\"\".concat(cmpName, \".{$prop}\\\"\"));\n            } else {\n              // TODO: If we pre-populate the config with defaults, we can skip this line\n              _this.$_config[cmpName] = _this.$_config[cmpName] || {};\n\n              if (!isUndefined(cmpConfig[prop])) {\n                _this.$_config[cmpName][prop] = clone_deep(cmpConfig[prop]);\n              }\n            }\n          });\n        }\n      });\n    } // Clear the config. For testing purposes only\n\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      this.$_config = {};\n    } // Returns a deep copy of the user config\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return clone_deep(this.$_config);\n    }\n  }, {\n    key: \"getConfigValue\",\n    value: function getConfigValue(key) {\n      // First we try the user config, and if key not found we fall back to default value\n      // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n      return clone_deep(utils_get(this.$_config, key, utils_get(config_defaults, key)));\n    }\n  }, {\n    key: \"defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return config_defaults;\n    }\n  }], [{\n    key: \"Defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return config_defaults;\n    }\n  }]);\n\n  return BvConfig;\n}(); // Method for applying a global config\n\n\nvar config_set_setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var Vue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vue;\n  // Ensure we have a $bvConfig Object on the Vue prototype.\n  // We set on Vue and OurVue just in case consumer has not set an alias of `vue`.\n  Vue.prototype[PROP_NAME] = vue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] || vue.prototype[PROP_NAME] || new config_set_BvConfig(); // Apply the config values\n\n  Vue.prototype[PROP_NAME].setConfig(config);\n}; // Method for resetting the user config. Exported for testing purposes only.\n\nvar config_set_resetConfig = function resetConfig() {\n  if (vue.prototype[PROP_NAME] && vue.prototype[PROP_NAME].resetConfig) {\n    vue.prototype[PROP_NAME].resetConfig();\n  }\n};\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/plugins.js\n\n\n\n\n\n\n\n\nfunction plugins_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction plugins_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { plugins_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { plugins_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n/**\n * Checks if there are multiple instances of Vue, and warns (once) about possible issues.\n * @param {object} Vue\n */\n\nvar checkMultipleVue = function () {\n  var checkMultipleVueWarned = false;\n  var MULTIPLE_VUE_WARNING = ['Multiple instances of Vue detected!', 'You may need to set up an alias for Vue in your bundler config.', 'See: https://bootstrap-vue.js.org/docs#using-module-bundlers'].join('\\n');\n  return function (Vue) {\n    /* istanbul ignore next */\n    if (!checkMultipleVueWarned && vue !== Vue && !env[\"k\" /* isJSDOM */]) {\n      utils_warn(MULTIPLE_VUE_WARNING);\n    }\n\n    checkMultipleVueWarned = true;\n  };\n}();\n/**\n * Plugin install factory function.\n * @param {object} { components, directives }\n * @returns {function} plugin install function\n */\n\nvar plugins_installFactory = function installFactory() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      components = _ref.components,\n      directives = _ref.directives,\n      plugins = _ref.plugins;\n\n  var install = function install(Vue) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (install.installed) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    install.installed = true;\n    checkMultipleVue(Vue);\n    config_set_setConfig(config, Vue);\n    registerComponents(Vue, components);\n    registerDirectives(Vue, directives);\n    registerPlugins(Vue, plugins);\n  };\n\n  install.installed = false;\n  return install;\n};\n/**\n * Plugin object factory function.\n * @param {object} { components, directives, plugins }\n * @returns {object} plugin install object\n */\n\nvar pluginFactory = function pluginFactory() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var extend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return plugins_objectSpread({}, extend, {\n    install: plugins_installFactory(opts)\n  });\n};\n/**\n * Load a group of plugins.\n * @param {object} Vue\n * @param {object} Plugin definitions\n */\n\nvar registerPlugins = function registerPlugins(Vue) {\n  var plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (var plugin in plugins) {\n    if (plugin && plugins[plugin]) {\n      Vue.use(plugins[plugin]);\n    }\n  }\n};\n/**\n * Load a component.\n * @param {object} Vue\n * @param {string} Component name\n * @param {object} Component definition\n */\n\nvar registerComponent = function registerComponent(Vue, name, def) {\n  if (Vue && name && def) {\n    Vue.component(name, def);\n  }\n};\n/**\n * Load a group of components.\n * @param {object} Vue\n * @param {object} Object of component definitions\n */\n\nvar registerComponents = function registerComponents(Vue) {\n  var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (var component in components) {\n    registerComponent(Vue, component, components[component]);\n  }\n};\n/**\n * Load a directive.\n * @param {object} Vue\n * @param {string} Directive name\n * @param {object} Directive definition\n */\n\nvar registerDirective = function registerDirective(Vue, name, def) {\n  if (Vue && name && def) {\n    // Ensure that any leading V is removed from the\n    // name, as Vue adds it automatically\n    Vue.directive(name.replace(/^VB/, 'B'), def);\n  }\n};\n/**\n * Load a group of directives.\n * @param {object} Vue\n * @param {object} Object of directive definitions\n */\n\nvar registerDirectives = function registerDirectives(Vue) {\n  var directives = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (var directive in directives) {\n    registerDirective(Vue, directive, directives[directive]);\n  }\n};\n/**\n * Install plugin if window.Vue available\n * @param {object} Plugin definition\n */\n\nvar plugins_vueUse = function vueUse(VuePlugin) {\n  /* istanbul ignore next */\n  if (env[\"i\" /* hasWindowSupport */] && window.Vue) {\n    window.Vue.use(VuePlugin);\n  }\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js\nvar es6_number_constructor = __webpack_require__(9);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/memoize.js\n\n\nvar memoize_memoize = function memoize(fn) {\n  var cache = create(null);\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var argsKey = JSON.stringify(args);\n    return cache[argsKey] = cache[argsKey] || fn.apply(null, args);\n  };\n};\n\n/* harmony default export */ var utils_memoize = (memoize_memoize);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/config.js\n\n\n\n\n // --- Constants ---\n\nvar config_PROP_NAME = '$bvConfig';\nvar VueProto = vue.prototype; // --- Getter methods ---\n// All methods return a deep clone (immutable) copy of the config\n// value, to prevent mutation of the user config object.\n// Get the current user config. For testing purposes only\n\nvar config_getConfig = function getConfig() {\n  return VueProto[config_PROP_NAME] ? VueProto[config_PROP_NAME].getConfig() : {};\n}; // Method to grab a config value based on a dotted/array notation key\n\nvar config_getConfigValue = function getConfigValue(key) {\n  return VueProto[config_PROP_NAME] ? VueProto[config_PROP_NAME].getConfigValue(key) : clone_deep(utils_get(config_defaults, key));\n}; // Method to grab a config value for a particular component\n\nvar getComponentConfig = function getComponentConfig(cmpName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Return the particular config value for key for if specified,\n  // otherwise we return the full config (or an empty object if not found)\n  return key ? config_getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : config_getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\nvar getBreakpoints = function getBreakpoints() {\n  return config_getConfigValue('breakpoints');\n}; // Private function for caching / locking-in breakpoint names\n\nvar _getBreakpointsCached = utils_memoize(function () {\n  return getBreakpoints();\n}); // Convenience method for getting all breakpoint names.\n// Caches the results after first access.\n\n\nvar config_getBreakpointsCached = function getBreakpointsCached() {\n  return clone_deep(_getBreakpointsCached());\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nvar getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\nvar getBreakpointsUpCached = utils_memoize(function () {\n  var breakpoints = config_getBreakpointsCached();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nvar getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\nvar getBreakpointsDownCached = function getBreakpointsDownCached()\n/* istanbul ignore next */\n{\n  var breakpoints = config_getBreakpointsCached();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n};\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/dom.js\n\n\n // --- Constants ---\n\nvar w = env[\"i\" /* hasWindowSupport */] ? window : {};\nvar d = env[\"b\" /* hasDocumentSupport */] ? document : {};\nvar elProto = typeof Element !== 'undefined' ? Element.prototype : {}; // --- Normalization utils ---\n// See: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\n/* istanbul ignore next */\n\nvar matchesEl = elProto.matches || elProto.msMatchesSelector || elProto.webkitMatchesSelector; // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n\n/* istanbul ignore next */\n\nvar closestEl = elProto.closest || function (sel)\n/* istanbul ignore next */\n{\n  var el = this;\n\n  do {\n    // Use our \"patched\" matches function\n    if (matches(el, sel)) {\n      return el;\n    }\n\n    el = el.parentElement || el.parentNode;\n  } while (!isNull(el) && el.nodeType === Node.ELEMENT_NODE);\n\n  return null;\n}; // `requestAnimationFrame()` convenience method\n// We don't have a version for cancelAnimationFrame, but we don't call it anywhere\n\nvar requestAF = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.mozRequestAnimationFrame || w.msRequestAnimationFrame || w.oRequestAnimationFrame || function (cb) {\n  // Fallback, but not a true polyfill\n  // All browsers we support (other than Opera Mini) support\n  // `requestAnimationFrame()` without a polyfill\n\n  /* istanbul ignore next */\n  return setTimeout(cb, 16);\n};\nvar MutationObs = w.MutationObserver || w.WebKitMutationObserver || w.MozMutationObserver || null; // --- Utils ---\n// Normalize event options based on support of passive option\n// Exported only for testing purposes\n\nvar dom_parseEventOptions = function parseEventOptions(options) {\n  /* istanbul ignore else: can't test in JSDOM, as it supports passive */\n  if (env[\"e\" /* hasPassiveEventSupport */]) {\n    return object_isObject(options) ? options : {\n      useCapture: Boolean(options || false)\n    };\n  } else {\n    // Need to translate to actual Boolean value\n    return Boolean(object_isObject(options) ? options.useCapture : options);\n  }\n}; // Attach an event listener to an element\n\nvar eventOn = function eventOn(el, evtName, handler, options) {\n  if (el && el.addEventListener) {\n    el.addEventListener(evtName, handler, dom_parseEventOptions(options));\n  }\n}; // Remove an event listener from an element\n\nvar eventOff = function eventOff(el, evtName, handler, options) {\n  if (el && el.removeEventListener) {\n    el.removeEventListener(evtName, handler, dom_parseEventOptions(options));\n  }\n}; // Determine if an element is an HTML Element\n\nvar isElement = function isElement(el) {\n  return Boolean(el && el.nodeType === Node.ELEMENT_NODE);\n}; // Determine if an HTML element is visible - Faster than CSS check\n\nvar isVisible = function isVisible(el) {\n  if (!isElement(el) || !dom_contains(d.body, el)) {\n    return false;\n  }\n\n  if (el.style.display === 'none') {\n    // We do this check to help with vue-test-utils when using v-show\n\n    /* istanbul ignore next */\n    return false;\n  } // All browsers support getBoundingClientRect(), except JSDOM as it returns all 0's for values :(\n  // So any tests that need isVisible will fail in JSDOM\n  // Except when we override the getBCR prototype in some tests\n\n\n  var bcr = getBCR(el);\n  return Boolean(bcr && bcr.height > 0 && bcr.width > 0);\n}; // Determine if an element is disabled\n\nvar dom_isDisabled = function isDisabled(el) {\n  return !isElement(el) || el.disabled || Boolean(getAttr(el, 'disabled')) || hasClass(el, 'disabled');\n}; // Cause/wait-for an element to reflow it's content (adjusting it's height/width)\n\nvar reflow = function reflow(el) {\n  // Requesting an elements offsetHight will trigger a reflow of the element content\n\n  /* istanbul ignore next: reflow doesn't happen in JSDOM */\n  return isElement(el) && el.offsetHeight;\n}; // Select all elements matching selector. Returns `[]` if none found\n\nvar dom_selectAll = function selectAll(selector, root) {\n  return array_from((isElement(root) ? root : d).querySelectorAll(selector));\n}; // Select a single element, returns `null` if not found\n\nvar dom_select = function select(selector, root) {\n  return (isElement(root) ? root : d).querySelector(selector) || null;\n}; // Determine if an element matches a selector\n\nvar matches = function matches(el, selector) {\n  if (!isElement(el)) {\n    return false;\n  }\n\n  return matchesEl.call(el, selector);\n}; // Finds closest element matching selector. Returns `null` if not found\n\nvar closest = function closest(selector, root) {\n  if (!isElement(root)) {\n    return null;\n  }\n\n  var el = closestEl.call(root, selector); // Emulate jQuery closest and return `null` if match is the passed in element (root)\n\n  return el === root ? null : el;\n}; // Returns true if the parent element contains the child element\n\nvar dom_contains = function contains(parent, child) {\n  if (!parent || !isFunction(parent.contains)) {\n    return false;\n  }\n\n  return parent.contains(child);\n}; // Get an element given an ID\n\nvar getById = function getById(id) {\n  return d.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\n}; // Add a class to an element\n\nvar addClass = function addClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.add(className);\n  }\n}; // Remove a class from an element\n\nvar removeClass = function removeClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.remove(className);\n  }\n}; // Test if an element has a class\n\nvar hasClass = function hasClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return false;\n}; // Set an attribute on an element\n\nvar setAttr = function setAttr(el, attr, value) {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value);\n  }\n}; // Remove an attribute from an element\n\nvar removeAttr = function removeAttr(el, attr) {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr);\n  }\n}; // Get an attribute value from an element\n// Returns `null` if not found\n\nvar getAttr = function getAttr(el, attr) {\n  return attr && isElement(el) ? el.getAttribute(attr) : null;\n}; // Determine if an attribute exists on an element\n// Returns `true` or `false`, or `null` if element not found\n\nvar hasAttr = function hasAttr(el, attr) {\n  return attr && isElement(el) ? el.hasAttribute(attr) : null;\n}; // Return the Bounding Client Rect of an element\n// Returns `null` if not an element\n\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n\nvar getBCR = function getBCR(el) {\n  return isElement(el) ? el.getBoundingClientRect() : null;\n}; // Get computed style object for an element\n\n/* istanbul ignore next: getComputedStyle() doesn't work in JSDOM */\n\nvar dom_getCS = function getCS(el) {\n  return env[\"i\" /* hasWindowSupport */] && isElement(el) ? w.getComputedStyle(el) : {};\n}; // Return an element's offset with respect to document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\n\nvar dom_offset = function offset(el)\n/* istanbul ignore next: getBoundingClientRect(), getClientRects() doesn't work in JSDOM */\n{\n  var _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el) || el.getClientRects().length === 0) {\n    return _offset;\n  }\n\n  var bcr = getBCR(el);\n\n  if (bcr) {\n    var win = el.ownerDocument.defaultView;\n    _offset.top = bcr.top + win.pageYOffset;\n    _offset.left = bcr.left + win.pageXOffset;\n  }\n\n  return _offset;\n}; // Return an element's offset with respect to to it's offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\n\nvar position = function position(el)\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n{\n  var _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el)) {\n    return _offset;\n  }\n\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n  var elStyles = dom_getCS(el);\n\n  if (elStyles.position === 'fixed') {\n    _offset = getBCR(el) || _offset;\n  } else {\n    _offset = dom_offset(el);\n    var doc = el.ownerDocument;\n    var offsetParent = el.offsetParent || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && dom_getCS(offsetParent).position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n      parentOffset = dom_offset(offsetParent);\n      var offsetParentStyles = dom_getCS(offsetParent);\n      parentOffset.top += parseFloat(offsetParentStyles.borderTopWidth);\n      parentOffset.left += parseFloat(offsetParentStyles.borderLeftWidth);\n    }\n  }\n\n  return {\n    top: _offset.top - parentOffset.top - parseFloat(elStyles.marginTop),\n    left: _offset.left - parentOffset.left - parseFloat(elStyles.marginLeft)\n  };\n};\n// CONCATENATED MODULE: ./node_modules/vue-functional-data-merge/dist/lib.esm.js\nvar lib_esm_e=function(){return(lib_esm_e=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},t={kebab:/-(\\w)/g,styleProp:/:(.*)/,styleList:/;(?![^(]*\\))/g};function r(e,t){return t?t.toUpperCase():\"\"}function s(e){for(var s,a={},c=0,o=e.split(t.styleList);c<o.length;c++){var n=o[c].split(t.styleProp),i=n[0],l=n[1];(i=i.trim())&&(\"string\"==typeof l&&(l=l.trim()),a[(s=i,s.replace(t.kebab,r))]=l)}return a}function lib_esm_a(){for(var t,r,a={},c=arguments.length;c--;)for(var o=0,n=Object.keys(arguments[c]);o<n.length;o++)switch(t=n[o]){case\"class\":case\"style\":case\"directives\":if(Array.isArray(a[t])||(a[t]=[]),\"style\"===t){var i=void 0;i=Array.isArray(arguments[c].style)?arguments[c].style:[arguments[c].style];for(var l=0;l<i.length;l++){var y=i[l];\"string\"==typeof y&&(i[l]=s(y))}arguments[c].style=i}a[t]=a[t].concat(arguments[c][t]);break;case\"staticClass\":if(!arguments[c][t])break;void 0===a[t]&&(a[t]=\"\"),a[t]&&(a[t]+=\" \"),a[t]+=arguments[c][t].trim();break;case\"on\":case\"nativeOn\":a[t]||(a[t]={});for(var p=0,f=Object.keys(arguments[c][t]||{});p<f.length;p++)r=f[p],a[t][r]?a[t][r]=[].concat(a[t][r],arguments[c][t][r]):a[t][r]=arguments[c][t][r];break;case\"attrs\":case\"props\":case\"domProps\":case\"scopedSlots\":case\"staticStyle\":case\"hook\":case\"transition\":a[t]||(a[t]={}),a[t]=lib_esm_e({},arguments[c][t],a[t]);break;case\"slot\":case\"key\":case\"ref\":case\"tag\":case\"show\":case\"keepAlive\":default:a[t]||(a[t]=arguments[c][t])}return a}\n//# sourceMappingURL=lib.esm.js.map\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/bv-transition.js\n\n\n\n\n\n\n\nfunction bv_transition_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction bv_transition_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bv_transition_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bv_transition_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Generic Bootstrap v4 fade (no-fade) transition component\n\n\n\nvar NO_FADE_PROPS = {\n  name: '',\n  enterClass: '',\n  enterActiveClass: '',\n  enterToClass: 'show',\n  leaveClass: 'show',\n  leaveActiveClass: '',\n  leaveToClass: ''\n};\n\nvar FADE_PROPS = bv_transition_objectSpread({}, NO_FADE_PROPS, {\n  enterActiveClass: 'fade',\n  leaveActiveClass: 'fade'\n});\n\nvar BVTransition =\n/*#__PURE__*/\nvue.extend({\n  name: 'BVTransition',\n  functional: true,\n  props: {\n    noFade: {\n      // Only applicable to the built in transition\n      // Has no effect if `trans-props` provided\n      type: Boolean,\n      default: false\n    },\n    mode: {\n      type: String // default: undefined\n\n    },\n    // For user supplied transitions (if needed)\n    transProps: {\n      type: Object,\n      default: null\n    }\n  },\n  render: function render(h, _ref) {\n    var children = _ref.children,\n        data = _ref.data,\n        listeners = _ref.listeners,\n        props = _ref.props;\n    var transProps = props.transProps;\n\n    if (!isPlainObject(transProps)) {\n      transProps = props.noFade ? NO_FADE_PROPS : FADE_PROPS;\n    }\n\n    transProps = bv_transition_objectSpread({\n      mode: props.mode\n    }, transProps, {\n      // We always need `css` true\n      css: true\n    });\n    return h('transition', // Any listeners will get merged here\n    lib_esm_a(data, {\n      props: transProps\n    }), children);\n  }\n});\n/* harmony default export */ var bv_transition = (BVTransition);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/normalize-slot.js\n\n // Note for functional components:\n// In functional components, `slots` is a function so it must be called\n// first before passing to the below methods. `scopedSlots` is always an\n// object and may be undefined (for Vue < 2.6.x)\n\n/**\n * Returns true if either scoped or unscoped named slot eists\n *\n * @param {String} name\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} vNodes\n */\n\nvar normalize_slot_hasNormalizedSlot = function hasNormalizedSlot(name) {\n  var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Returns true if the either a $scopedSlot or $slot exists with the specified name\n  return Boolean($scopedSlots[name] || $slots[name]);\n};\n/**\n * Returns vNodes for named slot either scoped or unscoped\n *\n * @param {String} name\n * @param {String} scope\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} vNodes\n */\n\n\nvar normalize_slot_normalizeSlot = function normalizeSlot(name) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Note: in Vue 2.6.x, all names slots are also scoped slots\n  var slot = $scopedSlots[name] || $slots[name];\n  return isFunction(slot) ? slot(scope) : slot;\n}; // Named exports\n\n\n // Default export (backwards compatability)\n\n/* harmony default export */ var normalize_slot = (normalize_slot_normalizeSlot);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/normalize-slot.js\n\n\n/* harmony default export */ var mixins_normalize_slot = ({\n  methods: {\n    hasNormalizedSlot: function hasNormalizedSlot(name) {\n      // Returns true if the either a $scopedSlot or $slot exists with the specified name\n      return normalize_slot_hasNormalizedSlot(name, this.$scopedSlots, this.$slots);\n    },\n    normalizeSlot: function normalizeSlot(name) {\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Returns an array of rendered vNodes if slot found.\n      // Returns undefined if not found.\n      var vNodes = normalize_slot_normalizeSlot(name, scope, this.$scopedSlots, this.$slots);\n\n      return vNodes ? concat(vNodes) : vNodes;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button/button-close.js\n\n\n\n\n\nvar button_close_NAME = 'BButtonClose';\nvar button_close_props = {\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  ariaLabel: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(button_close_NAME, 'ariaLabel');\n    }\n  },\n  textVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(button_close_NAME, 'textVariant');\n    }\n  } // @vue/component\n\n};\nvar BButtonClose =\n/*#__PURE__*/\nvue.extend({\n  name: button_close_NAME,\n  functional: true,\n  props: button_close_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        listeners = _ref.listeners,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var componentData = {\n      staticClass: 'close',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"text-\".concat(props.textVariant), props.textVariant),\n      attrs: {\n        type: 'button',\n        disabled: props.disabled,\n        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\n      },\n      on: {\n        click: function click(e) {\n          // Ensure click on button HTML content is also disabled\n\n          /* istanbul ignore if: bug in JSDOM still emits click on inner element */\n          if (props.disabled && e instanceof Event) {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n        }\n      } // Careful not to override the default slot with innerHTML\n\n    };\n\n    if (!normalize_slot_hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      componentData.domProps = {\n        innerHTML: '&times;'\n      };\n    }\n\n    return h('button', lib_esm_a(data, componentData), normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots));\n  }\n});\n/* harmony default export */ var button_close = (BButtonClose);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/alert/alert.js\n\n\n\n\n\n\n\n\n\nvar alert_NAME = 'BAlert'; // Convert `show` value to a number\n\nvar alert_parseCountDown = function parseCountDown(show) {\n  if (show === '' || isBoolean(show)) {\n    return 0;\n  }\n\n  show = parseInt(show, 10);\n  return show > 0 ? show : 0;\n}; // Convert `show` value to a boolean\n\n\nvar parseShow = function parseShow(show) {\n  if (show === '' || show === true) {\n    return true;\n  }\n\n  if (parseInt(show, 10) < 1) {\n    // Boolean will always return false for the above comparison\n    return false;\n  }\n\n  return Boolean(show);\n}; // Is a value number like (i.e. a number or a number as string)\n\n\nvar isNumericLike = function isNumericLike(value) {\n  return !isNaN(parseInt(value, 10));\n}; // @vue/component\n\n\nvar BAlert =\n/*#__PURE__*/\nvue.extend({\n  name: alert_NAME,\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'show',\n    event: 'input'\n  },\n  props: {\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(alert_NAME, 'variant');\n      }\n    },\n    dismissible: {\n      type: Boolean,\n      default: false\n    },\n    dismissLabel: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(alert_NAME, 'dismissLabel');\n      }\n    },\n    show: {\n      type: [Boolean, Number, String],\n      default: false\n    },\n    fade: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      countDownTimerId: null,\n      countDown: 0,\n      // If initially shown, we need to set these for SSR\n      localShow: parseShow(this.show)\n    };\n  },\n  watch: {\n    show: function show(newVal) {\n      this.countDown = alert_parseCountDown(newVal);\n      this.localShow = parseShow(newVal);\n    },\n    countDown: function countDown(newVal) {\n      var _this = this;\n\n      this.clearTimer();\n\n      if (isNumericLike(this.show)) {\n        // Ignore if this.show transitions to a boolean value.\n        this.$emit('dismiss-count-down', newVal);\n\n        if (this.show !== newVal) {\n          // Update the v-model if needed\n          this.$emit('input', newVal);\n        }\n\n        if (newVal > 0) {\n          this.localShow = true;\n          this.countDownTimerId = setTimeout(function () {\n            _this.countDown--;\n          }, 1000);\n        } else {\n          // Slightly delay the hide to allow any UI updates\n          this.$nextTick(function () {\n            requestAF(function () {\n              _this.localShow = false;\n            });\n          });\n        }\n      }\n    },\n    localShow: function localShow(newVal) {\n      if (!newVal && (this.dismissible || isNumericLike(this.show))) {\n        // Only emit dismissed events for dismissible or auto dismissing alerts\n        this.$emit('dismissed');\n      }\n\n      if (!isNumericLike(this.show) && this.show !== newVal) {\n        // Only emit booleans if we weren't passed a number via `this.show`\n        this.$emit('input', newVal);\n      }\n    }\n  },\n  created: function created() {\n    this.countDown = alert_parseCountDown(this.show);\n    this.localShow = parseShow(this.show);\n  },\n  mounted: function mounted() {\n    this.countDown = alert_parseCountDown(this.show);\n    this.localShow = parseShow(this.show);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.clearTimer();\n  },\n  methods: {\n    dismiss: function dismiss() {\n      this.clearTimer();\n      this.countDown = 0;\n      this.localShow = false;\n    },\n    clearTimer: function clearTimer() {\n      if (this.countDownTimerId) {\n        clearInterval(this.countDownTimerId);\n        this.countDownTimerId = null;\n      }\n    }\n  },\n  render: function render(h) {\n    var $alert; // undefined\n\n    if (this.localShow) {\n      var $dismissBtn = h(false);\n\n      if (this.dismissible) {\n        // Add dismiss button\n        $dismissBtn = h(BButtonClose, {\n          attrs: {\n            'aria-label': this.dismissLabel\n          },\n          on: {\n            click: this.dismiss\n          }\n        }, [this.normalizeSlot('dismiss')]);\n      }\n\n      $alert = h('div', {\n        key: this._uid,\n        staticClass: 'alert',\n        class: Object(defineProperty[\"a\" /* default */])({\n          'alert-dismissible': this.dismissible\n        }, \"alert-\".concat(this.variant), this.variant),\n        attrs: {\n          role: 'alert',\n          'aria-live': 'polite',\n          'aria-atomic': true\n        }\n      }, [$dismissBtn, this.normalizeSlot('default')]);\n      $alert = [$alert];\n    }\n\n    return h(bv_transition, {\n      props: {\n        noFade: !this.fade\n      }\n    }, $alert);\n  }\n});\n/* harmony default export */ var alert_alert = (BAlert);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/alert/index.js\n\n\nvar AlertPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BAlert: BAlert\n  }\n});\n\n/* harmony default export */ var components_alert = (AlertPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/identity.js\nvar identity = function identity(x) {\n  return x;\n};\n\n/* harmony default export */ var utils_identity = (identity);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/pluck-props.js\n\n\n\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object, returning a new object\n * that has props that reference the original prop values\n *\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\n\nvar pluck_props_pluckProps = function pluckProps(keysToPluck, objToPluck) {\n  var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils_identity;\n  return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\n    memo[transformFn(prop)] = objToPluck[prop];\n    return memo;\n  }, {});\n};\n\n/* harmony default export */ var pluck_props = (pluck_props_pluckProps);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/to-string.js\n\n\n\n\n/**\n * Convert a value to a string that can be rendered.\n */\n\nvar to_string_toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefined(val) || isNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n};\n\n/* harmony default export */ var to_string = (to_string_toString);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/router.js\n\n\n\n\n\n\n\n\nvar ANCHOR_TAG = 'a'; // Precompile RegExp\n\nvar commaRE = /%2C/g;\nvar encodeReserveRE = /[!'()*]/g; // Method to replace reserved chars\n\nvar encodeReserveReplacer = function encodeReserveReplacer(c) {\n  return '%' + c.charCodeAt(0).toString(16);\n}; // Fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\n\n\nvar router_encode = function encode(str) {\n  return encodeURIComponent(to_string(str)).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');\n};\n\nvar decode = decodeURIComponent; // Stringifies an object of query parameters\n// See: https://github.com/vuejs/vue-router/blob/dev/src/util/query.js\n\nvar router_stringifyQueryObj = function stringifyQueryObj(obj) {\n  if (!isPlainObject(obj)) {\n    return '';\n  }\n\n  var query = keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (isUndefined(val)) {\n      return '';\n    } else if (isNull(val)) {\n      return router_encode(key);\n    } else if (isArray(val)) {\n      return val.reduce(function (results, val2) {\n        if (isNull(val2)) {\n          results.push(router_encode(key));\n        } else if (!isUndefined(val2)) {\n          // Faster than string interpolation\n          results.push(router_encode(key) + '=' + router_encode(val2));\n        }\n\n        return results;\n      }, []).join('&');\n    } // Faster than string interpolation\n\n\n    return router_encode(key) + '=' + router_encode(val);\n  })\n  /* must check for length, as we only want to filter empty strings, not things that look falsey! */\n  .filter(function (x) {\n    return x.length > 0;\n  }).join('&');\n  return query ? \"?\".concat(query) : '';\n};\nvar router_parseQuery = function parseQuery(query) {\n  var parsed = {};\n  query = to_string(query).trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return parsed;\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n    if (isUndefined(parsed[key])) {\n      parsed[key] = val;\n    } else if (isArray(parsed[key])) {\n      parsed[key].push(val);\n    } else {\n      parsed[key] = [parsed[key], val];\n    }\n  });\n  return parsed;\n};\nvar router_isRouterLink = function isRouterLink(tag) {\n  return to_string(tag).toLowerCase() !== ANCHOR_TAG;\n};\nvar computeTag = function computeTag() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      to = _ref.to,\n      disabled = _ref.disabled;\n\n  var thisOrParent = arguments.length > 1 ? arguments[1] : undefined;\n  return thisOrParent.$router && to && !disabled ? thisOrParent.$nuxt ? 'nuxt-link' : 'router-link' : ANCHOR_TAG;\n};\nvar router_computeRel = function computeRel() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      target = _ref2.target,\n      rel = _ref2.rel;\n\n  if (target === '_blank' && isNull(rel)) {\n    return 'noopener';\n  }\n\n  return rel || null;\n};\nvar router_computeHref = function computeHref() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      href = _ref3.href,\n      to = _ref3.to;\n\n  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ANCHOR_TAG;\n  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#';\n  var toFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n\n  // We've already checked the $router in computeTag(), so isRouterLink() indicates a live router.\n  // When deferring to Vue Router's router-link, don't use the href attribute at all.\n  // We return null, and then remove href from the attributes passed to router-link\n  if (router_isRouterLink(tag)) {\n    return null;\n  } // Return `href` when explicitly provided\n\n\n  if (href) {\n    return href;\n  } // Reconstruct `href` when `to` used, but no router\n\n\n  if (to) {\n    // Fallback to `to` prop (if `to` is a string)\n    if (isString(to)) {\n      return to || toFallback;\n    } // Fallback to `to.path + to.query + to.hash` prop (if `to` is an object)\n\n\n    if (isPlainObject(to) && (to.path || to.query || to.hash)) {\n      var path = to_string(to.path);\n      var query = router_stringifyQueryObj(to.query);\n      var hash = to_string(to.hash);\n      hash = !hash || hash.charAt(0) === '#' ? hash : \"#\".concat(hash);\n      return \"\".concat(path).concat(query).concat(hash) || toFallback;\n    }\n  } // If nothing is provided return the fallback\n\n\n  return fallback;\n};\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/link/link.js\n\n\n\n\n\n\n\n\nfunction link_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction link_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { link_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { link_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n/**\n * The Link component is used in many other BV components.\n * As such, sharing its props makes supporting all its features easier.\n * However, some components need to modify the defaults for their own purpose.\n * Prefer sharing a fresh copy of the props to ensure mutations\n * do not affect other component references to the props.\n *\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n * @return {{}}\n */\n\nvar propsFactory = function propsFactory() {\n  return {\n    href: {\n      type: String,\n      default: null\n    },\n    rel: {\n      type: String,\n      default: null\n    },\n    target: {\n      type: String,\n      default: '_self'\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // router-link specific props\n    to: {\n      type: [String, Object],\n      default: null\n    },\n    append: {\n      type: Boolean,\n      default: false\n    },\n    replace: {\n      type: Boolean,\n      default: false\n    },\n    event: {\n      type: [String, Array],\n      default: 'click'\n    },\n    activeClass: {\n      type: String // default: undefined\n\n    },\n    exact: {\n      type: Boolean,\n      default: false\n    },\n    exactActiveClass: {\n      type: String // default: undefined\n\n    },\n    routerTag: {\n      type: String,\n      default: 'a'\n    },\n    // nuxt-link specific prop(s)\n    noPrefetch: {\n      type: Boolean,\n      default: false\n    }\n  };\n};\nvar link_props = propsFactory(); // @vue/component\n\nvar BLink =\n/*#__PURE__*/\nvue.extend({\n  name: 'BLink',\n  mixins: [mixins_normalize_slot],\n  inheritAttrs: false,\n  props: propsFactory(),\n  computed: {\n    computedTag: function computedTag() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      return computeTag({\n        to: this.to,\n        disabled: this.disabled\n      }, this);\n    },\n    isRouterLink: function isRouterLink() {\n      return router_isRouterLink(this.computedTag);\n    },\n    computedRel: function computedRel() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      return router_computeRel({\n        target: this.target,\n        rel: this.rel\n      });\n    },\n    computedHref: function computedHref() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      return router_computeHref({\n        to: this.to,\n        href: this.href\n      }, this.computedTag);\n    },\n    computedProps: function computedProps() {\n      return this.isRouterLink ? link_objectSpread({}, this.$props, {\n        tag: this.routerTag\n      }) : {};\n    }\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      var _arguments = arguments;\n      var isEvent = evt instanceof Event;\n      var isRouterLink = this.isRouterLink;\n      var suppliedHandler = this.$listeners.click;\n\n      if (isEvent && this.disabled) {\n        // Stop event from bubbling up\n        evt.stopPropagation(); // Kill the event loop attached to this specific `EventTarget`\n        // Needed to prevent `vue-router` for doing it's thing\n\n        evt.stopImmediatePropagation();\n      } else {\n        /* istanbul ignore next: difficult to test, but we know it works */\n        if (isRouterLink && evt.currentTarget.__vue__) {\n          // Router links do not emit instance `click` events, so we\n          // add in an $emit('click', evt) on it's vue instance\n          evt.currentTarget.__vue__.$emit('click', evt);\n        } // Call the suppliedHandler(s), if any provided\n\n\n        concat(suppliedHandler).filter(function (h) {\n          return isFunction(h);\n        }).forEach(function (handler) {\n          handler.apply(void 0, Object(toConsumableArray[\"a\" /* default */])(_arguments));\n        }); // Emit the global $root click event\n\n        this.$root.$emit('clicked::link', evt);\n      } // Stop scroll-to-top behavior or navigation on\n      // regular links when href is just '#'\n\n\n      if (isEvent && (this.disabled || !isRouterLink && this.computedHref === '#')) {\n        evt.preventDefault();\n      }\n    },\n    focus: function focus() {\n      if (this.$el && this.$el.focus) {\n        this.$el.focus();\n      }\n    },\n    blur: function blur() {\n      if (this.$el && this.$el.blur) {\n        this.$el.blur();\n      }\n    }\n  },\n  render: function render(h) {\n    var tag = this.computedTag;\n    var rel = this.computedRel;\n    var href = this.computedHref;\n    var isRouterLink = this.isRouterLink; // We want to overwrite any click handler since our callback\n    // will invoke the user supplied handler9s) if !props.disabled\n\n    var handlers = link_objectSpread({}, this.$listeners, {\n      click: this.onClick\n    });\n\n    var componentData = {\n      class: {\n        active: this.active,\n        disabled: this.disabled\n      },\n      attrs: link_objectSpread({}, this.$attrs, {\n        rel: rel,\n        target: this.target,\n        tabindex: this.disabled ? '-1' : isUndefined(this.$attrs.tabindex) ? null : this.$attrs.tabindex,\n        'aria-disabled': this.disabled ? 'true' : null\n      }),\n      props: this.computedProps,\n      on: isRouterLink ? {} : handlers,\n      nativeOn: isRouterLink ? handlers : {} // If href attribute exists on <router-link> (even undefined or null) it fails working on\n      // SSR, so we explicitly add it here if needed (i.e. if computedHref() is truthy)\n\n    };\n\n    if (href) {\n      componentData.attrs.href = href;\n    } else {\n      // Ensure the prop HREF does not exist for router links\n      delete componentData.props.href;\n    }\n\n    return h(tag, componentData, this.normalizeSlot('default', {}));\n  }\n});\n/* harmony default export */ var link_link = (BLink);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/badge/badge.js\n\n\n\n\n\n\n\nfunction badge_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction badge_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { badge_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { badge_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\nvar badge_NAME = 'BBadge';\nvar badge_linkProps = propsFactory();\ndelete badge_linkProps.href.default;\ndelete badge_linkProps.to.default;\nvar badge_props = badge_objectSpread({}, badge_linkProps, {\n  tag: {\n    type: String,\n    default: 'span'\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(badge_NAME, 'variant');\n    }\n  },\n  pill: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nvar BBadge =\n/*#__PURE__*/\nvue.extend({\n  name: badge_NAME,\n  functional: true,\n  props: badge_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var tag = !props.href && !props.to ? props.tag : BLink;\n    var componentData = {\n      staticClass: 'badge',\n      class: [props.variant ? \"badge-\".concat(props.variant) : 'badge-secondary', {\n        'badge-pill': Boolean(props.pill),\n        active: props.active,\n        disabled: props.disabled\n      }],\n      props: pluck_props(badge_linkProps, props)\n    };\n    return h(tag, lib_esm_a(data, componentData), children);\n  }\n});\n/* harmony default export */ var badge = (BBadge);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/badge/index.js\n\n\nvar BadgePlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BBadge: BBadge\n  }\n});\n\n/* harmony default export */ var components_badge = (BadgePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/html.js\n\nvar stripTagsRegex = /(<([^>]+)>)/gi; // Removes any thing that looks like an HTML tag from the supplied string\n\nvar stripTags = function stripTags() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return String(text).replace(stripTagsRegex, '');\n}; // Generate a domProps object for either innerHTML, textContent or nothing\n\nvar htmlOrText = function htmlOrText(innerHTML, textContent) {\n  return innerHTML ? {\n    innerHTML: innerHTML\n  } : textContent ? {\n    textContent: textContent\n  } : {};\n};\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/breadcrumb/breadcrumb-link.js\n\n\n\n\n\n\n\nfunction breadcrumb_link_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction breadcrumb_link_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { breadcrumb_link_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { breadcrumb_link_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\nvar breadcrumb_link_props = breadcrumb_link_objectSpread({}, propsFactory(), {\n  text: {\n    type: String,\n    default: null\n  },\n  html: {\n    type: String,\n    default: null\n  },\n  ariaCurrent: {\n    type: String,\n    default: 'location'\n  } // @vue/component\n\n});\nvar BBreadcrumbLink =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumbLink',\n  functional: true,\n  props: breadcrumb_link_props,\n  render: function render(h, _ref) {\n    var suppliedProps = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var tag = suppliedProps.active ? 'span' : BLink;\n    var componentData = {\n      props: pluck_props(breadcrumb_link_props, suppliedProps)\n    };\n\n    if (suppliedProps.active) {\n      componentData.attrs = {\n        'aria-current': suppliedProps.ariaCurrent\n      };\n    }\n\n    if (!children) {\n      componentData.domProps = htmlOrText(suppliedProps.html, suppliedProps.text);\n    }\n\n    return h(tag, lib_esm_a(data, componentData), children);\n  }\n});\n/* harmony default export */ var breadcrumb_link = (BBreadcrumbLink);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/breadcrumb/breadcrumb-item.js\n\n\n // @vue/component\n\nvar BBreadcrumbItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumbItem',\n  functional: true,\n  props: breadcrumb_link_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h('li', lib_esm_a(data, {\n      staticClass: 'breadcrumb-item',\n      class: {\n        active: props.active\n      }\n    }), [h(BBreadcrumbLink, {\n      props: props\n    }, children)]);\n  }\n});\n/* harmony default export */ var breadcrumb_item = (BBreadcrumbItem);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/breadcrumb/breadcrumb.js\n\n\n\n\n\n\n\nfunction breadcrumb_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction breadcrumb_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { breadcrumb_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { breadcrumb_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\nvar breadcrumb_props = {\n  items: {\n    type: Array,\n    default: null\n  } // @vue/component\n\n};\nvar BBreadcrumb =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumb',\n  functional: true,\n  props: breadcrumb_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var childNodes = children; // Build child nodes from items if given.\n\n    if (isArray(props.items)) {\n      var activeDefined = false;\n      childNodes = props.items.map(function (item, idx) {\n        if (!object_isObject(item)) {\n          item = {\n            text: to_string(item)\n          };\n        } // Copy the value here so we can normalize it.\n\n\n        var active = item.active;\n\n        if (active) {\n          activeDefined = true;\n        }\n\n        if (!active && !activeDefined) {\n          // Auto-detect active by position in list.\n          active = idx + 1 === props.items.length;\n        }\n\n        return h(BBreadcrumbItem, {\n          props: breadcrumb_objectSpread({}, item, {\n            active: active\n          })\n        });\n      });\n    }\n\n    return h('ol', lib_esm_a(data, {\n      staticClass: 'breadcrumb'\n    }), childNodes);\n  }\n});\n/* harmony default export */ var breadcrumb = (BBreadcrumb);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/breadcrumb/index.js\n\n\n\n\nvar BreadcrumbPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BBreadcrumb: BBreadcrumb,\n    BBreadcrumbItem: BBreadcrumbItem,\n    BBreadcrumbLink: BBreadcrumbLink\n  }\n});\n\n/* harmony default export */ var components_breadcrumb = (BreadcrumbPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button/button.js\n\n\n\n\n\n\n\nfunction button_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction button_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { button_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { button_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n // --- Constants --\n\nvar button_NAME = 'BButton';\nvar button_btnProps = {\n  block: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(button_NAME, 'variant');\n    }\n  },\n  type: {\n    type: String,\n    default: 'button'\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  pill: {\n    type: Boolean,\n    default: false\n  },\n  squared: {\n    type: Boolean,\n    default: false\n  },\n  pressed: {\n    // tri-state prop: true, false or null\n    // => on, off, not a toggle\n    type: Boolean,\n    default: null\n  }\n};\nvar button_linkProps = propsFactory();\ndelete button_linkProps.href.default;\ndelete button_linkProps.to.default;\nvar linkPropKeys = keys(button_linkProps);\nvar button_props = button_objectSpread({}, button_linkProps, {}, button_btnProps); // --- Helper methods ---\n// Focus handler for toggle buttons.  Needs class of 'focus' when focused.\n\nvar button_handleFocus = function handleFocus(evt) {\n  if (evt.type === 'focusin') {\n    addClass(evt.target, 'focus');\n  } else if (evt.type === 'focusout') {\n    removeClass(evt.target, 'focus');\n  }\n}; // Is the requested button a link?\n\n\nvar button_isLink = function isLink(props) {\n  // If tag prop is set to `a`, we use a b-link to get proper disabled handling\n  return Boolean(props.href || props.to || props.tag && String(props.tag).toLowerCase() === 'a');\n}; // Is the button to be a toggle button?\n\n\nvar button_isToggle = function isToggle(props) {\n  return isBoolean(props.pressed);\n}; // Is the button \"really\" a button?\n\n\nvar isButton = function isButton(props) {\n  if (button_isLink(props)) {\n    return false;\n  } else if (props.tag && String(props.tag).toLowerCase() !== 'button') {\n    return false;\n  }\n\n  return true;\n}; // Is the requested tag not a button or link?\n\n\nvar isNonStandardTag = function isNonStandardTag(props) {\n  return !button_isLink(props) && !isButton(props);\n}; // Compute required classes (non static classes)\n\n\nvar button_computeClass = function computeClass(props) {\n  var _ref;\n\n  return [\"btn-\".concat(props.variant || getComponentConfig(button_NAME, 'variant')), (_ref = {}, Object(defineProperty[\"a\" /* default */])(_ref, \"btn-\".concat(props.size), Boolean(props.size)), Object(defineProperty[\"a\" /* default */])(_ref, 'btn-block', props.block), Object(defineProperty[\"a\" /* default */])(_ref, 'rounded-pill', props.pill), Object(defineProperty[\"a\" /* default */])(_ref, 'rounded-0', props.squared && !props.pill), Object(defineProperty[\"a\" /* default */])(_ref, \"disabled\", props.disabled), Object(defineProperty[\"a\" /* default */])(_ref, \"active\", props.pressed), _ref)];\n}; // Compute the link props to pass to b-link (if required)\n\n\nvar button_computeLinkProps = function computeLinkProps(props) {\n  return button_isLink(props) ? pluck_props(linkPropKeys, props) : null;\n}; // Compute the attributes for a button\n\n\nvar computeAttrs = function computeAttrs(props, data) {\n  var button = isButton(props);\n  var link = button_isLink(props);\n  var toggle = button_isToggle(props);\n  var nonStdTag = isNonStandardTag(props);\n  var role = data.attrs && data.attrs['role'] ? data.attrs['role'] : null;\n  var tabindex = data.attrs ? data.attrs['tabindex'] : null;\n\n  if (nonStdTag) {\n    tabindex = '0';\n  }\n\n  return {\n    // Type only used for \"real\" buttons\n    type: button && !link ? props.type : null,\n    // Disabled only set on \"real\" buttons\n    disabled: button ? props.disabled : null,\n    // We add a role of button when the tag is not a link or button for ARIA.\n    // Don't bork any role provided in data.attrs when isLink or isButton\n    role: nonStdTag ? 'button' : role,\n    // We set the aria-disabled state for non-standard tags\n    'aria-disabled': nonStdTag ? String(props.disabled) : null,\n    // For toggles, we need to set the pressed state for ARIA\n    'aria-pressed': toggle ? String(props.pressed) : null,\n    // autocomplete off is needed in toggle mode to prevent some browsers from\n    // remembering the previous setting when using the back button.\n    autocomplete: toggle ? 'off' : null,\n    // Tab index is used when the component is not a button.\n    // Links are tabbable, but don't allow disabled, while non buttons or links\n    // are not tabbable, so we mimic that functionality by disabling tabbing\n    // when disabled, and adding a tabindex of '0' to non buttons or non links.\n    tabindex: props.disabled && !button ? '-1' : tabindex\n  };\n}; // @vue/component\n\n\nvar BButton =\n/*#__PURE__*/\nvue.extend({\n  name: button_NAME,\n  functional: true,\n  props: button_props,\n  render: function render(h, _ref2) {\n    var props = _ref2.props,\n        data = _ref2.data,\n        listeners = _ref2.listeners,\n        children = _ref2.children;\n    var toggle = button_isToggle(props);\n    var link = button_isLink(props);\n    var on = {\n      click: function click(e) {\n        /* istanbul ignore if: blink/button disabled should handle this */\n        if (props.disabled && e instanceof Event) {\n          e.stopPropagation();\n          e.preventDefault();\n        } else if (toggle && listeners && listeners['update:pressed']) {\n          // Send .sync updates to any \"pressed\" prop (if .sync listeners)\n          // Concat will normalize the value to an array\n          // without double wrapping an array value in an array.\n          concat(listeners['update:pressed']).forEach(function (fn) {\n            if (isFunction(fn)) {\n              fn(!props.pressed);\n            }\n          });\n        }\n      }\n    };\n\n    if (toggle) {\n      on.focusin = button_handleFocus;\n      on.focusout = button_handleFocus;\n    }\n\n    var componentData = {\n      staticClass: 'btn',\n      class: button_computeClass(props),\n      props: button_computeLinkProps(props),\n      attrs: computeAttrs(props, data),\n      on: on\n    };\n    return h(link ? BLink : props.tag, lib_esm_a(data, componentData), children);\n  }\n});\n/* harmony default export */ var button_button = (BButton);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button/index.js\n\n\n\nvar ButtonPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BButton: BButton,\n    BBtn: BButton,\n    BButtonClose: BButtonClose,\n    BBtnClose: BButtonClose\n  }\n});\n\n/* harmony default export */ var components_button = (ButtonPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button-group/button-group.js\n\n\n\nvar button_group_props = {\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  ariaRole: {\n    type: String,\n    default: 'group'\n  } // @vue/component\n\n};\nvar BButtonGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BButtonGroup',\n  functional: true,\n  props: button_group_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      class: Object(defineProperty[\"a\" /* default */])({\n        'btn-group': !props.vertical,\n        'btn-group-vertical': props.vertical\n      }, \"btn-group-\".concat(props.size), Boolean(props.size)),\n      attrs: {\n        role: props.ariaRole\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var button_group = (BButtonGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button-group/index.js\n\n\nvar ButtonGroupPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BButtonGroup: BButtonGroup,\n    BBtnGroup: BButtonGroup\n  }\n});\n\n/* harmony default export */ var components_button_group = (ButtonGroupPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/key-codes.js\n/*\n * Key Codes (events)\n */\nvar KEY_CODES = {\n  SPACE: 32,\n  ENTER: 13,\n  ESC: 27,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  HOME: 36,\n  END: 35,\n  TAB: 9,\n  SHIFT: 16,\n  CTRL: 17,\n  BACKSPACE: 8,\n  ALT: 18,\n  PAUSE: 19,\n  BREAK: 19,\n  INSERT: 45,\n  INS: 45,\n  DELETE: 46\n};\n/* harmony default export */ var key_codes = (KEY_CODES);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button-toolbar/button-toolbar.js\n\n\n\n\nvar ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(','); // @vue/component\n\nvar BButtonToolbar =\n/*#__PURE__*/\nvue.extend({\n  name: 'BButtonToolbar',\n  mixins: [mixins_normalize_slot],\n  props: {\n    justify: {\n      type: Boolean,\n      default: false\n    },\n    keyNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    if (this.keyNav) {\n      // Pre-set the tabindexes if the markup does not include tabindex=\"-1\" on the toolbar items\n      this.getItems();\n    }\n  },\n  methods: {\n    onFocusin: function onFocusin(evt) {\n      if (evt.target === this.$el) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.focusFirst(evt);\n      }\n    },\n    stop: function stop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    },\n    onKeydown: function onKeydown(evt) {\n      if (!this.keyNav) {\n        /* istanbul ignore next: should never happen */\n        return;\n      }\n\n      var key = evt.keyCode;\n      var shift = evt.shiftKey;\n\n      if (key === key_codes.UP || key === key_codes.LEFT) {\n        this.stop(evt);\n        shift ? this.focusFirst(evt) : this.focusPrev(evt);\n      } else if (key === key_codes.DOWN || key === key_codes.RIGHT) {\n        this.stop(evt);\n        shift ? this.focusLast(evt) : this.focusNext(evt);\n      }\n    },\n    setItemFocus: function setItemFocus(item) {\n      item && item.focus && item.focus();\n    },\n    focusFirst: function focusFirst(evt) {\n      var items = this.getItems();\n      this.setItemFocus(items[0]);\n    },\n    focusPrev: function focusPrev(evt) {\n      var items = this.getItems();\n      var index = items.indexOf(evt.target);\n\n      if (index > -1) {\n        items = items.slice(0, index).reverse();\n        this.setItemFocus(items[0]);\n      }\n    },\n    focusNext: function focusNext(evt) {\n      var items = this.getItems();\n      var index = items.indexOf(evt.target);\n\n      if (index > -1) {\n        items = items.slice(index + 1);\n        this.setItemFocus(items[0]);\n      }\n    },\n    focusLast: function focusLast(evt) {\n      var items = this.getItems().reverse();\n      this.setItemFocus(items[0]);\n    },\n    getItems: function getItems() {\n      var items = dom_selectAll(ITEM_SELECTOR, this.$el);\n      items.forEach(function (item) {\n        // Ensure tabfocus is -1 on any new elements\n        item.tabIndex = -1;\n      });\n      return items.filter(function (el) {\n        return isVisible(el);\n      });\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'btn-toolbar',\n      class: {\n        'justify-content-between': this.justify\n      },\n      attrs: {\n        role: 'toolbar',\n        tabindex: this.keyNav ? '0' : null\n      },\n      on: this.keyNav ? {\n        focusin: this.onFocusin,\n        keydown: this.onKeydown\n      } : {}\n    }, [this.normalizeSlot('default')]);\n  }\n});\n/* harmony default export */ var button_toolbar = (BButtonToolbar);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/button-toolbar/index.js\n\n\nvar ButtonToolbarPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BButtonToolbar: BButtonToolbar,\n    BBtnToolbar: BButtonToolbar\n  }\n});\n\n/* harmony default export */ var components_button_toolbar = (ButtonToolbarPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/upper-first.js\n\n/**\n * Transform the first character to uppercase\n * @param {string} str\n */\n\nvar upper_first_upperFirst = function upperFirst(str) {\n  if (!isString(str)) {\n    str = String(str);\n  }\n\n  str = str.trim();\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* harmony default export */ var upper_first = (upper_first_upperFirst);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/prefix-prop-name.js\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\n\nvar prefix_prop_name_prefixPropName = function prefixPropName(prefix, value) {\n  return prefix + upper_first(value);\n};\n\n/* harmony default export */ var prefix_prop_name = (prefix_prop_name_prefixPropName);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/lower-first.js\n/**\n * @param {string} str\n */\nvar lowerFirst = function lowerFirst(str) {\n  str = String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n};\n\n/* harmony default export */ var lower_first = (lowerFirst);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/unprefix-prop-name.js\n\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\n\nvar unprefix_prop_name_unprefixPropName = function unprefixPropName(prefix, value) {\n  return lower_first(value.replace(prefix, ''));\n};\n\n/* harmony default export */ var unprefix_prop_name = (unprefix_prop_name_unprefixPropName);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/copy-props.js\n\n\n\n\n\n\n\nfunction copy_props_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction copy_props_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { copy_props_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { copy_props_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n/**\n * Copies props from one array/object to a new array/object. Prop values\n * are also cloned as new references to prevent possible mutation of original\n * prop object values. Optionally accepts a function to transform the prop name.\n *\n * @param {[]|{}} props\n * @param {Function} transformFn\n */\n\nvar copy_props_copyProps = function copyProps(props) {\n  var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : utils_identity;\n\n  if (isArray(props)) {\n    return props.map(transformFn);\n  } // Props as an object.\n\n\n  var copied = {};\n\n  for (var prop in props) {\n    /* istanbul ignore else */\n    if (props.hasOwnProperty(prop)) {\n      // If the prop value is an object, do a shallow clone to prevent\n      // potential mutations to the original object.\n      copied[transformFn(prop)] = object_isObject(props[prop]) ? copy_props_objectSpread({}, props[prop]) : props[prop];\n    }\n  }\n\n  return copied;\n};\n\n/* harmony default export */ var copy_props = (copy_props_copyProps);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/card-mixin.js\n// @vue/component\n/* harmony default export */ var card_mixin = ({\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    bgVariant: {\n      type: String,\n      default: null\n    },\n    borderVariant: {\n      type: String,\n      default: null\n    },\n    textVariant: {\n      type: String,\n      default: null\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-title.js\n\n\nvar card_title_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  titleTag: {\n    type: String,\n    default: 'h4'\n  } // @vue/component\n\n};\nvar BCardTitle =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardTitle',\n  functional: true,\n  props: card_title_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.titleTag, lib_esm_a(data, {\n      staticClass: 'card-title'\n    }), children || props.title);\n  }\n});\n/* harmony default export */ var card_title = (BCardTitle);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-sub-title.js\n\n\n\nvar card_sub_title_NAME = 'BCardSubTitle';\nvar card_sub_title_props = {\n  subTitle: {\n    type: String,\n    default: ''\n  },\n  subTitleTag: {\n    type: String,\n    default: 'h6'\n  },\n  subTitleTextVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(card_sub_title_NAME, 'subTitleTextVariant');\n    }\n  } // @vue/component\n\n};\nvar BCardSubTitle =\n/*#__PURE__*/\nvue.extend({\n  name: card_sub_title_NAME,\n  functional: true,\n  props: card_sub_title_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.subTitleTag, lib_esm_a(data, {\n      staticClass: 'card-subtitle',\n      class: [props.subTitleTextVariant ? \"text-\".concat(props.subTitleTextVariant) : null]\n    }), children || props.subTitle);\n  }\n});\n/* harmony default export */ var card_sub_title = (BCardSubTitle);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-body.js\n\n\n\n\n\n\n\n\nfunction card_body_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction card_body_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { card_body_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { card_body_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\nvar card_body_props = card_body_objectSpread({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'body')), {\n  bodyClass: {\n    type: [String, Object, Array],\n    default: null\n  }\n}, card_title_props, {}, card_sub_title_props, {\n  overlay: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nvar BCardBody =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardBody',\n  functional: true,\n  props: card_body_props,\n  render: function render(h, _ref) {\n    var _ref2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var cardTitle = h(false);\n    var cardSubTitle = h(false);\n    var cardContent = children || [h(false)];\n\n    if (props.title) {\n      cardTitle = h(BCardTitle, {\n        props: pluck_props(card_title_props, props)\n      });\n    }\n\n    if (props.subTitle) {\n      cardSubTitle = h(BCardSubTitle, {\n        props: pluck_props(card_sub_title_props, props),\n        class: ['mb-2']\n      });\n    }\n\n    return h(props.bodyTag, lib_esm_a(data, {\n      staticClass: 'card-body',\n      class: [(_ref2 = {\n        'card-img-overlay': props.overlay\n      }, Object(defineProperty[\"a\" /* default */])(_ref2, \"bg-\".concat(props.bodyBgVariant), Boolean(props.bodyBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"border-\".concat(props.bodyBorderVariant), Boolean(props.bodyBorderVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"text-\".concat(props.bodyTextVariant), Boolean(props.bodyTextVariant)), _ref2), props.bodyClass || {}]\n    }), [cardTitle, cardSubTitle].concat(Object(toConsumableArray[\"a\" /* default */])(cardContent)));\n  }\n});\n/* harmony default export */ var card_body = (BCardBody);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-header.js\n\n\n\n\n\n\n\nfunction card_header_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction card_header_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { card_header_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { card_header_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar card_header_props = card_header_objectSpread({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'header')), {\n  header: {\n    type: String,\n    default: null\n  },\n  headerHtml: {\n    type: String,\n    default: null\n  },\n  headerClass: {\n    type: [String, Object, Array],\n    default: null\n  } // @vue/component\n\n});\nvar BCardHeader =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardHeader',\n  functional: true,\n  props: card_header_props,\n  render: function render(h, _ref) {\n    var _ref2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.headerTag, lib_esm_a(data, {\n      staticClass: 'card-header',\n      class: [props.headerClass, (_ref2 = {}, Object(defineProperty[\"a\" /* default */])(_ref2, \"bg-\".concat(props.headerBgVariant), Boolean(props.headerBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"border-\".concat(props.headerBorderVariant), Boolean(props.headerBorderVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"text-\".concat(props.headerTextVariant), Boolean(props.headerTextVariant)), _ref2)]\n    }), children || [h('div', {\n      domProps: htmlOrText(props.headerHtml, props.header)\n    })]);\n  }\n});\n/* harmony default export */ var card_header = (BCardHeader);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-footer.js\n\n\n\n\n\n\n\nfunction card_footer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction card_footer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { card_footer_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { card_footer_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar card_footer_props = card_footer_objectSpread({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'footer')), {\n  footer: {\n    type: String,\n    default: null\n  },\n  footerHtml: {\n    type: String,\n    default: null\n  },\n  footerClass: {\n    type: [String, Object, Array],\n    default: null\n  } // @vue/component\n\n});\nvar BCardFooter =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardFooter',\n  functional: true,\n  props: card_footer_props,\n  render: function render(h, _ref) {\n    var _ref2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.footerTag, lib_esm_a(data, {\n      staticClass: 'card-footer',\n      class: [props.footerClass, (_ref2 = {}, Object(defineProperty[\"a\" /* default */])(_ref2, \"bg-\".concat(props.footerBgVariant), Boolean(props.footerBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"border-\".concat(props.footerBorderVariant), Boolean(props.footerBorderVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"text-\".concat(props.footerTextVariant), Boolean(props.footerTextVariant)), _ref2)]\n    }), children || [h('div', {\n      domProps: htmlOrText(props.footerHtml, props.footer)\n    })]);\n  }\n});\n/* harmony default export */ var card_footer = (BCardFooter);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-img.js\n\n\nvar card_img_props = {\n  src: {\n    type: String,\n    default: null,\n    required: true\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  top: {\n    type: Boolean,\n    default: false\n  },\n  bottom: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  start: {\n    type: Boolean,\n    default: false // alias of 'left'\n\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  end: {\n    type: Boolean,\n    default: false // alias of 'right'\n\n  },\n  height: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BCardImg =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardImg',\n  functional: true,\n  props: card_img_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data;\n    var baseClass = 'card-img';\n\n    if (props.top) {\n      baseClass += '-top';\n    } else if (props.right || props.end) {\n      baseClass += '-right';\n    } else if (props.bottom) {\n      baseClass += '-bottom';\n    } else if (props.left || props.start) {\n      baseClass += '-left';\n    }\n\n    return h('img', lib_esm_a(data, {\n      class: [baseClass],\n      attrs: {\n        src: props.src,\n        alt: props.alt,\n        height: props.height,\n        width: props.width\n      }\n    }));\n  }\n});\n/* harmony default export */ var card_img = (BCardImg);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card.js\n\n\n\n\n\n\n\n\nfunction card_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction card_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { card_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { card_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar cardImgProps = copy_props(card_img_props, prefix_prop_name.bind(null, 'img'));\ncardImgProps.imgSrc.required = false;\nvar card_props = card_objectSpread({}, card_body_props, {}, card_header_props, {}, card_footer_props, {}, cardImgProps, {}, copy_props(card_mixin.props), {\n  align: {\n    type: String,\n    default: null\n  },\n  noBody: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nvar BCard =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCard',\n  functional: true,\n  props: card_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots(); // Vue < 2.6.x may return undefined for scopedSlots\n\n    var $scopedSlots = scopedSlots || {}; // Create placeholder elements for each section\n\n    var imgFirst = h(false);\n    var header = h(false);\n    var content = h(false);\n    var footer = h(false);\n    var imgLast = h(false);\n\n    if (props.imgSrc) {\n      var img = h(BCardImg, {\n        props: pluck_props(cardImgProps, props, unprefix_prop_name.bind(null, 'img'))\n      });\n\n      if (props.imgBottom) {\n        imgLast = img;\n      } else {\n        imgFirst = img;\n      }\n    }\n\n    if (props.header || normalize_slot_hasNormalizedSlot('header', $scopedSlots, $slots)) {\n      header = h(BCardHeader, {\n        props: pluck_props(card_header_props, props)\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots));\n    }\n\n    content = normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots) || [];\n\n    if (!props.noBody) {\n      // Wrap content in card-body\n      content = [h(BCardBody, {\n        props: pluck_props(card_body_props, props)\n      }, Object(toConsumableArray[\"a\" /* default */])(content))];\n    }\n\n    if (props.footer || normalize_slot_hasNormalizedSlot('footer', $scopedSlots, $slots)) {\n      footer = h(BCardFooter, {\n        props: pluck_props(card_footer_props, props)\n      }, normalize_slot_normalizeSlot('footer', {}, $scopedSlots, $slots));\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'card',\n      class: (_class = {\n        'flex-row': props.imgLeft || props.imgStart,\n        'flex-row-reverse': (props.imgRight || props.imgEnd) && !(props.imgLeft || props.imgStart)\n      }, Object(defineProperty[\"a\" /* default */])(_class, \"text-\".concat(props.align), Boolean(props.align)), Object(defineProperty[\"a\" /* default */])(_class, \"bg-\".concat(props.bgVariant), Boolean(props.bgVariant)), Object(defineProperty[\"a\" /* default */])(_class, \"border-\".concat(props.borderVariant), Boolean(props.borderVariant)), Object(defineProperty[\"a\" /* default */])(_class, \"text-\".concat(props.textVariant), Boolean(props.textVariant)), _class)\n    }), [imgFirst, header].concat(Object(toConsumableArray[\"a\" /* default */])(content), [footer, imgLast]));\n  }\n});\n/* harmony default export */ var card = (BCard);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/image/img.js\n\n\n\n\n\n\n // --- Constants --\n\nvar img_NAME = 'BImg'; // Blank image with fill template\n\nvar BLANK_TEMPLATE = '<svg width=\"%{w}\" height=\"%{h}\" ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'viewBox=\"0 0 %{w} %{h}\" preserveAspectRatio=\"none\">' + '<rect width=\"100%\" height=\"100%\" style=\"fill:%{f};\"></rect>' + '</svg>';\nvar img_props = {\n  src: {\n    type: String,\n    default: null\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: [Number, String],\n    default: null\n  },\n  height: {\n    type: [Number, String],\n    default: null\n  },\n  block: {\n    type: Boolean,\n    default: false\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  fluidGrow: {\n    // Gives fluid images class `w-100` to make them grow to fit container\n    type: Boolean,\n    default: false\n  },\n  rounded: {\n    // rounded can be:\n    //   false: no rounding of corners\n    //   true: slightly rounded corners\n    //   'top': top corners rounded\n    //   'right': right corners rounded\n    //   'bottom': bottom corners rounded\n    //   'left': left corners rounded\n    //   'circle': circle/oval\n    //   '0': force rounding off\n    type: [Boolean, String],\n    default: false\n  },\n  thumbnail: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  center: {\n    type: Boolean,\n    default: false\n  },\n  blank: {\n    type: Boolean,\n    default: false\n  },\n  blankColor: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(img_NAME, 'blankColor');\n    }\n  } // --- Helper methods ---\n\n};\n\nfunction makeBlankImgSrc(width, height, color) {\n  var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));\n  return \"data:image/svg+xml;charset=UTF-8,\".concat(src);\n} // @vue/component\n\n\nvar BImg =\n/*#__PURE__*/\nvue.extend({\n  name: img_NAME,\n  functional: true,\n  props: img_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data;\n    var src = props.src;\n    var width = parseInt(props.width, 10) ? parseInt(props.width, 10) : null;\n    var height = parseInt(props.height, 10) ? parseInt(props.height, 10) : null;\n    var align = null;\n    var block = props.block;\n\n    if (props.blank) {\n      if (!height && Boolean(width)) {\n        height = width;\n      } else if (!width && Boolean(height)) {\n        width = height;\n      }\n\n      if (!width && !height) {\n        width = 1;\n        height = 1;\n      } // Make a blank SVG image\n\n\n      src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');\n    }\n\n    if (props.left) {\n      align = 'float-left';\n    } else if (props.right) {\n      align = 'float-right';\n    } else if (props.center) {\n      align = 'mx-auto';\n      block = true;\n    }\n\n    return h('img', lib_esm_a(data, {\n      attrs: {\n        src: src,\n        alt: props.alt,\n        width: width ? String(width) : null,\n        height: height ? String(height) : null\n      },\n      class: (_class = {\n        'img-thumbnail': props.thumbnail,\n        'img-fluid': props.fluid || props.fluidGrow,\n        'w-100': props.fluidGrow,\n        rounded: props.rounded === '' || props.rounded === true\n      }, Object(defineProperty[\"a\" /* default */])(_class, \"rounded-\".concat(props.rounded), isString(props.rounded) && props.rounded !== ''), Object(defineProperty[\"a\" /* default */])(_class, align, Boolean(align)), Object(defineProperty[\"a\" /* default */])(_class, 'd-block', block), _class)\n    }));\n  }\n});\n/* harmony default export */ var image_img = (BImg);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/image/img-lazy.js\n\n\n\n\n\n\nvar img_lazy_NAME = 'BImgLazy';\nvar THROTTLE = 100;\nvar EVENT_OPTIONS = {\n  passive: true,\n  capture: false\n};\nvar img_lazy_props = {\n  src: {\n    type: String,\n    default: null,\n    required: true\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: [Number, String],\n    default: null\n  },\n  height: {\n    type: [Number, String],\n    default: null\n  },\n  blankSrc: {\n    // If null, a blank image is generated\n    type: String,\n    default: null\n  },\n  blankColor: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(img_lazy_NAME, 'blankColor');\n    }\n  },\n  blankWidth: {\n    type: [Number, String],\n    default: null\n  },\n  blankHeight: {\n    type: [Number, String],\n    default: null\n  },\n  show: {\n    type: Boolean,\n    default: false\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  fluidGrow: {\n    type: Boolean,\n    default: false\n  },\n  block: {\n    type: Boolean,\n    default: false\n  },\n  thumbnail: {\n    type: Boolean,\n    default: false\n  },\n  rounded: {\n    type: [Boolean, String],\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  center: {\n    type: Boolean,\n    default: false\n  },\n  offset: {\n    type: [Number, String],\n    default: 360\n  },\n  throttle: {\n    type: [Number, String],\n    default: THROTTLE\n  } // @vue/component\n\n};\nvar BImgLazy =\n/*#__PURE__*/\nvue.extend({\n  name: img_lazy_NAME,\n  props: img_lazy_props,\n  data: function data() {\n    return {\n      isShown: false,\n      scrollTimeout: null,\n      observer: null\n    };\n  },\n  computed: {\n    computedSrc: function computedSrc() {\n      return !this.blankSrc || this.isShown ? this.src : this.blankSrc;\n    },\n    computedBlank: function computedBlank() {\n      return !(this.isShown || this.blankSrc);\n    },\n    computedWidth: function computedWidth() {\n      return this.isShown ? this.width : this.blankWidth || this.width;\n    },\n    computedHeight: function computedHeight() {\n      return this.isShown ? this.height : this.blankHeight || this.height;\n    }\n  },\n  watch: {\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.isShown = newVal;\n\n        if (!newVal) {\n          // Make sure listeners are re-enabled if img is force set to blank\n          this.setListeners(true);\n        }\n      }\n    },\n    isShown: function isShown(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        // Update synched show prop\n        this.$emit('update:show', newVal);\n      }\n    }\n  },\n  created: function created() {\n    this.isShown = this.show;\n  },\n  mounted: function mounted() {\n    if (this.isShown) {\n      this.setListeners(false);\n    } else {\n      this.setListeners(true);\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    if (!this.isShown) {\n      this.setListeners(true);\n    }\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    this.setListeners(false);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.setListeners(false);\n  },\n  methods: {\n    setListeners: function setListeners(on) {\n      var _this = this;\n\n      if (this.scrollTimeout) {\n        clearTimeout(this.scrollTimeout);\n        this.scrollTimeout = null;\n      }\n      /* istanbul ignore next: JSDOM doen't support IntersectionObserver */\n\n\n      if (this.observer) {\n        this.observer.unobserve(this.$el);\n        this.observer.disconnect();\n        this.observer = null;\n      }\n\n      var winEvts = ['scroll', 'resize', 'orientationchange'];\n      winEvts.forEach(function (evt) {\n        return eventOff(window, evt, _this.onScroll, EVENT_OPTIONS);\n      });\n      eventOff(this.$el, 'load', this.checkView, EVENT_OPTIONS);\n      eventOff(document, 'transitionend', this.onScroll, EVENT_OPTIONS);\n\n      if (on) {\n        /* istanbul ignore if: JSDOM doen't support IntersectionObserver */\n        if (env[\"c\" /* hasIntersectionObserverSupport */]) {\n          this.observer = new IntersectionObserver(this.doShow, {\n            root: null,\n            // viewport\n            rootMargin: \"\".concat(parseInt(this.offset, 10) || 0, \"px\"),\n            threshold: 0 // percent intersection\n\n          });\n          this.observer.observe(this.$el);\n        } else {\n          // Fallback to scroll/etc events\n          winEvts.forEach(function (evt) {\n            return eventOn(window, evt, _this.onScroll, EVENT_OPTIONS);\n          });\n          eventOn(this.$el, 'load', this.checkView, EVENT_OPTIONS);\n          eventOn(document, 'transitionend', this.onScroll, EVENT_OPTIONS);\n        }\n      }\n    },\n    doShow: function doShow(entries) {\n      if (entries && (entries[0].isIntersecting || entries[0].intersectionRatio > 0.0)) {\n        this.isShown = true;\n        this.setListeners(false);\n      }\n    },\n    checkView: function checkView() {\n      // check bounding box + offset to see if we should show\n\n      /* istanbul ignore next: should rarely occur */\n      if (this.isShown) {\n        this.setListeners(false);\n        return;\n      }\n\n      var offset = parseInt(this.offset, 10) || 0;\n      var docElement = document.documentElement;\n      var view = {\n        l: 0 - offset,\n        t: 0 - offset,\n        b: docElement.clientHeight + offset,\n        r: docElement.clientWidth + offset // JSDOM Doesn't support BCR, but we fake it in the tests\n\n      };\n      var box = getBCR(this.$el);\n\n      if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {\n        // image is in view (or about to be in view)\n        this.doShow([{\n          isIntersecting: true\n        }]);\n      }\n    },\n    onScroll: function onScroll() {\n      /* istanbul ignore if: should rarely occur */\n      if (this.isShown) {\n        this.setListeners(false);\n      } else {\n        clearTimeout(this.scrollTimeout);\n        this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);\n      }\n    }\n  },\n  render: function render(h) {\n    return h(BImg, {\n      props: {\n        // Computed value props\n        src: this.computedSrc,\n        blank: this.computedBlank,\n        width: this.computedWidth,\n        height: this.computedHeight,\n        // Passthough props\n        alt: this.alt,\n        blankColor: this.blankColor,\n        fluid: this.fluid,\n        fluidGrow: this.fluidGrow,\n        block: this.block,\n        thumbnail: this.thumbnail,\n        rounded: this.rounded,\n        left: this.left,\n        right: this.right,\n        center: this.center\n      }\n    });\n  }\n});\n/* harmony default export */ var img_lazy = (BImgLazy);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-img-lazy.js\n\n\n\n\n\n\n\nfunction card_img_lazy_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction card_img_lazy_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { card_img_lazy_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { card_img_lazy_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n // Copy of `<b-img-lazy>` props, and remove conflicting/non-applicable props\n// The `omit()` util creates a new object, so we can just pass the original props\n\nvar card_img_lazy_lazyProps = object_omit(img_lazy_props, ['left', 'right', 'center', 'block', 'rounded', 'thumbnail', 'fluid', 'fluidGrow']);\nvar card_img_lazy_props = card_img_lazy_objectSpread({}, card_img_lazy_lazyProps, {\n  top: {\n    type: Boolean,\n    default: false\n  },\n  bottom: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  start: {\n    type: Boolean,\n    default: false // alias of 'left'\n\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  end: {\n    type: Boolean,\n    default: false // alias of 'right'\n\n  } // @vue/component\n\n});\nvar BCardImgLazy =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardImgLazy',\n  functional: true,\n  props: card_img_lazy_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data;\n    var baseClass = 'card-img';\n\n    if (props.top) {\n      baseClass += '-top';\n    } else if (props.right || props.end) {\n      baseClass += '-right';\n    } else if (props.bottom) {\n      baseClass += '-bottom';\n    } else if (props.left || props.start) {\n      baseClass += '-left';\n    } // False out the left/center/right props before passing to b-img-lazy\n\n\n    var lazyProps = card_img_lazy_objectSpread({}, props, {\n      left: false,\n      right: false,\n      center: false\n    });\n\n    return h(BImgLazy, lib_esm_a(data, {\n      class: [baseClass],\n      props: lazyProps\n    }));\n  }\n});\n/* harmony default export */ var card_img_lazy = (BCardImgLazy);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-text.js\n\n\nvar card_text_props = {\n  textTag: {\n    type: String,\n    default: 'p'\n  } // @vue/component\n\n};\nvar BCardText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardText',\n  functional: true,\n  props: card_text_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.textTag, lib_esm_a(data, {\n      staticClass: 'card-text'\n    }), children);\n  }\n});\n/* harmony default export */ var card_text = (BCardText);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/card-group.js\n\n\nvar card_group_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  deck: {\n    type: Boolean,\n    default: false\n  },\n  columns: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BCardGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardGroup',\n  functional: true,\n  props: card_group_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var baseClass = 'card-group';\n\n    if (props.deck) {\n      baseClass = 'card-deck';\n    } else if (props.columns) {\n      baseClass = 'card-columns';\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      class: baseClass\n    }), children);\n  }\n});\n/* harmony default export */ var card_group = (BCardGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/card/index.js\n\n\n\n\n\n\n\n\n\n\n\nvar CardPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCardTitle: BCardTitle,\n    BCardSubTitle: BCardSubTitle,\n    BCardFooter: BCardFooter,\n    BCardImg: BCardImg,\n    BCardImgLazy: BCardImgLazy,\n    BCardText: BCardText,\n    BCardGroup: BCardGroup\n  }\n});\n\n/* harmony default export */ var components_card = (CardPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/noop.js\nvar noop = function noop() {};\n\n/* harmony default export */ var utils_noop = (noop);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/observe-dom.js\n\n\n\n\n\n\n\nfunction observe_dom_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction observe_dom_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { observe_dom_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { observe_dom_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n/**\n * Observe a DOM element changes, falls back to eventListener mode\n * @param {Element} el The DOM element to observe\n * @param {Function} callback callback to be called on change\n * @param {object} [opts={childList: true, subtree: true}] observe options\n * @see http://stackoverflow.com/questions/3219758\n */\n\nvar observe_dom_observeDom = function observeDom(el, callback, opts)\n/* istanbul ignore next: difficult to test in JSDOM */\n{\n  // Handle cases where we might be passed a Vue instance\n  el = el ? el.$el || el : null; // Early exit when we have no element\n\n  /* istanbul ignore next: difficult to test in JSDOM */\n\n  if (!isElement(el)) {\n    return null;\n  } // Exit and throw a warning when `MutationObserver` isn't available\n\n\n  if (warn_warnNoMutationObserverSupport('observeDom')) {\n    return null;\n  } // Define a new observer\n\n\n  var obs = new MutationObs(function (mutations) {\n    var changed = false; // A mutation can contain several change records, so we loop\n    // through them to see what has changed\n    // We break out of the loop early if any \"significant\" change\n    // has been detected\n\n    for (var i = 0; i < mutations.length && !changed; i++) {\n      // The mutation record\n      var mutation = mutations[i]; // Mutation type\n\n      var type = mutation.type; // DOM node (could be any DOM node type - HTMLElement, Text, comment, etc.)\n\n      var target = mutation.target; // Detect whether a change happened based on type and target\n\n      if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\n        // We ignore nodes that are not TEXT (i.e. comments, etc)\n        // as they don't change layout\n        changed = true;\n      } else if (type === 'attributes') {\n        changed = true;\n      } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\n        // This includes HTMLElement and text nodes being\n        // added/removed/re-arranged\n        changed = true;\n      }\n    } // We only call the callback if a change that could affect\n    // layout/size truely happened\n\n\n    if (changed) {\n      callback();\n    }\n  }); // Have the observer observe foo for changes in children, etc\n\n  obs.observe(el, observe_dom_objectSpread({\n    childList: true,\n    subtree: true\n  }, opts)); // We return a reference to the observer so that `obs.disconnect()`\n  // can be called if necessary\n  // To reduce overhead when the root element is hidden\n\n  return obs;\n};\n\n/* harmony default export */ var observe_dom = (observe_dom_observeDom);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/id.js\n\n\n/*\n * SSR Safe Client Side ID attribute generation\n * id's can only be generated client side, after mount.\n * this._uid is not synched between server and client.\n */\n// @vue/component\n/* harmony default export */ var mixins_id = ({\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      localId_: null\n    };\n  },\n  computed: {\n    safeId: function safeId() {\n      // Computed property that returns a dynamic function for creating the ID.\n      // Reacts to changes in both .id and .localId_ And regens a new function\n      var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n      // So this computed prop looks and works like a method!!!\n      // But benefits from Vue's Computed prop caching\n\n      var fn = function fn(suffix) {\n        if (!id) {\n          return null;\n        }\n\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\n        return suffix ? id + '_' + suffix : id;\n      };\n\n      return fn;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // mounted only occurs client side\n    this.$nextTick(function () {\n      // Update dom with auto ID after dom loaded to prevent\n      // SSR hydration errors.\n      _this.localId_ = \"__BVID__\".concat(_this._uid);\n    });\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/carousel/carousel.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar carousel_NAME = 'BCarousel'; // Slide directional classes\n\nvar DIRECTION = {\n  next: {\n    dirClass: 'carousel-item-left',\n    overlayClass: 'carousel-item-next'\n  },\n  prev: {\n    dirClass: 'carousel-item-right',\n    overlayClass: 'carousel-item-prev'\n  } // Fallback Transition duration (with a little buffer) in ms\n\n};\nvar TRANS_DURATION = 600 + 50; // Time for mouse compat events to fire after touch\n\nvar TOUCH_EVENT_COMPAT_WAIT = 500; // Number of pixels to consider touch move a swipe\n\nvar SWIPE_THRESHOLD = 40; // PointerEvent pointer types\n\nvar PointerType = {\n  TOUCH: 'touch',\n  PEN: 'pen' // Transition Event names\n\n};\nvar TransitionEndEvents = {\n  WebkitTransition: 'webkitTransitionEnd',\n  MozTransition: 'transitionend',\n  OTransition: 'otransitionend oTransitionEnd',\n  transition: 'transitionend'\n};\nvar EventOptions = {\n  passive: true,\n  capture: false // Return the browser specific transitionEnd event name\n\n};\n\nfunction getTransitionEndEvent(el) {\n  for (var name in TransitionEndEvents) {\n    if (!isUndefined(el.style[name])) {\n      return TransitionEndEvents[name];\n    }\n  } // fallback\n\n  /* istanbul ignore next */\n\n\n  return null;\n} // @vue/component\n\n\nvar BCarousel =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCarousel',\n  mixins: [mixins_id, mixins_normalize_slot],\n  provide: function provide() {\n    return {\n      bvCarousel: this\n    };\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    labelPrev: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(carousel_NAME, 'labelPrev');\n      }\n    },\n    labelNext: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(carousel_NAME, 'labelNext');\n      }\n    },\n    labelGotoSlide: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(carousel_NAME, 'labelGotoSlide');\n      }\n    },\n    labelIndicators: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(carousel_NAME, 'labelIndicators');\n      }\n    },\n    interval: {\n      type: Number,\n      default: 5000\n    },\n    indicators: {\n      type: Boolean,\n      default: false\n    },\n    controls: {\n      type: Boolean,\n      default: false\n    },\n    noAnimation: {\n      // Disable slide/fade animation\n      type: Boolean,\n      default: false\n    },\n    fade: {\n      // Enable cross-fade animation instead of slide animation\n      type: Boolean,\n      default: false\n    },\n    noTouch: {\n      // Sniffed by carousel-slide\n      type: Boolean,\n      default: false\n    },\n    noHoverPause: {\n      // Disable pause on hover\n      type: Boolean,\n      default: false\n    },\n    imgWidth: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    imgHeight: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    background: {\n      type: String // default: undefined\n\n    },\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      index: this.value || 0,\n      isSliding: false,\n      transitionEndEvent: null,\n      slides: [],\n      direction: null,\n      isPaused: !(parseInt(this.interval, 10) > 0),\n      // Touch event handling values\n      touchStartX: 0,\n      touchDeltaX: 0\n    };\n  },\n  watch: {\n    value: function value(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.setSlide(newVal);\n      }\n    },\n    interval: function interval(newVal, oldVal) {\n      if (newVal === oldVal) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (!newVal) {\n        // Pausing slide show\n        this.pause(false);\n      } else {\n        // Restarting or Changing interval\n        this.pause(true);\n        this.start(false);\n      }\n    },\n    isPaused: function isPaused(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit(newVal ? 'paused' : 'unpaused');\n      }\n    },\n    index: function index(to, from) {\n      if (to === from || this.isSliding) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.doSlide(to, from);\n    }\n  },\n  created: function created() {\n    // Create private non-reactive props\n    this._intervalId = null;\n    this._animationTimeout = null;\n    this._touchTimeout = null; // Set initial paused state\n\n    this.isPaused = !(parseInt(this.interval, 10) > 0);\n  },\n  mounted: function mounted() {\n    // Cache current browser transitionend event name\n    this.transitionEndEvent = getTransitionEndEvent(this.$el) || null; // Get all slides\n\n    this.updateSlides(); // Observe child changes so we can update slide list\n\n    observe_dom(this.$refs.inner, this.updateSlides.bind(this), {\n      subtree: false,\n      childList: true,\n      attributes: true,\n      attributeFilter: ['id']\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearTimeout(this._animationTimeout);\n    clearTimeout(this._touchTimeout);\n    clearInterval(this._intervalId);\n    this._intervalId = null;\n    this._animationTimeout = null;\n    this._touchTimeout = null;\n  },\n  methods: {\n    // Set slide\n    setSlide: function setSlide(slide) {\n      var _this = this;\n\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Don't animate when page is not visible\n\n      /* istanbul ignore if: difficult to test */\n      if (env[\"j\" /* isBrowser */] && document.visibilityState && document.hidden) {\n        return;\n      }\n\n      var len = this.slides.length; // Don't do anything if nothing to slide to\n\n      if (len === 0) {\n        return;\n      } // Don't change slide while transitioning, wait until transition is done\n\n\n      if (this.isSliding) {\n        // Schedule slide after sliding complete\n        this.$once('sliding-end', function () {\n          return _this.setSlide(slide, direction);\n        });\n        return;\n      }\n\n      this.direction = direction; // Make sure we have an integer (you never know!)\n\n      slide = Math.floor(slide); // Set new slide index. Wrap around if necessary\n\n      this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;\n    },\n    // Previous slide\n    prev: function prev() {\n      this.setSlide(this.index - 1, 'prev');\n    },\n    // Next slide\n    next: function next() {\n      this.setSlide(this.index + 1, 'next');\n    },\n    // Pause auto rotation\n    pause: function pause(evt) {\n      if (!evt) {\n        this.isPaused = true;\n      }\n\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n        this._intervalId = null;\n      }\n    },\n    // Start auto rotate slides\n    start: function start(evt) {\n      if (!evt) {\n        this.isPaused = false;\n      }\n      /* istanbul ignore next: most likely will never happen, but just in case */\n\n\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n        this._intervalId = null;\n      } // Don't start if no interval, or less than 2 slides\n\n\n      if (this.interval && this.slides.length > 1) {\n        this._intervalId = setInterval(this.next, Math.max(1000, this.interval));\n      }\n    },\n    // Restart auto rotate slides when focus/hover leaves the carousel\n    restart: function restart(evt)\n    /* istanbul ignore next: difficult to test */\n    {\n      if (!this.$el.contains(document.activeElement)) {\n        this.start();\n      }\n    },\n    doSlide: function doSlide(to, from) {\n      var _this2 = this;\n\n      var isCycling = Boolean(this.interval); // Determine sliding direction\n\n      var direction = this.calcDirection(this.direction, from, to);\n      var overlayClass = direction.overlayClass;\n      var dirClass = direction.dirClass; // Determine current and next slides\n\n      var currentSlide = this.slides[from];\n      var nextSlide = this.slides[to]; // Don't do anything if there aren't any slides to slide to\n\n      if (!currentSlide || !nextSlide) {\n        /* istanbul ignore next */\n        return;\n      } // Start animating\n\n\n      this.isSliding = true;\n\n      if (isCycling) {\n        this.pause(false);\n      }\n\n      this.$emit('sliding-start', to); // Update v-model\n\n      this.$emit('input', this.index);\n\n      if (this.noAnimation) {\n        addClass(nextSlide, 'active');\n        removeClass(currentSlide, 'active');\n        this.isSliding = false; // Notify ourselves that we're done sliding (slid)\n\n        this.$nextTick(function () {\n          return _this2.$emit('sliding-end', to);\n        });\n      } else {\n        addClass(nextSlide, overlayClass); // Trigger a reflow of next slide\n\n        reflow(nextSlide);\n        addClass(currentSlide, dirClass);\n        addClass(nextSlide, dirClass); // Transition End handler\n\n        var called = false;\n        /* istanbul ignore next: difficult to test */\n\n        var onceTransEnd = function onceTransEnd(evt) {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n          if (_this2.transitionEndEvent) {\n            var events = _this2.transitionEndEvent.split(/\\s+/);\n\n            events.forEach(function (evt) {\n              return eventOff(currentSlide, evt, onceTransEnd, EventOptions);\n            });\n          }\n\n          _this2._animationTimeout = null;\n          removeClass(nextSlide, dirClass);\n          removeClass(nextSlide, overlayClass);\n          addClass(nextSlide, 'active');\n          removeClass(currentSlide, 'active');\n          removeClass(currentSlide, dirClass);\n          removeClass(currentSlide, overlayClass);\n          setAttr(currentSlide, 'aria-current', 'false');\n          setAttr(nextSlide, 'aria-current', 'true');\n          setAttr(currentSlide, 'aria-hidden', 'true');\n          setAttr(nextSlide, 'aria-hidden', 'false');\n          _this2.isSliding = false;\n          _this2.direction = null; // Notify ourselves that we're done sliding (slid)\n\n          _this2.$nextTick(function () {\n            return _this2.$emit('sliding-end', to);\n          });\n        }; // Set up transitionend handler\n\n        /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n\n        if (this.transitionEndEvent) {\n          var events = this.transitionEndEvent.split(/\\s+/);\n          events.forEach(function (event) {\n            return eventOn(currentSlide, event, onceTransEnd, EventOptions);\n          });\n        } // Fallback to setTimeout()\n\n\n        this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\n      }\n\n      if (isCycling) {\n        this.start(false);\n      }\n    },\n    // Update slide list\n    updateSlides: function updateSlides() {\n      this.pause(true); // Get all slides as DOM elements\n\n      this.slides = dom_selectAll('.carousel-item', this.$refs.inner);\n      var numSlides = this.slides.length; // Keep slide number in range\n\n      var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));\n      this.slides.forEach(function (slide, idx) {\n        var n = idx + 1;\n\n        if (idx === index) {\n          addClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'true');\n        } else {\n          removeClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'false');\n        }\n\n        setAttr(slide, 'aria-posinset', String(n));\n        setAttr(slide, 'aria-setsize', String(numSlides));\n      }); // Set slide as active\n\n      this.setSlide(index);\n      this.start(this.isPaused);\n    },\n    calcDirection: function calcDirection() {\n      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!direction) {\n        return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;\n      }\n\n      return DIRECTION[direction];\n    },\n    handleClick: function handleClick(evt, fn) {\n      var keyCode = evt.keyCode;\n\n      if (evt.type === 'click' || keyCode === key_codes.SPACE || keyCode === key_codes.ENTER) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        fn();\n      }\n    },\n    handleSwipe: function handleSwipe()\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      var absDeltaX = Math.abs(this.touchDeltaX);\n\n      if (absDeltaX <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      var direction = absDeltaX / this.touchDeltaX;\n\n      if (direction > 0) {\n        // Swipe left\n        this.prev();\n      } else if (direction < 0) {\n        // Swipe right\n        this.next();\n      }\n    },\n    touchStart: function touchStart(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (env[\"f\" /* hasPointerEventSupport */] && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchStartX = evt.clientX;\n      } else if (!env[\"f\" /* hasPointerEventSupport */]) {\n        this.touchStartX = evt.touches[0].clientX;\n      }\n    },\n    touchMove: function touchMove(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      // Ensure swiping with one touch and not pinching\n      if (evt.touches && evt.touches.length > 1) {\n        this.touchDeltaX = 0;\n      } else {\n        this.touchDeltaX = evt.touches[0].clientX - this.touchStartX;\n      }\n    },\n    touchEnd: function touchEnd(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (env[\"f\" /* hasPointerEventSupport */] && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchDeltaX = evt.clientX - this.touchStartX;\n      }\n\n      this.handleSwipe(); // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause(false);\n\n      if (this._touchTimeout) {\n        clearTimeout(this._touchTimeout);\n      }\n\n      this._touchTimeout = setTimeout(this.start, TOUCH_EVENT_COMPAT_WAIT + Math.max(1000, this.interval));\n    }\n  },\n  render: function render(h) {\n    var _this3 = this;\n\n    // Wrapper for slides\n    var inner = h('div', {\n      ref: 'inner',\n      class: ['carousel-inner'],\n      attrs: {\n        id: this.safeId('__BV_inner_'),\n        role: 'list'\n      }\n    }, [this.normalizeSlot('default')]); // Prev and next controls\n\n    var controls = h(false);\n\n    if (this.controls) {\n      controls = [h('a', {\n        class: ['carousel-control-prev'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_')\n        },\n        on: {\n          click: function click(evt) {\n            _this3.handleClick(evt, _this3.prev);\n          },\n          keydown: function keydown(evt) {\n            _this3.handleClick(evt, _this3.prev);\n          }\n        }\n      }, [h('span', {\n        class: ['carousel-control-prev-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        class: ['sr-only']\n      }, [this.labelPrev])]), h('a', {\n        class: ['carousel-control-next'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_')\n        },\n        on: {\n          click: function click(evt) {\n            _this3.handleClick(evt, _this3.next);\n          },\n          keydown: function keydown(evt) {\n            _this3.handleClick(evt, _this3.next);\n          }\n        }\n      }, [h('span', {\n        class: ['carousel-control-next-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        class: ['sr-only']\n      }, [this.labelNext])])];\n    } // Indicators\n\n\n    var indicators = h('ol', {\n      class: ['carousel-indicators'],\n      directives: [{\n        name: 'show',\n        rawName: 'v-show',\n        value: this.indicators,\n        expression: 'indicators'\n      }],\n      attrs: {\n        id: this.safeId('__BV_indicators_'),\n        'aria-hidden': this.indicators ? 'false' : 'true',\n        'aria-label': this.labelIndicators,\n        'aria-owns': this.safeId('__BV_inner_')\n      }\n    }, this.slides.map(function (slide, n) {\n      return h('li', {\n        key: \"slide_\".concat(n),\n        class: {\n          active: n === _this3.index\n        },\n        attrs: {\n          role: 'button',\n          id: _this3.safeId(\"__BV_indicator_\".concat(n + 1, \"_\")),\n          tabindex: _this3.indicators ? '0' : '-1',\n          'aria-current': n === _this3.index ? 'true' : 'false',\n          'aria-label': \"\".concat(_this3.labelGotoSlide, \" \").concat(n + 1),\n          'aria-describedby': _this3.slides[n].id || null,\n          'aria-controls': _this3.safeId('__BV_inner_')\n        },\n        on: {\n          click: function click(evt) {\n            _this3.handleClick(evt, function () {\n              _this3.setSlide(n);\n            });\n          },\n          keydown: function keydown(evt) {\n            _this3.handleClick(evt, function () {\n              _this3.setSlide(n);\n            });\n          }\n        }\n      });\n    }));\n    var on = {\n      mouseenter: this.noHoverPause ? utils_noop : this.pause,\n      mouseleave: this.noHoverPause ? utils_noop : this.restart,\n      focusin: this.pause,\n      focusout: this.restart,\n      keydown: function keydown(evt) {\n        if (/input|textarea/i.test(evt.target.tagName)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        var keyCode = evt.keyCode;\n\n        if (keyCode === key_codes.LEFT || keyCode === key_codes.RIGHT) {\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          _this3[keyCode === key_codes.LEFT ? 'prev' : 'next']();\n        }\n      } // Touch support event handlers for environment\n\n    };\n\n    if (!this.noTouch && env[\"h\" /* hasTouchSupport */]) {\n      // Attach appropriate listeners (prepend event name with '&' for passive mode)\n\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      if (env[\"f\" /* hasPointerEventSupport */]) {\n        on['&pointerdown'] = this.touchStart;\n        on['&pointerup'] = this.touchEnd;\n      } else {\n        on['&touchstart'] = this.touchStart;\n        on['&touchmove'] = this.touchMove;\n        on['&touchend'] = this.touchEnd;\n      }\n    } // Return the carousel\n\n\n    return h('div', {\n      staticClass: 'carousel',\n      class: {\n        slide: !this.noAnimation,\n        'carousel-fade': !this.noAnimation && this.fade,\n        'pointer-event': !this.noTouch && env[\"h\" /* hasTouchSupport */] && env[\"f\" /* hasPointerEventSupport */]\n      },\n      style: {\n        background: this.background\n      },\n      attrs: {\n        role: 'region',\n        id: this.safeId(),\n        'aria-busy': this.isSliding ? 'true' : 'false'\n      },\n      on: on\n    }, [inner, controls, indicators]);\n  }\n});\n/* harmony default export */ var carousel = (BCarousel);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/carousel/carousel-slide.js\n\n\n\n\n\n\n\nvar carousel_slide_props = {\n  imgSrc: {\n    type: String // default: undefined\n\n  },\n  imgAlt: {\n    type: String // default: undefined\n\n  },\n  imgWidth: {\n    type: [Number, String] // default: undefined\n\n  },\n  imgHeight: {\n    type: [Number, String] // default: undefined\n\n  },\n  imgBlank: {\n    type: Boolean,\n    default: false\n  },\n  imgBlankColor: {\n    type: String,\n    default: 'transparent'\n  },\n  contentVisibleUp: {\n    type: String\n  },\n  contentTag: {\n    type: String,\n    default: 'div'\n  },\n  caption: {\n    type: String\n  },\n  captionHtml: {\n    type: String\n  },\n  captionTag: {\n    type: String,\n    default: 'h3'\n  },\n  text: {\n    type: String\n  },\n  textHtml: {\n    type: String\n  },\n  textTag: {\n    type: String,\n    default: 'p'\n  },\n  background: {\n    type: String\n  } // @vue/component\n\n};\nvar BCarouselSlide =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCarouselSlide',\n  mixins: [mixins_id, mixins_normalize_slot],\n  inject: {\n    bvCarousel: {\n      default: function _default() {\n        return {\n          // Explicitly disable touch if not a child of carousel\n          noTouch: true\n        };\n      }\n    }\n  },\n  props: carousel_slide_props,\n  data: function data() {\n    return {};\n  },\n  computed: {\n    contentClasses: function contentClasses() {\n      return [this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? \"d-\".concat(this.contentVisibleUp, \"-block\") : ''];\n    },\n    computedWidth: function computedWidth() {\n      // Use local width, or try parent width\n      return this.imgWidth || this.bvCarousel.imgWidth || null;\n    },\n    computedHeight: function computedHeight() {\n      // Use local height, or try parent height\n      return this.imgHeight || this.bvCarousel.imgHeight || null;\n    }\n  },\n  render: function render(h) {\n    var noDrag = !this.bvCarousel.noTouch && env[\"h\" /* hasTouchSupport */];\n    var img = this.normalizeSlot('img');\n\n    if (!img && (this.imgSrc || this.imgBlank)) {\n      img = h(BImg, {\n        props: {\n          fluidGrow: true,\n          block: true,\n          src: this.imgSrc,\n          blank: this.imgBlank,\n          blankColor: this.imgBlankColor,\n          width: this.computedWidth,\n          height: this.computedHeight,\n          alt: this.imgAlt\n        },\n        // Touch support event handler\n        on: noDrag ? {\n          dragstart: function dragstart(e) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            e.preventDefault();\n          }\n        } : {}\n      });\n    }\n\n    if (!img) {\n      img = h(false);\n    }\n\n    var content = h(false);\n    var contentChildren = [this.caption || this.captionHtml ? h(this.captionTag, {\n      domProps: htmlOrText(this.captionHtml, this.caption)\n    }) : false, this.text || this.textHtml ? h(this.textTag, {\n      domProps: htmlOrText(this.textHtml, this.text)\n    }) : false, this.normalizeSlot('default') || false];\n\n    if (contentChildren.some(Boolean)) {\n      content = h(this.contentTag, {\n        staticClass: 'carousel-caption',\n        class: this.contentClasses\n      }, contentChildren.map(function (i) {\n        return i || h(false);\n      }));\n    }\n\n    return h('div', {\n      staticClass: 'carousel-item',\n      style: {\n        background: this.background || this.bvCarousel.background || null\n      },\n      attrs: {\n        id: this.safeId(),\n        role: 'listitem'\n      }\n    }, [img, content]);\n  }\n});\n/* harmony default export */ var carousel_slide = (BCarouselSlide);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/carousel/index.js\n\n\n\nvar CarouselPlugin =\n/*#__PURE*/\npluginFactory({\n  components: {\n    BCarousel: BCarousel,\n    BCarouselSlide: BCarouselSlide\n  }\n});\n\n/* harmony default export */ var components_carousel = (CarouselPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/listen-on-root.js\n/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n// @vue/component\n/* harmony default export */ var listen_on_root = ({\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Safely register a $once event listener on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this2.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Convenience method for calling vm.$emit on vm.$root.\n     * @param {string} event\n     * @param {*} args\n     * @chainable\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args)); // Return this for easy chaining\n\n\n      return this;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/collapse/collapse.js\n\n\n\n\n // Events we emit on $root\n\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on `$root` to ensure the toggle state is\n// always synced. It gets emitted even if the state has not changed!\n// This event is NOT to be documented as people should not be using it\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on `$root`\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\nvar EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Event listener options\n\nvar collapse_EventOptions = {\n  passive: true,\n  capture: false // @vue/component\n\n};\nvar BCollapse =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCollapse',\n  mixins: [listen_on_root, mixins_normalize_slot],\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  data: function data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n  computed: {\n    classObject: function classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !this.transitioning,\n        show: this.show && !this.transitioning\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n  },\n  created: function created() {\n    this.show = this.visible;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.show = this.visible; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n\n    if (this.isNav) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(function () {\n      _this.emitState();\n    }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n    this.listenOnRoot(EVENT_STATE_REQUEST, function (id) {\n      if (id === _this.id) {\n        _this.$nextTick(_this.emitSync);\n      }\n    });\n  },\n  updated: function updated() {\n    // Emit a private event every time this component updates to ensure\n    // the toggle button is in sync with the collapse's state\n    // It is emitted regardless if the visible state changes\n    this.emitSync();\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(false);\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(true);\n    }\n\n    this.emitSync();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && env[\"j\" /* isBrowser */]) {\n      this.setWindowEvents(false);\n    }\n  },\n  methods: {\n    setWindowEvents: function setWindowEvents(on) {\n      var method = on ? eventOn : eventOff;\n      method(window, 'resize', this.handleResize, collapse_EventOptions);\n      method(window, 'orientationchange', this.handleResize, collapse_EventOptions);\n    },\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter(el) {\n      el.style.height = 0;\n      reflow(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit('show');\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n    onLeave: function onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = getBCR(el).height + 'px';\n      reflow(el);\n      this.transitioning = true;\n      el.style.height = 0; // This should be moved out so we can add cancellable events\n\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n    emitState: function emitState() {\n      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse\n\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n    emitSync: function emitSync() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n    },\n    checkDisplayBlock: function checkDisplayBlock() {\n      // Check to see if the collapse has `display: block !important;` set.\n      // We can't set `display: none;` directly on this.$el, as it would\n      // trigger a new transition to start (or cancel a current one).\n      var restore = hasClass(this.$el, 'show');\n      removeClass(this.$el, 'show');\n      var isBlock = dom_getCS(this.$el).display === 'block';\n      restore && addClass(this.$el, 'show');\n      return isBlock;\n    },\n    clickHandler: function clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      var el = evt.target;\n\n      if (!this.isNav || !el || dom_getCS(this.$el).display !== 'block') {\n        /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n        return;\n      }\n\n      if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {\n        if (!this.checkDisplayBlock()) {\n          // Only close the collapse if it is not forced to be 'display: block !important;'\n          this.show = false;\n        }\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n\n      this.toggle();\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = dom_getCS(this.$el).display === 'block';\n    }\n  },\n  render: function render(h) {\n    var content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.id || null\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, [this.normalizeSlot('default')]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [content]);\n  }\n});\n/* harmony default export */ var collapse = (BCollapse);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/loose-equal.js\n\n // Assumes both a and b are arrays!\n// Handles when arrays are \"sparse\" (array.every(...) doesn't handle sparse)\n\nvar compareArrays = function compareArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var equal = true;\n\n  for (var i = 0; equal && i < a.length; i++) {\n    equal = loose_equal_looseEqual(a[i], b[i]);\n  }\n\n  return equal;\n};\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n * Returns boolean true or false\n */\n\n\nvar loose_equal_looseEqual = function looseEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  var aValidType = isDate(a);\n  var bValidType = isDate(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? compareArrays(a, b) : false;\n  }\n\n  aValidType = object_isObject(a);\n  bValidType = object_isObject(b);\n\n  if (aValidType || bValidType) {\n    /* istanbul ignore if: this if will probably never be called */\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n\n    var aKeysCount = keys(a).length;\n    var bKeysCount = keys(b).length;\n\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n\n    for (var key in a) {\n      var aHasKey = a.hasOwnProperty(key);\n      var bHasKey = b.hasOwnProperty(key);\n\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n\n  return String(a) === String(b);\n};\n\n/* harmony default export */ var loose_equal = (loose_equal_looseEqual);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/target.js\n\n\nvar allListenTypes = {\n  hover: true,\n  click: true,\n  focus: true\n};\nvar BVBoundListeners = '__BV_boundEventListeners__';\n\nvar target_getTargets = function getTargets(binding) {\n  var targets = keys(binding.modifiers || {}).filter(function (t) {\n    return !allListenTypes[t];\n  });\n\n  if (binding.value) {\n    targets.push(binding.value);\n  }\n\n  return targets;\n};\n\nvar target_bindTargets = function bindTargets(vnode, binding, listenTypes, fn) {\n  var targets = target_getTargets(binding);\n\n  var listener = function listener() {\n    fn({\n      targets: targets,\n      vnode: vnode\n    });\n  };\n\n  keys(allListenTypes).forEach(function (type) {\n    if (listenTypes[type] || binding.modifiers[type]) {\n      eventOn(vnode.elm, type, listener);\n      var boundListeners = vnode.elm[BVBoundListeners] || {};\n      boundListeners[type] = boundListeners[type] || [];\n      boundListeners[type].push(listener);\n      vnode.elm[BVBoundListeners] = boundListeners;\n    }\n  }); // Return the list of targets\n\n  return targets;\n};\n\nvar target_unbindTargets = function unbindTargets(vnode, binding, listenTypes) {\n  keys(allListenTypes).forEach(function (type) {\n    if (listenTypes[type] || binding.modifiers[type]) {\n      var boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];\n\n      if (boundListeners) {\n        boundListeners.forEach(function (listener) {\n          return eventOff(vnode.elm, type, listener);\n        });\n        delete vnode.elm[BVBoundListeners][type];\n      }\n    }\n  });\n};\n\n\n/* harmony default export */ var utils_target = (target_bindTargets);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/toggle/toggle.js\n\n\n\n // Target listen types\n\nvar toggle_listenTypes = {\n  click: true // Property key for handler storage\n\n};\nvar BV_TOGGLE = '__BV_toggle__';\nvar BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nvar BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nvar BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nvar toggle_EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nvar toggle_EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nvar toggle_EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Private event we send to collapse to request state update sync event\n\nvar toggle_EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle targets update\n\n\nvar handleTargets = function handleTargets(_ref) {\n  var targets = _ref.targets,\n      vnode = _ref.vnode;\n  targets.forEach(function (target) {\n    vnode.context.$root.$emit(toggle_EVENT_TOGGLE, target);\n  });\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nvar toggle_handleUpdate = function handleUpdate(el, binding, vnode) {\n  if (!env[\"j\" /* isBrowser */]) {\n    return;\n  }\n\n  if (!loose_equal(target_getTargets(binding), el[BV_TOGGLE_TARGETS])) {\n    // Targets have changed, so update accordingly\n    target_unbindTargets(vnode, binding, toggle_listenTypes);\n    var targets = target_bindTargets(vnode, binding, toggle_listenTypes, handleTargets); // Update targets array to element\n\n    el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n    el[BV_TOGGLE_CONTROLS] = targets.join(' '); // ensure aria-controls is up to date\n\n    setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]); // Request a state update from targets so that we can ensure\n    // expanded state is correct\n\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(toggle_EVENT_STATE_REQUEST, target);\n    });\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    addClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    removeClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'false');\n  }\n\n  setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nvar VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    var targets = target_bindTargets(vnode, binding, toggle_listenTypes, handleTargets);\n\n    if (env[\"j\" /* isBrowser */] && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      setAttr(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        setAttr(el, 'role', 'button');\n      } // Toggle state handler, stored on element\n\n\n      el[BV_TOGGLE] = function toggleDirectiveHandler(id, state) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            removeClass(el, 'collapsed');\n          } else {\n            addClass(el, 'collapsed');\n          }\n        }\n      }; // Listen for toggle state changes (public)\n\n\n      vnode.context.$root.$on(toggle_EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(toggle_EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n  componentUpdated: toggle_handleUpdate,\n  updated: toggle_handleUpdate,\n  unbind: function unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    target_unbindTargets(vnode, binding, toggle_listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(toggle_EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(toggle_EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    removeClass(el, 'collapsed');\n    removeAttr(el, 'aria-expanded');\n    removeAttr(el, 'aria-controls');\n    removeAttr(el, 'role');\n  }\n};\n/* harmony default export */ var toggle_toggle = (VBToggle);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/collapse/index.js\n\n\n\nvar CollapsePlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BCollapse: BCollapse\n  },\n  directives: {\n    VBToggle: VBToggle\n  }\n});\n\n/* harmony default export */ var components_collapse = (CollapsePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/safe-types.js\n/**\n * SSR safe types\n */\n\nvar safe_types_w = env[\"i\" /* hasWindowSupport */] ? window : {};\nvar HTMLElement = safe_types_w.HTMLElement || Object;\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js\nvar es6_array_find = __webpack_require__(80);\n\n// EXTERNAL MODULE: ./node_modules/popper.js/dist/esm/popper.js\nvar popper = __webpack_require__(30);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/bv-event.class.js\n\n\n\n\n\nvar bv_event_class_BvEvent =\n/*#__PURE__*/\nfunction () {\n  function BvEvent(type) {\n    var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    Object(classCallCheck[\"a\" /* default */])(this, BvEvent);\n\n    // Start by emulating native Event constructor.\n    if (!type) {\n      /* istanbul ignore next */\n      throw new TypeError(\"Failed to construct '\".concat(this.constructor.name, \"'. 1 argument required, \").concat(arguments.length, \" given.\"));\n    } // Assign defaults first, the eventInit,\n    // and the type last so it can't be overwritten.\n\n\n    object_assign(this, BvEvent.Defaults, this.constructor.Defaults, eventInit, {\n      type: type\n    }); // Freeze some props as readonly, but leave them enumerable.\n\n    defineProperties(this, {\n      type: readonlyDescriptor(),\n      cancelable: readonlyDescriptor(),\n      nativeEvent: readonlyDescriptor(),\n      target: readonlyDescriptor(),\n      relatedTarget: readonlyDescriptor(),\n      vueTarget: readonlyDescriptor(),\n      componentId: readonlyDescriptor()\n    }); // Create a private variable using closure scoping.\n\n    var defaultPrevented = false; // Recreate preventDefault method. One way setter.\n\n    this.preventDefault = function preventDefault() {\n      if (this.cancelable) {\n        defaultPrevented = true;\n      }\n    }; // Create 'defaultPrevented' publicly accessible prop\n    // that can only be altered by the preventDefault method.\n\n\n    object_defineProperty(this, 'defaultPrevented', {\n      enumerable: true,\n      get: function get() {\n        return defaultPrevented;\n      }\n    });\n  }\n\n  Object(createClass[\"a\" /* default */])(BvEvent, null, [{\n    key: \"Defaults\",\n    get: function get() {\n      return {\n        type: '',\n        cancelable: true,\n        nativeEvent: null,\n        target: null,\n        relatedTarget: null,\n        vueTarget: null,\n        componentId: null\n      };\n    }\n  }]);\n\n  return BvEvent;\n}(); // Named Exports\n\n\n // Default Export\n\n/* harmony default export */ var bv_event_class = (bv_event_class_BvEvent);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/click-out.js\n // @vue/component\n\n/* harmony default export */ var click_out = ({\n  data: function data() {\n    return {\n      listenForClickOut: false\n    };\n  },\n  watch: {\n    listenForClickOut: function listenForClickOut(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n\n        if (newValue) {\n          eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n        }\n      }\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    // Declare non-reactive properties\n    this.clickOutElement = null;\n    this.clickOutEventName = null;\n  },\n  mounted: function mounted() {\n    if (!this.clickOutElement) {\n      this.clickOutElement = document;\n    }\n\n    if (!this.clickOutEventName) {\n      this.clickOutEventName = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\n    }\n\n    if (this.listenForClickOut) {\n      eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n    }\n  },\n  beforeDestroy: function beforeDestroy()\n  /* istanbul ignore next */\n  {\n    eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n  },\n  methods: {\n    isClickOut: function isClickOut(evt) {\n      return !dom_contains(this.$el, evt.target);\n    },\n    _clickOutHandler: function _clickOutHandler(evt) {\n      if (this.clickOutHandler && this.isClickOut(evt)) {\n        this.clickOutHandler(evt);\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/focus-in.js\n // @vue/component\n\n/* harmony default export */ var focus_in = ({\n  data: function data() {\n    return {\n      listenForFocusIn: false\n    };\n  },\n  watch: {\n    listenForFocusIn: function listenForFocusIn(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);\n\n        if (newValue) {\n          eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);\n        }\n      }\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    // Declare non-reactive properties\n    this.focusInElement = null;\n  },\n  mounted: function mounted() {\n    if (!this.focusInElement) {\n      this.focusInElement = document;\n    }\n\n    if (this.listenForFocusIn) {\n      eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);\n    }\n  },\n  beforeDestroy: function beforeDestroy()\n  /* istanbul ignore next */\n  {\n    eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);\n  },\n  methods: {\n    _focusInHandler: function _focusInHandler(evt) {\n      if (this.focusInHandler) {\n        this.focusInHandler(evt);\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/dropdown.js\n\n\n\n\n\n\n\n\n\n\nfunction dropdown_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropdown_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n // Return an Array of visible items\n\nfunction filterVisibles(els) {\n  return (els || []).filter(isVisible);\n} // Dropdown item CSS selectors\n\n\nvar Selector = {\n  FORM_CHILD: '.dropdown form',\n  ITEM_SELECTOR: ['.dropdown-item', '.b-dropdown-form'].map(function (selector) {\n    return \"\".concat(selector, \":not(.disabled):not([disabled])\");\n  }).join(', ') // Popper attachment positions\n\n};\nvar AttachmentMap = {\n  // Dropup left align\n  TOP: 'top-start',\n  // Dropup right align\n  TOPEND: 'top-end',\n  // Dropdown left align\n  BOTTOM: 'bottom-start',\n  // Dropdown right align\n  BOTTOMEND: 'bottom-end',\n  // Dropright left align\n  RIGHT: 'right-start',\n  // Dropright right align\n  RIGHTEND: 'right-end',\n  // Dropleft left align\n  LEFT: 'left-start',\n  // Dropleft right align\n  LEFTEND: 'left-end' // @vue/component\n\n};\n/* harmony default export */ var mixins_dropdown = ({\n  mixins: [click_out, focus_in],\n  provide: function provide() {\n    return {\n      bvDropdown: this\n    };\n  },\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    text: {\n      // Button label\n      type: String,\n      default: ''\n    },\n    html: {\n      // Button label\n      type: String\n    },\n    dropup: {\n      // place on top if possible\n      type: Boolean,\n      default: false\n    },\n    dropright: {\n      // place right if possible\n      type: Boolean,\n      default: false\n    },\n    dropleft: {\n      // place left if possible\n      type: Boolean,\n      default: false\n    },\n    right: {\n      // Right align menu (default is left align)\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)\n      type: [Number, String],\n      default: 0\n    },\n    noFlip: {\n      // Disable auto-flipping of menu from bottom<=>top\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      // If true, only render menu contents when open\n      type: Boolean,\n      default: false\n    },\n    popperOpts: {\n      // type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      visible: false,\n      inNavbar: null,\n      visibleChangePrevented: false\n    };\n  },\n  computed: {\n    toggler: function toggler() {\n      var toggle = this.$refs.toggle;\n      return toggle ? toggle.$el || toggle : null;\n    },\n    directionClass: function directionClass() {\n      if (this.dropup) {\n        return 'dropup';\n      } else if (this.dropright) {\n        return 'dropright';\n      } else if (this.dropleft) {\n        return 'dropleft';\n      }\n\n      return '';\n    }\n  },\n  watch: {\n    visible: function visible(newValue, oldValue) {\n      if (this.visibleChangePrevented) {\n        this.visibleChangePrevented = false;\n        return;\n      }\n\n      if (newValue !== oldValue) {\n        var evtName = newValue ? 'show' : 'hide';\n        var bvEvt = new bv_event_class(evtName, {\n          cancelable: true,\n          vueTarget: this,\n          target: this.$refs.menu,\n          relatedTarget: null\n        });\n        this.emitEvent(bvEvt);\n\n        if (bvEvt.defaultPrevented) {\n          // Reset value and exit if canceled\n          this.visibleChangePrevented = true;\n          this.visible = oldValue; // Just in case a child element triggereded this.hide(true)\n\n          this.$off('hidden', this.focusToggler);\n          return;\n        }\n\n        if (evtName === 'show') {\n          this.showMenu();\n        } else {\n          this.hideMenu();\n        }\n      }\n    },\n    disabled: function disabled(newValue, oldValue) {\n      if (newValue !== oldValue && newValue && this.visible) {\n        // Hide dropdown if disabled changes to true\n        this.visible = false;\n      }\n    }\n  },\n  created: function created() {\n    // Create non-reactive property\n    this._popper = null;\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next: not easy to test */\n  {\n    // In case we are inside a `<keep-alive>`\n    this.visible = false;\n    this.whileOpenListen(false);\n    this.removePopper();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.visible = false;\n    this.whileOpenListen(false);\n    this.removePopper();\n  },\n  methods: {\n    // Event emitter\n    emitEvent: function emitEvent(bvEvt) {\n      var type = bvEvt.type;\n      this.$emit(type, bvEvt);\n      this.$root.$emit(\"bv::dropdown::\".concat(type), bvEvt);\n    },\n    showMenu: function showMenu() {\n      var _this = this;\n\n      if (this.disabled) {\n        /* istanbul ignore next */\n        return;\n      } // Ensure other menus are closed\n\n\n      this.$root.$emit('bv::dropdown::shown', this); // Are we in a navbar ?\n\n      if (isNull(this.inNavbar) && this.isNav) {\n        // We should use an injection for this\n\n        /* istanbul ignore next */\n        this.inNavbar = Boolean(closest('.navbar', this.$el));\n      } // Disable totally Popper.js for Dropdown in Navbar\n\n\n      if (!this.inNavbar) {\n        if (typeof popper[\"a\" /* default */] === 'undefined') {\n          /* istanbul ignore next */\n          utils_warn('b-dropdown: Popper.js not found. Falling back to CSS positioning.');\n        } else {\n          // for dropup with alignment we use the parent element as popper container\n          var element = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle; // Make sure we have a reference to an element, not a component!\n\n          element = element.$el || element; // Instantiate popper.js\n\n          this.createPopper(element);\n        }\n      }\n\n      this.whileOpenListen(true); // Wrap in nextTick to ensure menu is fully rendered/shown\n\n      this.$nextTick(function () {\n        // Focus on the menu container on show\n        _this.focusMenu(); // Emit the shown event\n\n\n        _this.$emit('shown');\n      });\n    },\n    hideMenu: function hideMenu() {\n      this.whileOpenListen(false);\n      this.$root.$emit('bv::dropdown::hidden', this);\n      this.$emit('hidden');\n      this.removePopper();\n    },\n    createPopper: function createPopper(element) {\n      this.removePopper();\n      this._popper = new popper[\"a\" /* default */](element, this.$refs.menu, this.getPopperConfig());\n    },\n    removePopper: function removePopper() {\n      if (this._popper) {\n        // Ensure popper event listeners are removed cleanly\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n    },\n    getPopperConfig: function getPopperConfig() {\n      var placement = AttachmentMap.BOTTOM;\n\n      if (this.dropup) {\n        placement = this.right ? AttachmentMap.TOPEND : AttachmentMap.TOP;\n      } else if (this.dropright) {\n        placement = AttachmentMap.RIGHT;\n      } else if (this.dropleft) {\n        placement = AttachmentMap.LEFT;\n      } else if (this.right) {\n        placement = AttachmentMap.BOTTOMEND;\n      }\n\n      var popperConfig = {\n        placement: placement,\n        modifiers: {\n          offset: {\n            offset: this.offset || 0\n          },\n          flip: {\n            enabled: !this.noFlip\n          }\n        }\n      };\n\n      if (this.boundary) {\n        popperConfig.modifiers.preventOverflow = {\n          boundariesElement: this.boundary\n        };\n      }\n\n      return dropdown_objectSpread({}, popperConfig, {}, this.popperOpts || {});\n    },\n    whileOpenListen: function whileOpenListen(open) {\n      // turn listeners on/off while open\n      if (open) {\n        // If another dropdown is opened\n        this.$root.$on('bv::dropdown::shown', this.rootCloseListener); // Hide the dropdown when clicked outside\n\n        this.listenForClickOut = true; // Hide the dropdown when it loses focus\n\n        this.listenForFocusIn = true;\n      } else {\n        this.$root.$off('bv::dropdown::shown', this.rootCloseListener);\n        this.listenForClickOut = false;\n        this.listenForFocusIn = false;\n      }\n    },\n    rootCloseListener: function rootCloseListener(vm) {\n      if (vm !== this) {\n        this.visible = false;\n      }\n    },\n    show: function show() {\n      var _this2 = this;\n\n      // Public method to show dropdown\n      if (this.disabled) {\n        return;\n      } // Wrap in a requestAnimationFrame to allow any previous\n      // click handling to occur first\n\n\n      requestAF(function () {\n        _this2.visible = true;\n      });\n    },\n    hide: function hide() {\n      var refocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // Public method to hide dropdown\n      if (this.disabled) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.visible = false;\n\n      if (refocus) {\n        // Child element is closing the dropdown on click\n        this.$once('hidden', this.focusToggler);\n      }\n    },\n    toggle: function toggle(evt) {\n      // Called only by a button that toggles the menu\n      evt = evt || {};\n      var type = evt.type;\n      var key = evt.keyCode;\n\n      if (type !== 'click' && !(type === 'keydown' && (key === key_codes.ENTER || key === key_codes.SPACE || key === key_codes.DOWN))) {\n        // We only toggle on Click, Enter, Space, and Arrow Down\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (this.disabled) {\n        /* istanbul ignore next */\n        this.visible = false;\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.$emit('toggle', evt);\n\n      if (evt.defaultPrevented) {\n        // Exit if canceled\n        return;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation(); // Toggle visibility\n\n      this.visible = !this.visible;\n    },\n    click: function click(evt) {\n      // Called only in split button mode, for the split button\n      if (this.disabled) {\n        /* istanbul ignore next */\n        this.visible = false;\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.$emit('click', evt);\n    },\n    onKeydown: function onKeydown(evt) {\n      // Called from dropdown menu context\n      var key = evt.keyCode;\n\n      if (key === key_codes.ESC) {\n        // Close on ESC\n        this.onEsc(evt);\n      } else if (key === key_codes.DOWN) {\n        // Down Arrow\n        this.focusNext(evt, false);\n      } else if (key === key_codes.UP) {\n        // Up Arrow\n        this.focusNext(evt, true);\n      }\n    },\n    onEsc: function onEsc(evt) {\n      if (this.visible) {\n        this.visible = false;\n        evt.preventDefault();\n        evt.stopPropagation(); // Return focus to original trigger button\n\n        this.$once('hidden', this.focusToggler);\n      }\n    },\n    // Document click out listener\n    clickOutHandler: function clickOutHandler() {\n      if (this.visible) {\n        this.visible = false;\n      }\n    },\n    // Document focusin listener\n    focusInHandler: function focusInHandler(evt) {\n      // If focus leaves dropdown, hide it\n      if (this.visible && !dom_contains(this.$refs.menu, evt.target) && !dom_contains(this.$refs.toggle, evt.target)) {\n        this.visible = false;\n      }\n    },\n    // Keyboard nav\n    focusNext: function focusNext(evt, up) {\n      var _this3 = this;\n\n      if (!this.visible || evt && closest(Selector.FORM_CHILD, evt.target)) {\n        // Ignore key up/down on form elements\n\n        /* istanbul ignore next: should never happen */\n        return;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.$nextTick(function () {\n        var items = _this3.getItems();\n\n        if (items.length < 1) {\n          /* istanbul ignore next: should never happen */\n          return;\n        }\n\n        var index = items.indexOf(evt.target);\n\n        if (up && index > 0) {\n          index--;\n        } else if (!up && index < items.length - 1) {\n          index++;\n        }\n\n        if (index < 0) {\n          /* istanbul ignore next: should never happen */\n          index = 0;\n        }\n\n        _this3.focusItem(index, items);\n      });\n    },\n    focusItem: function focusItem(idx, items) {\n      var el = items.find(function (el, i) {\n        return i === idx;\n      });\n\n      if (el && el.focus) {\n        el.focus();\n      }\n    },\n    getItems: function getItems() {\n      // Get all items\n      return filterVisibles(dom_selectAll(Selector.ITEM_SELECTOR, this.$refs.menu));\n    },\n    focusMenu: function focusMenu() {\n      this.$refs.menu.focus && this.$refs.menu.focus();\n    },\n    focusToggler: function focusToggler() {\n      var toggler = this.toggler;\n\n      if (toggler && toggler.focus) {\n        toggler.focus();\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown.js\n\n\n\n\n\n\n\n\n\nvar dropdown_NAME = 'BDropdown';\nvar dropdown_props = {\n  toggleText: {\n    // This really should be toggleLabel\n    type: String,\n    default: function _default() {\n      return getComponentConfig(dropdown_NAME, 'toggleText');\n    }\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(dropdown_NAME, 'variant');\n    }\n  },\n  menuClass: {\n    type: [String, Array],\n    default: null\n  },\n  toggleTag: {\n    type: String,\n    default: 'button'\n  },\n  toggleClass: {\n    type: [String, Array],\n    default: null\n  },\n  noCaret: {\n    type: Boolean,\n    default: false\n  },\n  split: {\n    type: Boolean,\n    default: false\n  },\n  splitHref: {\n    type: String // default: undefined\n\n  },\n  splitTo: {\n    type: [String, Object] // default: undefined\n\n  },\n  splitVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(dropdown_NAME, 'splitVariant');\n    }\n  },\n  role: {\n    type: String,\n    default: 'menu'\n  },\n  boundary: {\n    // String: `scrollParent`, `window` or `viewport`\n    // HTMLElement: HTML Element reference\n    type: [String, HTMLElement],\n    default: 'scrollParent'\n  } // @vue/component\n\n};\nvar BDropdown =\n/*#__PURE__*/\nvue.extend({\n  name: dropdown_NAME,\n  mixins: [mixins_id, mixins_dropdown, mixins_normalize_slot],\n  props: dropdown_props,\n  computed: {\n    dropdownClasses: function dropdownClasses() {\n      return [this.directionClass, {\n        show: this.visible,\n        // Position `static` is needed to allow menu to \"breakout\" of the scrollParent boundaries\n        // when boundary is anything other than `scrollParent`\n        // See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786\n        'position-static': this.boundary !== 'scrollParent' || !this.boundary\n      }];\n    },\n    menuClasses: function menuClasses() {\n      return [this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n    toggleClasses: function toggleClasses() {\n      return [this.toggleClass, {\n        'dropdown-toggle-split': this.split,\n        'dropdown-toggle-no-caret': this.noCaret && !this.split\n      }];\n    }\n  },\n  render: function render(h) {\n    var split = h(false);\n    var buttonContent = this.normalizeSlot('button-content') || this.normalizeSlot('text') || this.html || stripTags(this.text);\n\n    if (this.split) {\n      var btnProps = {\n        disabled: this.disabled,\n        variant: this.splitVariant || this.variant,\n        size: this.size // We add these as needed due to router-link issues with defined property with undefined/null values\n\n      };\n\n      if (this.splitTo) {\n        btnProps.to = this.splitTo;\n      }\n\n      if (this.splitHref) {\n        btnProps.href = this.splitHref;\n      }\n\n      split = h(BButton, {\n        ref: 'button',\n        props: btnProps,\n        attrs: {\n          id: this.safeId('_BV_button_')\n        },\n        on: {\n          click: this.click\n        }\n      }, [buttonContent]);\n    }\n\n    var toggle = h(BButton, {\n      ref: 'toggle',\n      staticClass: 'dropdown-toggle',\n      class: this.toggleClasses,\n      props: {\n        variant: this.variant,\n        size: this.size,\n        disabled: this.disabled,\n        tag: this.toggleTag\n      },\n      attrs: {\n        id: this.safeId('_BV_toggle_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': this.visible ? 'true' : 'false'\n      },\n      on: {\n        click: this.toggle,\n        // click\n        keydown: this.toggle // enter, space, down\n\n      }\n    }, [this.split ? h('span', {\n      class: ['sr-only']\n    }, [this.toggleText]) : buttonContent]);\n    var menu = h('ul', {\n      ref: 'menu',\n      staticClass: 'dropdown-menu',\n      class: this.menuClasses,\n      attrs: {\n        role: this.role,\n        tabindex: '-1',\n        'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')\n      },\n      on: {\n        keydown: this.onKeydown // up, down, esc\n\n      }\n    }, !this.lazy || this.visible ? this.normalizeSlot('default', {\n      hide: this.hide\n    }) : [h(false)]);\n    return h('div', {\n      staticClass: 'dropdown btn-group b-dropdown',\n      class: this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [split, toggle, menu]);\n  }\n});\n/* harmony default export */ var dropdown_dropdown = (BDropdown);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-item.js\n\n\n\n\n\n\n\nfunction dropdown_item_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropdown_item_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_item_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_item_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar dropdown_item_props = propsFactory(); // @vue/component\n\nvar BDropdownItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownItem',\n  mixins: [mixins_normalize_slot],\n  inheritAttrs: false,\n  inject: {\n    bvDropdown: {\n      default: null\n    }\n  },\n  props: dropdown_item_objectSpread({}, dropdown_item_props, {\n    variant: {\n      type: String,\n      default: null\n    }\n  }),\n  methods: {\n    closeDropdown: function closeDropdown() {\n      var _this = this;\n\n      // Close on next animation frame to allow <b-link> time to process\n      requestAF(function () {\n        if (_this.bvDropdown) {\n          _this.bvDropdown.hide(true);\n        }\n      });\n    },\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n      this.closeDropdown();\n    }\n  },\n  render: function render(h) {\n    return h('li', [h(BLink, {\n      props: this.$props,\n      staticClass: 'dropdown-item',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"text-\".concat(this.variant), this.variant && !(this.active || this.disabled)),\n      attrs: dropdown_item_objectSpread({}, this.$attrs, {\n        role: 'menuitem'\n      }),\n      on: {\n        click: this.onClick\n      },\n      ref: 'item'\n    }, this.normalizeSlot('default'))]);\n  }\n});\n/* harmony default export */ var dropdown_item = (BDropdownItem);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-item-button.js\n\n\n\n\n\n\n\nfunction dropdown_item_button_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropdown_item_button_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_item_button_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_item_button_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\nvar dropdown_item_button_props = {\n  active: {\n    type: Boolean,\n    default: false\n  },\n  activeClass: {\n    type: String,\n    default: 'active'\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  variant: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BDropdownItemButton =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownItemButton',\n  mixins: [mixins_normalize_slot],\n  inheritAttrs: false,\n  inject: {\n    bvDropdown: {\n      default: null\n    }\n  },\n  props: dropdown_item_button_props,\n  methods: {\n    closeDropdown: function closeDropdown() {\n      if (this.bvDropdown) {\n        this.bvDropdown.hide(true);\n      }\n    },\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n      this.closeDropdown();\n    }\n  },\n  render: function render(h) {\n    var _class;\n\n    return h('li', [h('button', {\n      staticClass: 'dropdown-item',\n      class: (_class = {}, Object(defineProperty[\"a\" /* default */])(_class, this.activeClass, this.active), Object(defineProperty[\"a\" /* default */])(_class, \"text-\".concat(this.variant), this.variant && !(this.active || this.disabled)), _class),\n      attrs: dropdown_item_button_objectSpread({}, this.$attrs, {\n        role: 'menuitem',\n        type: 'button',\n        disabled: this.disabled\n      }),\n      on: {\n        click: this.onClick\n      },\n      ref: 'button'\n    }, this.normalizeSlot('default'))]);\n  }\n});\n/* harmony default export */ var dropdown_item_button = (BDropdownItemButton);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-header.js\n\n\n\nvar dropdown_header_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'header'\n  },\n  variant: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BDropdownHeader =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownHeader',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_header_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h('li', [h(props.tag, lib_esm_a(data, {\n      staticClass: 'dropdown-header',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"text-\".concat(props.variant), props.variant),\n      attrs: {\n        id: props.id || null,\n        role: 'heading'\n      },\n      ref: 'header'\n    }), children)]);\n  }\n});\n/* harmony default export */ var dropdown_header = (BDropdownHeader);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-divider.js\n\n\nvar dropdown_divider_props = {\n  tag: {\n    type: String,\n    default: 'hr'\n  } // @vue/component\n\n};\nvar BDropdownDivider =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownDivider',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_divider_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data;\n    return h('li', [h(props.tag, lib_esm_a(data, {\n      staticClass: 'dropdown-divider',\n      attrs: {\n        role: 'separator',\n        'aria-orientation': 'horizontal'\n      },\n      ref: 'divider'\n    }))]);\n  }\n});\n/* harmony default export */ var dropdown_divider = (BDropdownDivider);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/form.js\n\n\nvar form_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  inline: {\n    type: Boolean,\n    default: false\n  },\n  novalidate: {\n    type: Boolean,\n    default: false\n  },\n  validated: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BForm',\n  functional: true,\n  props: form_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h('form', lib_esm_a(data, {\n      class: {\n        'form-inline': props.inline,\n        'was-validated': props.validated\n      },\n      attrs: {\n        id: props.id,\n        novalidate: props.novalidate\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var form_form = (BForm);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-form.js\n\n\n\n\n\n\n\nfunction dropdown_form_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction dropdown_form_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_form_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_form_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\nvar BDropdownForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownForm',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_form_objectSpread({}, form_props, {\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h('li', [h(BForm, lib_esm_a(data, {\n      ref: 'form',\n      staticClass: 'b-dropdown-form',\n      class: {\n        disabled: props.disabled\n      },\n      props: props,\n      attrs: {\n        disabled: props.disabled,\n        // Tab index of -1 for keyboard navigation\n        tabindex: props.disabled ? null : '-1'\n      }\n    }), children)]);\n  }\n});\n/* harmony default export */ var dropdown_form = (BDropdownForm);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-text.js\n\n\n // @vue/component\n\nvar BDropdownText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownText',\n  functional: true,\n  inheritAttrs: false,\n  props: {\n    tag: {\n      type: String,\n      default: 'p'\n    },\n    variant: {\n      type: String,\n      default: null\n    }\n  },\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h('li', [h(props.tag, lib_esm_a(data, {\n      staticClass: 'b-dropdown-text',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"text-\".concat(props.variant), props.variant),\n      props: props,\n      ref: 'text'\n    }), children)]);\n  }\n});\n/* harmony default export */ var dropdown_text = (BDropdownText);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/dropdown-group.js\n\n\n\n\nvar dropdown_group_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  header: {\n    type: String,\n    default: null\n  },\n  headerTag: {\n    type: String,\n    default: 'header'\n  },\n  headerVariant: {\n    type: String,\n    default: null\n  },\n  headerClasses: {\n    type: [String, Array, Object],\n    default: null\n  },\n  ariaDescribedby: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BDropdownGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownGroup',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_group_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var header;\n    var headerId = null;\n\n    if (normalize_slot_hasNormalizedSlot('header', $scopedSlots, $slots) || props.header) {\n      headerId = props.id ? \"_bv_\".concat(props.id, \"_group_dd_header\") : null;\n      header = h(props.headerTag, {\n        staticClass: 'dropdown-header',\n        class: [props.headerClasses, Object(defineProperty[\"a\" /* default */])({}, \"text-\".concat(props.variant), props.variant)],\n        attrs: {\n          id: headerId,\n          role: 'heading'\n        }\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots) || props.header);\n    }\n\n    var adb = [headerId, props.ariaDescribedBy].filter(Boolean).join(' ').trim();\n    return h('li', [header || h(false), h('ul', lib_esm_a(data, {\n      staticClass: 'list-unstyled',\n      attrs: {\n        id: props.id || null,\n        'aria-describedby': adb || null\n      }\n    }), normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots))]);\n  }\n});\n/* harmony default export */ var dropdown_group = (BDropdownGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/dropdown/index.js\n\n\n\n\n\n\n\n\n\nvar DropdownPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BDropdown: BDropdown,\n    BDd: BDropdown,\n    BDropdownItem: BDropdownItem,\n    BDdItem: BDropdownItem,\n    BDropdownItemButton: BDropdownItemButton,\n    BDropdownItemBtn: BDropdownItemButton,\n    BDdItemButton: BDropdownItemButton,\n    BDdItemBtn: BDropdownItemButton,\n    BDropdownHeader: BDropdownHeader,\n    BDdHeader: BDropdownHeader,\n    BDropdownDivider: BDropdownDivider,\n    BDdDivider: BDropdownDivider,\n    BDropdownForm: BDropdownForm,\n    BDdForm: BDropdownForm,\n    BDropdownText: BDropdownText,\n    BDdText: BDropdownText,\n    BDropdownGroup: BDropdownGroup,\n    BDdGroup: BDropdownGroup\n  }\n});\n\n/* harmony default export */ var components_dropdown = (DropdownPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/embed/embed.js\n\n\n\n\nvar embed_props = {\n  type: {\n    type: String,\n    default: 'iframe',\n    validator: function validator(str) {\n      return arrayIncludes(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str);\n    }\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  aspect: {\n    type: String,\n    default: '16by9'\n  } // @vue/component\n\n};\nvar BEmbed =\n/*#__PURE__*/\nvue.extend({\n  name: 'BEmbed',\n  functional: true,\n  props: embed_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, {\n      ref: data.ref,\n      staticClass: 'embed-responsive',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"embed-responsive-\".concat(props.aspect), Boolean(props.aspect))\n    }, [h(props.type, lib_esm_a(data, {\n      ref: '',\n      staticClass: 'embed-responsive-item'\n    }), children)]);\n  }\n});\n/* harmony default export */ var embed_embed = (BEmbed);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/embed/index.js\n\n\nvar EmbedPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BEmbed: BEmbed\n  }\n});\n\n/* harmony default export */ var components_embed = (EmbedPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-options.js\n\n\n // @vue/component\n\n/* harmony default export */ var form_options = ({\n  props: {\n    options: {\n      type: [Array, Object],\n      default: function _default() {\n        return [];\n      }\n    },\n    valueField: {\n      type: String,\n      default: 'value'\n    },\n    textField: {\n      type: String,\n      default: 'text'\n    },\n    htmlField: {\n      type: String,\n      default: 'html'\n    },\n    disabledField: {\n      type: String,\n      default: 'disabled'\n    }\n  },\n  computed: {\n    formOptions: function formOptions() {\n      var options = this.options;\n      var valueField = this.valueField;\n      var textField = this.textField;\n      var htmlField = this.htmlField;\n      var disabledField = this.disabledField;\n\n      if (isArray(options)) {\n        // Normalize flat-ish arrays to Array of Objects\n        return options.map(function (option) {\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = String(option[textField]);\n            return {\n              value: isUndefined(value) ? text : value,\n              text: stripTags(text),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: option,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      } else {\n        // options is Object\n        // Normalize Objects to Array of Objects\n        return keys(options).map(function (key) {\n          var option = options[key] || {};\n\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = option[textField];\n            return {\n              value: isUndefined(value) ? key : value,\n              text: isUndefined(text) ? stripTags(String(key)) : stripTags(String(text)),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: key,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/form-datalist.js\n\n\n\n\n\n\n\nfunction form_datalist_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction form_datalist_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { form_datalist_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { form_datalist_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n // @vue/component\n\nvar BFormDatalist =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormDatalist',\n  mixins: [form_options, mixins_normalize_slot],\n  props: {\n    id: {\n      type: String,\n      default: null,\n      required: true\n    }\n  },\n  render: function render(h) {\n    var options = this.formOptions.map(function (option, index) {\n      return h('option', {\n        key: \"option_\".concat(index, \"_opt\"),\n        attrs: {\n          disabled: option.disabled\n        },\n        domProps: form_datalist_objectSpread({}, htmlOrText(option.html, option.text), {\n          value: option.value\n        })\n      });\n    });\n    return h('datalist', {\n      attrs: {\n        id: this.id\n      }\n    }, [options, this.normalizeSlot('default')]);\n  }\n});\n/* harmony default export */ var form_datalist = (BFormDatalist);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/form-text.js\n\n\n\n\nvar form_text_NAME = 'BFormText';\nvar form_text_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'small'\n  },\n  textVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(form_text_NAME, 'textVariant');\n    }\n  },\n  inline: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BFormText =\n/*#__PURE__*/\nvue.extend({\n  name: form_text_NAME,\n  functional: true,\n  props: form_text_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      class: Object(defineProperty[\"a\" /* default */])({\n        'form-text': !props.inline\n      }, \"text-\".concat(props.textVariant), Boolean(props.textVariant)),\n      attrs: {\n        id: props.id\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var form_text = (BFormText);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/form-invalid-feedback.js\n\n\nvar form_invalid_feedback_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  tooltip: {\n    type: Boolean,\n    default: false\n  },\n  forceShow: {\n    type: Boolean,\n    default: false\n  },\n  state: {\n    type: [Boolean, String],\n    default: null\n  },\n  ariaLive: {\n    type: String,\n    default: null\n  },\n  role: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BFormInvalidFeedback =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormInvalidFeedback',\n  functional: true,\n  props: form_invalid_feedback_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var show = props.forceShow === true || props.state === false || props.state === 'invalid';\n    return h(props.tag, lib_esm_a(data, {\n      class: {\n        'invalid-feedback': !props.tooltip,\n        'invalid-tooltip': props.tooltip,\n        'd-block': show\n      },\n      attrs: {\n        id: props.id,\n        role: props.role,\n        'aria-live': props.ariaLive,\n        'aria-atomic': props.ariaLive ? 'true' : null\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var form_invalid_feedback = (BFormInvalidFeedback);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/form-valid-feedback.js\n\n\nvar form_valid_feedback_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  tooltip: {\n    type: Boolean,\n    default: false\n  },\n  forceShow: {\n    type: Boolean,\n    default: false\n  },\n  state: {\n    type: [Boolean, String],\n    default: null\n  },\n  ariaLive: {\n    type: String,\n    default: null\n  },\n  role: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nvar BFormValidFeedback =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormValidFeedback',\n  functional: true,\n  props: form_valid_feedback_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var show = props.forceShow === true || props.state === true || props.state === 'valid';\n    return h(props.tag, lib_esm_a(data, {\n      class: {\n        'valid-feedback': !props.tooltip,\n        'valid-tooltip': props.tooltip,\n        'd-block': show\n      },\n      attrs: {\n        id: props.id,\n        role: props.role,\n        'aria-live': props.ariaLive,\n        'aria-atomic': props.ariaLive ? 'true' : null\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var form_valid_feedback = (BFormValidFeedback);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/layout/form-row.js\n\n\nvar form_row_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nvar BFormRow =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRow',\n  functional: true,\n  props: form_row_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'form-row'\n    }), children);\n  }\n});\n/* harmony default export */ var form_row = (BFormRow);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form/index.js\n\n\n\n\n\n\n\nvar FormPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BForm: BForm,\n    BFormDatalist: BFormDatalist,\n    BDatalist: BFormDatalist,\n    BFormText: BFormText,\n    BFormInvalidFeedback: BFormInvalidFeedback,\n    BFormFeedback: BFormInvalidFeedback,\n    BFormValidFeedback: BFormValidFeedback,\n    // Added here for convenience\n    BFormRow: BFormRow\n  }\n}); // BFormRow is not exported here as a named export, as it is exported by Layout\n\n\n/* harmony default export */ var components_form = (FormPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-state.js\n/* Form control contextual state class computation\n *\n * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\n * state can be one of five values:\n *  - true or 'valid' for is-valid\n *  - false or 'invalid' for is-invalid\n *  - null (or empty string) for no contextual state\n */\n// @vue/component\n/* harmony default export */ var form_state = ({\n  props: {\n    state: {\n      // true/'valid', false/'invalid', '',null\n      // The order must be String first, then Boolean!\n      type: [String, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    computedState: function computedState() {\n      var state = this.state;\n\n      if (state === '') {\n        return null;\n      } else if (state === true || state === 'valid') {\n        return true;\n      } else if (state === false || state === 'invalid') {\n        return false;\n      }\n\n      return null;\n    },\n    stateClass: function stateClass() {\n      var state = this.computedState;\n\n      if (state === true) {\n        return 'is-valid';\n      } else if (state === false) {\n        return 'is-invalid';\n      }\n\n      return null;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/suffix-prop-name.js\n\n/**\n * Suffix can be a falsey value so nothing is appended to string.\n * (helps when looping over props & some shouldn't change)\n * Use data last parameters to allow for currying.\n * @param {string} suffix\n * @param {string} str\n */\n\nvar suffix_prop_name_suffixPropName = function suffixPropName(suffix, str) {\n  return str + (suffix ? upper_first(suffix) : '');\n};\n\n/* harmony default export */ var suffix_prop_name = (suffix_prop_name_suffixPropName);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/layout/col.js\n\n\n\n\n\n\n\n\n\nfunction col_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction col_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { col_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { col_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n/**\n * Generates a prop object with a type of\n * [Boolean, String, Number]\n */\n\nfunction boolStrNum() {\n  return {\n    type: [Boolean, String, Number],\n    default: false\n  };\n}\n/**\n * Generates a prop object with a type of\n * [String, Number]\n */\n\n\nfunction strNum() {\n  return {\n    type: [String, Number],\n    default: null\n  };\n} // Memoized function for better performance on generating class names\n\n\nvar computeBkPtClass = utils_memoize(function computeBkPt(type, breakpoint, val) {\n  var className = type;\n\n  if (isUndefined(val) || isNull(val) || val === false) {\n    return undefined;\n  }\n\n  if (breakpoint) {\n    className += \"-\".concat(breakpoint);\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <b-col sm></b-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += \"-\".concat(val);\n  return className.toLowerCase();\n}); // Cached copy of the breakpoint prop names\n\nvar breakpointPropMap = create(null); // Lazy evaled props factory for BCol\n\nvar col_generateProps = function generateProps() {\n  // Grab the breakpoints from the cached config (exclude the '' (xs) breakpoint)\n  var breakpoints = getBreakpointsUpCached().filter(Boolean); // Supports classes like: .col-sm, .col-md-6, .col-lg-auto\n\n  var breakpointCol = breakpoints.reduce(function (propMap, breakpoint) {\n    if (breakpoint) {\n      // We filter out the '' breakpoint (xs), as making a prop name ''\n      // would not work. The `cols` prop is used for `xs`\n      propMap[breakpoint] = boolStrNum();\n    }\n\n    return propMap;\n  }, create(null)); // Supports classes like: .offset-md-1, .offset-lg-12\n\n  var breakpointOffset = breakpoints.reduce(function (propMap, breakpoint) {\n    propMap[suffix_prop_name(breakpoint, 'offset')] = strNum();\n    return propMap;\n  }, create(null)); // Supports classes like: .order-md-1, .order-lg-12\n\n  var breakpointOrder = breakpoints.reduce(function (propMap, breakpoint) {\n    propMap[suffix_prop_name(breakpoint, 'order')] = strNum();\n    return propMap;\n  }, create(null)); // For loop doesn't need to check hasOwnProperty\n  // when using an object created from null\n\n  breakpointPropMap = object_assign(create(null), {\n    col: keys(breakpointCol),\n    offset: keys(breakpointOffset),\n    order: keys(breakpointOrder)\n  }); // Return the generated props\n\n  return col_objectSpread({\n    // Generic flexbox .col (xs)\n    col: {\n      type: Boolean,\n      default: false\n    },\n    // .col-[1-12]|auto  (xs)\n    cols: strNum()\n  }, breakpointCol, {\n    offset: strNum()\n  }, breakpointOffset, {\n    order: strNum()\n  }, breakpointOrder, {\n    // Flex alignment\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: function validator(str) {\n        return arrayIncludes(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str);\n      }\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  });\n}; // We do not use Vue.extend here as that would evaluate the props\n// immediately, which we do not want to happen\n// @vue/component\n\n\nvar BCol = {\n  name: 'BCol',\n  functional: true,\n\n  get props() {\n    // Allow props to be lazy evaled on first access and\n    // then they become a non-getter afterwards.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n    delete this.props; // eslint-disable-next-line no-return-assign\n\n    return this.props = col_generateProps();\n  },\n\n  render: function render(h, _ref) {\n    var _classList$push;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n    for (var type in breakpointPropMap) {\n      // Returns colSm, offset, offsetSm, orderMd, etc.\n      var _keys = breakpointPropMap[type];\n\n      for (var i = 0; i < _keys.length; i++) {\n        // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])\n        var c = computeBkPtClass(type, _keys[i].replace(type, ''), props[_keys[i]]); // If a class is returned, push it onto the array.\n\n        if (c) {\n          classList.push(c);\n        }\n      }\n    }\n\n    var hasColClasses = classList.some(function (className) {\n      return /^col-/.test(className);\n    });\n    classList.push((_classList$push = {\n      // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n      col: props.col || !hasColClasses && !props.cols\n    }, Object(defineProperty[\"a\" /* default */])(_classList$push, \"col-\".concat(props.cols), props.cols), Object(defineProperty[\"a\" /* default */])(_classList$push, \"offset-\".concat(props.offset), props.offset), Object(defineProperty[\"a\" /* default */])(_classList$push, \"order-\".concat(props.order), props.order), Object(defineProperty[\"a\" /* default */])(_classList$push, \"align-self-\".concat(props.alignSelf), props.alignSelf), _classList$push));\n    return h(props.tag, lib_esm_a(data, {\n      class: classList\n    }), children);\n  }\n};\n/* harmony default export */ var col = (BCol);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-group/form-group.js\n\n\n\n\n\n\n\n\n\nfunction form_group_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction form_group_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { form_group_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { form_group_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Utils\n\n\n\n\n\n\n\n\n // Mixins\n\n\n\n // Sub components\n\n\n\n\n\n // Component name\n\nvar form_group_NAME = 'BFormGroup'; // Selector for finding first input in the form-group\n\nvar SELECTOR = 'input:not([disabled]),textarea:not([disabled]),select:not([disabled])';\nvar DEPRECATED_MSG = 'Props \"horizontal\" and \"breakpoint\" are deprecated. Use \"label-cols(-{breakpoint})\" props instead.'; // Render helper functions (here rather than polluting the instance with more methods)\n\nvar form_group_renderInvalidFeedback = function renderInvalidFeedback(h, ctx) {\n  var content = ctx.normalizeSlot('invalid-feedback') || ctx.invalidFeedback;\n  var invalidFeedback = h(false);\n\n  if (content) {\n    invalidFeedback = h(BFormInvalidFeedback, {\n      props: {\n        id: ctx.invalidFeedbackId,\n        // If state is explicitly false, always show the feedback\n        state: ctx.computedState,\n        tooltip: ctx.tooltip,\n        ariaLive: ctx.feedbackAriaLive,\n        role: ctx.feedbackAriaLive ? 'alert' : null\n      },\n      attrs: {\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return invalidFeedback;\n};\n\nvar form_group_renderValidFeedback = function renderValidFeedback(h, ctx) {\n  var content = ctx.normalizeSlot('valid-feedback') || ctx.validFeedback;\n  var validFeedback = h(false);\n\n  if (content) {\n    validFeedback = h(BFormValidFeedback, {\n      props: {\n        id: ctx.validFeedbackId,\n        // If state is explicitly true, always show the feedback\n        state: ctx.computedState,\n        tooltip: ctx.tooltip,\n        ariaLive: ctx.feedbackAriaLive,\n        role: ctx.feedbackAriaLive ? 'alert' : null\n      },\n      attrs: {\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return validFeedback;\n};\n\nvar form_group_renderHelpText = function renderHelpText(h, ctx) {\n  // Form help text (description)\n  var content = ctx.normalizeSlot('description') || ctx.description;\n  var description = h(false);\n\n  if (content) {\n    description = h(BFormText, {\n      attrs: {\n        id: ctx.descriptionId,\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return description;\n};\n\nvar form_group_renderLabel = function renderLabel(h, ctx) {\n  // Render label/legend inside b-col if necessary\n  var content = ctx.normalizeSlot('label') || ctx.label;\n  var labelFor = ctx.labelFor;\n  var isLegend = !labelFor;\n  var isHorizontal = ctx.isHorizontal;\n  var labelTag = isLegend ? 'legend' : 'label';\n\n  if (!content && !isHorizontal) {\n    return h(false);\n  } else if (ctx.labelSrOnly) {\n    var label = h(false);\n\n    if (content) {\n      label = h(labelTag, {\n        class: 'sr-only',\n        attrs: {\n          id: ctx.labelId,\n          for: labelFor || null\n        }\n      }, [content]);\n    }\n\n    return h(isHorizontal ? BCol : 'div', {\n      props: isHorizontal ? ctx.labelColProps : {}\n    }, [label]);\n  } else {\n    return h(isHorizontal ? BCol : labelTag, {\n      on: isLegend ? {\n        click: ctx.legendClick\n      } : {},\n      props: isHorizontal ? form_group_objectSpread({\n        tag: labelTag\n      }, ctx.labelColProps) : {},\n      attrs: {\n        id: ctx.labelId,\n        for: labelFor || null,\n        // We add a tab index to legend so that screen readers\n        // will properly read the aria-labelledby in IE.\n        tabindex: isLegend ? '-1' : null\n      },\n      class: [// When horizontal or if a legend is rendered, add col-form-label\n      // for correct sizing as Bootstrap has inconsistent font styling\n      // for legend in non-horizontal form-groups.\n      // See: https://github.com/twbs/bootstrap/issues/27805\n      isHorizontal || isLegend ? 'col-form-label' : '', // Emulate label padding top of 0 on legend when not horizontal\n      !isHorizontal && isLegend ? 'pt-0' : '', // If not horizontal and not a legend, we add d-block to label\n      // so that label-align works\n      !isHorizontal && !isLegend ? 'd-block' : '', ctx.labelSize ? \"col-form-label-\".concat(ctx.labelSize) : '', ctx.labelAlignClasses, ctx.labelClass]\n    }, [content]);\n  }\n}; // -- BFormGroup Prop factory -- used for lazy generation of props\n// Memoize this function to return cached values to\n// save time in computed functions\n\n\nvar makePropName = utils_memoize(function () {\n  var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var prefix = arguments.length > 1 ? arguments[1] : undefined;\n  return \"\".concat(prefix).concat(upper_first(breakpoint));\n}); // BFormGroup prop generator for lazy generation of props\n\nvar form_group_generateProps = function generateProps() {\n  var BREAKPOINTS = getBreakpointsUpCached(); // Generate the labelCol breakpoint props\n\n  var bpLabelColProps = BREAKPOINTS.reduce(function (props, breakpoint) {\n    // i.e. label-cols, label-cols-sm, label-cols-md, ...\n    props[makePropName(breakpoint, 'labelCols')] = {\n      type: [Number, String, Boolean],\n      default: breakpoint ? false : null\n    };\n    return props;\n  }, create(null)); // Generate the labelAlign breakpoint props\n\n  var bpLabelAlignProps = BREAKPOINTS.reduce(function (props, breakpoint) {\n    // label-align, label-align-sm, label-align-md, ...\n    props[makePropName(breakpoint, 'labelAlign')] = {\n      type: String,\n      // left, right, center\n      default: null\n    };\n    return props;\n  }, create(null));\n  return form_group_objectSpread({\n    label: {\n      type: String,\n      default: null\n    },\n    labelFor: {\n      type: String,\n      default: null\n    },\n    labelSize: {\n      type: String,\n      default: null\n    },\n    labelSrOnly: {\n      type: Boolean,\n      default: false\n    }\n  }, bpLabelColProps, {}, bpLabelAlignProps, {\n    labelClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    description: {\n      type: String,\n      default: null\n    },\n    invalidFeedback: {\n      type: String,\n      default: null\n    },\n    validFeedback: {\n      type: String,\n      default: null\n    },\n    tooltip: {\n      // Enable tooltip style feedback\n      type: Boolean,\n      default: false\n    },\n    feedbackAriaLive: {\n      type: String,\n      default: 'assertive'\n    },\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    horizontal: {\n      // Deprecated\n      type: Boolean,\n      default: false,\n      deprecated: DEPRECATED_MSG\n    },\n    breakpoint: {\n      // Deprecated (ignored if horizontal is not true)\n      type: String,\n      default: null,\n      // legacy value 'sm',\n      deprecated: DEPRECATED_MSG\n    }\n  });\n}; // We do not use Vue.extend here as that would evaluate the props\n// immediately, which we do not want to happen\n// @vue/component\n\n\nvar BFormGroup = {\n  name: form_group_NAME,\n  mixins: [mixins_id, form_state, mixins_normalize_slot],\n\n  get props() {\n    // Allow props to be lazy evaled on first access and\n    // then they become a non-getter afterwards.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n    delete this.props; // eslint-disable-next-line no-return-assign\n\n    return this.props = form_group_generateProps();\n  },\n\n  computed: {\n    labelColProps: function labelColProps() {\n      var _this = this;\n\n      var props = {};\n      /* istanbul ignore next: deprecated */\n\n      if (this.horizontal) {\n        // Deprecated setting of horizontal/breakpoint props\n\n        /* istanbul ignore next */\n        utils_warn(\"b-form-group: \".concat(DEPRECATED_MSG)); // Legacy default is breakpoint sm and cols 3\n\n        var bp = this.breakpoint || getBreakpointsUpCached()[1]; // 'sm'\n\n        var cols = parseInt(this.labelCols, 10) || 3;\n        props[bp] = cols > 0 ? cols : 3; // We then return the single breakpoint prop for legacy compatibility\n\n        return props;\n      }\n\n      getBreakpointsUpCached().forEach(function (breakpoint) {\n        // Grab the value if the label column breakpoint prop\n        var propVal = _this[makePropName(breakpoint, 'labelCols')]; // Handle case where the prop's value is an empty string,\n        // which represents true\n\n\n        propVal = propVal === '' ? true : propVal || false;\n\n        if (!isBoolean(propVal)) {\n          // Convert to column size to number\n          propVal = parseInt(propVal, 10) || 0; // Ensure column size is greater than 0\n\n          propVal = propVal > 0 ? propVal : false;\n        }\n\n        if (propVal) {\n          // Add the prop to the list of props to give to b-col\n          // If breakpoint is '' (labelCols=true), then we use the\n          // col prop to make equal width at xs\n          var bColPropName = breakpoint || (isBoolean(propVal) ? 'col' : 'cols'); // Add it to the props\n\n          props[bColPropName] = propVal;\n        }\n      });\n      return props;\n    },\n    labelAlignClasses: function labelAlignClasses() {\n      var _this2 = this;\n\n      var classes = [];\n      getBreakpointsUpCached().forEach(function (breakpoint) {\n        // Assemble the label column breakpoint align classes\n        var propVal = _this2[makePropName(breakpoint, 'labelAlign')] || null;\n\n        if (propVal) {\n          var className = breakpoint ? \"text-\".concat(breakpoint, \"-\").concat(propVal) : \"text-\".concat(propVal);\n          classes.push(className);\n        }\n      });\n      return classes;\n    },\n    isHorizontal: function isHorizontal() {\n      // Determine if the resultant form-group will be rendered\n      // horizontal (meaning it has label-col breakpoints)\n      return keys(this.labelColProps).length > 0;\n    },\n    labelId: function labelId() {\n      return this.$slots['label'] || this.label ? this.safeId('_BV_label_') : null;\n    },\n    descriptionId: function descriptionId() {\n      return this.$slots['description'] || this.description ? this.safeId('_BV_description_') : null;\n    },\n    hasInvalidFeedback: function hasInvalidFeedback() {\n      // Used for computing aria-describedby\n      var $slots = this.$slots;\n      return this.computedState === false && ($slots['invalid-feedback'] || this.invalidFeedback);\n    },\n    invalidFeedbackId: function invalidFeedbackId() {\n      return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;\n    },\n    hasValidFeedback: function hasValidFeedback() {\n      // Used for computing aria-describedby\n      return this.computedState === true && (this.$slots['valid-feedback'] || this.validFeedback);\n    },\n    validFeedbackId: function validFeedbackId() {\n      return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;\n    },\n    describedByIds: function describedByIds() {\n      // Screen readers will read out any content linked to by aria-describedby\n      // even if the content is hidden with `display: none;`, hence we only include\n      // feedback IDs if the form-group's state is explicitly valid or invalid.\n      return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(Boolean).join(' ') || null;\n    }\n  },\n  watch: {\n    describedByIds: function describedByIds(add, remove) {\n      if (add !== remove) {\n        this.setInputDescribedBy(add, remove);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      // Set the aria-describedby IDs on the input specified by label-for\n      // We do this in a nextTick to ensure the children have finished rendering\n      _this3.setInputDescribedBy(_this3.describedByIds);\n    });\n  },\n  methods: {\n    legendClick: function legendClick(evt) {\n      if (this.labelFor) {\n        // Don't do anything if labelFor is set\n\n        /* istanbul ignore next: clicking a label will focus the input, so no need to test */\n        return;\n      }\n\n      var tagName = evt.target ? evt.target.tagName : '';\n\n      if (/^(input|select|textarea|label|button|a)$/i.test(tagName)) {\n        // If clicked an interactive element inside legend,\n        // we just let the default happen\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      var inputs = dom_selectAll(SELECTOR, this.$refs.content).filter(isVisible);\n\n      if (inputs && inputs.length === 1 && inputs[0].focus) {\n        // if only a single input, focus it, emulating label behaviour\n        inputs[0].focus();\n      }\n    },\n    setInputDescribedBy: function setInputDescribedBy(add, remove) {\n      // Sets the `aria-describedby` attribute on the input if label-for is set.\n      // Optionally accepts a string of IDs to remove as the second parameter.\n      // Preserves any aria-describedby value(s) user may have on input.\n      if (this.labelFor && env[\"j\" /* isBrowser */]) {\n        var input = dom_select(\"#\".concat(this.labelFor), this.$refs.content);\n\n        if (input) {\n          var adb = 'aria-describedby';\n          var ids = (getAttr(input, adb) || '').split(/\\s+/);\n          add = (add || '').split(/\\s+/);\n          remove = (remove || '').split(/\\s+/); // Update ID list, preserving any original IDs\n          // and ensuring the ID's are unique\n\n          ids = ids.filter(function (id) {\n            return !arrayIncludes(remove, id);\n          }).concat(add).filter(Boolean);\n          ids = keys(ids.reduce(function (memo, id) {\n            return form_group_objectSpread({}, memo, Object(defineProperty[\"a\" /* default */])({}, id, true));\n          }, {})).join(' ').trim();\n\n          if (ids) {\n            setAttr(input, adb, ids);\n          } else {\n            // No IDs, so remove the attribute\n            removeAttr(input, adb);\n          }\n        }\n      }\n    }\n  },\n  render: function render(h) {\n    var isFieldset = !this.labelFor;\n    var isHorizontal = this.isHorizontal; // Generate the label\n\n    var label = form_group_renderLabel(h, this); // Generate the content\n\n    var content = h(isHorizontal ? BCol : 'div', {\n      ref: 'content',\n      attrs: {\n        tabindex: isFieldset ? '-1' : null,\n        role: isFieldset ? 'group' : null\n      }\n    }, [this.normalizeSlot('default') || h(false), form_group_renderInvalidFeedback(h, this), form_group_renderValidFeedback(h, this), form_group_renderHelpText(h, this)]); // Create the form-group\n\n    var data = {\n      staticClass: 'form-group',\n      class: [this.validated ? 'was-validated' : null, this.stateClass],\n      attrs: {\n        id: this.safeId(),\n        disabled: isFieldset ? this.disabled : null,\n        role: isFieldset ? null : 'group',\n        'aria-invalid': this.computedState === false ? 'true' : null,\n        // Only apply aria-labelledby if we are a horizontal fieldset\n        // as the legend is no longer a direct child of fieldset\n        'aria-labelledby': isFieldset && isHorizontal ? this.labelId : null,\n        // Only apply aria-describedby IDs if we are a fieldset\n        // as the input will have the IDs when not a fieldset\n        'aria-describedby': isFieldset ? this.describedByIds : null\n      } // Return it wrapped in a form-group\n      // Note: Fieldsets do not support adding `row` or `form-row` directly\n      // to them due to browser specific render issues, so we move the `form-row`\n      // to an inner wrapper div when horizontal and using a fieldset\n\n    };\n    return h(isFieldset ? 'fieldset' : isHorizontal ? BFormRow : 'div', data, isHorizontal && isFieldset ? [h(BFormRow, {}, [label, content])] : [label, content]);\n  }\n};\n/* harmony default export */ var form_group = (BFormGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-group/index.js\n\n\nvar FormGroupPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormGroup: BFormGroup,\n    BFormFieldset: BFormGroup\n  }\n});\n\n/* harmony default export */ var components_form_group = (FormGroupPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/loose-index-of.js\n\n\nvar loose_index_of_looseIndexOf = function looseIndexOf(arr, val) {\n  // Assumes that the first argument is an array\n  for (var i = 0; i < arr.length; i++) {\n    if (loose_equal(arr[i], val)) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/* harmony default export */ var loose_index_of = (loose_index_of_looseIndexOf);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form.js\n\nvar form_SELECTOR = 'input, textarea, select'; // @vue/component\n\n/* harmony default export */ var mixins_form = ({\n  props: {\n    name: {\n      type: String // default: undefined\n\n    },\n    id: {\n      type: String // default: undefined\n\n    },\n    disabled: {\n      type: Boolean\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    form: {\n      type: String,\n      default: null\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    this.handleAutofocus();\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    this.handleAutofocus();\n  },\n  methods: {\n    handleAutofocus: function handleAutofocus() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        requestAF(function () {\n          var el = _this.$el;\n\n          if (_this.autofocus && isVisible(el)) {\n            if (!matches(el, form_SELECTOR)) {\n              el = dom_select(form_SELECTOR, el);\n            }\n\n            el && el.focus && el.focus();\n          }\n        });\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-radio-check.js\n\n\n // @vue/component\n\n/* harmony default export */ var form_radio_check = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    value: {// Value when checked\n      // type: Object,\n      // default: undefined\n    },\n    checked: {// This is the v-model\n      // type: Object,\n      // default: undefined\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    button: {\n      // Only applicable in standalone mode (non group)\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: null\n    },\n    ariaLabel: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    },\n    ariaLabelledby: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      localChecked: this.isGroup ? this.bvGroup.checked : this.checked,\n      hasFocus: false\n    };\n  },\n  computed: {\n    computedLocalChecked: {\n      get: function get() {\n        return this.isGroup ? this.bvGroup.localChecked : this.localChecked;\n      },\n      set: function set(val) {\n        if (this.isGroup) {\n          this.bvGroup.localChecked = val;\n        } else {\n          this.localChecked = val;\n        }\n      }\n    },\n    isGroup: function isGroup() {\n      // Is this check/radio a child of check-group or radio-group?\n      return Boolean(this.bvGroup);\n    },\n    isBtnMode: function isBtnMode() {\n      // Support button style in single input mode\n      return this.isGroup ? this.bvGroup.buttons : this.button;\n    },\n    isPlain: function isPlain() {\n      return this.isBtnMode ? false : this.isGroup ? this.bvGroup.plain : this.plain;\n    },\n    isCustom: function isCustom() {\n      return this.isBtnMode ? false : !this.isPlain;\n    },\n    isSwitch: function isSwitch() {\n      // Custom switch styling (checkboxes only)\n      return this.isBtnMode || this.isRadio || this.isPlain ? false : this.isGroup ? this.bvGroup.switches : this.switch;\n    },\n    isInline: function isInline() {\n      return this.isGroup ? this.bvGroup.inline : this.inline;\n    },\n    isDisabled: function isDisabled() {\n      // Child can be disabled while parent isn't, but is always disabled if group is\n      return this.isGroup ? this.bvGroup.disabled || this.disabled : this.disabled;\n    },\n    isRequired: function isRequired() {\n      // Required only works when a name is provided for the input(s)\n      // Child can only be required when parent is\n      // Groups will always have a name (either user supplied or auto generated)\n      return Boolean(this.getName && (this.isGroup ? this.bvGroup.required : this.required));\n    },\n    getName: function getName() {\n      // Group name preferred over local name\n      return (this.isGroup ? this.bvGroup.groupName : this.name) || null;\n    },\n    getForm: function getForm() {\n      return (this.isGroup ? this.bvGroup.form : this.form) || null;\n    },\n    getSize: function getSize() {\n      return (this.isGroup ? this.bvGroup.size : this.size) || '';\n    },\n    getState: function getState() {\n      return this.isGroup ? this.bvGroup.computedState : this.computedState;\n    },\n    getButtonVariant: function getButtonVariant() {\n      // Local variant preferred over group variant\n      if (this.buttonVariant) {\n        return this.buttonVariant;\n      } else if (this.isGroup && this.bvGroup.buttonVariant) {\n        return this.bvGroup.buttonVariant;\n      } // default variant\n\n\n      return 'secondary';\n    },\n    buttonClasses: function buttonClasses() {\n      // Same for radio & check\n      return ['btn', \"btn-\".concat(this.getButtonVariant), this.getSize ? \"btn-\".concat(this.getSize) : '', // 'disabled' class makes \"button\" look disabled\n      this.isDisabled ? 'disabled' : '', // 'active' class makes \"button\" look pressed\n      this.isChecked ? 'active' : '', // Focus class makes button look focused\n      this.hasFocus ? 'focus' : ''];\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.computedLocalChecked = newVal;\n    }\n  },\n  methods: {\n    handleFocus: function handleFocus(evt) {\n      // When in buttons mode, we need to add 'focus' class to label when input focused\n      // As it is the hidden input which has actual focus\n      if (evt.target) {\n        if (evt.type === 'focus') {\n          this.hasFocus = true;\n        } else if (evt.type === 'blur') {\n          this.hasFocus = false;\n        }\n      }\n    },\n    // Convenience methods for focusing the input\n    focus: function focus() {\n      if (!this.isDisabled && this.$refs.input && this.$refs.input.focus) {\n        this.$refs.input.focus();\n      }\n    },\n    blur: function blur() {\n      if (!this.isDisabled && this.$refs.input && this.$refs.input.blur) {\n        this.$refs.input.blur();\n      }\n    }\n  },\n  render: function render(h) {\n    var defaultSlot = this.normalizeSlot('default'); // Generate the input element\n\n    var on = {\n      change: this.handleChange\n    };\n\n    if (this.isBtnMode) {\n      // Handlers for focus styling when in button mode\n      on.focus = on.blur = this.handleFocus;\n    }\n\n    var input = h('input', {\n      ref: 'input',\n      key: 'input',\n      on: on,\n      class: {\n        'form-check-input': this.isPlain,\n        'custom-control-input': this.isCustom,\n        'is-valid': this.getState === true && !this.isBtnMode,\n        'is-invalid': this.getState === false && !this.isBtnMode,\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n        'position-static': this.isPlain && !defaultSlot\n      },\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: this.computedLocalChecked,\n        expression: 'computedLocalChecked'\n      }],\n      attrs: {\n        id: this.safeId(),\n        type: this.isRadio ? 'radio' : 'checkbox',\n        name: this.getName,\n        form: this.getForm,\n        disabled: this.isDisabled,\n        required: this.isRequired,\n        autocomplete: 'off',\n        'aria-required': this.isRequired || null,\n        'aria-label': this.ariaLabel || null,\n        'aria-labelledby': this.ariaLabelledby || null\n      },\n      domProps: {\n        value: this.value,\n        checked: this.isChecked\n      }\n    });\n\n    if (this.isBtnMode) {\n      // Button mode\n      var button = h('label', {\n        class: this.buttonClasses\n      }, [input, defaultSlot]);\n\n      if (!this.isGroup) {\n        // Standalone button mode, so wrap in 'btn-group-toggle'\n        // and flag it as inline-block to mimic regular buttons\n        button = h('div', {\n          class: ['btn-group-toggle', 'd-inline-block']\n        }, [button]);\n      }\n\n      return button;\n    } else {\n      // Not button mode\n      var label = h(false); // If no label content in plain mode we dont render the label\n      // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n\n      if (!(this.isPlain && !defaultSlot)) {\n        label = h('label', {\n          class: {\n            'form-check-label': this.isPlain,\n            'custom-control-label': this.isCustom\n          },\n          attrs: {\n            for: this.safeId()\n          }\n        }, defaultSlot);\n      } // Wrap it in a div\n\n\n      return h('div', {\n        class: Object(defineProperty[\"a\" /* default */])({\n          'form-check': this.isPlain,\n          'form-check-inline': this.isPlain && this.isInline,\n          'custom-control': this.isCustom,\n          'custom-control-inline': this.isCustom && this.isInline,\n          'custom-checkbox': this.isCustom && this.isCheck && !this.isSwitch,\n          'custom-switch': this.isSwitch,\n          'custom-radio': this.isCustom && this.isRadio\n        }, \"form-control-\".concat(this.getSize), Boolean(this.getSize && !this.isBtnMode))\n      }, [input, label]);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-size.js\n// @vue/component\n/* harmony default export */ var form_size = ({\n  props: {\n    size: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    sizeFormClass: function sizeFormClass() {\n      return [this.size ? \"form-control-\".concat(this.size) : null];\n    },\n    sizeBtnClass: function sizeBtnClass()\n    /* istanbul ignore next: don't think this is used */\n    {\n      return [this.size ? \"btn-\".concat(this.size) : null];\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-checkbox/form-checkbox.js\n\n\n\n\n\n\n\n\n\n // @vue/component\n\nvar BFormCheckbox =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormCheckbox',\n  mixins: [form_radio_check, // Includes shared render function\n  mixins_id, mixins_form, form_size, form_state],\n  inject: {\n    bvGroup: {\n      from: 'bvCheckGroup',\n      default: false\n    }\n  },\n  props: {\n    value: {\n      // type: [Object, Boolean],\n      default: true\n    },\n    uncheckedValue: {\n      // type: [Object, Boolean],\n      // Not applicable in multi-check mode\n      default: false\n    },\n    indeterminate: {\n      // Not applicable in multi-check mode\n      type: Boolean,\n      default: false\n    },\n    switch: {\n      // Custom switch styling\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      // v-model\n      type: [String, Number, Object, Array, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    isChecked: function isChecked() {\n      var checked = this.computedLocalChecked;\n      var value = this.value;\n\n      if (isArray(checked)) {\n        return loose_index_of(checked, value) > -1;\n      } else {\n        return loose_equal(checked, value);\n      }\n    },\n    isRadio: function isRadio() {\n      return false;\n    },\n    isCheck: function isCheck() {\n      return true;\n    }\n  },\n  watch: {\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n\n      if (this.$refs && this.$refs.input) {\n        this.$emit('update:indeterminate', this.$refs.input.indeterminate);\n      }\n    },\n    indeterminate: function indeterminate(newVal, oldVal) {\n      this.setIndeterminate(newVal);\n    }\n  },\n  mounted: function mounted() {\n    // Set initial indeterminate state\n    this.setIndeterminate(this.indeterminate);\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var _ref$target = _ref.target,\n          checked = _ref$target.checked,\n          indeterminate = _ref$target.indeterminate;\n      var localChecked = this.computedLocalChecked;\n      var value = this.value;\n      var isArr = isArray(localChecked);\n      var uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked\n\n      if (isArr) {\n        var idx = loose_index_of(localChecked, value);\n\n        if (checked && idx < 0) {\n          // Add value to array\n          localChecked = localChecked.concat(value);\n        } else if (!checked && idx > -1) {\n          // Remove value from array\n          localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));\n        }\n      } else {\n        localChecked = checked ? value : uncheckedValue;\n      }\n\n      this.computedLocalChecked = localChecked; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', localChecked);\n      }\n\n      this.$emit('update:indeterminate', indeterminate);\n    },\n    setIndeterminate: function setIndeterminate(state) {\n      // Indeterminate only supported in single checkbox mode\n      if (isArray(this.computedLocalChecked)) {\n        state = false;\n      }\n\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.indeterminate = state; // Emit update event to prop\n\n        this.$emit('update:indeterminate', state);\n      }\n    }\n  }\n});\n/* harmony default export */ var form_checkbox = (BFormCheckbox);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-radio/form-radio.js\n\n\n\n\n\n\n\n // @vue/component\n\nvar BFormRadio =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRadio',\n  mixins: [mixins_id, form_radio_check, // Includes shared render function\n  mixins_form, form_size, form_state],\n  inject: {\n    bvGroup: {\n      from: 'bvRadioGroup',\n      default: false\n    }\n  },\n  props: {\n    checked: {\n      // v-model\n      type: [String, Object, Number, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    // Radio Groups can only have a single value, so determining if checked is simple\n    isChecked: function isChecked() {\n      return loose_equal(this.value, this.computedLocalChecked);\n    },\n    // Flags for form-radio-check mixin\n    isRadio: function isRadio() {\n      return true;\n    },\n    isCheck: function isCheck() {\n      return false;\n    }\n  },\n  watch: {\n    // Radio Groups can only have a single value, so our watchers are simple\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', this.computedLocalChecked);\n    }\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var checked = _ref.target.checked;\n      var value = this.value;\n      this.computedLocalChecked = value; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', checked ? value : null);\n      }\n    }\n  }\n});\n/* harmony default export */ var form_radio = (BFormRadio);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-radio-check-group.js\n\n\n\n\n // @vue/component\n\n/* harmony default export */ var form_radio_check_group = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    buttons: {\n      // Render as button style\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: 'secondary'\n    }\n  },\n  computed: {\n    inline: function inline() {\n      return !this.stacked;\n    },\n    groupName: function groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility.\n      return this.name || this.safeId();\n    },\n    groupClasses: function groupClasses() {\n      if (this.buttons) {\n        return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n      }\n\n      return [this.validated ? \"was-validated\" : ''];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      var ariaInvalid = this.ariaInvalid;\n\n      if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n        return 'true';\n      }\n\n      return this.computedState === false ? 'true' : null;\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.localChecked = newVal;\n    },\n    localChecked: function localChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var inputs = this.formOptions.map(function (option, idx) {\n      var uid = \"_BV_option_\".concat(idx, \"_\");\n      return h(_this.isRadioGroup ? BFormRadio : BFormCheckbox, {\n        key: uid,\n        props: {\n          id: _this.safeId(uid),\n          value: option.value,\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n          // name: this.groupName,\n          // form: this.form || null,\n          // required: Boolean(this.name && this.required)\n\n        }\n      }, [h('span', {\n        domProps: htmlOrText(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: this.groupClasses,\n      attrs: {\n        id: this.safeId(),\n        role: this.isRadioGroup ? 'radiogroup' : 'group',\n        // Tabindex to allow group to be focused if needed\n        tabindex: '-1',\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      }\n    }, [this.normalizeSlot('first'), inputs, this.normalizeSlot('default')]);\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-checkbox/form-checkbox-group.js\n\n\n\n\n\n\n\n\nvar form_checkbox_group_props = {\n  switches: {\n    // Custom switch styling\n    type: Boolean,\n    default: false\n  },\n  checked: {\n    type: [String, Number, Object, Array, Boolean],\n    default: null\n  } // @vue/component\n\n};\nvar BFormCheckboxGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormCheckboxGroup',\n  mixins: [mixins_id, mixins_form, form_radio_check_group, // Includes render function\n  form_options, form_size, form_state],\n  provide: function provide() {\n    return {\n      bvCheckGroup: this\n    };\n  },\n  props: form_checkbox_group_props,\n  data: function data() {\n    return {\n      localChecked: this.checked || []\n    };\n  },\n  computed: {\n    isRadioGroup: function isRadioGroup() {\n      return false;\n    }\n  }\n});\n/* harmony default export */ var form_checkbox_group = (BFormCheckboxGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-checkbox/index.js\n\n\n\nvar FormCheckboxPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormCheckbox: BFormCheckbox,\n    BCheckbox: BFormCheckbox,\n    BCheck: BFormCheckbox,\n    BFormCheckboxGroup: BFormCheckboxGroup,\n    BCheckboxGroup: BFormCheckboxGroup,\n    BCheckGroup: BFormCheckboxGroup\n  }\n});\n\n/* harmony default export */ var components_form_checkbox = (FormCheckboxPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-radio/form-radio-group.js\n\n\n\n\n\n\n\n\nvar form_radio_group_props = {\n  checked: {\n    type: [String, Object, Number, Boolean],\n    default: null\n  } // @vue/component\n\n};\nvar BFormRadioGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRadioGroup',\n  mixins: [mixins_id, mixins_form, form_radio_check_group, // Includes render function\n  form_options, form_size, form_state],\n  provide: function provide() {\n    return {\n      bvRadioGroup: this\n    };\n  },\n  props: form_radio_group_props,\n  data: function data() {\n    return {\n      localChecked: this.checked\n    };\n  },\n  computed: {\n    isRadioGroup: function isRadioGroup() {\n      return true;\n    }\n  }\n});\n/* harmony default export */ var form_radio_group = (BFormRadioGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-radio/index.js\n\n\n\nvar FormRadioPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormRadio: BFormRadio,\n    BRadio: BFormRadio,\n    BFormRadioGroup: BFormRadioGroup,\n    BRadioGroup: BFormRadioGroup\n  }\n});\n\n/* harmony default export */ var components_form_radio = (FormRadioPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-text.js\n\n // @vue/component\n\n/* harmony default export */ var mixins_form_text = ({\n  model: {\n    prop: 'value',\n    event: 'update'\n  },\n  props: {\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    plaintext: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    formatter: {\n      type: Function,\n      default: null\n    },\n    trim: {\n      type: Boolean,\n      default: false\n    },\n    number: {\n      type: Boolean,\n      default: false\n    },\n    lazyFormatter: {\n      type: Boolean,\n      value: false\n    }\n  },\n  data: function data() {\n    return {\n      localValue: this.stringifyValue(this.value)\n    };\n  },\n  computed: {\n    computedClass: function computedClass() {\n      return [{\n        // Range input needs class custom-range\n        'custom-range': this.type === 'range',\n        // plaintext not supported by type=range or type=color\n        'form-control-plaintext': this.plaintext && this.type !== 'range' && this.type !== 'color',\n        // form-control not used by type=range or plaintext. Always used by type=color\n        'form-control': !this.plaintext && this.type !== 'range' || this.type === 'color'\n      }, this.sizeFormClass, this.stateClass];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      if (!this.ariaInvalid || this.ariaInvalid === 'false') {\n        // this.ariaInvalid is null or false or 'false'\n        return this.computedState === false ? 'true' : null;\n      }\n\n      if (this.ariaInvalid === true) {\n        // User wants explicit aria-invalid=true\n        return 'true';\n      } // Most likely a string value (which could be the string 'true')\n\n\n      return this.ariaInvalid;\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      if (newVal !== this.localValue) {\n        this.localValue = this.stringifyValue(newVal);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var value = this.stringifyValue(this.value);\n\n    if (value !== this.localValue) {\n      /* istanbul ignore next */\n      this.localValue = value;\n    }\n  },\n  methods: {\n    stringifyValue: function stringifyValue(value) {\n      return isUndefined(value) || isNull(value) ? '' : String(value);\n    },\n    getFormatted: function getFormatted(value, evt) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      value = this.stringifyValue(value);\n\n      if ((!this.lazyFormatter || force) && isFunction(this.formatter)) {\n        value = this.formatter(value, evt);\n      }\n\n      return value;\n    },\n    updateValue: function updateValue(value) {\n      value = this.stringifyValue(value);\n\n      if (value !== this.localValue) {\n        // Keep the input set to the value before modifiers\n        this.localValue = value;\n\n        if (this.number) {\n          // Emulate `.number` modifier behaviour\n          var num = parseFloat(value);\n          value = isNaN(num) ? value : num;\n        } else if (this.trim) {\n          // Emulate `.trim` modifier behaviour\n          value = value.trim();\n        } // Update the v-model\n\n\n        this.$emit('update', value);\n      } else if (this.$refs.input && value !== this.$refs.input.value) {\n        // When the `localValue` hasn't changed but the actual input value\n        // is out of sync, make sure to change it to the given one.\n        // Usually casued by browser autocomplete and how it triggers the\n        // change or input event, or depending on the formatter function.\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2657\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/3498\n\n        /* istanbul ignore next: hard to test */\n        this.$refs.input.value = value;\n      }\n    },\n    onInput: function onInput(evt) {\n      // `evt.target.composing` is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      var formatted = this.getFormatted(evt.target.value, evt); // Exit when the `formatter` function strictly returned `false`\n      // or prevented the input event\n\n      if (formatted === false || evt.defaultPrevented) {\n        /* istanbul ignore next */\n        evt.preventDefault();\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('input', formatted);\n    },\n    onChange: function onChange(evt) {\n      // `evt.target.composing` is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      var formatted = this.getFormatted(evt.target.value, evt); // Exit when the `formatter` function strictly returned `false`\n      // or prevented the input event\n\n      if (formatted === false || evt.defaultPrevented) {\n        /* istanbul ignore next */\n        evt.preventDefault();\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('change', formatted);\n    },\n    onBlur: function onBlur(evt) {\n      // Lazy formatter\n      if (this.lazyFormatter) {\n        var formatted = this.getFormatted(evt.target.value, evt, true); // Exit when the `formatter` function strictly returned `false`\n\n        if (formatted === false) {\n          return;\n        }\n\n        this.updateValue(formatted);\n      } // Emit native blur event\n\n\n      this.$emit('blur', evt);\n    },\n    focus: function focus() {\n      // For external handler that may want a focus method\n      if (!this.disabled) {\n        this.$el.focus();\n      }\n    },\n    blur: function blur() {\n      // For external handler that may want a blur method\n      if (!this.disabled) {\n        this.$el.blur();\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-selection.js\n// @vue/component\n/* harmony default export */ var form_selection = ({\n  computed: {\n    selectionStart: {\n      // Expose selectionStart for formatters, etc\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionStart;\n      },\n      set: function set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionStart = val;\n      }\n    },\n    selectionEnd: {\n      // Expose selectionEnd for formatters, etc\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionEnd;\n      },\n      set: function set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionEnd = val;\n      }\n    },\n    selectionDirection: {\n      // Expose selectionDirection for formatters, etc\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionDirection;\n      },\n      set: function set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionDirection = val;\n      }\n    }\n  },\n  methods: {\n    select: function select()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input;\n\n      // For external handler that may want a select() method\n      (_this$$refs$input = this.$refs.input).select.apply(_this$$refs$input, arguments);\n    },\n    setSelectionRange: function setSelectionRange()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input2;\n\n      // For external handler that may want a setSelectionRange(a,b,c) method\n      (_this$$refs$input2 = this.$refs.input).setSelectionRange.apply(_this$$refs$input2, arguments);\n    },\n    setRangeText: function setRangeText()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input3;\n\n      // For external handler that may want a setRangeText(a,b,c) method\n      (_this$$refs$input3 = this.$refs.input).setRangeText.apply(_this$$refs$input3, arguments);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-validity.js\n// @vue/component\n/* harmony default export */ var form_validity = ({\n  computed: {\n    validity: {\n      // Expose validity property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validity;\n      }\n    },\n    validationMessage: {\n      // Expose validationMessage property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validationMessage;\n      }\n    },\n    willValidate: {\n      // Expose willValidate property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.willValidate;\n      }\n    }\n  },\n  methods: {\n    setCustomValidity: function setCustomValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input;\n\n      // For external handler that may want a setCustomValidity(...) method\n      return (_this$$refs$input = this.$refs.input).setCustomValidity.apply(_this$$refs$input, arguments);\n    },\n    checkValidity: function checkValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input2;\n\n      // For external handler that may want a checkValidity(...) method\n      return (_this$$refs$input2 = this.$refs.input).checkValidity.apply(_this$$refs$input2, arguments);\n    },\n    reportValidity: function reportValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input3;\n\n      // For external handler that may want a reportValidity(...) method\n      return (_this$$refs$input3 = this.$refs.input).reportValidity.apply(_this$$refs$input3, arguments);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-input/form-input.js\n\n\n\n\n\n\n\n\n\nfunction form_input_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction form_input_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { form_input_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { form_input_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n // Valid supported input types\n\nvar TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week']; // @vue/component\n\nvar BFormInput =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormInput',\n  mixins: [mixins_id, mixins_form, form_size, form_state, mixins_form_text, form_selection, form_validity],\n  props: {\n    // value prop defined in form-text mixin\n    // value: { },\n    type: {\n      type: String,\n      default: 'text',\n      validator: function validator(type) {\n        return arrayIncludes(TYPES, type);\n      }\n    },\n    noWheel: {\n      // Disable mousewheel to prevent wheel from changing values (i.e. number/date).\n      type: Boolean,\n      default: false\n    },\n    min: {\n      type: [String, Number],\n      default: null\n    },\n    max: {\n      type: [String, Number],\n      default: null\n    },\n    step: {\n      type: [String, Number],\n      default: null\n    },\n    list: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    localType: function localType() {\n      // We only allow certain types\n      return arrayIncludes(TYPES, this.type) ? this.type : 'text';\n    }\n  },\n  watch: {\n    noWheel: function noWheel(newVal) {\n      this.setWheelStopper(newVal);\n    }\n  },\n  mounted: function mounted() {\n    this.setWheelStopper(this.noWheel);\n  },\n  deactivated: function deactivated() {\n    // Turn off listeners when keep-alive component deactivated\n\n    /* istanbul ignore next */\n    this.setWheelStopper(false);\n  },\n  activated: function activated() {\n    // Turn on listeners (if no-wheel) when keep-alive component activated\n\n    /* istanbul ignore next */\n    this.setWheelStopper(this.noWheel);\n  },\n  beforeDestroy: function beforeDestroy() {\n    /* istanbul ignore next */\n    this.setWheelStopper(false);\n  },\n  methods: {\n    setWheelStopper: function setWheelStopper(on) {\n      var input = this.$el; // We use native events, so that we don't interfere with propgation\n\n      if (on) {\n        eventOn(input, 'focus', this.onWheelFocus);\n        eventOn(input, 'blur', this.onWheelBlur);\n      } else {\n        eventOff(input, 'focus', this.onWheelFocus);\n        eventOff(input, 'blur', this.onWheelBlur);\n        eventOff(document, 'wheel', this.stopWheel);\n      }\n    },\n    onWheelFocus: function onWheelFocus(evt) {\n      eventOn(document, 'wheel', this.stopWheel);\n    },\n    onWheelBlur: function onWheelBlur(evt) {\n      eventOff(document, 'wheel', this.stopWheel);\n    },\n    stopWheel: function stopWheel(evt) {\n      evt.preventDefault();\n      this.$el.blur();\n    }\n  },\n  render: function render(h) {\n    var self = this;\n    return h('input', {\n      ref: 'input',\n      class: self.computedClass,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        type: self.localType,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        min: self.min,\n        max: self.max,\n        step: self.step,\n        list: self.localType !== 'password' ? self.list : null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: form_input_objectSpread({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n});\n/* harmony default export */ var form_input = (BFormInput);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-input/index.js\n\n\nvar FormInputPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormInput: BFormInput,\n    BInput: BFormInput\n  }\n});\n\n/* harmony default export */ var components_form_input = (FormInputPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-textarea/form-textarea.js\n\n\n\n\n\n\n\n\n\nfunction form_textarea_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction form_textarea_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { form_textarea_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { form_textarea_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n // @vue/component\n\nvar BFormTextarea =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormTextarea',\n  mixins: [mixins_id, mixins_form, form_size, form_state, mixins_form_text, form_selection, form_validity],\n  props: {\n    rows: {\n      type: [Number, String],\n      default: 2\n    },\n    maxRows: {\n      type: [Number, String],\n      default: null\n    },\n    wrap: {\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\n      type: String,\n      default: 'soft'\n    },\n    noResize: {\n      // Disable the resize handle of textarea\n      type: Boolean,\n      default: false\n    },\n    noAutoShrink: {\n      // When in auto resize mode, disable shrinking to content height\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      dontResize: true,\n      heightInPx: null\n    };\n  },\n  computed: {\n    computedStyle: function computedStyle() {\n      var styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto height mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // Conditionaly set the computed CSS height when auto rows/height is enabled.\n        // We avoid setting the style to null, which can override user manual resize handle.\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n        // enabled so that the computed height calcaultion returns a stable value.\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n    computedMinRows: function computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value).\n      // A value of 1 can cause issues in some browsers, and most browsers only support\n      // 2 as the smallest value.\n      return Math.max(parseInt(this.rows, 10) || 2, 2);\n    },\n    computedMaxRows: function computedMaxRows() {\n      return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n    },\n    computedRows: function computedRows() {\n      // This is used to set the attribute 'rows' on the textarea.\n      // If auto-height is enabled, then we return null as we use CSS to control height.\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    }\n  },\n  watch: {\n    dontResize: function dontResize(newVal, oldval) {\n      if (!newVal) {\n        this.setHeight();\n      }\n    },\n    localValue: function localValue(newVal, oldVal) {\n      this.setHeight();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Enable opt-in resizing once mounted\n    this.$nextTick(function () {\n      _this.dontResize = false;\n    });\n  },\n  activated: function activated() {\n    var _this2 = this;\n\n    // If we are being re-activated in <keep-alive>, enable opt-in resizing\n    this.$nextTick(function () {\n      _this2.dontResize = false;\n    });\n  },\n  deactivated: function deactivated() {\n    // If we are in a deactivated <keep-alive>, disable opt-in resizing\n    this.dontResize = true;\n  },\n  beforeDestroy: function beforeDestroy() {\n    /* istanbul ignore next */\n    this.dontResize = true;\n  },\n  methods: {\n    setHeight: function setHeight() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.heightInPx = _this3.computeHeight();\n      });\n    },\n    computeHeight: function computeHeight()\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    {\n      if (this.$isServer || !isNull(this.computedRows)) {\n        return null;\n      }\n\n      var el = this.$el; // Element must be visible (not hidden) and in document.\n      // Must be checked after above checks\n\n      if (!isVisible(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      var computedStyle = dom_getCS(el); // Height of one line of text in px\n\n      var lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n      var border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n      var padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n      var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      var oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      el.style.height = 'auto';\n      var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case this computedProp\n      // returns the same value as before.\n\n      el.style.height = oldHeight; // Calculate content height in \"rows\" (scrollHeight includes padding but not border)\n\n      var contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of oldHeight and new height,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n  },\n  render: function render(h) {\n    // Using self instead of this helps reduce code size during minification\n    var self = this;\n    return h('textarea', {\n      ref: 'input',\n      class: self.computedClass,\n      style: self.computedStyle,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        rows: self.computedRows,\n        wrap: self.wrap || null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: form_textarea_objectSpread({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n});\n/* harmony default export */ var form_textarea = (BFormTextarea);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-textarea/index.js\n\n\nvar FormTextareaPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormTextarea: BFormTextarea,\n    BTextarea: BFormTextarea\n  }\n});\n\n/* harmony default export */ var components_form_textarea = (FormTextareaPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/form-custom.js\n// @vue/component\n/* harmony default export */ var form_custom = ({\n  props: {\n    plain: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    custom: function custom() {\n      return !this.plain;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-file/form-file.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar form_file_NAME = 'BFormFile'; // @vue/component\n\nvar BFormFile =\n/*#__PURE__*/\nvue.extend({\n  name: form_file_NAME,\n  mixins: [mixins_id, mixins_form, form_state, form_custom, mixins_normalize_slot],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    value: {\n      // type: Object,\n      default: null\n    },\n    accept: {\n      type: String,\n      default: ''\n    },\n    // Instruct input to capture from camera\n    capture: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(form_file_NAME, 'placeholder');\n      }\n    },\n    browseText: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(form_file_NAME, 'browseText');\n      }\n    },\n    dropPlaceholder: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(form_file_NAME, 'dropPlaceholder');\n      }\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    directory: {\n      type: Boolean,\n      default: false\n    },\n    noTraverse: {\n      type: Boolean,\n      default: false\n    },\n    noDrop: {\n      type: Boolean,\n      default: false\n    },\n    fileNameFormatter: {\n      type: Function,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      selectedFile: null,\n      dragging: false,\n      hasFocus: false\n    };\n  },\n  computed: {\n    selectLabel: function selectLabel() {\n      // Draging active\n      if (this.dragging && this.dropPlaceholder) {\n        return this.dropPlaceholder;\n      } // No file chosen\n\n\n      if (!this.selectedFile || this.selectedFile.length === 0) {\n        return this.placeholder;\n      } // Convert selectedFile to an array (if not already one)\n\n\n      var files = concat(this.selectedFile).filter(Boolean);\n\n      if (this.hasNormalizedSlot('file-name')) {\n        // There is a slot for formatting the files/names\n        return [this.normalizeSlot('file-name', {\n          files: files,\n          names: files.map(function (f) {\n            return f.name;\n          })\n        })];\n      } else {\n        // Use the user supplied formatter, or the built in one.\n        return isFunction(this.fileNameFormatter) ? String(this.fileNameFormatter(files)) : files.map(function (file) {\n          return file.name;\n        }).join(', ');\n      }\n    }\n  },\n  watch: {\n    selectedFile: function selectedFile(newVal, oldVal) {\n      // The following test is needed when the file input is \"reset\" or the\n      // exact same file(s) are selected to prevent an infinite loop.\n      // When in `multiple` mode we need to check for two empty arrays or\n      // two arrays with identical files\n      if (newVal === oldVal || isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length && newVal.every(function (v, i) {\n        return v === oldVal[i];\n      })) {\n        return;\n      }\n\n      if (!newVal && this.multiple) {\n        this.$emit('input', []);\n      } else {\n        this.$emit('input', newVal);\n      }\n    },\n    value: function value(newVal) {\n      if (!newVal || isArray(newVal) && newVal.length === 0) {\n        this.reset();\n      }\n    }\n  },\n  methods: {\n    focusHandler: function focusHandler(evt) {\n      // Bootstrap v4 doesn't have focus styling for custom file input\n      // Firefox has a '[type=file]:focus ~ sibling' selector issue,\n      // so we add a 'focus' class to get around these bugs\n      if (this.plain || evt.type === 'focusout') {\n        this.hasFocus = false;\n      } else {\n        // Add focus styling for custom file input\n        this.hasFocus = true;\n      }\n    },\n    reset: function reset() {\n      try {\n        // Wrapped in try in case IE 11 craps out\n        this.$refs.input.value = '';\n      } catch (e) {} // IE 11 doesn't support setting `input.value` to '' or null\n      // So we use this little extra hack to reset the value, just in case.\n      // This also appears to work on modern browsers as well.\n\n\n      this.$refs.input.type = '';\n      this.$refs.input.type = 'file';\n      this.selectedFile = this.multiple ? [] : null;\n    },\n    onFileChange: function onFileChange(evt) {\n      var _this = this;\n\n      // Always emit original event\n      this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)\n      // Can be disabled by setting no-traverse\n\n      var items = evt.dataTransfer && evt.dataTransfer.items;\n      /* istanbul ignore next: not supported in JSDOM */\n\n      if (items && !this.noTraverse) {\n        var queue = [];\n\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i].webkitGetAsEntry();\n\n          if (item) {\n            queue.push(this.traverseFileTree(item));\n          }\n        }\n\n        Promise.all(queue).then(function (filesArr) {\n          _this.setFiles(array_from(filesArr));\n        });\n        return;\n      } // Normal handling\n\n\n      this.setFiles(evt.target.files || evt.dataTransfer.files);\n    },\n    setFiles: function setFiles() {\n      var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!files) {\n        /* istanbul ignore next: this will probably not happen */\n        this.selectedFile = null;\n      } else if (this.multiple) {\n        // Convert files to array\n        var filesArray = [];\n\n        for (var i = 0; i < files.length; i++) {\n          filesArray.push(files[i]);\n        } // Return file(s) as array\n\n\n        this.selectedFile = filesArray;\n      } else {\n        // Return single file object\n        this.selectedFile = files[0] || null;\n      }\n    },\n    onReset: function onReset() {\n      // Triggered when the parent form (if any) is reset\n      this.selectedFile = this.multiple ? [] : null;\n    },\n    onDragover: function onDragover(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop || !this.custom) {\n        return;\n      }\n\n      this.dragging = true;\n      evt.dataTransfer.dropEffect = 'copy';\n    },\n    onDragleave: function onDragleave(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.dragging = false;\n    },\n    onDrop: function onDrop(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop) {\n        return;\n      }\n\n      this.dragging = false;\n\n      if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {\n        this.onFileChange(evt);\n      }\n    },\n    traverseFileTree: function traverseFileTree(item, path)\n    /* istanbul ignore next: not supported in JSDOM */\n    {\n      var _this2 = this;\n\n      // Based on http://stackoverflow.com/questions/3590058\n      return new Promise(function (resolve) {\n        path = path || '';\n\n        if (item.isFile) {\n          // Get file\n          item.file(function (file) {\n            file.$path = path; // Inject $path to file obj\n\n            resolve(file);\n          });\n        } else if (item.isDirectory) {\n          // Get folder contents\n          item.createReader().readEntries(function (entries) {\n            var queue = [];\n\n            for (var i = 0; i < entries.length; i++) {\n              queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));\n            }\n\n            Promise.all(queue).then(function (filesArr) {\n              resolve(array_from(filesArr));\n            });\n          });\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    // Form Input\n    var input = h('input', {\n      ref: 'input',\n      class: [{\n        'form-control-file': this.plain,\n        'custom-file-input': this.custom,\n        focus: this.custom && this.hasFocus\n      }, this.stateClass],\n      attrs: {\n        type: 'file',\n        id: this.safeId(),\n        name: this.name,\n        disabled: this.disabled,\n        required: this.required,\n        form: this.form || null,\n        capture: this.capture || null,\n        accept: this.accept || null,\n        multiple: this.multiple,\n        webkitdirectory: this.directory,\n        'aria-required': this.required ? 'true' : null\n      },\n      on: {\n        change: this.onFileChange,\n        focusin: this.focusHandler,\n        focusout: this.focusHandler,\n        reset: this.onReset\n      }\n    });\n\n    if (this.plain) {\n      return input;\n    } // Overlay Labels\n\n\n    var label = h('label', {\n      staticClass: 'custom-file-label',\n      class: [this.dragging ? 'dragging' : null],\n      attrs: {\n        for: this.safeId(),\n        'data-browse': this.browseText || null\n      }\n    }, this.selectLabel); // Return rendered custom file input\n\n    return h('div', {\n      staticClass: 'custom-file b-form-file',\n      class: this.stateClass,\n      attrs: {\n        id: this.safeId('_BV_file_outer_')\n      },\n      on: {\n        dragover: this.onDragover,\n        dragleave: this.onDragleave,\n        drop: this.onDrop\n      }\n    }, [input, label]);\n  }\n});\n/* harmony default export */ var form_file = (BFormFile);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-file/index.js\n\n\nvar FormFilePlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormFile: BFormFile,\n    BFile: BFormFile\n  }\n});\n\n/* harmony default export */ var components_form_file = (FormFilePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-select/form-select.js\n\n\n\n\n\n\n\n\n\nfunction form_select_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction form_select_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { form_select_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { form_select_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n // @vue/component\n\nvar BFormSelect =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormSelect',\n  mixins: [mixins_id, mixins_normalize_slot, mixins_form, form_size, form_state, form_custom, form_options],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    value: {// type: [Object, Array, String, Number, Boolean],\n      // default: undefined\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    selectSize: {\n      // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode\n      // Size of 1 can bork out Firefox\n      type: Number,\n      default: 0\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localValue: this.value\n    };\n  },\n  computed: {\n    computedSelectSize: function computedSelectSize() {\n      // Custom selects with a size of zero causes the arrows to be hidden,\n      // so dont render the size attribute in this case\n      return !this.plain && this.selectSize === 0 ? null : this.selectSize;\n    },\n    inputClass: function inputClass() {\n      return [this.plain ? 'form-control' : 'custom-select', this.size && this.plain ? \"form-control-\".concat(this.size) : null, this.size && !this.plain ? \"custom-select-\".concat(this.size) : null, this.stateClass];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      if (this.ariaInvalid === true || this.ariaInvalid === 'true') {\n        return 'true';\n      }\n\n      return this.stateClass === 'is-invalid' ? 'true' : null;\n    }\n  },\n  watch: {\n    value: function value(newVal, oldVal) {\n      this.localValue = newVal;\n    },\n    localValue: function localValue(newVal, oldVal) {\n      this.$emit('input', this.localValue);\n    }\n  },\n  methods: {\n    focus: function focus() {\n      this.$refs.input.focus();\n    },\n    blur: function blur() {\n      this.$refs.input.blur();\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var options = this.formOptions.map(function (option, index) {\n      return h('option', {\n        key: \"option_\".concat(index, \"_opt\"),\n        attrs: {\n          disabled: Boolean(option.disabled)\n        },\n        domProps: form_select_objectSpread({}, htmlOrText(option.html, option.text), {\n          value: option.value\n        })\n      });\n    });\n    return h('select', {\n      ref: 'input',\n      class: this.inputClass,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: this.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: this.safeId(),\n        name: this.name,\n        form: this.form || null,\n        multiple: this.multiple || null,\n        size: this.computedSelectSize,\n        disabled: this.disabled,\n        required: this.required,\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      },\n      on: {\n        change: function change(evt) {\n          var target = evt.target;\n          var selectedVal = array_from(target.options).filter(function (o) {\n            return o.selected;\n          }).map(function (o) {\n            return '_value' in o ? o._value : o.value;\n          });\n          _this.localValue = target.multiple ? selectedVal : selectedVal[0];\n\n          _this.$nextTick(function () {\n            _this.$emit('change', _this.localValue);\n          });\n        }\n      }\n    }, [this.normalizeSlot('first'), options, this.normalizeSlot('default')]);\n  }\n});\n/* harmony default export */ var form_select = (BFormSelect);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/form-select/index.js\n\n\nvar FormSelectPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BFormSelect: BFormSelect,\n    BSelect: BFormSelect\n  }\n});\n\n/* harmony default export */ var components_form_select = (FormSelectPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/image/index.js\n\n\n\nvar ImagePlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BImg: BImg,\n    BImgLazy: BImgLazy\n  }\n});\n\n/* harmony default export */ var components_image = (ImagePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/input-group-text.js\n\n\nvar input_group_text_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nvar BInputGroupText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupText',\n  functional: true,\n  props: input_group_text_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'input-group-text'\n    }), children);\n  }\n});\n/* harmony default export */ var input_group_text = (BInputGroupText);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/input-group-addon.js\n\n\n\n\n\n\n\nfunction input_group_addon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction input_group_addon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { input_group_addon_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { input_group_addon_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\nvar commonProps = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  isText: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BInputGroupAddon =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupAddon',\n  functional: true,\n  props: input_group_addon_objectSpread({}, commonProps, {\n    append: {\n      type: Boolean,\n      default: false\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      class: {\n        'input-group-append': props.append,\n        'input-group-prepend': !props.append\n      },\n      attrs: {\n        id: props.id\n      }\n    }), props.isText ? [h(BInputGroupText, children)] : children);\n  }\n});\n/* harmony default export */ var input_group_addon = (BInputGroupAddon);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/input-group-prepend.js\n\n\n\n\n\n\n\nfunction input_group_prepend_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction input_group_prepend_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { input_group_prepend_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { input_group_prepend_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n // @vue/component\n\nvar BInputGroupPrepend =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupPrepend',\n  functional: true,\n  props: commonProps,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    // pass all our props/attrs down to child, and set`append` to false\n    return h(BInputGroupAddon, lib_esm_a(data, {\n      props: input_group_prepend_objectSpread({}, props, {\n        append: false\n      })\n    }), children);\n  }\n});\n/* harmony default export */ var input_group_prepend = (BInputGroupPrepend);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/input-group-append.js\n\n\n\n\n\n\n\nfunction input_group_append_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction input_group_append_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { input_group_append_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { input_group_append_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n // @vue/component\n\nvar BInputGroupAppend =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupAppend',\n  functional: true,\n  props: commonProps,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    // pass all our props/attrs down to child, and set`append` to true\n    return h(BInputGroupAddon, lib_esm_a(data, {\n      props: input_group_append_objectSpread({}, props, {\n        append: true\n      })\n    }), children);\n  }\n});\n/* harmony default export */ var input_group_append = (BInputGroupAppend);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/input-group.js\n\n\n\n\n\n\n\n\n\nvar input_group_props = {\n  id: {\n    type: String\n  },\n  size: {\n    type: String\n  },\n  prepend: {\n    type: String\n  },\n  prependHtml: {\n    type: String\n  },\n  append: {\n    type: String\n  },\n  appendHtml: {\n    type: String\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nvar BInputGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroup',\n  functional: true,\n  props: input_group_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var childNodes = []; // Prepend prop/slot\n\n    if (props.prepend || props.prependHtml || normalize_slot_hasNormalizedSlot('prepend', $scopedSlots, $slots)) {\n      childNodes.push(h(BInputGroupPrepend, [// Prop\n      props.prepend || props.prependHtml ? h(BInputGroupText, {\n        domProps: htmlOrText(props.prependHtml, props.prepend)\n      }) : h(false), // Slot\n      normalize_slot_normalizeSlot('prepend', {}, $scopedSlots, $slots) || h(false)]));\n    } else {\n      childNodes.push(h(false));\n    } // Default slot\n\n\n    if (normalize_slot_hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      childNodes.push.apply(childNodes, Object(toConsumableArray[\"a\" /* default */])(normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots)));\n    } else {\n      childNodes.push(h(false));\n    } // Append prop\n\n\n    if (props.append || props.appendHtml || normalize_slot_hasNormalizedSlot('append', $scopedSlots, $slots)) {\n      childNodes.push(h(BInputGroupAppend, [// prop\n      props.append || props.appendHtml ? h(BInputGroupText, {\n        domProps: htmlOrText(props.appendHtml, props.append)\n      }) : h(false), // Slot\n      normalize_slot_normalizeSlot('append', {}, $scopedSlots, $slots) || h(false)]));\n    } else {\n      childNodes.push(h(false));\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'input-group',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"input-group-\".concat(props.size), Boolean(props.size)),\n      attrs: {\n        id: props.id || null,\n        role: 'group'\n      }\n    }), childNodes);\n  }\n});\n/* harmony default export */ var input_group = (BInputGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/input-group/index.js\n\n\n\n\n\n\nvar InputGroupPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BInputGroup: BInputGroup,\n    BInputGroupAddon: BInputGroupAddon,\n    BInputGroupPrepend: BInputGroupPrepend,\n    BInputGroupAppend: BInputGroupAppend,\n    BInputGroupText: BInputGroupText\n  }\n});\n\n/* harmony default export */ var components_input_group = (InputGroupPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/layout/container.js\n\n\nvar container_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BContainer =\n/*#__PURE__*/\nvue.extend({\n  name: 'BContainer',\n  functional: true,\n  props: container_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      class: {\n        container: !props.fluid,\n        'container-fluid': props.fluid\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var layout_container = (BContainer);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/jumbotron/jumbotron.js\n\n\n\n\n\n\n\n\nvar jumbotron_NAME = 'BJumbotron';\nvar jumbotron_props = {\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  containerFluid: {\n    type: Boolean,\n    default: false\n  },\n  header: {\n    type: String,\n    default: null\n  },\n  headerHtml: {\n    type: String,\n    default: null\n  },\n  headerTag: {\n    type: String,\n    default: 'h1'\n  },\n  headerLevel: {\n    type: [Number, String],\n    default: '3'\n  },\n  lead: {\n    type: String,\n    default: null\n  },\n  leadHtml: {\n    type: String,\n    default: null\n  },\n  leadTag: {\n    type: String,\n    default: 'p'\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  bgVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(jumbotron_NAME, 'bgVariant');\n    }\n  },\n  borderVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(jumbotron_NAME, 'borderVariant');\n    }\n  },\n  textVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(jumbotron_NAME, 'textVariant');\n    }\n  } // @vue/component\n\n};\nvar BJumbotron =\n/*#__PURE__*/\nvue.extend({\n  name: jumbotron_NAME,\n  functional: true,\n  props: jumbotron_props,\n  render: function render(h, _ref) {\n    var _class2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    // The order of the conditionals matter.\n    // We are building the component markup in order.\n    var childNodes = [];\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {}; // Header\n\n    if (props.header || normalize_slot_hasNormalizedSlot('header', $scopedSlots, $slots) || props.headerHtml) {\n      childNodes.push(h(props.headerTag, {\n        class: Object(defineProperty[\"a\" /* default */])({}, \"display-\".concat(props.headerLevel), Boolean(props.headerLevel))\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots) || props.headerHtml || stripTags(props.header)));\n    } // Lead\n\n\n    if (props.lead || normalize_slot_hasNormalizedSlot('lead', $scopedSlots, $slots) || props.leadHtml) {\n      childNodes.push(h(props.leadTag, {\n        staticClass: 'lead'\n      }, normalize_slot_normalizeSlot('lead', {}, $scopedSlots, $slots) || props.leadHtml || stripTags(props.lead)));\n    } // Default slot\n\n\n    if (normalize_slot_hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      childNodes.push(normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots));\n    } // If fluid, wrap content in a container/container-fluid\n\n\n    if (props.fluid) {\n      // Children become a child of a container\n      childNodes = [h(BContainer, {\n        props: {\n          fluid: props.containerFluid\n        }\n      }, childNodes)];\n    } // Return the jumbotron\n\n\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'jumbotron',\n      class: (_class2 = {\n        'jumbotron-fluid': props.fluid\n      }, Object(defineProperty[\"a\" /* default */])(_class2, \"text-\".concat(props.textVariant), Boolean(props.textVariant)), Object(defineProperty[\"a\" /* default */])(_class2, \"bg-\".concat(props.bgVariant), Boolean(props.bgVariant)), Object(defineProperty[\"a\" /* default */])(_class2, \"border-\".concat(props.borderVariant), Boolean(props.borderVariant)), Object(defineProperty[\"a\" /* default */])(_class2, \"border\", Boolean(props.borderVariant)), _class2)\n    }), childNodes);\n  }\n});\n/* harmony default export */ var jumbotron = (BJumbotron);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/jumbotron/index.js\n\n\nvar JumbotronPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BJumbotron: BJumbotron\n  }\n});\n\n/* harmony default export */ var components_jumbotron = (JumbotronPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/layout/row.js\n\n\n\n\nvar COMMON_ALIGNMENT = ['start', 'end', 'center'];\nvar row_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  noGutters: {\n    type: Boolean,\n    default: false\n  },\n  alignV: {\n    type: String,\n    default: null,\n    validator: function validator(str) {\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str);\n    }\n  },\n  alignH: {\n    type: String,\n    default: null,\n    validator: function validator(str) {\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around']), str);\n    }\n  },\n  alignContent: {\n    type: String,\n    default: null,\n    validator: function validator(str) {\n      return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str);\n    }\n  } // @vue/component\n\n};\nvar BRow =\n/*#__PURE__*/\nvue.extend({\n  name: 'BRow',\n  functional: true,\n  props: row_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'row',\n      class: (_class = {\n        'no-gutters': props.noGutters\n      }, Object(defineProperty[\"a\" /* default */])(_class, \"align-items-\".concat(props.alignV), props.alignV), Object(defineProperty[\"a\" /* default */])(_class, \"justify-content-\".concat(props.alignH), props.alignH), Object(defineProperty[\"a\" /* default */])(_class, \"align-content-\".concat(props.alignContent), props.alignContent), _class)\n    }), children);\n  }\n});\n/* harmony default export */ var layout_row = (BRow);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/layout/index.js\n\n\n\n\n\nvar LayoutPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BContainer: BContainer,\n    BRow: BRow,\n    BCol: BCol,\n    BFormRow: BFormRow\n  }\n});\n\n/* harmony default export */ var layout = (LayoutPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/link/index.js\n\n\nvar LinkPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BLink: BLink\n  }\n});\n\n/* harmony default export */ var components_link = (LinkPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/list-group/list-group.js\n\n\n\n\nvar list_group_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  flush: {\n    type: Boolean,\n    default: false\n  },\n  horizontal: {\n    type: [Boolean, String],\n    default: false\n  } // @vue/component\n\n};\nvar BListGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BListGroup',\n  functional: true,\n  props: list_group_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var horizontal = props.horizontal === '' ? true : props.horizontal;\n    horizontal = props.flush ? false : horizontal;\n    var componentData = {\n      staticClass: 'list-group',\n      class: Object(defineProperty[\"a\" /* default */])({\n        'list-group-flush': props.flush,\n        'list-group-horizontal': horizontal === true\n      }, \"list-group-horizontal-\".concat(horizontal), isString(horizontal))\n    };\n    return h(props.tag, lib_esm_a(data, componentData), children);\n  }\n});\n/* harmony default export */ var list_group = (BListGroup);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/list-group/list-group-item.js\n\n\n\n\n\n\n\nfunction list_group_item_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction list_group_item_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { list_group_item_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { list_group_item_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar list_group_item_NAME = 'BListGroupItem';\nvar actionTags = ['a', 'router-link', 'button', 'b-link'];\nvar list_group_item_linkProps = propsFactory();\ndelete list_group_item_linkProps.href.default;\ndelete list_group_item_linkProps.to.default;\nvar list_group_item_props = list_group_item_objectSpread({\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  action: {\n    type: Boolean,\n    default: null\n  },\n  button: {\n    type: Boolean,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(list_group_item_NAME, 'variant');\n    }\n  }\n}, list_group_item_linkProps); // @vue/component\n\nvar BListGroupItem =\n/*#__PURE__*/\nvue.extend({\n  name: list_group_item_NAME,\n  functional: true,\n  props: list_group_item_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var tag = props.button ? 'button' : !props.href && !props.to ? props.tag : BLink;\n    var isAction = Boolean(props.href || props.to || props.action || props.button || arrayIncludes(actionTags, props.tag));\n    var attrs = {};\n    var itemProps = {};\n\n    if (tag === 'button') {\n      if (!data.attrs || !data.attrs.type) {\n        // Add a type for button is one not provided in passed attributes\n        attrs.type = 'button';\n      }\n\n      if (props.disabled) {\n        // Set disabled attribute if button and disabled\n        attrs.disabled = true;\n      }\n    } else {\n      itemProps = pluck_props(list_group_item_linkProps, props);\n    }\n\n    var componentData = {\n      attrs: attrs,\n      props: itemProps,\n      staticClass: 'list-group-item',\n      class: (_class = {}, Object(defineProperty[\"a\" /* default */])(_class, \"list-group-item-\".concat(props.variant), Boolean(props.variant)), Object(defineProperty[\"a\" /* default */])(_class, 'list-group-item-action', isAction), Object(defineProperty[\"a\" /* default */])(_class, \"active\", props.active), Object(defineProperty[\"a\" /* default */])(_class, \"disabled\", props.disabled), _class)\n    };\n    return h(tag, lib_esm_a(data, componentData), children);\n  }\n});\n/* harmony default export */ var list_group_item = (BListGroupItem);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/list-group/index.js\n\n\n\nvar ListGroupPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BListGroup: BListGroup,\n    BListGroupItem: BListGroupItem\n  }\n});\n\n/* harmony default export */ var components_list_group = (ListGroupPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/media/media-body.js\n\n\nvar media_body_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nvar BMediaBody =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMediaBody',\n  functional: true,\n  props: media_body_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'media-body'\n    }), children);\n  }\n});\n/* harmony default export */ var media_body = (BMediaBody);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/media/media-aside.js\n\n\n\nvar media_aside_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  verticalAlign: {\n    type: String,\n    default: 'top'\n  } // @vue/component\n\n};\nvar BMediaAside =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMediaAside',\n  functional: true,\n  props: media_aside_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'd-flex',\n      class: Object(defineProperty[\"a\" /* default */])({}, \"align-self-\".concat(props.verticalAlign), props.verticalAlign)\n    }), children);\n  }\n});\n/* harmony default export */ var media_aside = (BMediaAside);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/media/media.js\n\n\n\n\n\nvar media_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  rightAlign: {\n    type: Boolean,\n    default: false\n  },\n  verticalAlign: {\n    type: String,\n    default: 'top'\n  },\n  noBody: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BMedia =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMedia',\n  functional: true,\n  props: media_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots,\n        children = _ref.children;\n    var childNodes = props.noBody ? children : [];\n\n    if (!props.noBody) {\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var $aside = normalize_slot_normalizeSlot('aside', {}, $scopedSlots, $slots);\n      var $default = normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots);\n\n      if ($aside && !props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'mr-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n\n      childNodes.push(h(BMediaBody, {}, $default));\n\n      if ($aside && props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'ml-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'media'\n    }), childNodes);\n  }\n});\n/* harmony default export */ var media = (BMedia);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/media/index.js\n\n\n\n\nvar MediaPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BMedia: BMedia,\n    BMediaAside: BMediaAside,\n    BMediaBody: BMediaBody\n  }\n});\n\n/* harmony default export */ var components_media = (MediaPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/modal/helpers/modal-manager.js\n/**\n * Private ModalManager helper\n * Handles controlling modal stacking zIndexes and body adjustments/classes\n */\n\n\n\n // --- Constants ---\n// Default modal backdrop z-index\n\nvar DEFAULT_ZINDEX = 1040; // Selectors for padding/margin adjustments\n\nvar modal_manager_Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler' // @vue/component\n\n};\nvar ModalManager =\n/*#__PURE__*/\nvue.extend({\n  data: function data() {\n    return {\n      modals: [],\n      baseZIndex: null,\n      scrollbarWidth: null,\n      isBodyOverflowing: false\n    };\n  },\n  computed: {\n    modalCount: function modalCount() {\n      return this.modals.length;\n    },\n    modalsAreOpen: function modalsAreOpen() {\n      return this.modalCount > 0;\n    }\n  },\n  watch: {\n    modalCount: function modalCount(newCount, oldCount) {\n      if (env[\"j\" /* isBrowser */]) {\n        this.getScrollbarWidth();\n\n        if (newCount > 0 && oldCount === 0) {\n          // Transitioning to modal(s) open\n          this.checkScrollbar();\n          this.setScrollbar();\n          addClass(document.body, 'modal-open');\n        } else if (newCount === 0 && oldCount > 0) {\n          // Transitioning to modal(s) closed\n          this.resetScrollbar();\n          removeClass(document.body, 'modal-open');\n        }\n\n        setAttr(document.body, 'data-modal-open-count', String(newCount));\n      }\n    },\n    modals: function modals(newVal, oldVal) {\n      var _this = this;\n\n      this.checkScrollbar();\n      requestAF(function () {\n        _this.updateModals(newVal || []);\n      });\n    }\n  },\n  methods: {\n    // Public methods\n    registerModal: function registerModal(modal) {\n      var _this2 = this;\n\n      // Register the modal if not already registered\n      if (modal && this.modals.indexOf(modal) === -1) {\n        // Add modal to modals array\n        this.modals.push(modal);\n        modal.$once('hook:beforeDestroy', function () {\n          _this2.unregisterModal(modal);\n        });\n      }\n    },\n    unregisterModal: function unregisterModal(modal) {\n      var index = this.modals.indexOf(modal);\n\n      if (index > -1) {\n        // Remove modal from modals array\n        this.modals.splice(index, 1); // Reset the modal's data\n\n        if (!(modal._isBeingDestroyed || modal._isDestroyed)) {\n          this.resetModal(modal);\n        }\n      }\n    },\n    getBaseZIndex: function getBaseZIndex() {\n      if (isNull(this.baseZIndex) && env[\"j\" /* isBrowser */]) {\n        // Create a temporary `div.modal-backdrop` to get computed z-index\n        var div = document.createElement('div');\n        div.className = 'modal-backdrop d-none';\n        div.style.display = 'none';\n        document.body.appendChild(div);\n        this.baseZIndex = parseInt(dom_getCS(div).zIndex || DEFAULT_ZINDEX, 10);\n        document.body.removeChild(div);\n      }\n\n      return this.baseZIndex || DEFAULT_ZINDEX;\n    },\n    getScrollbarWidth: function getScrollbarWidth() {\n      if (isNull(this.scrollbarWidth) && env[\"j\" /* isBrowser */]) {\n        // Create a temporary `div.measure-scrollbar` to get computed z-index\n        var div = document.createElement('div');\n        div.className = 'modal-scrollbar-measure';\n        document.body.appendChild(div);\n        this.scrollbarWidth = getBCR(div).width - div.clientWidth;\n        document.body.removeChild(div);\n      }\n\n      return this.scrollbarWidth || 0;\n    },\n    // Private methods\n    updateModals: function updateModals(modals) {\n      var _this3 = this;\n\n      var baseZIndex = this.getBaseZIndex();\n      var scrollbarWidth = this.getScrollbarWidth();\n      modals.forEach(function (modal, index) {\n        // We update data values on each modal\n        modal.zIndex = baseZIndex + index;\n        modal.scrollbarWidth = scrollbarWidth;\n        modal.isTop = index === _this3.modals.length - 1;\n        modal.isBodyOverflowing = _this3.isBodyOverflowing;\n      });\n    },\n    resetModal: function resetModal(modal) {\n      if (modal) {\n        modal.zIndex = this.getBaseZIndex();\n        modal.isTop = true;\n        modal.isBodyOverflowing = false;\n      }\n    },\n    checkScrollbar: function checkScrollbar() {\n      // Determine if the body element is overflowing\n      var _getBCR = getBCR(document.body),\n          left = _getBCR.left,\n          right = _getBCR.right;\n\n      this.isBodyOverflowing = left + right < window.innerWidth;\n    },\n    setScrollbar: function setScrollbar() {\n      var body = document.body; // Storage place to cache changes to margins and padding\n      // Note: This assumes the following element types are not added to the\n      // document after the modal has opened.\n\n      body._paddingChangedForModal = body._paddingChangedForModal || [];\n      body._marginChangedForModal = body._marginChangedForModal || [];\n\n      if (this.isBodyOverflowing) {\n        var scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        dom_selectAll(modal_manager_Selector.FIXED_CONTENT).forEach(function (el) {\n          var actualPadding = el.style.paddingRight;\n          var calculatedPadding = dom_getCS(el).paddingRight || 0;\n          setAttr(el, 'data-padding-right', actualPadding);\n          el.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n\n          body._paddingChangedForModal.push(el);\n        }); // Adjust sticky content margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        dom_selectAll(modal_manager_Selector.STICKY_CONTENT).forEach(function (el) {\n          var actualMargin = el.style.marginRight;\n          var calculatedMargin = dom_getCS(el).marginRight || 0;\n          setAttr(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) - scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust <b-navbar-toggler> margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        dom_selectAll(modal_manager_Selector.NAVBAR_TOGGLER).forEach(function (el) {\n          var actualMargin = el.style.marginRight;\n          var calculatedMargin = dom_getCS(el).marginRight || 0;\n          setAttr(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) + scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust body padding\n\n        var actualPadding = body.style.paddingRight;\n        var calculatedPadding = dom_getCS(body).paddingRight;\n        setAttr(body, 'data-padding-right', actualPadding);\n        body.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n      }\n    },\n    resetScrollbar: function resetScrollbar() {\n      var body = document.body;\n\n      if (body._paddingChangedForModal) {\n        // Restore fixed content padding\n        body._paddingChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if (hasAttr(el, 'data-padding-right')) {\n            el.style.paddingRight = getAttr(el, 'data-padding-right') || '';\n            removeAttr(el, 'data-padding-right');\n          }\n        });\n      }\n\n      if (body._marginChangedForModal) {\n        // Restore sticky content and navbar-toggler margin\n        body._marginChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if (hasAttr(el, 'data-margin-right')) {\n            el.style.marginRight = getAttr(el, 'data-margin-right') || '';\n            removeAttr(el, 'data-margin-right');\n          }\n        });\n      }\n\n      body._paddingChangedForModal = null;\n      body._marginChangedForModal = null; // Restore body padding\n\n      if (hasAttr(body, 'data-padding-right')) {\n        body.style.paddingRight = getAttr(body, 'data-padding-right') || '';\n        removeAttr(body, 'data-padding-right');\n      }\n    }\n  }\n}); // Export our ModalManager\n\n/* harmony default export */ var modal_manager = (new ModalManager());\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(56);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(58);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar esm_getPrototypeOf = __webpack_require__(36);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js + 1 modules\nvar esm_get = __webpack_require__(131);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(57);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/modal/helpers/bv-modal-event.class.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction bv_modal_event_class_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction bv_modal_event_class_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bv_modal_event_class_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bv_modal_event_class_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar bv_modal_event_class_BvModalEvent =\n/*#__PURE__*/\nfunction (_BvEvent) {\n  Object(inherits[\"a\" /* default */])(BvModalEvent, _BvEvent);\n\n  function BvModalEvent(type) {\n    var _this;\n\n    var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    Object(classCallCheck[\"a\" /* default */])(this, BvModalEvent);\n\n    _this = Object(possibleConstructorReturn[\"a\" /* default */])(this, Object(esm_getPrototypeOf[\"a\" /* default */])(BvModalEvent).call(this, type, eventInit)); // Freeze our new props as readonly, but leave them enumerable\n\n    defineProperties(Object(assertThisInitialized[\"a\" /* default */])(_this), {\n      trigger: readonlyDescriptor()\n    });\n    return _this;\n  }\n\n  Object(createClass[\"a\" /* default */])(BvModalEvent, [{\n    key: \"cancel\",\n    value: function cancel()\n    /* istanbul ignore next */\n    {\n      // Backwards compatibility for BootstrapVue 1.x\n      utils_warn('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');\n      this.preventDefault();\n    }\n  }, {\n    key: \"modalId\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      // Backwards compatability <= 2.0.0-rc.19\n      utils_warn('b-modal: evt.modalId is deprecated. Please use evt.componentId.');\n      return this.componentId;\n    }\n  }], [{\n    key: \"Defaults\",\n    get: function get() {\n      return bv_modal_event_class_objectSpread({}, Object(esm_get[\"a\" /* default */])(Object(esm_getPrototypeOf[\"a\" /* default */])(BvModalEvent), \"Defaults\", this), {\n        trigger: null\n      });\n    }\n  }]);\n\n  return BvModalEvent;\n}(bv_event_class); // Named exports\n\n\n // Default export\n\n/* harmony default export */ var bv_modal_event_class = (bv_modal_event_class_BvModalEvent);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/transporter.js\n\n\n\n\n\n\n // BTransporterSingle/BTransporterTargetSingle:\n//\n// Single root node portaling of content, which retains parent/child hierarchy,\n// Unlike Portal-Vue where portaled content is no longer a descendent of\n// it's inteden parent components\n//\n// Private components for use by Tooltips, Popovers and Modals\n//\n// Based on vue-simple-portal\n// https://github.com/LinusBorg/vue-simple-portal\n// Tranporter target used by BTransporterSingle\n// Supports only a single root element.\n// @vue/component\n\nvar BTransporterTargetSingle =\n/*#__PURE__*/\nvue.extend({\n  // as an abstract component, it doesn't appear in the $parent chain of\n  // components, which means the next parent of any component rendered inside\n  // of this one will be the parent from which is was portal'd\n  abstract: true,\n  name: 'BTransporterTargetSingle',\n  props: {\n    nodes: {\n      // Even though we only support a single root element,\n      // vNodes are always passed as an array\n      type: [Array, Function] // default: undefined\n\n    }\n  },\n  data: function data(vm) {\n    return {\n      updatedNodes: vm.nodes\n    };\n  },\n  destroyed: function destroyed() {\n    var el = this.$el;\n    el && el.parentNode && el.parentNode.removeChild(el);\n  },\n  render: function render(h) {\n    var nodes = isFunction(this.updatedNodes) ? this.updatedNodes({}) : this.updatedNodes;\n    nodes = concat(nodes).filter(Boolean);\n    /* istanbul ignore else */\n\n    if (nodes && nodes.length > 0 && !nodes[0].text) {\n      return nodes[0];\n    } else {\n      return h(false);\n    }\n  }\n}); // This omponent has no root element, so only a single VNode is allowed\n// @vue/component\n\nvar BTransporterSingle =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTransporterSingle',\n  mixins: [mixins_normalize_slot],\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    container: {\n      // String: CSS selector,\n      // HTMLElement: Element reference\n      // Mainly needed for tooltips/popovers inside modals\n      type: [String, HTMLElement],\n      default: 'body'\n    },\n    tag: {\n      // This should be set to match the root element type\n      type: String,\n      default: 'div'\n    }\n  },\n  watch: {\n    disabled: {\n      immediate: true,\n      handler: function handler(disabled) {\n        disabled ? this.unmountTarget() : this.$nextTick(this.mountTarget);\n      }\n    }\n  },\n  created: function created() {\n    this._bv_defaultFn = null;\n    this._bv_target = null;\n  },\n  beforeMount: function beforeMount() {\n    this.mountTarget();\n  },\n  updated: function updated() {\n    var _this = this;\n\n    // Placed in a nextTick to ensure that children have completed\n    // updating before rendering in the target\n    this.$nextTick(function () {\n      _this.updateTarget();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unmountTarget();\n    this._bv_defaultFn = null;\n  },\n  methods: {\n    // Get the element which the target should be appended to\n    getContainer: function getContainer() {\n      /* istanbul ignore else */\n      if (env[\"j\" /* isBrowser */]) {\n        var container = this.container;\n        return isString(container) ? dom_select(container) : container;\n      } else {\n        return null;\n      }\n    },\n    // Mount the target\n    mountTarget: function mountTarget() {\n      if (!this._bv_target) {\n        var container = this.getContainer();\n\n        if (container) {\n          var el = document.createElement('div');\n          container.appendChild(el);\n          this._bv_target = new BTransporterTargetSingle({\n            el: el,\n            parent: this,\n            propsData: {\n              // Initial nodes to be rendered\n              nodes: concat(this.normalizeSlot('default', {}))\n            }\n          });\n        }\n      }\n    },\n    // Update the content of the target\n    updateTarget: function updateTarget() {\n      if (env[\"j\" /* isBrowser */] && this._bv_target) {\n        var defaultFn = this.$scopedSlots.default;\n\n        if (!this.disabled) {\n          /* istanbul ignore else: only applicable in Vue 2.5.x */\n          if (defaultFn && this._bv_defaultFn !== defaultFn) {\n            // We only update the target component if the scoped slot\n            // function is a fresh one. The new slot syntax (since Vue 2.6)\n            // can cache unchanged slot functions and we want to respect that here.\n            this._bv_target.updatedNodes = defaultFn;\n          } else if (!defaultFn) {\n            // We also need to be back compatable with non-scoped default slot (i.e. 2.5.x)\n            this._bv_target.updatedNodes = this.$slots.default;\n          }\n        } // Update the scoped slot function cache\n\n\n        this._bv_defaultFn = defaultFn;\n      }\n    },\n    // Unmount the target\n    unmountTarget: function unmountTarget() {\n      if (this._bv_target) {\n        this._bv_target.$destroy();\n\n        this._bv_target = null;\n      }\n    }\n  },\n  render: function render(h) {\n    if (this.disabled) {\n      var nodes = concat(this.normalizeSlot('default', {})).filter(Boolean);\n\n      if (nodes.length > 0 && !nodes[0].text) {\n        return nodes[0];\n      }\n    }\n\n    return h(false);\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/modal/modal.js\n\n\n\n\n\n\n\nfunction modal_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction modal_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { modal_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { modal_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // --- Constants ---\n\nvar modal_NAME = 'BModal'; // ObserveDom config to detect changes in modal content\n// so that we can adjust the modal padding if needed\n\nvar OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  attributes: true,\n  attributeFilter: ['style', 'class'] // Options for DOM event listeners\n\n};\nvar EVT_OPTIONS = {\n  passive: true,\n  capture: false\n};\nvar modal_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  titleHtml: {\n    type: String\n  },\n  titleTag: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'titleTag');\n    }\n  },\n  size: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'size');\n    }\n  },\n  centered: {\n    type: Boolean,\n    default: false\n  },\n  scrollable: {\n    type: Boolean,\n    default: false\n  },\n  buttonSize: {\n    type: String,\n    default: ''\n  },\n  noStacking: {\n    type: Boolean,\n    default: false\n  },\n  noFade: {\n    type: Boolean,\n    default: false\n  },\n  noCloseOnBackdrop: {\n    type: Boolean,\n    default: false\n  },\n  noCloseOnEsc: {\n    type: Boolean,\n    default: false\n  },\n  noEnforceFocus: {\n    type: Boolean,\n    default: false\n  },\n  headerBgVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'headerBgVariant');\n    }\n  },\n  headerBorderVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'headerBorderVariant');\n    }\n  },\n  headerTextVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'headerTextVariant');\n    }\n  },\n  headerCloseVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'headerCloseVariant');\n    }\n  },\n  headerClass: {\n    type: [String, Array],\n    default: null\n  },\n  bodyBgVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'bodyBgVariant');\n    }\n  },\n  bodyTextVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'bodyTextVariant');\n    }\n  },\n  modalClass: {\n    type: [String, Array],\n    default: null\n  },\n  dialogClass: {\n    type: [String, Array],\n    default: null\n  },\n  contentClass: {\n    type: [String, Array],\n    default: null\n  },\n  bodyClass: {\n    type: [String, Array],\n    default: null\n  },\n  footerBgVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'footerBgVariant');\n    }\n  },\n  footerBorderVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'footerBorderVariant');\n    }\n  },\n  footerTextVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'footerTextVariant');\n    }\n  },\n  footerClass: {\n    type: [String, Array],\n    default: null\n  },\n  hideHeader: {\n    type: Boolean,\n    default: false\n  },\n  hideFooter: {\n    type: Boolean,\n    default: false\n  },\n  hideHeaderClose: {\n    type: Boolean,\n    default: false\n  },\n  hideBackdrop: {\n    type: Boolean,\n    default: false\n  },\n  okOnly: {\n    type: Boolean,\n    default: false\n  },\n  okDisabled: {\n    type: Boolean,\n    default: false\n  },\n  cancelDisabled: {\n    type: Boolean,\n    default: false\n  },\n  visible: {\n    type: Boolean,\n    default: false\n  },\n  returnFocus: {\n    // type: Object,\n    default: null\n  },\n  headerCloseLabel: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'headerCloseLabel');\n    }\n  },\n  cancelTitle: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'cancelTitle');\n    }\n  },\n  cancelTitleHtml: {\n    type: String\n  },\n  okTitle: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'okTitle');\n    }\n  },\n  okTitleHtml: {\n    type: String\n  },\n  cancelVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'cancelVariant');\n    }\n  },\n  okVariant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(modal_NAME, 'okVariant');\n    }\n  },\n  lazy: {\n    type: Boolean,\n    default: false\n  },\n  busy: {\n    type: Boolean,\n    default: false\n  },\n  static: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BModal =\n/*#__PURE__*/\nvue.extend({\n  name: modal_NAME,\n  mixins: [mixins_id, listen_on_root, mixins_normalize_slot],\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: modal_props,\n  data: function data() {\n    return {\n      isHidden: true,\n      // If modal should not be in document\n      isVisible: false,\n      // Controls modal visible state\n      isTransitioning: false,\n      // Used for style control\n      isShow: false,\n      // Used for style control\n      isBlock: false,\n      // Used for style control\n      isOpening: false,\n      // To signal that the modal is in the process of opening\n      isClosing: false,\n      // To signal that the modal is in the process of closing\n      ignoreBackdropClick: false,\n      // Used to signify if click out listener should ignore the click\n      isModalOverflowing: false,\n      return_focus: this.returnFocus || null,\n      // The following items are controlled by the modalManager instance\n      scrollbarWidth: 0,\n      zIndex: modal_manager.getBaseZIndex(),\n      isTop: true,\n      isBodyOverflowing: false\n    };\n  },\n  computed: {\n    modalClasses: function modalClasses() {\n      return [{\n        fade: !this.noFade,\n        show: this.isShow\n      }, this.modalClass];\n    },\n    modalStyles: function modalStyles() {\n      var sbWidth = \"\".concat(this.scrollbarWidth, \"px\");\n      return {\n        paddingLeft: !this.isBodyOverflowing && this.isModalOverflowing ? sbWidth : '',\n        paddingRight: this.isBodyOverflowing && !this.isModalOverflowing ? sbWidth : '',\n        // Needed to fix issue https://github.com/bootstrap-vue/bootstrap-vue/issues/3457\n        // Even though we are using v-show, we must ensure 'none' is restored in the styles\n        display: this.isBlock ? 'block' : 'none'\n      };\n    },\n    dialogClasses: function dialogClasses() {\n      var _ref;\n\n      return [(_ref = {}, Object(defineProperty[\"a\" /* default */])(_ref, \"modal-\".concat(this.size), Boolean(this.size)), Object(defineProperty[\"a\" /* default */])(_ref, 'modal-dialog-centered', this.centered), Object(defineProperty[\"a\" /* default */])(_ref, 'modal-dialog-scrollable', this.scrollable), _ref), this.dialogClass];\n    },\n    headerClasses: function headerClasses() {\n      var _ref2;\n\n      return [(_ref2 = {}, Object(defineProperty[\"a\" /* default */])(_ref2, \"bg-\".concat(this.headerBgVariant), Boolean(this.headerBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"text-\".concat(this.headerTextVariant), Boolean(this.headerTextVariant)), Object(defineProperty[\"a\" /* default */])(_ref2, \"border-\".concat(this.headerBorderVariant), Boolean(this.headerBorderVariant)), _ref2), this.headerClass];\n    },\n    bodyClasses: function bodyClasses() {\n      var _ref3;\n\n      return [(_ref3 = {}, Object(defineProperty[\"a\" /* default */])(_ref3, \"bg-\".concat(this.bodyBgVariant), Boolean(this.bodyBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref3, \"text-\".concat(this.bodyTextVariant), Boolean(this.bodyTextVariant)), _ref3), this.bodyClass];\n    },\n    footerClasses: function footerClasses() {\n      var _ref4;\n\n      return [(_ref4 = {}, Object(defineProperty[\"a\" /* default */])(_ref4, \"bg-\".concat(this.footerBgVariant), Boolean(this.footerBgVariant)), Object(defineProperty[\"a\" /* default */])(_ref4, \"text-\".concat(this.footerTextVariant), Boolean(this.footerTextVariant)), Object(defineProperty[\"a\" /* default */])(_ref4, \"border-\".concat(this.footerBorderVariant), Boolean(this.footerBorderVariant)), _ref4), this.footerClass];\n    },\n    modalOuterStyle: function modalOuterStyle() {\n      // Styles needed for proper stacking of modals\n      return {\n        position: 'absolute',\n        zIndex: this.zIndex\n      };\n    },\n    slotScope: function slotScope() {\n      return {\n        ok: this.onOk,\n        cancel: this.onCancel,\n        close: this.onClose,\n        hide: this.hide,\n        visible: this.isVisible\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this[newVal ? 'show' : 'hide']();\n      }\n    }\n  },\n  created: function created() {\n    // Define non-reactive properties\n    this._observer = null;\n  },\n  mounted: function mounted() {\n    // Set initial z-index as queried from the DOM\n    this.zIndex = modal_manager.getBaseZIndex(); // Listen for events from others to either open or close ourselves\n    // and listen to all modals to enable/disable enforce focus\n\n    this.listenOnRoot('bv::show::modal', this.showHandler);\n    this.listenOnRoot('bv::hide::modal', this.hideHandler);\n    this.listenOnRoot('bv::toggle::modal', this.toggleHandler); // Listen for `bv:modal::show events`, and close ourselves if the\n    // opening modal not us\n\n    this.listenOnRoot('bv::modal::show', this.modalListener); // Initially show modal?\n\n    if (this.visible === true) {\n      this.$nextTick(this.show);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Ensure everything is back to normal\n    if (this._observer) {\n      this._observer.disconnect();\n\n      this._observer = null;\n    }\n\n    this.setEnforceFocus(false);\n    this.setResizeEvent(false);\n\n    if (this.isVisible) {\n      this.isVisible = false;\n      this.isShow = false;\n      this.isTransitioning = false;\n    }\n  },\n  methods: {\n    // Private method to update the v-model\n    updateModel: function updateModel(val) {\n      if (val !== this.visible) {\n        this.$emit('change', val);\n      }\n    },\n    // Private method to create a BvModalEvent object\n    buildEvent: function buildEvent(type) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new bv_modal_event_class(type, modal_objectSpread({\n        // Default options\n        cancelable: false,\n        target: this.$refs.modal || this.$el || null,\n        relatedTarget: null,\n        trigger: null\n      }, opts, {\n        // Options that can't be overridden\n        vueTarget: this,\n        componentId: this.safeId()\n      }));\n    },\n    // Public method to show modal\n    show: function show() {\n      if (this.isVisible || this.isOpening) {\n        // If already open, on in the process of opening, do nothing\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (this.isClosing) {\n        // If we are in the process of closing, wait until hidden before re-opening\n\n        /* istanbul ignore next: very difficult to test */\n        this.$once('hidden', this.show);\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.isOpening = true; // Set the element to return focus to when closed\n\n      this.return_focus = this.return_focus || this.getActiveElement();\n      var showEvt = this.buildEvent('show', {\n        cancelable: true\n      });\n      this.emitEvent(showEvt); // Don't show if canceled\n\n      if (showEvt.defaultPrevented || this.isVisible) {\n        this.isOpening = false; // Ensure the v-model reflects the current state\n\n        this.updateModel(false);\n        return;\n      } // Show the modal\n\n\n      this.doShow();\n    },\n    // Public method to hide modal\n    hide: function hide() {\n      var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (!this.isVisible || this.isClosing) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.isClosing = true;\n      var hideEvt = this.buildEvent('hide', {\n        cancelable: trigger !== 'FORCE',\n        trigger: trigger || null\n      }); // We emit specific event for one of the three built-in buttons\n\n      if (trigger === 'ok') {\n        this.$emit('ok', hideEvt);\n      } else if (trigger === 'cancel') {\n        this.$emit('cancel', hideEvt);\n      } else if (trigger === 'headerclose') {\n        this.$emit('close', hideEvt);\n      }\n\n      this.emitEvent(hideEvt); // Hide if not canceled\n\n      if (hideEvt.defaultPrevented || !this.isVisible) {\n        this.isClosing = false; // Ensure v-model reflects current state\n\n        this.updateModel(true);\n        return;\n      } // Stop observing for content changes\n\n\n      if (this._observer) {\n        this._observer.disconnect();\n\n        this._observer = null;\n      } // Trigger the hide transition\n\n\n      this.isVisible = false; // Update the v-model\n\n      this.updateModel(false);\n    },\n    // Public method to toggle modal visibility\n    toggle: function toggle(triggerEl) {\n      if (triggerEl) {\n        this.return_focus = triggerEl;\n      }\n\n      if (this.isVisible) {\n        this.hide('toggle');\n      } else {\n        this.show();\n      }\n    },\n    // Private method to get the current document active element\n    getActiveElement: function getActiveElement() {\n      if (env[\"j\" /* isBrowser */]) {\n        var activeElement = document.activeElement; // Note: On IE11, `document.activeElement` may be null.\n        // So we test it for truthiness first.\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/3206\n        // Returning focus to document.body may cause unwanted scrolls, so we\n        // exclude setting focus on body\n\n        if (activeElement && activeElement !== document.body && activeElement.focus) {\n          // Preset the fallback return focus value if it is not set\n          // `document.activeElement` should be the trigger element that was clicked or\n          // in the case of using the v-model, which ever element has current focus\n          // Will be overridden by some commands such as toggle, etc.\n          return activeElement;\n        }\n      }\n\n      return null;\n    },\n    // Private method to finish showing modal\n    doShow: function doShow() {\n      var _this = this;\n\n      /* istanbul ignore next: commenting out for now until we can test stacking */\n      if (modal_manager.modalsAreOpen && this.noStacking) {\n        // If another modal(s) is already open, wait for it(them) to close\n        this.listenOnRootOnce('bv::modal::hidden', this.doShow);\n        return;\n      }\n\n      modal_manager.registerModal(this); // Place modal in DOM\n\n      this.isHidden = false;\n      this.$nextTick(function () {\n        // We do this in `$nextTick()` to ensure the modal is in DOM first\n        // before we show it\n        _this.isVisible = true;\n        _this.isOpening = false; // Update the v-model\n\n        _this.updateModel(true);\n\n        _this.$nextTick(function () {\n          // In a nextTick in case modal content is lazy\n          // Observe changes in modal content and adjust if necessary\n          _this._observer = observe_dom(_this.$refs.content, _this.checkModalOverflow.bind(_this), OBSERVER_CONFIG);\n        });\n      });\n    },\n    // Transition handlers\n    onBeforeEnter: function onBeforeEnter() {\n      this.isTransitioning = true;\n      this.setResizeEvent(true);\n    },\n    onEnter: function onEnter() {\n      this.isBlock = true;\n    },\n    onAfterEnter: function onAfterEnter() {\n      var _this2 = this;\n\n      this.checkModalOverflow();\n      this.isShow = true;\n      this.isTransitioning = false;\n      this.$nextTick(function () {\n        _this2.emitEvent(_this2.buildEvent('shown'));\n\n        _this2.focusFirst();\n\n        _this2.setEnforceFocus(true);\n      });\n    },\n    onBeforeLeave: function onBeforeLeave() {\n      this.isTransitioning = true;\n      this.setResizeEvent(false);\n    },\n    onLeave: function onLeave() {\n      // Remove the 'show' class\n      this.isShow = false;\n    },\n    onAfterLeave: function onAfterLeave() {\n      var _this3 = this;\n\n      this.isBlock = false;\n      this.isTransitioning = false;\n      this.setEnforceFocus(false);\n      this.isModalOverflowing = false;\n      this.isHidden = true;\n      this.$nextTick(function () {\n        _this3.returnFocusTo();\n\n        _this3.isClosing = false;\n        _this3.return_focus = null;\n        modal_manager.unregisterModal(_this3); // TODO: Need to find a way to pass the `trigger` property\n        //       to the `hidden` event, not just only the `hide` event\n\n        _this3.emitEvent(_this3.buildEvent('hidden'));\n      });\n    },\n    // Event emitter\n    emitEvent: function emitEvent(bvModalEvt) {\n      var type = bvModalEvt.type; // We emit on root first incase a global listener wants to cancel\n      // the event first before the instance emits it's event\n\n      this.emitOnRoot(\"bv::modal::\".concat(type), bvModalEvt, bvModalEvt.componentId);\n      this.$emit(type, bvModalEvt);\n    },\n    // UI event handlers\n    onDialogMousedown: function onDialogMousedown() {\n      var _this4 = this;\n\n      // Watch to see if the matching mouseup event occurs outside the dialog\n      // And if it does, cancel the clickOut handler\n      var modal = this.$refs.modal;\n\n      var onceModalMouseup = function onceModalMouseup(evt) {\n        eventOff(modal, 'mouseup', onceModalMouseup, EVT_OPTIONS);\n\n        if (evt.target === modal) {\n          _this4.ignoreBackdropClick = true;\n        }\n      };\n\n      eventOn(modal, 'mouseup', onceModalMouseup, EVT_OPTIONS);\n    },\n    onClickOut: function onClickOut(evt) {\n      if (this.ignoreBackdropClick) {\n        // Click was initiated inside the modal content, but finished outside.\n        // Set by the above onDialogMousedown handler\n        this.ignoreBackdropClick = false;\n        return;\n      } // Do nothing if not visible, backdrop click disabled, or element\n      // that generated click event is no longer in document body\n\n\n      if (!this.isVisible || this.noCloseOnBackdrop || !dom_contains(document.body, evt.target)) {\n        return;\n      } // If backdrop clicked, hide modal\n\n\n      if (!dom_contains(this.$refs.content, evt.target)) {\n        this.hide('backdrop');\n      }\n    },\n    onOk: function onOk() {\n      this.hide('ok');\n    },\n    onCancel: function onCancel() {\n      this.hide('cancel');\n    },\n    onClose: function onClose() {\n      this.hide('headerclose');\n    },\n    onEsc: function onEsc(evt) {\n      // If ESC pressed, hide modal\n      if (evt.keyCode === key_codes.ESC && this.isVisible && !this.noCloseOnEsc) {\n        this.hide('esc');\n      }\n    },\n    // Document focusin listener\n    focusHandler: function focusHandler(evt) {\n      // If focus leaves modal, bring it back\n      var modal = this.$refs.modal;\n\n      if (!this.noEnforceFocus && this.isTop && this.isVisible && modal && document !== evt.target && !dom_contains(modal, evt.target)) {\n        modal.focus({\n          preventScroll: true\n        });\n      }\n    },\n    // Turn on/off focusin listener\n    setEnforceFocus: function setEnforceFocus(on) {\n      var method = on ? eventOn : eventOff;\n      method(document, 'focusin', this.focusHandler, EVT_OPTIONS);\n    },\n    // Resize listener\n    setResizeEvent: function setResizeEvent(on) {\n      var method = on ? eventOn : eventOff; // These events should probably also check if\n      // body is overflowing\n\n      method(window, 'resize', this.checkModalOverflow, EVT_OPTIONS);\n      method(window, 'orientationchange', this.checkModalOverflow, EVT_OPTIONS);\n    },\n    // Root listener handlers\n    showHandler: function showHandler(id, triggerEl) {\n      if (id === this.safeId()) {\n        this.return_focus = triggerEl || this.getActiveElement();\n        this.show();\n      }\n    },\n    hideHandler: function hideHandler(id) {\n      if (id === this.safeId()) {\n        this.hide('event');\n      }\n    },\n    toggleHandler: function toggleHandler(id, triggerEl) {\n      if (id === this.safeId()) {\n        this.toggle(triggerEl);\n      }\n    },\n    modalListener: function modalListener(bvEvt) {\n      // If another modal opens, close this one if stacking not permitted\n      if (this.noStacking && bvEvt.vueTarget !== this) {\n        this.hide();\n      }\n    },\n    // Focus control handlers\n    focusFirst: function focusFirst() {\n      // Don't try and focus if we are SSR\n      if (env[\"j\" /* isBrowser */]) {\n        var modal = this.$refs.modal;\n        var activeElement = this.getActiveElement(); // If the modal contains the activeElement, we don't do anything\n\n        if (modal && !(activeElement && dom_contains(modal, activeElement))) {\n          // Make sure top of modal is showing (if longer than the viewport)\n          // and focus the modal content wrapper\n          this.$nextTick(function () {\n            modal.scrollTop = 0;\n            modal.focus();\n          });\n        }\n      }\n    },\n    returnFocusTo: function returnFocusTo() {\n      // Prefer `returnFocus` prop over event specified\n      // `return_focus` value\n      var el = this.returnFocus || this.return_focus || null; // Is el a string CSS selector?\n\n      el = isString(el) ? dom_select(el) : el;\n\n      if (el) {\n        // Possibly could be a component reference\n        el = el.$el || el;\n\n        if (isVisible(el) && el.focus) {\n          el.focus();\n        }\n      }\n    },\n    checkModalOverflow: function checkModalOverflow() {\n      if (this.isVisible) {\n        var modal = this.$refs.modal;\n        this.isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;\n      }\n    },\n    makeModal: function makeModal(h) {\n      // Modal header\n      var header = h(false);\n\n      if (!this.hideHeader) {\n        var modalHeader = this.normalizeSlot('modal-header', this.slotScope);\n\n        if (!modalHeader) {\n          var closeButton = h(false);\n\n          if (!this.hideHeaderClose) {\n            closeButton = h(BButtonClose, {\n              props: {\n                disabled: this.isTransitioning,\n                ariaLabel: this.headerCloseLabel,\n                textVariant: this.headerCloseVariant || this.headerTextVariant\n              },\n              on: {\n                click: this.onClose\n              }\n            }, [this.normalizeSlot('modal-header-close', {})]);\n          }\n\n          var domProps = !this.hasNormalizedSlot('modal-title') && this.titleHtml ? {\n            innerHTML: this.titleHtml\n          } : {};\n          modalHeader = [h(this.titleTag, {\n            class: ['modal-title'],\n            domProps: domProps\n          }, [this.normalizeSlot('modal-title', this.slotScope) || stripTags(this.title)]), closeButton];\n        }\n\n        header = h('header', {\n          ref: 'header',\n          staticClass: 'modal-header',\n          class: this.headerClasses,\n          attrs: {\n            id: this.safeId('__BV_modal_header_')\n          }\n        }, [modalHeader]);\n      } // Modal body\n\n\n      var body = h('div', {\n        ref: 'body',\n        staticClass: 'modal-body',\n        class: this.bodyClasses,\n        attrs: {\n          id: this.safeId('__BV_modal_body_')\n        }\n      }, this.normalizeSlot('default', this.slotScope)); // Modal footer\n\n      var footer = h(false);\n\n      if (!this.hideFooter) {\n        var modalFooter = this.normalizeSlot('modal-footer', this.slotScope);\n\n        if (!modalFooter) {\n          var cancelButton = h(false);\n\n          if (!this.okOnly) {\n            var cancelHtml = this.cancelTitleHtml ? {\n              innerHTML: this.cancelTitleHtml\n            } : null;\n            cancelButton = h(BButton, {\n              props: {\n                variant: this.cancelVariant,\n                size: this.buttonSize,\n                disabled: this.cancelDisabled || this.busy || this.isTransitioning\n              },\n              on: {\n                click: this.onCancel\n              }\n            }, [this.normalizeSlot('modal-cancel', {}) || (cancelHtml ? h('span', {\n              domProps: cancelHtml\n            }) : stripTags(this.cancelTitle))]);\n          }\n\n          var okHtml = this.okTitleHtml ? {\n            innerHTML: this.okTitleHtml\n          } : null;\n          var okButton = h(BButton, {\n            props: {\n              variant: this.okVariant,\n              size: this.buttonSize,\n              disabled: this.okDisabled || this.busy || this.isTransitioning\n            },\n            on: {\n              click: this.onOk\n            }\n          }, [this.normalizeSlot('modal-ok', {}) || (okHtml ? h('span', {\n            domProps: okHtml\n          }) : stripTags(this.okTitle))]);\n          modalFooter = [cancelButton, okButton];\n        }\n\n        footer = h('footer', {\n          ref: 'footer',\n          staticClass: 'modal-footer',\n          class: this.footerClasses,\n          attrs: {\n            id: this.safeId('__BV_modal_footer_')\n          }\n        }, [modalFooter]);\n      } // Assemble modal content\n\n\n      var modalContent = h('div', {\n        ref: 'content',\n        staticClass: 'modal-content',\n        class: this.contentClass,\n        attrs: {\n          role: 'document',\n          id: this.safeId('__BV_modal_content_'),\n          'aria-labelledby': this.hideHeader ? null : this.safeId('__BV_modal_header_'),\n          'aria-describedby': this.safeId('__BV_modal_body_')\n        }\n      }, [header, body, footer]); // Modal dialog wrapper\n\n      var modalDialog = h('div', {\n        staticClass: 'modal-dialog',\n        class: this.dialogClasses,\n        on: {\n          mousedown: this.onDialogMousedown\n        }\n      }, [modalContent]); // Modal\n\n      var modal = h('div', {\n        ref: 'modal',\n        staticClass: 'modal',\n        class: this.modalClasses,\n        style: this.modalStyles,\n        directives: [{\n          name: 'show',\n          rawName: 'v-show',\n          value: this.isVisible,\n          expression: 'isVisible'\n        }],\n        attrs: {\n          id: this.safeId(),\n          role: 'dialog',\n          tabindex: '-1',\n          'aria-hidden': this.isVisible ? null : 'true',\n          'aria-modal': this.isVisible ? 'true' : null\n        },\n        on: {\n          keydown: this.onEsc,\n          click: this.onClickOut\n        }\n      }, [modalDialog]); // Wrap modal in transition\n      // Sadly, we can't use BVTransition here due to the differences in\n      // transition durations for .modal and .modal-dialog. Not until\n      // issue https://github.com/vuejs/vue/issues/9986 is resolved\n\n      modal = h('transition', {\n        props: {\n          enterClass: '',\n          enterToClass: '',\n          enterActiveClass: '',\n          leaveClass: '',\n          leaveActiveClass: '',\n          leaveToClass: ''\n        },\n        on: {\n          beforeEnter: this.onBeforeEnter,\n          enter: this.onEnter,\n          afterEnter: this.onAfterEnter,\n          beforeLeave: this.onBeforeLeave,\n          leave: this.onLeave,\n          afterLeave: this.onAfterLeave\n        }\n      }, [modal]); // Modal backdrop\n\n      var backdrop = h(false);\n\n      if (!this.hideBackdrop && this.isVisible) {\n        backdrop = h('div', {\n          staticClass: 'modal-backdrop',\n          attrs: {\n            id: this.safeId('__BV_modal_backdrop_')\n          }\n        }, [this.normalizeSlot('modal-backdrop', {})]);\n      }\n\n      backdrop = h(bv_transition, {\n        props: {\n          noFade: this.noFade\n        }\n      }, [backdrop]); // Tab trap to prevent page from scrolling to next element in\n      // tab index during enforce focus tab cycle\n\n      var tabTrap = h(false);\n\n      if (this.isVisible && this.isTop && !this.noEnforceFocus) {\n        tabTrap = h('div', {\n          attrs: {\n            tabindex: '0'\n          }\n        });\n      } // Assemble modal and backdrop in an outer <div>\n\n\n      return h('div', {\n        key: \"modal-outer-\".concat(this._uid),\n        style: this.modalOuterStyle,\n        attrs: {\n          id: this.safeId('__BV_modal_outer_')\n        }\n      }, [modal, tabTrap, backdrop]);\n    }\n  },\n  render: function render(h) {\n    if (this.static) {\n      return this.lazy && this.isHidden ? h(false) : this.makeModal(h);\n    } else {\n      return this.isHidden ? h(false) : h(BTransporterSingle, {}, [this.makeModal(h)]);\n    }\n  }\n});\n/* harmony default export */ var modal_modal = (BModal);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/modal/modal.js\n\n // Target listen types\n\nvar modal_listenTypes = {\n  click: true // Emitted show event for modal\n\n};\nvar EVENT_SHOW = 'bv::show::modal';\n\nvar modal_setRole = function setRole(el, binding, vnode) {\n  if (el.tagName !== 'BUTTON') {\n    setAttr(el, 'role', 'button');\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar VBModal = {\n  // eslint-disable-next-line no-shadow-restricted-names\n  bind: function bind(el, binding, vnode) {\n    target_bindTargets(vnode, binding, modal_listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_SHOW, target, vnode.elm);\n      });\n    }); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    modal_setRole(el, binding, vnode);\n  },\n  updated: modal_setRole,\n  componentUpdated: modal_setRole,\n  unbind: function unbind(el, binding, vnode) {\n    target_unbindTargets(vnode, binding, modal_listenTypes); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    if (el.tagName !== 'BUTTON') {\n      removeAttr(el, 'role', 'button');\n    }\n  }\n};\n/* harmony default export */ var directives_modal_modal = (VBModal);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/modal/helpers/bv-modal.js\n\n\n\n\n\n\n\n\n\n\nfunction bv_modal_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction bv_modal_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bv_modal_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bv_modal_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Plugin for adding `$bvModal` property to all Vue instances\n */\n\n\n\n\n\n\n // --- Constants ---\n\nvar bv_modal_PROP_NAME = '$bvModal';\nvar PROP_NAME_PRIV = '_bv__modal'; // Base modal props that are allowed\n// Some may be ignored or overridden on some message boxes\n// Prop ID is allowed, but really only should be used for testing\n// We need to add it in explicitly as it comes from the `idMixin`\n\nvar BASE_PROPS = ['id'].concat(Object(toConsumableArray[\"a\" /* default */])(keys(object_omit(modal_props, ['busy', 'lazy', 'noStacking', \"static\", 'visible'])))); // Fallback event resolver (returns undefined)\n\nvar defaultResolver = function defaultResolver(bvModalEvt) {}; // Map prop names to modal slot names\n\n\nvar propsToSlots = {\n  msgBoxContent: 'default',\n  title: 'modal-title',\n  okTitle: 'modal-ok',\n  cancelTitle: 'modal-cancel' // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n};\n\nvar bv_modal_filterOptions = function filterOptions(options) {\n  return BASE_PROPS.reduce(function (memo, key) {\n    if (!isUndefined(options[key])) {\n      memo[key] = options[key];\n    }\n\n    return memo;\n  }, {});\n}; // Method to install `$bvModal` VM injection\n\n\nvar bv_modal_plugin = function plugin(Vue) {\n  // Create a private sub-component that extends BModal\n  // which self-destructs after hidden\n  // @vue/component\n  var BMsgBox = Vue.extend({\n    name: 'BMsgBox',\n    extends: modal_modal,\n    destroyed: function destroyed() {\n      // Make sure we not in document any more\n      if (this.$el && this.$el.parentNode) {\n        this.$el.parentNode.removeChild(this.$el);\n      }\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      // Self destruct handler\n      var handleDestroy = function handleDestroy() {\n        var self = _this;\n\n        _this.$nextTick(function () {\n          // In a `setTimeout()` to release control back to application\n          setTimeout(function () {\n            return self.$destroy();\n          }, 0);\n        });\n      }; // Self destruct if parent destroyed\n\n\n      this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n      this.$once('hidden', handleDestroy); // Self destruct on route change\n\n      /* istanbul ignore if */\n\n      if (this.$router && this.$route) {\n        var unwatch = this.$watch('$router', handleDestroy);\n        this.$once('hook:beforeDestroy', unwatch);\n      } // Show the `BMsgBox`\n\n\n      this.show();\n    }\n  }); // Method to generate the on-demand modal message box\n  // Returns a promise that resolves to a value returned by the resolve\n\n  var asyncMsgBox = function asyncMsgBox(props, $parent) {\n    var resolver = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultResolver;\n\n    if (warn_warnNotClient(bv_modal_PROP_NAME) || warn_warnNoPromiseSupport(bv_modal_PROP_NAME)) {\n      /* istanbul ignore next */\n      return;\n    } // Create an instance of `BMsgBox` component\n\n\n    var msgBox = new BMsgBox({\n      // We set parent as the local VM so these modals can emit events on\n      // the app `$root`, as needed by things like tooltips and popovers\n      // And it helps to ensure `BMsgBox` is destroyed when parent is destroyed\n      parent: $parent,\n      // Preset the prop values\n      propsData: bv_modal_objectSpread({}, bv_modal_filterOptions(getComponentConfig('BModal') || {}), {\n        // Defaults that user can override\n        hideHeaderClose: true,\n        hideHeader: !(props.title || props.titleHtml)\n      }, object_omit(props, keys(propsToSlots)), {\n        // Props that can't be overridden\n        lazy: false,\n        busy: false,\n        visible: false,\n        noStacking: false,\n        noEnforceFocus: false\n      })\n    }); // Convert certain props to scoped slots\n\n    keys(propsToSlots).forEach(function (prop) {\n      if (!isUndefined(props[prop])) {\n        // Can be a string, or array of VNodes.\n        // Alternatively, user can use HTML version of prop to pass an HTML string.\n        msgBox.$slots[propsToSlots[prop]] = concat(props[prop]);\n      }\n    }); // Return a promise that resolves when hidden, or rejects on destroyed\n\n    return new Promise(function (resolve, reject) {\n      var resolved = false;\n      msgBox.$once('hook:destroyed', function () {\n        if (!resolved) {\n          /* istanbul ignore next */\n          reject(new Error('BootstrapVue MsgBox destroyed before resolve'));\n        }\n      });\n      msgBox.$on('hide', function (bvModalEvt) {\n        if (!bvModalEvt.defaultPrevented) {\n          var result = resolver(bvModalEvt); // If resolver didn't cancel hide, we resolve\n\n          if (!bvModalEvt.defaultPrevented) {\n            resolved = true;\n            resolve(result);\n          }\n        }\n      }); // Create a mount point (a DIV) and mount the msgBo which will trigger it to show\n\n      var div = document.createElement('div');\n      document.body.appendChild(div);\n      msgBox.$mount(div);\n    });\n  }; // BvModal instance class\n\n\n  var BvModal =\n  /*#__PURE__*/\n  function () {\n    function BvModal(vm) {\n      Object(classCallCheck[\"a\" /* default */])(this, BvModal);\n\n      // Assign the new properties to this instance\n      object_assign(this, {\n        _vm: vm,\n        _root: vm.$root\n      }); // Set these properties as read-only and non-enumerable\n\n      defineProperties(this, {\n        _vm: readonlyDescriptor(),\n        _root: readonlyDescriptor()\n      });\n    } // --- Instance methods ---\n    // Show modal with the specified ID args are for future use\n\n\n    Object(createClass[\"a\" /* default */])(BvModal, [{\n      key: \"show\",\n      value: function show(id) {\n        if (id && this._root) {\n          var _this$_root;\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          (_this$_root = this._root).$emit.apply(_this$_root, ['bv::show::modal', id].concat(args));\n        }\n      } // Hide modal with the specified ID args are for future use\n\n    }, {\n      key: \"hide\",\n      value: function hide(id) {\n        if (id && this._root) {\n          var _this$_root2;\n\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          (_this$_root2 = this._root).$emit.apply(_this$_root2, ['bv::hide::modal', id].concat(args));\n        }\n      } // The following methods require Promise support!\n      // IE 11 and others do not support Promise natively, so users\n      // should have a Polyfill loaded (which they need anyways for IE 11 support)\n      // Opens a user defined message box and returns a promise\n      // Not yet documented\n\n    }, {\n      key: \"msgBox\",\n      value: function msgBox(content) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var resolver = arguments.length > 2 ? arguments[2] : undefined;\n\n        if (!content || warn_warnNoPromiseSupport(bv_modal_PROP_NAME) || warn_warnNotClient(bv_modal_PROP_NAME) || !isFunction(resolver)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        return asyncMsgBox(bv_modal_objectSpread({}, bv_modal_filterOptions(options), {\n          msgBoxContent: content\n        }), this._vm, resolver);\n      } // Open a message box with OK button only and returns a promise\n\n    }, {\n      key: \"msgBoxOk\",\n      value: function msgBoxOk(message) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // Pick the modal props we support from options\n        var props = bv_modal_objectSpread({}, options, {\n          // Add in overrides and our content prop\n          okOnly: true,\n          okDisabled: false,\n          hideFooter: false,\n          msgBoxContent: message\n        });\n\n        return this.msgBox(message, props, function (bvModalEvt) {\n          // Always resolve to true for OK\n          return true;\n        });\n      } // Open a message box modal with OK and CANCEL buttons\n      // and returns a promise\n\n    }, {\n      key: \"msgBoxConfirm\",\n      value: function msgBoxConfirm(message) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // Set the modal props we support from options\n        var props = bv_modal_objectSpread({}, options, {\n          // Add in overrides and our content prop\n          okOnly: false,\n          okDisabled: false,\n          cancelDisabled: false,\n          hideFooter: false\n        });\n\n        return this.msgBox(message, props, function (bvModalEvt) {\n          var trigger = bvModalEvt.trigger;\n          return trigger === 'ok' ? true : trigger === 'cancel' ? false : null;\n        });\n      }\n    }]);\n\n    return BvModal;\n  }(); // Add our instance mixin\n\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate() {\n      // Because we need access to `$root` for `$emits`, and VM for parenting,\n      // we have to create a fresh instance of `BvModal` for each VM\n      this[PROP_NAME_PRIV] = new BvModal(this);\n    }\n  }); // Define our read-only `$bvModal` instance property\n  // Placed in an if just in case in HMR mode\n\n  if (!Vue.prototype.hasOwnProperty(bv_modal_PROP_NAME)) {\n    object_defineProperty(Vue.prototype, bv_modal_PROP_NAME, {\n      get: function get() {\n        /* istanbul ignore next */\n        if (!this || !this[PROP_NAME_PRIV]) {\n          warn_warn(\"'\".concat(bv_modal_PROP_NAME, \"' must be accessed from a Vue instance 'this' context\"));\n        }\n\n        return this[PROP_NAME_PRIV];\n      }\n    });\n  }\n};\n\nvar BVModalPlugin =\n/*#__PURE__*/\npluginFactory({\n  plugins: {\n    plugin: bv_modal_plugin\n  }\n});\n/* harmony default export */ var bv_modal = (BVModalPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/modal/index.js\n\n\n\n\nvar ModalPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BModal: BModal\n  },\n  directives: {\n    VBModal: VBModal\n  },\n  // $bvModal injection\n  plugins: {\n    BVModalPlugin: BVModalPlugin\n  }\n});\n\n/* harmony default export */ var components_modal = (ModalPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.small.js\nvar es6_string_small = __webpack_require__(54);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.fill.js\nvar es6_array_fill = __webpack_require__(90);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/nav.js\n\n\n\n\n // -- Constants --\n\nvar nav_DEPRECATED_MSG = 'Setting prop \"is-nav-bar\" is deprecated. Use the <b-navbar-nav> component instead.';\nvar nav_props = {\n  tag: {\n    type: String,\n    default: 'ul'\n  },\n  fill: {\n    type: Boolean,\n    default: false\n  },\n  justified: {\n    type: Boolean,\n    default: false\n  },\n  align: {\n    type: String,\n    default: null\n  },\n  tabs: {\n    type: Boolean,\n    default: false\n  },\n  pills: {\n    type: Boolean,\n    default: false\n  },\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  small: {\n    type: Boolean,\n    default: false\n  },\n  isNavBar: {\n    type: Boolean,\n    default: false,\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: nav_DEPRECATED_MSG\n  } // -- Utils --\n\n};\n\nvar computeJustifyContent = function computeJustifyContent(value) {\n  // Normalize value\n  value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n  return \"justify-content-\".concat(value);\n}; // @vue/component\n\n\nvar BNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNav',\n  functional: true,\n  props: nav_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      class: (_class = {\n        nav: !props.isNavBar,\n        'navbar-nav': props.isNavBar,\n        'nav-tabs': props.tabs && !props.isNavBar,\n        'nav-pills': props.pills && !props.isNavBar,\n        'flex-column': props.vertical && !props.isNavBar,\n        'nav-fill': !props.vertical && props.fill,\n        'nav-justified': !props.vertical && props.justified\n      }, Object(defineProperty[\"a\" /* default */])(_class, computeJustifyContent(props.align), !props.vertical && props.align), Object(defineProperty[\"a\" /* default */])(_class, \"small\", props.small), _class)\n    }), children);\n  }\n});\n/* harmony default export */ var nav_nav = (BNav);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/nav-item.js\n\n\n\n\n\n\n\nfunction nav_item_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction nav_item_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { nav_item_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { nav_item_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\nvar nav_item_props = propsFactory(); // @vue/component\n\nvar BNavItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavItem',\n  functional: true,\n  props: nav_item_objectSpread({}, nav_item_props, {\n    linkAttrs: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    linkClasses: {\n      type: [String, Object, Array],\n      default: null\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        listeners = _ref.listeners,\n        children = _ref.children;\n    // We transfer the listeners to the link\n    delete data.on;\n    return h('li', lib_esm_a(data, {\n      staticClass: 'nav-item'\n    }), [h(BLink, {\n      staticClass: 'nav-link',\n      class: props.linkClasses,\n      attrs: props.linkAttrs,\n      props: props,\n      on: listeners\n    }, children)]);\n  }\n});\n/* harmony default export */ var nav_item = (BNavItem);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/nav-text.js\n\n\nvar nav_text_props = {\n  tag: {\n    type: String,\n    default: 'span'\n  } // @vue/component\n\n};\nvar BNavText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavText',\n  functional: true,\n  props: nav_text_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'navbar-text'\n    }), children);\n  }\n});\n/* harmony default export */ var nav_text = (BNavText);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/nav-form.js\n\n\n\n\n\n\n\nfunction nav_form_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction nav_form_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { nav_form_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { nav_form_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar nav_form_props = object_omit(form_props, ['inline']); // @vue/component\n\nvar BNavForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavForm',\n  functional: true,\n  props: nav_form_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(BForm, lib_esm_a(data, {\n      props: nav_form_objectSpread({}, props, {\n        inline: true\n      })\n    }), children);\n  }\n});\n/* harmony default export */ var nav_form = (BNavForm);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/nav-item-dropdown.js\n\n\n\n\n\n\n\nfunction nav_item_dropdown_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction nav_item_dropdown_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { nav_item_dropdown_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { nav_item_dropdown_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n // -- Constants --\n\nvar nav_item_dropdown_props = nav_item_dropdown_objectSpread({}, pluck_props(['menuClass', 'toggleClass', 'noCaret', 'role'], dropdown_props), {\n  extraMenuClasses: {\n    type: String,\n    default: '',\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: 'Setting prop \"extra-menu-classes\" is deprecated. Use \"menu-class\" prop instead.'\n  },\n  extraToggleClasses: {\n    type: String,\n    default: '',\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: 'Setting prop \"extra-toggle-classes\" is deprecated. Use \"toggle-class\" prop instead.'\n  } // @vue/component\n\n});\nvar BNavItemDropdown =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavItemDropdown',\n  mixins: [mixins_id, mixins_dropdown, mixins_normalize_slot],\n  props: nav_item_dropdown_props,\n  computed: {\n    isNav: function isNav() {\n      // Signal to dropdown mixin that we are in a navbar\n      return true;\n    },\n    dropdownClasses: function dropdownClasses() {\n      return [this.directionClass, {\n        show: this.visible\n      }];\n    },\n    menuClasses: function menuClasses() {\n      return [this.extraMenuClasses, // Deprecated\n      this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n    toggleClasses: function toggleClasses() {\n      return [this.extraToggleClasses, // Deprecated\n      this.toggleClass, {\n        disabled: this.disabled,\n        'dropdown-toggle-no-caret': this.noCaret\n      }];\n    }\n  },\n  render: function render(h) {\n    var button = h(BLink, {\n      ref: 'toggle',\n      staticClass: 'nav-link dropdown-toggle',\n      class: this.toggleClasses,\n      props: {\n        href: '#',\n        disabled: this.disabled\n      },\n      attrs: {\n        id: this.safeId('_BV_button_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': String(this.visible)\n      },\n      on: {\n        click: this.toggle,\n        keydown: this.toggle // space, enter, down\n\n      }\n    }, [this.$slots['button-content'] || this.$slots.text || h('span', {\n      domProps: htmlOrText(this.html, this.text)\n    })]);\n    var menu = h('ul', {\n      staticClass: 'dropdown-menu',\n      class: this.menuClasses,\n      ref: 'menu',\n      attrs: {\n        tabindex: '-1',\n        'aria-labelledby': this.safeId('_BV_button_')\n      },\n      on: {\n        keydown: this.onKeydown // up, down, esc\n\n      }\n    }, !this.lazy || this.visible ? this.normalizeSlot('default', {\n      hide: this.hide\n    }) : [h(false)]);\n    return h('li', {\n      staticClass: 'nav-item b-nav-dropdown dropdown',\n      class: this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [button, menu]);\n  }\n});\n/* harmony default export */ var nav_item_dropdown = (BNavItemDropdown);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/nav/index.js\n\n\n\n\n\n\n\nvar NavPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BNav: BNav,\n    BNavItem: BNavItem,\n    BNavText: BNavText,\n    BNavForm: BNavForm,\n    BNavItemDropdown: BNavItemDropdown,\n    BNavItemDd: BNavItemDropdown,\n    BNavDropdown: BNavItemDropdown,\n    BNavDd: BNavItemDropdown\n  },\n  plugins: {\n    DropdownPlugin: DropdownPlugin\n  }\n});\n\n/* harmony default export */ var components_nav = (NavPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.fixed.js\nvar es6_string_fixed = __webpack_require__(125);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/navbar/navbar.js\n\n\n\n\n\n\nvar navbar_NAME = 'BNavbar';\nvar navbar_props = {\n  tag: {\n    type: String,\n    default: 'nav'\n  },\n  type: {\n    type: String,\n    default: 'light'\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(navbar_NAME, 'variant');\n    }\n  },\n  toggleable: {\n    type: [Boolean, String],\n    default: false\n  },\n  fixed: {\n    type: String\n  },\n  sticky: {\n    type: Boolean,\n    default: false\n  },\n  print: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BNavbar =\n/*#__PURE__*/\nvue.extend({\n  name: navbar_NAME,\n  functional: true,\n  props: navbar_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var breakpoint = '';\n    var xs = getBreakpoints()[0];\n\n    if (props.toggleable && isString(props.toggleable) && props.toggleable !== xs) {\n      breakpoint = \"navbar-expand-\".concat(props.toggleable);\n    } else if (props.toggleable === false) {\n      breakpoint = 'navbar-expand';\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'navbar',\n      class: (_class = {\n        'd-print': props.print,\n        'sticky-top': props.sticky\n      }, Object(defineProperty[\"a\" /* default */])(_class, \"navbar-\".concat(props.type), Boolean(props.type)), Object(defineProperty[\"a\" /* default */])(_class, \"bg-\".concat(props.variant), Boolean(props.variant)), Object(defineProperty[\"a\" /* default */])(_class, \"fixed-\".concat(props.fixed), Boolean(props.fixed)), Object(defineProperty[\"a\" /* default */])(_class, \"\".concat(breakpoint), Boolean(breakpoint)), _class),\n      attrs: {\n        role: props.tag === 'nav' ? null : 'navigation'\n      }\n    }), children);\n  }\n});\n/* harmony default export */ var navbar = (BNavbar);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/navbar/navbar-nav.js\n\n\n\n\n\n\n // -- Constants --\n\nvar navbar_nav_props = pluck_props(['tag', 'fill', 'justified', 'align', 'small'], nav_props); // -- Utils --\n\nvar navbar_nav_computeJustifyContent = function computeJustifyContent(value) {\n  // Normalize value\n  value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n  return \"justify-content-\".concat(value);\n}; // @vue/component\n\n\nvar BNavbarNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavbarNav',\n  functional: true,\n  props: navbar_nav_props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    return h(props.tag, lib_esm_a(data, {\n      staticClass: 'navbar-nav',\n      class: (_class = {\n        'nav-fill': props.fill,\n        'nav-justified': props.justified\n      }, Object(defineProperty[\"a\" /* default */])(_class, navbar_nav_computeJustifyContent(props.align), props.align), Object(defineProperty[\"a\" /* default */])(_class, \"small\", props.small), _class)\n    }), children);\n  }\n});\n/* harmony default export */ var navbar_nav = (BNavbarNav);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/navbar/navbar-brand.js\n\n\n\n\n\n\n\nfunction navbar_brand_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction navbar_brand_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { navbar_brand_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { navbar_brand_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar navbar_brand_linkProps = propsFactory();\nnavbar_brand_linkProps.href.default = undefined;\nnavbar_brand_linkProps.to.default = undefined;\nvar navbar_brand_props = navbar_brand_objectSpread({}, navbar_brand_linkProps, {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n});\nvar BNavbarBrand =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavbarBrand',\n  functional: true,\n  props: navbar_brand_props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var isLink = Boolean(props.to || props.href);\n    var tag = isLink ? BLink : props.tag;\n    return h(tag, lib_esm_a(data, {\n      staticClass: 'navbar-brand',\n      props: isLink ? pluck_props(navbar_brand_linkProps, props) : {}\n    }), children);\n  }\n});\n/* harmony default export */ var navbar_brand = (BNavbarBrand);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/navbar/navbar-toggle.js\n\n\n\n\nvar navbar_toggle_NAME = 'BNavbarToggle'; // TODO: Switch to using VBToggle directive, will reduce code footprint\n// Events we emit on $root\n\nvar navbar_toggle_EVENT_TOGGLE = 'bv::toggle::collapse'; // Events we listen to on $root\n\nvar navbar_toggle_EVENT_STATE = 'bv::collapse::state'; // This private event is NOT to be documented as people should not be using it.\n\nvar navbar_toggle_EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // @vue/component\n\nvar BNavbarToggle =\n/*#__PURE__*/\nvue.extend({\n  name: navbar_toggle_NAME,\n  mixins: [listen_on_root, mixins_normalize_slot],\n  props: {\n    label: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(navbar_toggle_NAME, 'label');\n      }\n    },\n    target: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      toggleState: false\n    };\n  },\n  created: function created() {\n    this.listenOnRoot(navbar_toggle_EVENT_STATE, this.handleStateEvt);\n    this.listenOnRoot(navbar_toggle_EVENT_STATE_SYNC, this.handleStateEvt);\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n\n      if (!evt.defaultPrevented) {\n        this.$root.$emit(navbar_toggle_EVENT_TOGGLE, this.target);\n      }\n    },\n    handleStateEvt: function handleStateEvt(id, state) {\n      if (id === this.target) {\n        this.toggleState = state;\n      }\n    }\n  },\n  render: function render(h) {\n    return h('button', {\n      class: ['navbar-toggler'],\n      attrs: {\n        type: 'button',\n        'aria-label': this.label,\n        'aria-controls': this.target,\n        'aria-expanded': this.toggleState ? 'true' : 'false'\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [this.normalizeSlot('default') || h('span', {\n      class: ['navbar-toggler-icon']\n    })]);\n  }\n});\n/* harmony default export */ var navbar_toggle = (BNavbarToggle);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/navbar/index.js\n\n\n\n\n\n\n\n\nvar NavbarPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BNavbar: BNavbar,\n    BNavbarNav: BNavbarNav,\n    BNavbarBrand: BNavbarBrand,\n    BNavbarToggle: BNavbarToggle,\n    BNavToggle: BNavbarToggle\n  },\n  plugins: {\n    NavPlugin: NavPlugin,\n    CollapsePlugin: CollapsePlugin,\n    DropdownPlugin: DropdownPlugin\n  }\n});\n\n/* harmony default export */ var components_navbar = (NavbarPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/range.js\n/**\n * @param {number} length\n * @return {Array}\n */\nvar range = function range(length) {\n  return Array.apply(null, {\n    length: length\n  });\n};\n\n/* harmony default export */ var utils_range = (range);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/pagination.js\n\n\n\n/*\n * Common props, computed, data, render function, and methods\n * for <b-pagination> and <b-pagination-nav>\n */\n\n\n\n\n\n\n\n // Threshold of limit size when we start/stop showing ellipsis\n\nvar ELLIPSIS_THRESHOLD = 3; // Default # of buttons limit\n\nvar DEFAULT_LIMIT = 5; // Make an array of N to N+X\n\nfunction makePageArray(startNum, numPages) {\n  return utils_range(numPages).map(function (value, index) {\n    return {\n      number: index + startNum,\n      classes: null\n    };\n  });\n} // Sanitize the provided Limit value (converting to a number)\n\n\nfunction sanitizeLimit(value) {\n  var limit = parseInt(value, 10) || 1;\n  return limit < 1 ? DEFAULT_LIMIT : limit;\n} // Sanitize the provided current page number (converting to a number)\n\n\nfunction sanitizeCurPage(value, numPages) {\n  var page = parseInt(value, 10) || 1;\n  return page > numPages ? numPages : page < 1 ? 1 : page;\n} // Links don't normally respond to SPACE, so we add that functionality via this handler\n\n\nfunction onSpaceKey(evt) {\n  if (evt.keyCode === key_codes.SPACE) {\n    evt.preventDefault(); // Stop page from scrolling\n\n    evt.stopImmediatePropagation();\n    evt.stopPropagation(); // Trigger the click event on the link\n\n    evt.currentTarget.click();\n    return false;\n  }\n} // Props object\n\n\nvar pagination_props = {\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  value: {\n    type: [Number, String],\n    default: null,\n    validator: function validator(value) {\n      var num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (!isNull(value) && (isNaN(num) || num < 1)) {\n        utils_warn('pagination: v-model value must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n  },\n  limit: {\n    type: [Number, String],\n    default: DEFAULT_LIMIT,\n    validator: function validator(value) {\n      var num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (isNaN(num) || num < 1) {\n        utils_warn('pagination: prop \"limit\" must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n  },\n  size: {\n    type: String,\n    default: 'md'\n  },\n  align: {\n    type: String,\n    default: 'left'\n  },\n  hideGotoEndButtons: {\n    type: Boolean,\n    default: false\n  },\n  ariaLabel: {\n    type: String,\n    default: 'Pagination'\n  },\n  labelFirstPage: {\n    type: String,\n    default: 'Go to first page'\n  },\n  firstText: {\n    type: String,\n    default: \"\\xAB\" // '«'\n\n  },\n  labelPrevPage: {\n    type: String,\n    default: 'Go to previous page'\n  },\n  prevText: {\n    type: String,\n    default: \"\\u2039\" // '‹'\n\n  },\n  labelNextPage: {\n    type: String,\n    default: 'Go to next page'\n  },\n  nextText: {\n    type: String,\n    default: \"\\u203A\" // '›'\n\n  },\n  labelLastPage: {\n    type: String,\n    default: 'Go to last page'\n  },\n  lastText: {\n    type: String,\n    default: \"\\xBB\" // '»'\n\n  },\n  labelPage: {\n    type: [String, Function],\n    default: 'Go to page'\n  },\n  hideEllipsis: {\n    type: Boolean,\n    default: false\n  },\n  ellipsisText: {\n    type: String,\n    default: \"\\u2026\" // '…'\n\n  } // @vue/component\n\n};\n/* harmony default export */ var mixins_pagination = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: pagination_props,\n  data: function data() {\n    var curr = parseInt(this.value, 10);\n    return {\n      // -1 signifies no page initially selected\n      currentPage: curr > 0 ? curr : -1,\n      localNumPages: 1,\n      localLimit: DEFAULT_LIMIT\n    };\n  },\n  computed: {\n    btnSize: function btnSize() {\n      return this.size ? \"pagination-\".concat(this.size) : '';\n    },\n    alignment: function alignment() {\n      var align = this.align;\n\n      if (align === 'center') {\n        return 'justify-content-center';\n      } else if (align === 'end' || align === 'right') {\n        return 'justify-content-end';\n      } else if (align === 'fill') {\n        // The page-items will also have 'flex-fill' added.\n        // We ad text centering to make the button appearance better in fill mode.\n        return 'text-center';\n      }\n\n      return '';\n    },\n    computedCurrentPage: function computedCurrentPage() {\n      return sanitizeCurPage(this.currentPage, this.localNumPages);\n    },\n    paginationParams: function paginationParams() {\n      // Determine if we should show the the ellipsis\n      var limit = this.limit;\n      var numPages = this.localNumPages;\n      var curPage = this.computedCurrentPage;\n      var hideEllipsis = this.hideEllipsis;\n      var showFirstDots = false;\n      var showLastDots = false;\n      var numLinks = limit;\n      var startNum = 1;\n\n      if (numPages <= limit) {\n        // Special Case: Less pages available than the limit of displayed pages\n        numLinks = numPages;\n      } else if (curPage < limit - 1 && limit > ELLIPSIS_THRESHOLD) {\n        // We are near the beginning of the page list\n        if (!hideEllipsis) {\n          showLastDots = true;\n          numLinks = limit - 1;\n        }\n      } else if (numPages - curPage + 2 < limit && limit > ELLIPSIS_THRESHOLD) {\n        // We are near the end of the list\n        if (!hideEllipsis) {\n          numLinks = limit - 1;\n          showFirstDots = true;\n        }\n\n        startNum = numPages - numLinks + 1;\n      } else {\n        // We are somewhere in the middle of the page list\n        if (limit > ELLIPSIS_THRESHOLD && !hideEllipsis) {\n          numLinks = limit - 2;\n          showFirstDots = showLastDots = true;\n        }\n\n        startNum = curPage - Math.floor(numLinks / 2);\n      } // Sanity checks\n\n\n      if (startNum < 1) {\n        /* istanbul ignore next */\n        startNum = 1;\n      } else if (startNum > numPages - numLinks) {\n        startNum = numPages - numLinks + 1;\n      }\n\n      return {\n        showFirstDots: showFirstDots,\n        showLastDots: showLastDots,\n        numLinks: numLinks,\n        startNum: startNum\n      };\n    },\n    pageList: function pageList() {\n      // Generates the pageList array\n      var _this$paginationParam = this.paginationParams,\n          numLinks = _this$paginationParam.numLinks,\n          startNum = _this$paginationParam.startNum;\n      var currPage = this.computedCurrentPage; // Generate list of page numbers\n\n      var pages = makePageArray(startNum, numLinks); // We limit to a total of 3 page buttons on XS screens\n      // So add classes to page links to hide them for XS breakpoint\n      // Note: Ellipsis will also be hidden on XS screens\n      // TODO: Make this visual limit configurable based on breakpoint(s)\n\n      if (pages.length > 3) {\n        var idx = currPage - startNum; // THe following is a bootstrap-vue custom utility class\n\n        var classes = 'bv-d-xs-down-none';\n\n        if (idx === 0) {\n          // Keep leftmost 3 buttons visible when current page is first page\n          for (var i = 3; i < pages.length; i++) {\n            pages[i].classes = classes;\n          }\n        } else if (idx === pages.length - 1) {\n          // Keep rightmost 3 buttons visible when current page is last page\n          for (var _i = 0; _i < pages.length - 3; _i++) {\n            pages[_i].classes = classes;\n          }\n        } else {\n          // Hide all except current page, current page - 1 and current page + 1\n          for (var _i2 = 0; _i2 < idx - 1; _i2++) {\n            // hide some left button(s)\n            pages[_i2].classes = classes;\n          }\n\n          for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {\n            // hide some right button(s)\n            pages[_i3].classes = classes;\n          }\n        }\n      }\n\n      return pages;\n    }\n  },\n  watch: {\n    value: function value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.currentPage = sanitizeCurPage(newValue, this.localNumPages);\n      }\n    },\n    currentPage: function currentPage(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        // Emit null if no page selected\n        this.$emit('input', newValue > 0 ? newValue : null);\n      }\n    },\n    limit: function limit(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.localLimit = sanitizeLimit(newValue);\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set our default values in data\n    this.localLimit = sanitizeLimit(this.limit);\n    this.$nextTick(function () {\n      // Sanity check\n      _this.currentPage = _this.currentPage > _this.localNumPages ? _this.localNumPages : _this.currentPage;\n    });\n  },\n  methods: {\n    getButtons: function getButtons() {\n      // Return only buttons that are visible\n      return dom_selectAll('a.page-link', this.$el).filter(function (btn) {\n        return isVisible(btn);\n      });\n    },\n    setBtnFocus: function setBtnFocus(btn) {\n      btn.focus();\n    },\n    focusCurrent: function focusCurrent() {\n      var _this2 = this;\n\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(function () {\n        var btn = _this2.getButtons().find(function (el) {\n          return parseInt(getAttr(el, 'aria-posinset'), 10) === _this2.computedCurrentPage;\n        });\n\n        if (btn && btn.focus) {\n          _this2.setBtnFocus(btn);\n        } else {\n          // Fallback if current page is not in button list\n          _this2.focusFirst();\n        }\n      });\n    },\n    focusFirst: function focusFirst() {\n      var _this3 = this;\n\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(function () {\n        var btn = _this3.getButtons().find(function (el) {\n          return !dom_isDisabled(el);\n        });\n\n        if (btn && btn.focus && btn !== document.activeElement) {\n          _this3.setBtnFocus(btn);\n        }\n      });\n    },\n    focusLast: function focusLast() {\n      var _this4 = this;\n\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(function () {\n        var btn = _this4.getButtons().reverse().find(function (el) {\n          return !dom_isDisabled(el);\n        });\n\n        if (btn && btn.focus && btn !== document.activeElement) {\n          _this4.setBtnFocus(btn);\n        }\n      });\n    },\n    focusPrev: function focusPrev() {\n      var _this5 = this;\n\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(function () {\n        var buttons = _this5.getButtons();\n\n        var idx = buttons.indexOf(document.activeElement);\n\n        if (idx > 0 && !dom_isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {\n          _this5.setBtnFocus(buttons[idx - 1]);\n        }\n      });\n    },\n    focusNext: function focusNext() {\n      var _this6 = this;\n\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(function () {\n        var buttons = _this6.getButtons();\n\n        var idx = buttons.indexOf(document.activeElement);\n        var cnt = buttons.length - 1;\n\n        if (idx < cnt && !dom_isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {\n          _this6.setBtnFocus(buttons[idx + 1]);\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var _this7 = this;\n\n    var buttons = [];\n    var numberOfPages = this.localNumPages;\n    var disabled = this.disabled;\n    var _this$paginationParam2 = this.paginationParams,\n        showFirstDots = _this$paginationParam2.showFirstDots,\n        showLastDots = _this$paginationParam2.showLastDots;\n    var currPage = this.computedCurrentPage;\n    var fill = this.align === 'fill'; // Helper function and flag\n\n    var isActivePage = function isActivePage(pageNum) {\n      return pageNum === currPage;\n    };\n\n    var noCurrPage = this.currentPage < 1; // Factory function for prev/next/first/last buttons\n\n    var makeEndBtn = function makeEndBtn(linkTo, ariaLabel, btnSlot, btnText, pageTest, key) {\n      var isDisabled = disabled || isActivePage(pageTest) || noCurrPage || linkTo < 1 || linkTo > numberOfPages;\n      var pageNum = linkTo < 1 ? 1 : linkTo > numberOfPages ? numberOfPages : linkTo;\n      var scope = {\n        disabled: isDisabled,\n        page: pageNum,\n        index: pageNum - 1\n      };\n      var btnContent = _this7.normalizeSlot(btnSlot, scope) || to_string(btnText) || h(false);\n      var inner = h(isDisabled ? 'span' : BLink, {\n        staticClass: 'page-link',\n        props: isDisabled ? {} : _this7.linkProps(linkTo),\n        attrs: {\n          role: 'menuitem',\n          tabindex: isDisabled ? null : '-1',\n          'aria-label': ariaLabel,\n          'aria-controls': _this7.ariaControls || null,\n          'aria-disabled': isDisabled ? 'true' : null\n        },\n        on: isDisabled ? {} : {\n          click: function click(evt) {\n            _this7.onClick(linkTo, evt);\n          },\n          keydown: onSpaceKey\n        }\n      }, [btnContent]);\n      return h('li', {\n        key: key,\n        staticClass: 'page-item',\n        class: {\n          disabled: isDisabled,\n          'flex-fill': fill\n        },\n        attrs: {\n          role: 'none presentation',\n          'aria-hidden': isDisabled ? 'true' : null\n        }\n      }, [inner]);\n    }; // Ellipsis factory\n\n\n    var makeEllipsis = function makeEllipsis(isLast) {\n      return h('li', {\n        key: \"ellipsis-\".concat(isLast ? 'last' : 'first'),\n        staticClass: 'page-item',\n        class: ['disabled', 'bv-d-xs-down-none', fill ? 'flex-fill' : ''],\n        attrs: {\n          role: 'separator'\n        }\n      }, [h('span', {\n        staticClass: 'page-link'\n      }, [_this7.normalizeSlot('ellipsis-text', {}) || to_string(_this7.ellipsisText) || h(false)])]);\n    }; // Goto First Page button bookend\n\n\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(1, this.labelFirstPage, 'first-text', this.firstText, 1, 'bookend-goto-first')); // Goto Previous page button bookend\n\n    buttons.push(makeEndBtn(currPage - 1, this.labelPrevPage, 'prev-text', this.prevText, 1, 'bookend-goto-prev')); // First Ellipsis Bookend\n\n    buttons.push(showFirstDots ? makeEllipsis(false) : h(false)); // Individual Page links\n\n    this.pageList.forEach(function (page, idx) {\n      var active = isActivePage(page.number) && !noCurrPage; // Active page will have tabindex of 0, or if no current page and first page button\n\n      var tabIndex = disabled ? null : active || noCurrPage && idx === 0 ? '0' : '-1';\n      var attrs = {\n        role: 'menuitemradio',\n        'aria-disabled': disabled ? 'true' : null,\n        'aria-controls': _this7.ariaControls || null,\n        'aria-label': isFunction(_this7.labelPage) ? _this7.labelPage(page.number) : \"\".concat(_this7.labelPage, \" \").concat(page.number),\n        'aria-checked': active ? 'true' : 'false',\n        'aria-posinset': page.number,\n        'aria-setsize': numberOfPages,\n        // ARIA \"roving tabindex\" method\n        tabindex: tabIndex\n      };\n      var btnContent = to_string(_this7.makePage(page.number));\n      var scope = {\n        page: page.number,\n        index: page.number - 1,\n        content: btnContent,\n        active: active,\n        disabled: disabled\n      };\n      var inner = h(disabled ? 'span' : BLink, {\n        props: disabled ? {} : _this7.linkProps(page.number),\n        staticClass: 'page-link',\n        attrs: attrs,\n        on: disabled ? {} : {\n          click: function click(evt) {\n            _this7.onClick(page.number, evt);\n          },\n          keydown: onSpaceKey\n        }\n      }, [_this7.normalizeSlot('page', scope) || btnContent]);\n      buttons.push(h('li', {\n        key: \"page-\".concat(page.number),\n        staticClass: 'page-item',\n        class: [{\n          disabled: disabled,\n          active: active,\n          'flex-fill': fill\n        }, page.classes],\n        attrs: {\n          role: 'none presentation'\n        }\n      }, [inner]));\n    }); // Last Ellipsis Bookend\n\n    buttons.push(showLastDots ? makeEllipsis(true) : h(false)); // Goto Next page button bookend\n\n    buttons.push(makeEndBtn(currPage + 1, this.labelNextPage, 'next-text', this.nextText, numberOfPages, 'bookend-goto-next')); // Goto Last Page button bookend\n\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(numberOfPages, this.labelLastPage, 'last-text', this.lastText, numberOfPages, 'bookend-goto-last')); // Assemble the pagination buttons\n\n    var pagination = h('ul', {\n      ref: 'ul',\n      staticClass: 'pagination',\n      class: ['b-pagination', this.btnSize, this.alignment],\n      attrs: {\n        role: 'menubar',\n        'aria-disabled': disabled ? 'true' : 'false',\n        'aria-label': this.ariaLabel || null\n      },\n      on: {\n        keydown: function keydown(evt) {\n          var keyCode = evt.keyCode;\n          var shift = evt.shiftKey;\n\n          if (keyCode === key_codes.LEFT) {\n            evt.preventDefault();\n            shift ? _this7.focusFirst() : _this7.focusPrev();\n          } else if (keyCode === key_codes.RIGHT) {\n            evt.preventDefault();\n            shift ? _this7.focusLast() : _this7.focusNext();\n          }\n        }\n      }\n    }, buttons); // if we are pagination-nav, wrap in '<nav>' wrapper\n\n    if (this.isNav) {\n      return h('nav', {\n        attrs: {\n          'aria-disabled': disabled ? 'true' : null,\n          'aria-hidden': disabled ? 'true' : 'false'\n        }\n      }, [pagination]);\n    } else {\n      return pagination;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/pagination/pagination.js\n\n\n\n\nvar DEFAULT_PER_PAGE = 20;\nvar DEFAULT_TOTAL_ROWS = 0;\n\nfunction sanitizePerPage(value) {\n  var perPage = parseInt(value, 10) || DEFAULT_PER_PAGE;\n  return perPage < 1 ? 1 : perPage;\n}\n\nfunction sanitizeTotalRows(value) {\n  var totalRows = parseInt(value, 10) || DEFAULT_TOTAL_ROWS;\n  return totalRows < 0 ? 0 : totalRows;\n}\n\nvar pagination_pagination_props = {\n  perPage: {\n    type: [Number, String],\n    default: DEFAULT_PER_PAGE\n  },\n  totalRows: {\n    type: [Number, String],\n    default: DEFAULT_TOTAL_ROWS\n  },\n  ariaControls: {\n    type: String,\n    default: null\n  } // Our render function is brought in from the pagination mixin\n  // @vue/component\n\n};\nvar BPagination =\n/*#__PURE__*/\nvue.extend({\n  name: 'BPagination',\n  mixins: [mixins_pagination],\n  props: pagination_pagination_props,\n  computed: {\n    numberOfPages: function numberOfPages() {\n      var result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));\n      return result < 1 ? 1 : result;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages(newVal) {\n      if (newVal === this.localNumPages) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localNumPages = newVal;\n      this.currentPage = 1;\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set the initial page count\n    this.localNumPages = this.numberOfPages; // Set the initial page value\n\n    var curr = parseInt(this.value, 10) || 0;\n\n    if (curr > 0) {\n      this.currentPage = curr;\n    } else {\n      this.$nextTick(function () {\n        // If this value parses to NaN or a value less than 1\n        // Trigger an initial emit of 'null' if no page specified\n        _this.currentPage = 0;\n      });\n    }\n  },\n  mounted: function mounted() {\n    // Set the initial page count\n    this.localNumPages = this.numberOfPages;\n  },\n  methods: {\n    // These methods are used by the render function\n    onClick: function onClick(num, evt) {\n      var _this2 = this;\n\n      // Handle edge cases where number of pages has changed (i.e. if perPage changes)\n      // This should normally not happen, but just in case.\n      if (num > this.numberOfPages) {\n        /* istanbul ignore next */\n        num = this.numberOfPages;\n      } else if (num < 1) {\n        /* istanbul ignore next */\n        num = 1;\n      } // Update the v-model\n\n\n      this.currentPage = num; // Emit event triggered by user interaction\n\n      this.$emit('change', this.currentPage);\n      this.$nextTick(function () {\n        // Keep the current button focused if possible\n        var target = evt.target;\n\n        if (isVisible(target) && _this2.$el.contains(target) && target.focus) {\n          target.focus();\n        } else {\n          _this2.focusCurrent();\n        }\n      });\n    },\n    makePage: function makePage(pageNum) {\n      return pageNum;\n    },\n    linkProps: function linkProps(pageNum) {\n      // Always '#' for pagination component\n      return {\n        href: '#'\n      };\n    }\n  }\n});\n/* harmony default export */ var pagination_pagination = (BPagination);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/pagination/index.js\n\n\nvar PaginationPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BPagination: BPagination\n  }\n});\n\n/* harmony default export */ var components_pagination = (PaginationPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.search.js\nvar es6_regexp_search = __webpack_require__(122);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.link.js\nvar es6_string_link = __webpack_require__(126);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/pagination-nav/pagination-nav.js\n\n\n\n\n\n\n\n\n\n\n\n\n // Props object\n\nvar pagination_nav_props = {\n  // pagination-nav specific props\n  numberOfPages: {\n    type: [Number, String],\n    default: 1,\n    validator: function validator(value) {\n      var num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (isNaN(num) || num < 1) {\n        utils_warn('b-pagination: prop \"number-of-pages\" must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n  },\n  baseUrl: {\n    type: String,\n    default: '/'\n  },\n  useRouter: {\n    type: Boolean,\n    default: false\n  },\n  linkGen: {\n    type: Function,\n    default: null\n  },\n  pageGen: {\n    type: Function,\n    default: null\n  },\n  pages: {\n    // Optional array of page links\n    type: Array,\n    default: null\n  },\n  noPageDetect: {\n    // Disable auto page number detection if true\n    type: Boolean,\n    default: false\n  },\n  // router-link specific props\n  activeClass: {\n    type: String // default: undefined\n\n  },\n  exact: {\n    type: Boolean,\n    default: false\n  },\n  exactActiveClass: {\n    type: String // default: undefined\n\n  },\n  // nuxt-link specific prop(s)\n  noPrefetch: {\n    type: Boolean,\n    default: false\n  } // TODO: move this to an instance method in pagination mixin\n\n};\n\nvar sanitizeNumPages = function sanitizeNumPages(value) {\n  var num = parseInt(value, 10) || 1;\n  return num < 1 ? 1 : num;\n}; // Our render function is brought in via the pagination mixin\n// @vue/component\n\n\nvar BPaginationNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BPaginationNav',\n  mixins: [mixins_pagination],\n  props: pagination_nav_props,\n  computed: {\n    // Used by render function to trigger wrapping in '<nav>' element\n    isNav: function isNav() {\n      return true;\n    },\n    computedValue: function computedValue() {\n      // Returns the value prop as a number or `null` if undefined or < 1\n      var val = parseInt(this.value, 10);\n      return isNaN(val) || val < 1 ? null : val;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages(newVal, oldVal) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.setNumPages();\n      });\n    },\n    pages: function pages(newVal, oldVal) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.setNumPages();\n      });\n    }\n  },\n  created: function created() {\n    this.setNumPages();\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    if (this.$router) {\n      // We only add the watcher if vue router is detected\n      this.$watch('$route', function (to, from) {\n        _this3.$nextTick(function () {\n          requestAF(function () {\n            _this3.guessCurrentPage();\n          });\n        });\n      });\n    }\n  },\n  methods: {\n    setNumPages: function setNumPages() {\n      var _this4 = this;\n\n      if (isArray(this.pages) && this.pages.length > 0) {\n        this.localNumPages = this.pages.length;\n      } else {\n        this.localNumPages = sanitizeNumPages(this.numberOfPages);\n      }\n\n      this.$nextTick(function () {\n        _this4.guessCurrentPage();\n      });\n    },\n    onClick: function onClick(pageNum, evt) {\n      var _this5 = this;\n\n      // Dont do anything if clicking the current active page\n      if (pageNum === this.currentPage) {\n        return;\n      }\n\n      requestAF(function () {\n        // Update the v-model\n        // Done in in requestAF() to allow browser to complete the\n        // native browser click handling of a link\n        _this5.currentPage = pageNum;\n\n        _this5.$emit('change', pageNum);\n      });\n      this.$nextTick(function () {\n        // Done in a nextTick() to ensure rendering complete\n        try {\n          // Emulate native link click page reloading behaviour by blurring the\n          // paginator and returning focus to the document\n          var target = evt.currentTarget || evt.target;\n          target.blur();\n        } catch (e) {}\n      });\n    },\n    getPageInfo: function getPageInfo(pageNum) {\n      if (!isArray(this.pages) || this.pages.length === 0 || isUndefined(this.pages[pageNum - 1])) {\n        var link = \"\".concat(this.baseUrl).concat(pageNum);\n        return {\n          link: this.useRouter ? {\n            path: link\n          } : link,\n          text: to_string(pageNum)\n        };\n      }\n\n      var info = this.pages[pageNum - 1];\n\n      if (object_isObject(info)) {\n        var _link = info.link;\n        return {\n          // Normalize link for router use\n          link: object_isObject(_link) ? _link : this.useRouter ? {\n            path: _link\n          } : _link,\n          // Make sure text has a value\n          text: to_string(info.text || pageNum)\n        };\n      } else {\n        return {\n          link: to_string(info),\n          text: to_string(pageNum)\n        };\n      }\n    },\n    makePage: function makePage(pageNum) {\n      var info = this.getPageInfo(pageNum);\n\n      if (this.pageGen && isFunction(this.pageGen)) {\n        return this.pageGen(pageNum, info);\n      }\n\n      return info.text;\n    },\n    makeLink: function makeLink(pageNum) {\n      var info = this.getPageInfo(pageNum);\n\n      if (this.linkGen && isFunction(this.linkGen)) {\n        return this.linkGen(pageNum, info);\n      }\n\n      return info.link;\n    },\n    linkProps: function linkProps(pageNum) {\n      var link = this.makeLink(pageNum);\n      var props = {\n        target: this.target || null,\n        rel: this.rel || null,\n        disabled: this.disabled,\n        // The following props are only used if BLink detects router\n        exact: this.exact,\n        activeClass: this.activeClass,\n        exactActiveClass: this.exactActiveClass,\n        append: this.append,\n        replace: this.replace,\n        // nuxt-link specific prop\n        noPrefetch: this.noPrefetch\n      };\n\n      if (this.useRouter || object_isObject(link)) {\n        props.to = link;\n      } else {\n        props.href = link;\n      }\n\n      return props;\n    },\n    resolveLink: function resolveLink() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // Given a to (or href string), convert to normalized route-like structure\n      // Works only client side!!\n      var link;\n\n      try {\n        // Convert the `to` to a HREF via a temporary `a` tag\n        link = document.createElement('a');\n        link.href = router_computeHref({\n          to: to\n        }, 'a', '/', '/'); // We need to add the anchor to the document to make sure the\n        // `pathname` is correctly detected in any browser (i.e. IE)\n\n        document.body.appendChild(link); // Once href is assigned, the link will be normalized to the full URL bits\n\n        var _link2 = link,\n            pathname = _link2.pathname,\n            hash = _link2.hash,\n            search = _link2.search; // Remove link from document\n\n        document.body.removeChild(link); // Return the location in a route-like object\n\n        return {\n          path: pathname,\n          hash: hash,\n          query: router_parseQuery(search)\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        try {\n          link && link.parentNode && link.parentNode.removeChild(link);\n        } catch (e) {}\n        /* istanbul ignore next */\n\n\n        return {};\n      }\n    },\n    resolveRoute: function resolveRoute() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      // Given a to (or href string), convert to normalized route location structure\n      // works only when router available!!\n      try {\n        var route = this.$router.resolve(to, this.$route).route;\n        return {\n          path: route.path,\n          hash: route.hash,\n          query: route.query\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    guessCurrentPage: function guessCurrentPage() {\n      var guess = this.computedValue;\n      var $router = this.$router;\n      var $route = this.$route; // This section only occurs if we are client side, or server-side with $router\n\n      /* istanbul ignore else */\n\n      if (!this.noPageDetect && !guess && (env[\"j\" /* isBrowser */] || !env[\"j\" /* isBrowser */] && $router)) {\n        // Current route (if router available)\n        var currRoute = $router && $route ? {\n          path: $route.path,\n          hash: $route.hash,\n          query: $route.query\n        } : {}; // Current page full HREF (if client side). Can't be done as a computed prop!\n\n        var loc = env[\"j\" /* isBrowser */] ? window.location || document.location : null;\n        var currLink = loc ? {\n          path: loc.pathname,\n          hash: loc.hash,\n          query: router_parseQuery(loc.search)\n        } : {}; // Loop through the possible pages looking for a match until found\n\n        for (var page = 1; !guess && page <= this.localNumPages; page++) {\n          var to = this.makeLink(page);\n\n          if ($router && (object_isObject(to) || this.useRouter)) {\n            // Resolve the page via the $router\n            guess = loose_equal(this.resolveRoute(to), currRoute) ? page : null;\n          } else if (env[\"j\" /* isBrowser */]) {\n            // If no $router available (or !this.useRouter when `to` is a string)\n            // we compare using parsed URIs\n            guess = loose_equal(this.resolveLink(to), currLink) ? page : null;\n          } else {\n            // probably SSR, but no $router so we can't guess, so lets break out of\n            // the loop early\n\n            /* istanbul ignore next */\n            guess = -1;\n          }\n        }\n      } // We set currentPage to 0 to trigger an $emit('input', null)\n      // As the default for this.currentPage is -1 when no value is specified\n      // And valid page numbers are greater than 0\n\n\n      this.currentPage = guess > 0 ? guess : 0;\n    }\n  }\n});\n/* harmony default export */ var pagination_nav = (BPaginationNav);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/pagination-nav/index.js\n\n\nvar PaginationNavPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BPaginationNav: BPaginationNav\n  }\n});\n\n/* harmony default export */ var components_pagination_nav = (PaginationNavPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.match.js\nvar es6_regexp_match = __webpack_require__(70);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.constructor.js\nvar es6_regexp_constructor = __webpack_require__(53);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/tooltip.class.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction tooltip_class_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction tooltip_class_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tooltip_class_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tooltip_class_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\nvar tooltip_class_NAME = 'tooltip';\nvar CLASS_PREFIX = 'bs-tooltip';\nvar BS_CLASS_PREFIX_REGEX = new RegExp(\"\\\\b\".concat(CLASS_PREFIX, \"\\\\S+\"), 'g');\nvar TRANSITION_DURATION = 150; // Modal $root hidden event\n\nvar MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // Modal container for appending tooltip/popover\n\nvar MODAL_CLASS = '.modal-content';\nvar tooltip_class_AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: 'right',\n  BOTTOM: 'bottom',\n  LEFT: 'left',\n  TOPLEFT: 'top',\n  TOPRIGHT: 'top',\n  RIGHTTOP: 'right',\n  RIGHTBOTTOM: 'right',\n  BOTTOMLEFT: 'bottom',\n  BOTTOMRIGHT: 'bottom',\n  LEFTTOP: 'left',\n  LEFTBOTTOM: 'left'\n};\nvar OffsetMap = {\n  AUTO: 0,\n  TOPLEFT: -1,\n  TOP: 0,\n  TOPRIGHT: +1,\n  RIGHTTOP: -1,\n  RIGHT: 0,\n  RIGHTBOTTOM: +1,\n  BOTTOMLEFT: -1,\n  BOTTOM: 0,\n  BOTTOMRIGHT: +1,\n  LEFTTOP: -1,\n  LEFT: 0,\n  LEFTBOTTOM: +1\n};\nvar HoverState = {\n  SHOW: 'show',\n  OUT: 'out'\n};\nvar ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nvar tooltip_class_Selector = {\n  TOOLTIP: '.tooltip',\n  TOOLTIP_INNER: '.tooltip-inner',\n  ARROW: '.arrow'\n};\nvar Defaults = {\n  animation: true,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  trigger: 'hover focus',\n  title: '',\n  delay: 0,\n  html: false,\n  placement: 'top',\n  offset: 0,\n  arrowPadding: 6,\n  container: false,\n  fallbackPlacement: 'flip',\n  callbacks: {},\n  boundary: 'scrollParent',\n  boundaryPadding: 5,\n  variant: null,\n  customClass: null // Transition event names\n\n};\nvar tooltip_class_TransitionEndEvents = {\n  WebkitTransition: ['webkitTransitionEnd'],\n  MozTransition: ['transitionend'],\n  OTransition: ['otransitionend', 'oTransitionEnd'],\n  transition: ['transitionend'] // Options for Native Event Listeners (since we never call preventDefault)\n\n};\nvar EvtOpts = {\n  passive: true,\n  capture: false // Client-side tip ID counter for aria-describedby attribute\n  // Each tooltip requires a unique client side ID\n\n};\nvar NEXTID = 1;\n/* istanbul ignore next */\n\nvar generateId = function generateId(name) {\n  return \"__BV_\".concat(name, \"_\").concat(NEXTID++, \"__\");\n};\n/*\n * ToolTip class definition\n */\n\n\nvar tooltip_class_ToolTip =\n/*#__PURE__*/\nfunction () {\n  // Main constructor\n  function ToolTip(element, config, $parent) {\n    Object(classCallCheck[\"a\" /* default */])(this, ToolTip);\n\n    // New tooltip object\n    this.$isEnabled = true;\n    this.$fadeTimeout = null;\n    this.$hoverTimeout = null;\n    this.$visibleInterval = null;\n    this.$hoverState = '';\n    this.$activeTrigger = {};\n    this.$popper = null;\n    this.$element = element;\n    this.$tip = null;\n    this.$id = generateId(this.constructor.NAME);\n    this.$parent = $parent || null;\n    this.$root = $parent && $parent.$root ? $parent.$root : null;\n    this.$routeWatcher = null; // We use a bound version of the following handlers for root/modal\n    // listeners to maintain the 'this' context\n\n    this.$forceHide = this.forceHide.bind(this);\n    this.$doHide = this.doHide.bind(this);\n    this.$doShow = this.doShow.bind(this);\n    this.$doDisable = this.doDisable.bind(this);\n    this.$doEnable = this.doEnable.bind(this);\n    this._noop = utils_noop.bind(this); // Set the configuration\n\n    this.updateConfig(config); // Destroy ourselves if the parent is destroyed\n\n    if ($parent) {\n      $parent.$once('hook:beforeDestroy', this.destroy.bind(this));\n    }\n  } // NOTE: Overridden by PopOver class\n\n\n  Object(createClass[\"a\" /* default */])(ToolTip, [{\n    key: \"updateConfig\",\n    // Update config\n    value: function updateConfig(config) {\n      // Merge config into defaults. We use \"this\" here because PopOver overrides Default\n      var updatedConfig = tooltip_class_objectSpread({}, this.constructor.Default, {}, config); // Sanitize delay\n\n\n      if (config.delay && isNumber(config.delay)) {\n        /* istanbul ignore next */\n        updatedConfig.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      } // Title for tooltip and popover\n\n\n      if (config.title && isNumber(config.title)) {\n        /* istanbul ignore next */\n        updatedConfig.title = config.title.toString();\n      } // Content only for popover\n\n\n      if (config.content && isNumber(config.content)) {\n        /* istanbul ignore next */\n        updatedConfig.content = config.content.toString();\n      } // Hide element original title if needed\n\n\n      this.fixTitle(); // Update the config\n\n      this.$config = updatedConfig; // Stop/Restart listening\n\n      this.unListen();\n      this.listen();\n    } // Destroy this instance\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Stop listening to trigger events\n      this.unListen(); // Disable while open listeners/watchers\n\n      this.setWhileOpenListeners(false); // Clear any timeouts\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverTimeout = null;\n      clearTimeout(this.$fadeTimeout);\n      this.$fadeTimeout = null; // Remove popper\n\n      if (this.$popper) {\n        this.$popper.destroy();\n      }\n\n      this.$popper = null; // Remove tip from document\n\n      if (this.$tip && this.$tip.parentElement) {\n        this.$tip.parentElement.removeChild(this.$tip);\n      }\n\n      this.$tip = null; // Null out other properties\n\n      this.$id = null;\n      this.$isEnabled = null;\n      this.$parent = null;\n      this.$root = null;\n      this.$element = null;\n      this.$config = null;\n      this.$hoverState = null;\n      this.$activeTrigger = null;\n      this.$forceHide = null;\n      this.$doHide = null;\n      this.$doShow = null;\n      this.$doDisable = null;\n      this.$doEnable = null;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      // Create a non-cancelable BvEvent\n      var enabledEvt = new bv_event_class('enabled', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: null\n      });\n      this.$isEnabled = true;\n      this.emitEvent(enabledEvt);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      // Create a non-cancelable BvEvent\n      var disabledEvt = new bv_event_class('disabled', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: null\n      });\n      this.$isEnabled = false;\n      this.emitEvent(disabledEvt);\n    } // Click toggler\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (!this.$isEnabled) {\n        /* istanbul ignore next */\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (event) {\n        this.$activeTrigger.click = !this.$activeTrigger.click;\n\n        if (this.isWithActiveTrigger()) {\n          this.enter(null);\n        } else {\n          this.leave(null);\n        }\n      } else {\n        if (hasClass(this.getTipElement(), ClassName.SHOW)) {\n          this.leave(null);\n        } else {\n          this.enter(null);\n        }\n      }\n    } // Show tooltip\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      if (!document.body.contains(this.$element) || !isVisible(this.$element)) {\n        // If trigger element isn't in the DOM or is not visible\n        return;\n      } // Build tooltip element (also sets this.$tip)\n\n\n      var tip = this.getTipElement();\n      this.fixTitle();\n      this.setContent(tip);\n\n      if (!this.isWithContent(tip)) {\n        // If no content, don't bother showing\n\n        /* istanbul ignore next */\n        this.$tip = null;\n        /* istanbul ignore next */\n\n        return;\n      } // Set ID on tip and aria-describedby on element\n\n\n      setAttr(tip, 'id', this.$id);\n      this.addAriaDescribedby(); // Set animation on or off\n\n      if (this.$config.animation) {\n        addClass(tip, ClassName.FADE);\n      } else {\n        removeClass(tip, ClassName.FADE);\n      }\n\n      var placement = this.getPlacement();\n      var attachment = this.constructor.getAttachment(placement);\n      this.addAttachmentClass(attachment); // Create a cancelable BvEvent\n\n      var showEvt = new bv_event_class('show', {\n        cancelable: true,\n        target: this.$element,\n        relatedTarget: tip\n      });\n      this.emitEvent(showEvt);\n\n      if (showEvt.defaultPrevented) {\n        // Don't show if event cancelled\n        this.$tip = null;\n        return;\n      } // Insert tooltip if needed\n\n\n      var container = this.getContainer();\n\n      if (!document.body.contains(tip)) {\n        container.appendChild(tip);\n      } // Refresh popper\n\n\n      this.removePopper();\n      this.$popper = new popper[\"a\" /* default */](this.$element, tip, this.getPopperConfig(placement, tip)); // Transitionend callback\n\n      var complete = function complete() {\n        if (_this.$config.animation) {\n          _this.fixTransition(tip);\n        }\n\n        var prevHoverState = _this.$hoverState;\n        _this.$hoverState = null;\n\n        if (prevHoverState === HoverState.OUT) {\n          _this.leave(null);\n        } // Create a non-cancelable BvEvent\n\n\n        var shownEvt = new bv_event_class('shown', {\n          cancelable: false,\n          target: _this.$element,\n          relatedTarget: tip\n        });\n\n        _this.emitEvent(shownEvt);\n      }; // Enable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(true); // Show tip\n\n      addClass(tip, ClassName.SHOW); // Start the transition/animation\n\n      this.transitionOnce(tip, complete);\n    } // Handler for periodic visibility check\n\n  }, {\n    key: \"visibleCheck\",\n    value: function visibleCheck(on) {\n      var _this2 = this;\n\n      clearInterval(this.$visibleInterval);\n      this.$visibleInterval = null;\n\n      if (on) {\n        this.$visibleInterval = setInterval(function () {\n          var tip = _this2.$tip;\n\n          if (tip && !isVisible(_this2.$element) && hasClass(tip, ClassName.SHOW)) {\n            // Element is no longer visible, so force-hide the tooltip\n            _this2.forceHide();\n          }\n        }, 100);\n      }\n    }\n  }, {\n    key: \"setWhileOpenListeners\",\n    value: function setWhileOpenListeners(on) {\n      // Modal close events\n      this.setModalListener(on); // Periodic $element visibility check\n      // For handling when tip is in <keepalive>, tabs, carousel, etc\n\n      this.visibleCheck(on); // On-touch start listeners\n\n      this.setOnTouchStartListener(on);\n\n      if (on && /(focus|blur)/.test(this.$config.trigger)) {\n        // If focus moves between trigger element and tip container, don't close\n        eventOn(this.$tip, 'focusout', this, EvtOpts);\n      } else {\n        eventOff(this.$tip, 'focusout', this, EvtOpts);\n      }\n    } // Force hide of tip (internal method)\n\n  }, {\n    key: \"forceHide\",\n    value: function forceHide() {\n      if (!this.$tip || !hasClass(this.$tip, ClassName.SHOW)) {\n        /* istanbul ignore next */\n        return;\n      } // Disable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(false); // Clear any hover enter/leave event\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverTimeout = null;\n      this.$hoverState = ''; // Hide the tip\n\n      this.hide(null, true);\n    } // Hide tooltip\n\n  }, {\n    key: \"hide\",\n    value: function hide(callback, force) {\n      var _this3 = this;\n\n      var tip = this.$tip;\n\n      if (!tip) {\n        /* istanbul ignore next */\n        return;\n      } // Create a cancelable BvEvent\n\n\n      var hideEvt = new bv_event_class('hide', {\n        // We disable cancelling if force is true\n        cancelable: !force,\n        target: this.$element,\n        relatedTarget: tip\n      });\n      this.emitEvent(hideEvt);\n\n      if (hideEvt.defaultPrevented) {\n        // Don't hide if event cancelled\n        return;\n      } // Transitionend callback\n\n\n      var complete = function complete() {\n        if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {\n          // Remove tip from DOM, and force recompile on next show\n          tip.parentNode.removeChild(tip);\n\n          _this3.removeAriaDescribedby();\n\n          _this3.removePopper();\n\n          _this3.$tip = null;\n        }\n\n        if (callback) {\n          callback();\n        } // Create a non-cancelable BvEvent\n\n\n        var hiddenEvt = new bv_event_class('hidden', {\n          cancelable: false,\n          target: _this3.$element,\n          relatedTarget: null\n        });\n\n        _this3.emitEvent(hiddenEvt);\n      }; // Disable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(false); // If forced close, disable animation\n\n      if (force) {\n        removeClass(tip, ClassName.FADE);\n      } // Hide tip\n\n\n      removeClass(tip, ClassName.SHOW);\n      this.$activeTrigger.click = false;\n      this.$activeTrigger.focus = false;\n      this.$activeTrigger.hover = false; // Start the hide transition\n\n      this.transitionOnce(tip, complete);\n      this.$hoverState = '';\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(evt) {\n      var evtName = evt.type;\n      var $root = this.$root;\n\n      if ($root && $root.$emit) {\n        // Emit an event on $root\n        $root.$emit(\"bv::\".concat(this.constructor.NAME, \"::\").concat(evtName), evt);\n      }\n\n      var callbacks = this.$config.callbacks || {};\n\n      if (isFunction(callbacks[evtName])) {\n        callbacks[evtName](evt);\n      }\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      var container = this.$config.container;\n      var body = document.body; // If we are in a modal, we append to the modal instead of body,\n      // unless a container is specified\n\n      return container === false ? closest(MODAL_CLASS, this.$element) || body : dom_select(container, body) || body;\n    } // Will be overridden by PopOver if needed\n\n  }, {\n    key: \"addAriaDescribedby\",\n    value: function addAriaDescribedby() {\n      // Add aria-describedby on trigger element, without removing any other IDs\n      var desc = getAttr(this.$element, 'aria-describedby') || '';\n      desc = desc.split(/\\s+/).concat(this.$id).join(' ').trim();\n      setAttr(this.$element, 'aria-describedby', desc);\n    } // Will be overridden by PopOver if needed\n\n  }, {\n    key: \"removeAriaDescribedby\",\n    value: function removeAriaDescribedby() {\n      var _this4 = this;\n\n      var desc = getAttr(this.$element, 'aria-describedby') || '';\n      desc = desc.split(/\\s+/).filter(function (d) {\n        return d !== _this4.$id;\n      }).join(' ').trim();\n\n      if (desc) {\n        /* istanbul ignore next */\n        setAttr(this.$element, 'aria-describedby', desc);\n      } else {\n        removeAttr(this.$element, 'aria-describedby');\n      }\n    }\n  }, {\n    key: \"removePopper\",\n    value: function removePopper() {\n      if (this.$popper) {\n        this.$popper.destroy();\n      }\n\n      this.$popper = null;\n    }\n  }, {\n    key: \"transitionOnce\",\n    value: function transitionOnce(tip, complete) {\n      var _this5 = this;\n\n      var transEvents = this.getTransitionEndEvents();\n      var called = false;\n      clearTimeout(this.$fadeTimeout);\n      this.$fadeTimeout = null;\n\n      var fnOnce = function fnOnce() {\n        if (called) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        called = true;\n        clearTimeout(_this5.$fadeTimeout);\n        _this5.$fadeTimeout = null;\n        transEvents.forEach(function (evtName) {\n          eventOff(tip, evtName, fnOnce, EvtOpts);\n        }); // Call complete callback\n\n        complete();\n      };\n\n      if (hasClass(tip, ClassName.FADE)) {\n        transEvents.forEach(function (evtName) {\n          eventOn(tip, evtName, fnOnce, EvtOpts);\n        }); // Fallback to setTimeout()\n\n        this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);\n      } else {\n        fnOnce();\n      }\n    } // What transitionend event(s) to use? (returns array of event names)\n\n  }, {\n    key: \"getTransitionEndEvents\",\n    value: function getTransitionEndEvents() {\n      for (var name in tooltip_class_TransitionEndEvents) {\n        if (!isUndefined(this.$element.style[name])) {\n          return tooltip_class_TransitionEndEvents[name];\n        }\n      } // Fallback\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!isNull(this.$popper)) {\n        this.$popper.scheduleUpdate();\n      }\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"isWithContent\",\n    value: function isWithContent(tip) {\n      tip = tip || this.$tip;\n\n      if (!tip) {\n        /* istanbul ignore next */\n        return false;\n      }\n\n      return Boolean((dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip) || {}).innerHTML);\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"addAttachmentClass\",\n    value: function addAttachmentClass(attachment) {\n      addClass(this.getTipElement(), \"\".concat(CLASS_PREFIX, \"-\").concat(attachment));\n    }\n  }, {\n    key: \"getTipElement\",\n    value: function getTipElement() {\n      if (!this.$tip) {\n        // Try and compile user supplied template, or fallback to default template\n        this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);\n      } // Add tab index so tip can be focused, and to allow it to be\n      // set as relatedTarget in focusin/out events\n\n\n      this.$tip.tabIndex = -1; // Add variant if specified\n\n      if (this.$config.variant) {\n        addClass(this.$tip, \"b-\".concat(this.constructor.NAME, \"-\").concat(this.$config.variant));\n      }\n\n      if (this.$config.customClass) {\n        addClass(this.$tip, String(this.$config.customClass));\n      }\n\n      return this.$tip;\n    }\n  }, {\n    key: \"compileTemplate\",\n    value: function compileTemplate(html) {\n      if (!html || !isString(html)) {\n        /* istanbul ignore next */\n        return null;\n      }\n\n      var div = document.createElement('div');\n      div.innerHTML = html.trim();\n      var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;\n      div = null;\n      return node;\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(tip) {\n      this.setElementContent(dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip), this.getTitle());\n      removeClass(tip, ClassName.FADE);\n      removeClass(tip, ClassName.SHOW);\n    }\n  }, {\n    key: \"setElementContent\",\n    value: function setElementContent(container, content) {\n      if (!container) {\n        // If container element doesn't exist, just return\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      var allowHtml = this.$config.html;\n\n      if (object_isObject(content) && content.nodeType) {\n        // Content is a DOM node\n        if (allowHtml) {\n          if (content.parentElement !== container) {\n            container.innerHTML = '';\n            container.appendChild(content);\n          }\n        } else {\n          /* istanbul ignore next */\n          container.innerText = content.innerText;\n        }\n      } else {\n        // We have a plain HTML string or Text\n        container[allowHtml ? 'innerHTML' : 'innerText'] = content;\n      }\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      var title = this.$config.title || '';\n\n      if (isFunction(title)) {\n        // Call the function to get the title value\n\n        /* istanbul ignore next */\n        title = title(this.$element);\n      }\n\n      if (object_isObject(title) && title.nodeType && !title.innerHTML.trim()) {\n        // We have a DOM node, but without inner content,\n        // so just return empty string\n\n        /* istanbul ignore next */\n        title = '';\n      }\n\n      if (isString(title)) {\n        title = title.trim();\n      }\n\n      if (!title) {\n        // If an explicit title is not given, try element's title attributes\n        title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n        title = title.trim();\n      }\n\n      return title;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this6 = this;\n\n      var el = this.$element;\n      /* istanbul ignore next */\n\n      if (!el) {\n        return;\n      }\n\n      var triggers = this.$config.trigger.trim().split(/\\s+/); // Listen for global show/hide events\n\n      this.setRootListener(true); // Using 'this' as the handler will get automatically directed to\n      // this.handleEvent and maintain our binding to 'this'\n\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          eventOn(el, 'click', _this6, EvtOpts);\n        } else if (trigger === 'focus') {\n          eventOn(el, 'focusin', _this6, EvtOpts);\n          eventOn(el, 'focusout', _this6, EvtOpts);\n        } else if (trigger === 'blur') {\n          // Used to close $tip when element looses focus\n          eventOn(el, 'focusout', _this6, EvtOpts);\n        } else if (trigger === 'hover') {\n          eventOn(el, 'mouseenter', _this6, EvtOpts);\n          eventOn(el, 'mouseleave', _this6, EvtOpts);\n        }\n      }, this);\n    }\n  }, {\n    key: \"unListen\",\n    value: function unListen() {\n      var _this7 = this;\n\n      var el = this.$element;\n      /* istanbul ignore next */\n\n      if (!el) {\n        return;\n      }\n\n      var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave']; // Using \"this\" as the handler will get automatically directed to this.handleEvent\n\n      events.forEach(function (evt) {\n        eventOff(el, evt, _this7, EvtOpts);\n      }, this); // Stop listening for global show/hide/enable/disable events\n\n      this.setRootListener(false);\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      // This special method allows us to use \"this\" as the event handlers\n      if (dom_isDisabled(this.$element)) {\n        // If disabled, don't do anything. Note: If tip is shown before element gets\n        // disabled, then tip not close until no longer disabled or forcefully closed.\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (!this.$isEnabled) {\n        // If not enable\n        return;\n      }\n\n      var type = e.type;\n      var target = e.target;\n      var relatedTarget = e.relatedTarget;\n      var $element = this.$element;\n      var $tip = this.$tip;\n\n      if (type === 'click') {\n        this.toggle(e);\n      } else if (type === 'focusin' || type === 'mouseenter') {\n        this.enter(e);\n      } else if (type === 'focusout') {\n        // target is the element which is loosing focus\n        // and relatedTarget is the element gaining focus\n        if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {\n          // If focus moves from $element to $tip, don't trigger a leave\n\n          /* istanbul ignore next */\n          return;\n        }\n\n        if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {\n          // If focus moves from $tip to $element, don't trigger a leave\n\n          /* istanbul ignore next */\n          return;\n        }\n        /* istanbul ignore next: difficult to test */\n\n\n        if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {\n          // If focus moves within $tip, don't trigger a leave\n          return;\n        }\n        /* istanbul ignore next: difficult to test */\n\n\n        if ($element && $element.contains(target) && $element.contains(relatedTarget)) {\n          // If focus moves within $element, don't trigger a leave\n          return;\n        } // Otherwise trigger a leave\n\n\n        this.leave(e);\n      } else if (type === 'mouseleave') {\n        this.leave(e);\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"setModalListener\",\n    value: function setModalListener(on) {\n      var el = this.$element;\n      /* istanbul ignore next */\n\n      if (!el || !this.$root) {\n        return;\n      }\n\n      var modal = closest(MODAL_CLASS, el);\n\n      if (!modal) {\n        // If we are not in a modal, don't worry. be happy\n        return;\n      } // We can listen for modal hidden events on $root\n\n\n      this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);\n    }\n  }, {\n    key: \"setRootListener\",\n    value: function setRootListener(on) {\n      // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event\n      var $root = this.$root;\n\n      if ($root) {\n        $root[on ? '$on' : '$off'](\"bv::hide::\".concat(this.constructor.NAME), this.$doHide);\n        $root[on ? '$on' : '$off'](\"bv::show::\".concat(this.constructor.NAME), this.$doShow);\n        $root[on ? '$on' : '$off'](\"bv::disable::\".concat(this.constructor.NAME), this.$doDisable);\n        $root[on ? '$on' : '$off'](\"bv::enable::\".concat(this.constructor.NAME), this.$doEnable);\n      }\n    }\n  }, {\n    key: \"doHide\",\n    value: function doHide(id) {\n      // Programmatically hide tooltip or popover\n      if (!id) {\n        // Close all tooltips or popovers\n        this.forceHide();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Close this specific tooltip or popover\n        this.hide();\n      }\n    }\n  }, {\n    key: \"doShow\",\n    value: function doShow(id) {\n      // Programmatically show tooltip or popover\n      if (!id) {\n        // Open all tooltips or popovers\n        this.show();\n      } else if (id && this.$element && this.$element.id && this.$element.id === id) {\n        // Show this specific tooltip or popover\n        this.show();\n      }\n    }\n  }, {\n    key: \"doDisable\",\n    value: function doDisable(id) {\n      // Programmatically disable tooltip or popover\n      if (!id) {\n        // Disable all tooltips or popovers\n        this.disable();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Disable this specific tooltip or popover\n        this.disable();\n      }\n    }\n  }, {\n    key: \"doEnable\",\n    value: function doEnable(id) {\n      // Programmatically enable tooltip or popover\n      if (!id) {\n        // Enable all tooltips or popovers\n        this.enable();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Enable this specific tooltip or popover\n        this.enable();\n      }\n    }\n  }, {\n    key: \"setOnTouchStartListener\",\n    value: function setOnTouchStartListener(on) {\n      var _this8 = this;\n\n      // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children\n      // Only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n      if ('ontouchstart' in document.documentElement) {\n        /* istanbul ignore next: JSDOM does not support 'ontouchstart' event */\n        array_from(document.body.children).forEach(function (el) {\n          if (on) {\n            eventOn(el, 'mouseover', _this8._noop);\n          } else {\n            eventOff(el, 'mouseover', _this8._noop);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"fixTitle\",\n    value: function fixTitle() {\n      var el = this.$element;\n\n      if (getAttr(el, 'title') || !isString(getAttr(el, 'data-original-title'))) {\n        setAttr(el, 'data-original-title', getAttr(el, 'title') || '');\n        setAttr(el, 'title', '');\n      }\n    } // Enter handler\n\n  }, {\n    key: \"enter\",\n    value: function enter(e) {\n      var _this9 = this;\n\n      if (e) {\n        this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;\n      }\n\n      if (hasClass(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {\n        this.$hoverState = HoverState.SHOW;\n        return;\n      }\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverState = HoverState.SHOW;\n\n      if (!this.$config.delay || !this.$config.delay.show) {\n        this.show();\n        return;\n      }\n\n      this.$hoverTimeout = setTimeout(function () {\n        if (_this9.$hoverState === HoverState.SHOW) {\n          _this9.show();\n        }\n      }, this.$config.delay.show);\n    } // Leave handler\n\n  }, {\n    key: \"leave\",\n    value: function leave(e) {\n      var _this10 = this;\n\n      if (e) {\n        this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;\n\n        if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {\n          // Special case for `blur`: we clear out the other triggers\n          this.$activeTrigger.click = false;\n          this.$activeTrigger.hover = false;\n        }\n      }\n\n      if (this.isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverState = HoverState.OUT;\n\n      if (!this.$config.delay || !this.$config.delay.hide) {\n        this.hide();\n        return;\n      }\n\n      this.$hoverTimeout = setTimeout(function () {\n        if (_this10.$hoverState === HoverState.OUT) {\n          _this10.hide();\n        }\n      }, this.$config.delay.hide);\n    }\n  }, {\n    key: \"getPopperConfig\",\n    value: function getPopperConfig(placement, tip) {\n      var _this11 = this;\n\n      return {\n        placement: this.constructor.getAttachment(placement),\n        modifiers: {\n          offset: {\n            offset: this.getOffset(placement, tip)\n          },\n          flip: {\n            behavior: this.$config.fallbackPlacement\n          },\n          arrow: {\n            element: '.arrow'\n          },\n          preventOverflow: {\n            padding: this.$config.boundaryPadding,\n            boundariesElement: this.$config.boundary\n          }\n        },\n        onCreate: function onCreate(data) {\n          // Handle flipping arrow classes\n\n          /* istanbul ignore next */\n          if (data.originalPlacement !== data.placement) {\n            _this11.handlePopperPlacementChange(data);\n          }\n        },\n        onUpdate: function onUpdate(data) {\n          // Handle flipping arrow classes\n\n          /* istanbul ignore next */\n          _this11.handlePopperPlacementChange(data);\n        }\n      };\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"getOffset\",\n    value: function getOffset(placement, tip) {\n      if (!this.$config.offset) {\n        var arrow = dom_select(tooltip_class_Selector.ARROW, tip);\n        var arrowOffset = parseFloat(dom_getCS(arrow).width) + parseFloat(this.$config.arrowPadding);\n\n        switch (OffsetMap[placement.toUpperCase()]) {\n          case +1:\n            return \"+50%p - \".concat(arrowOffset, \"px\");\n\n          case -1:\n            return \"-50%p + \".concat(arrowOffset, \"px\");\n\n          default:\n            return 0;\n        }\n      }\n\n      return this.$config.offset;\n    }\n  }, {\n    key: \"getPlacement\",\n    value: function getPlacement() {\n      var placement = this.$config.placement;\n\n      if (isFunction(placement)) {\n        /* istanbul ignore next */\n        return placement.call(this, this.$tip, this.$element);\n      }\n\n      return placement;\n    }\n  }, {\n    key: \"isWithActiveTrigger\",\n    value: function isWithActiveTrigger() {\n      for (var trigger in this.$activeTrigger) {\n        if (this.$activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    } // NOTE: Overridden by PopOver class\n\n    /* istanbul ignore next */\n\n  }, {\n    key: \"cleanTipClass\",\n    value: function cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.className.match(BS_CLASS_PREFIX_REGEX);\n\n      if (!isNull(tabClass) && tabClass.length > 0) {\n        tabClass.forEach(function (cls) {\n          removeClass(tip, cls);\n        });\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"handlePopperPlacementChange\",\n    value: function handlePopperPlacementChange(data) {\n      this.cleanTipClass();\n      this.addAttachmentClass(this.constructor.getAttachment(data.placement));\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"fixTransition\",\n    value: function fixTransition(tip) {\n      var initConfigAnimation = this.$config.animation || false;\n\n      if (!isNull(getAttr(tip, 'x-placement'))) {\n        return;\n      }\n\n      removeClass(tip, ClassName.FADE);\n      this.$config.animation = false;\n      this.hide();\n      this.show();\n      this.$config.animation = initConfigAnimation;\n    }\n  }], [{\n    key: \"getAttachment\",\n    value: function getAttachment(placement) {\n      return tooltip_class_AttachmentMap[placement.toUpperCase()];\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Defaults;\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"NAME\",\n    get: function get() {\n      return tooltip_class_NAME;\n    }\n  }]);\n\n  return ToolTip;\n}();\n\n/* harmony default export */ var tooltip_class = (tooltip_class_ToolTip);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/popover.class.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction popover_class_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction popover_class_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { popover_class_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { popover_class_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\nvar popover_class_NAME = 'popover';\nvar popover_class_CLASS_PREFIX = 'bs-popover';\nvar popover_class_BS_CLASS_PREFIX_REGEX = new RegExp(\"\\\\b\".concat(popover_class_CLASS_PREFIX, \"\\\\S+\"), 'g');\n\nvar popover_class_Defaults = popover_class_objectSpread({}, tooltip_class.Default, {\n  placement: 'right',\n  trigger: 'click',\n  content: '',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n});\n\nvar popover_class_ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nvar popover_class_Selector = {\n  TITLE: '.popover-header',\n  CONTENT: '.popover-body'\n};\n\nvar popover_class_PopOver =\n/*#__PURE__*/\nfunction (_ToolTip) {\n  Object(inherits[\"a\" /* default */])(PopOver, _ToolTip);\n\n  function PopOver() {\n    Object(classCallCheck[\"a\" /* default */])(this, PopOver);\n\n    return Object(possibleConstructorReturn[\"a\" /* default */])(this, Object(esm_getPrototypeOf[\"a\" /* default */])(PopOver).apply(this, arguments));\n  }\n\n  Object(createClass[\"a\" /* default */])(PopOver, [{\n    key: \"isWithContent\",\n    // --- Method overrides ---\n    value: function isWithContent(tip) {\n      tip = tip || this.$tip;\n\n      if (!tip) {\n        /* istanbul ignore next */\n        return false;\n      }\n\n      var hasTitle = Boolean((dom_select(popover_class_Selector.TITLE, tip) || {}).innerHTML);\n      var hasContent = Boolean((dom_select(popover_class_Selector.CONTENT, tip) || {}).innerHTML);\n      return hasTitle || hasContent;\n    }\n  }, {\n    key: \"addAttachmentClass\",\n    value: function addAttachmentClass(attachment)\n    /* istanbul ignore next */\n    {\n      addClass(this.getTipElement(), \"\".concat(popover_class_CLASS_PREFIX, \"-\").concat(attachment));\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(tip) {\n      // we use append for html objects to maintain js events/components\n      this.setElementContent(dom_select(popover_class_Selector.TITLE, tip), this.getTitle());\n      this.setElementContent(dom_select(popover_class_Selector.CONTENT, tip), this.getContent());\n      removeClass(tip, popover_class_ClassName.FADE);\n      removeClass(tip, popover_class_ClassName.SHOW);\n    } // This method may look identical to ToolTip version, but it uses a different RegEx defined above\n\n  }, {\n    key: \"cleanTipClass\",\n    value: function cleanTipClass()\n    /* istanbul ignore next */\n    {\n      var tip = this.getTipElement();\n      var tabClass = tip.className.match(popover_class_BS_CLASS_PREFIX_REGEX);\n\n      if (!isNull(tabClass) && tabClass.length > 0) {\n        tabClass.forEach(function (cls) {\n          removeClass(tip, cls);\n        });\n      }\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      var title = this.$config.title || '';\n      /* istanbul ignore next */\n\n      if (isFunction(title)) {\n        title = title(this.$element);\n      }\n      /* istanbul ignore next */\n\n\n      if (object_isObject(title) && title.nodeType && !title.innerHTML.trim()) {\n        // We have a dom node, but without inner content, so just return an empty string\n        title = '';\n      }\n\n      if (isString(title)) {\n        title = title.trim();\n      }\n\n      if (!title) {\n        // Try and grab element's title attribute\n        title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n        title = title.trim();\n      }\n\n      return title;\n    } // New methods\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      var content = this.$config.content || '';\n      /* istanbul ignore next */\n\n      if (isFunction(content)) {\n        content = content(this.$element);\n      }\n      /* istanbul ignore next */\n\n\n      if (object_isObject(content) && content.nodeType && !content.innerHTML.trim()) {\n        // We have a dom node, but without inner content, so just return an empty string\n        content = '';\n      }\n\n      if (isString(content)) {\n        content = content.trim();\n      }\n\n      return content;\n    }\n  }], [{\n    key: \"Default\",\n    // --- Getter overrides ---\n    get: function get() {\n      return popover_class_Defaults;\n    }\n  }, {\n    key: \"NAME\",\n    get: function get() {\n      return popover_class_NAME;\n    }\n  }]);\n\n  return PopOver;\n}(tooltip_class);\n\n/* harmony default export */ var popover_class = (popover_class_PopOver);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/mixins/toolpop.js\n\n\n\n\n\n\n\n\nfunction toolpop_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction toolpop_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { toolpop_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { toolpop_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * Tooltip/Popover component mixin\n * Common props\n */\n\n\n\n // --- Constants ---\n\nvar PLACEMENTS = {\n  top: 'top',\n  topleft: 'topleft',\n  topright: 'topright',\n  right: 'right',\n  righttop: 'righttop',\n  rightbottom: 'rightbottom',\n  bottom: 'bottom',\n  bottomleft: 'bottomleft',\n  bottomright: 'bottomright',\n  left: 'left',\n  lefttop: 'lefttop',\n  leftbottom: 'leftbottom',\n  auto: 'auto'\n};\nvar toolpop_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  attributes: true,\n  attributeFilter: ['class', 'style'] // @vue/component\n\n};\n/* harmony default export */ var toolpop = ({\n  props: {\n    target: {\n      // String ID of element, or element/component reference\n      type: [String, Object, HTMLElement, Function] // default: undefined\n\n    },\n    offset: {\n      type: [Number, String],\n      default: 0\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    container: {\n      // String ID of container, if null body is used (default)\n      type: String,\n      default: null\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      // semaphore for preventing multiple show events\n      localShow: false\n    };\n  },\n  computed: {\n    baseConfig: function baseConfig() {\n      var cont = this.container;\n      var delay = object_isObject(this.delay) ? this.delay : parseInt(this.delay, 10) || 0;\n      return {\n        // Title prop\n        title: (this.title || '').trim() || '',\n        // Content prop (if popover)\n        content: (this.content || '').trim() || '',\n        // Tooltip/Popover placement\n        placement: PLACEMENTS[this.placement] || 'auto',\n        // Tooltip/popover fallback placemenet\n        fallbackPlacement: this.fallbackPlacement || 'flip',\n        // Container currently needs to be an ID with '#' prepended, if null then body is used\n        container: cont ? /^#/.test(cont) ? cont : \"#\".concat(cont) : false,\n        // boundariesElement passed to popper\n        boundary: this.boundary,\n        // boundariesElement padding passed to popper\n        boundaryPadding: this.boundaryPadding,\n        // Show/Hide delay\n        delay: delay || 0,\n        // Offset can be css distance. if no units, pixels are assumed\n        offset: this.offset || 0,\n        // Disable fade Animation?\n        animation: !this.noFade,\n        // Variant\n        variant: this.variant,\n        // Custom class\n        customClass: this.customClass,\n        // Open/Close Trigger(s)\n        trigger: isArray(this.triggers) ? this.triggers.join(' ') : this.triggers,\n        // Callbacks so we can trigger events on component\n        callbacks: {\n          show: this.onShow,\n          shown: this.onShown,\n          hide: this.onHide,\n          hidden: this.onHidden,\n          enabled: this.onEnabled,\n          disabled: this.onDisabled\n        }\n      };\n    }\n  },\n  watch: {\n    show: function show(_show, old) {\n      if (_show !== old) {\n        _show ? this.onOpen() : this.onClose();\n      }\n    },\n    disabled: function disabled(_disabled, old) {\n      if (_disabled !== old) {\n        _disabled ? this.onDisable() : this.onEnable();\n      }\n    },\n    localShow: function localShow(show, old) {\n      if (show !== this.show) {\n        this.$emit('update:show', show);\n      }\n    }\n  },\n  created: function created() {\n    // Create non-reactive property\n    this._toolpop = null;\n    this._obs_title = null;\n    this._obs_content = null;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // We do this in a next tick to ensure DOM has rendered first\n    this.$nextTick(function () {\n      // Instantiate ToolTip/PopOver on target\n      // The createToolpop method must exist in main component\n      if (_this.createToolpop()) {\n        if (_this.disabled) {\n          // Initially disabled\n          _this.onDisable();\n        } // Listen to open signals from others\n\n\n        _this.$on('open', _this.onOpen); // Listen to close signals from others\n\n\n        _this.$on('close', _this.onClose); // Listen to disable signals from others\n\n\n        _this.$on('disable', _this.onDisable); // Listen to enable signals from others\n\n\n        _this.$on('enable', _this.onEnable); // Observe content Child changes so we can notify popper of possible size change\n\n\n        _this.setObservers(true); // Set initially open state\n\n\n        if (_this.show) {\n          _this.onOpen();\n        }\n      }\n    });\n  },\n  updated: function updated() {\n    // If content/props changes, etc\n    if (this._toolpop) {\n      this._toolpop.updateConfig(this.getConfig());\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next: can't easily test in JSDOM */\n  {\n    // Called when component is inside a <keep-alive> and component brought offline\n    this.setObservers(true);\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next: can't easily test in JSDOM */\n  {\n    // Called when component is inside a <keep-alive> and component taken offline\n    if (this._toolpop) {\n      this.setObservers(false);\n\n      this._toolpop.hide();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Shutdown our local event listeners\n    this.$off('open', this.onOpen);\n    this.$off('close', this.onClose);\n    this.$off('disable', this.onDisable);\n    this.$off('enable', this.onEnable);\n    this.setObservers(false); // bring our content back if needed\n\n    this.bringItBack();\n\n    if (this._toolpop) {\n      this._toolpop.destroy();\n\n      this._toolpop = null;\n    }\n  },\n  methods: {\n    getConfig: function getConfig() {\n      var cfg = toolpop_objectSpread({}, this.baseConfig);\n\n      if (this.$refs.title && this.$refs.title.innerHTML.trim()) {\n        // If slot has content, it overrides 'title' prop\n        // We use the DOM node as content to allow components!\n        cfg.title = this.$refs.title;\n        cfg.html = true;\n      }\n\n      if (this.$refs.content && this.$refs.content.innerHTML.trim()) {\n        // If slot has content, it overrides 'content' prop\n        // We use the DOM node as content to allow components!\n        cfg.content = this.$refs.content;\n        cfg.html = true;\n      }\n\n      return cfg;\n    },\n    onOpen: function onOpen() {\n      if (this._toolpop && !this.localShow) {\n        this.localShow = true;\n\n        this._toolpop.show();\n      }\n    },\n    onClose: function onClose(callback) {\n      // What is callback for ? it is not documented\n\n      /* istanbul ignore else */\n      if (this._toolpop && this.localShow) {\n        this._toolpop.hide(callback);\n      } else if (isFunction(callback)) {\n        // Is this even used?\n        callback();\n      }\n    },\n    onDisable: function onDisable() {\n      if (this._toolpop) {\n        this._toolpop.disable();\n      }\n    },\n    onEnable: function onEnable() {\n      if (this._toolpop) {\n        this._toolpop.enable();\n      }\n    },\n    updatePosition: function updatePosition() {\n      /* istanbul ignore next: can't test in JSDOM until mutation observer is implemented */\n      if (this._toolpop) {\n        // Instruct popper to reposition popover if necessary\n        this._toolpop.update();\n      }\n    },\n    getTarget: function getTarget() {\n      var target = this.target;\n\n      if (isFunction(target)) {\n        /* istanbul ignore next */\n        target = target();\n      }\n      /* istanbul ignore else */\n\n\n      if (isString(target)) {\n        // Assume ID of element\n        return getById(target);\n      } else if (object_isObject(target) && isElement(target.$el)) {\n        // Component reference\n\n        /* istanbul ignore next */\n        return target.$el;\n      } else if (object_isObject(target) && isElement(target)) {\n        // Element reference\n\n        /* istanbul ignore next */\n        return target;\n      }\n      /* istanbul ignore next */\n\n\n      return null;\n    },\n    // Callbacks called by Tooltip/Popover class instance\n    onShow: function onShow(evt) {\n      this.$emit('show', evt);\n      this.localShow = !(evt && evt.defaultPrevented);\n    },\n    onShown: function onShown(evt) {\n      this.setObservers(true);\n      this.$emit('shown', evt);\n      this.localShow = true;\n    },\n    onHide: function onHide(evt) {\n      this.$emit('hide', evt);\n      this.localShow = !!(evt && evt.defaultPrevented);\n    },\n    onHidden: function onHidden(evt) {\n      this.setObservers(false); // bring our content back if needed to keep Vue happy\n      // Tooltip class will move it back to tip when shown again\n\n      this.bringItBack();\n      this.$emit('hidden', evt);\n      this.localShow = false;\n    },\n    onEnabled: function onEnabled(evt) {\n      /* istanbul ignore next */\n      if (!evt || evt.type !== 'enabled') {\n        // Prevent possible endless loop if user mistakenly fires enabled instead of enable\n        return;\n      }\n\n      this.$emit('update:disabled', false);\n      this.$emit('disabled');\n    },\n    onDisabled: function onDisabled(evt) {\n      /* istanbul ignore next */\n      if (!evt || evt.type !== 'disabled') {\n        // Prevent possible endless loop if user mistakenly fires disabled instead of disable\n        return;\n      }\n\n      this.$emit('update:disabled', true);\n      this.$emit('enabled');\n    },\n    bringItBack: function bringItBack() {\n      // bring our content back if needed to keep Vue happy\n      if (this.$el && this.$refs.title) {\n        this.$el.appendChild(this.$refs.title);\n      }\n\n      if (this.$el && this.$refs.content) {\n        this.$el.appendChild(this.$refs.content);\n      }\n    },\n    setObservers: function setObservers(on) {\n      if (on) {\n        if (this.$refs.title) {\n          this._obs_title = observe_dom(this.$refs.title, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\n        }\n\n        if (this.$refs.content) {\n          this._obs_content = observe_dom(this.$refs.content, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\n        }\n      } else {\n        if (this._obs_title) {\n          this._obs_title.disconnect();\n\n          this._obs_title = null;\n        }\n\n        if (this._obs_content) {\n          this._obs_content.disconnect();\n\n          this._obs_content = null;\n        }\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/popover/popover.js\n\n\n\n\n\n\n\n\n\nvar popover_NAME = 'BPopover';\nvar popover_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  content: {\n    type: String,\n    default: ''\n  },\n  triggers: {\n    type: [String, Array],\n    default: 'click'\n  },\n  placement: {\n    type: String,\n    default: 'right'\n  },\n  fallbackPlacement: {\n    type: [String, Array],\n    default: 'flip',\n    validator: function validator(value) {\n      return isArray(value) || arrayIncludes(['flip', 'clockwise', 'counterclockwise'], value);\n    }\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(popover_NAME, 'variant');\n    }\n  },\n  customClass: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(popover_NAME, 'customClass');\n    }\n  },\n  delay: {\n    type: [Number, Object, String],\n    default: function _default() {\n      return getComponentConfig(popover_NAME, 'delay');\n    }\n  },\n  boundary: {\n    // String: scrollParent, window, or viewport\n    // Element: element reference\n    type: [String, HTMLElement],\n    default: function _default() {\n      return getComponentConfig(popover_NAME, 'boundary');\n    }\n  },\n  boundaryPadding: {\n    type: Number,\n    default: function _default() {\n      return getComponentConfig(popover_NAME, 'boundaryPadding');\n    }\n  } // @vue/component\n\n};\nvar BPopover =\n/*#__PURE__*/\nvue.extend({\n  name: popover_NAME,\n  mixins: [toolpop, mixins_normalize_slot],\n  props: popover_props,\n  data: function data() {\n    return {};\n  },\n  methods: {\n    createToolpop: function createToolpop() {\n      // getTarget is in toolpop mixin\n      var target = this.getTarget();\n      /* istanbul ignore else */\n\n      if (target) {\n        this._toolpop = new popover_class(target, this.getConfig(), this);\n      } else {\n        this._toolpop = null;\n        utils_warn(\"b-popover: 'target' element not found!\");\n      }\n\n      return this._toolpop;\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      class: ['d-none'],\n      style: {\n        display: 'none'\n      },\n      attrs: {\n        'aria-hidden': true\n      }\n    }, [h('div', {\n      ref: 'title'\n    }, this.normalizeSlot('title')), h('div', {\n      ref: 'content'\n    }, this.normalizeSlot('default'))]);\n  }\n});\n/* harmony default export */ var popover = (BPopover);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/popover/popover.js\n\n\n\n\n\n\n\n\nfunction popover_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction popover_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { popover_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { popover_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n // Key which we use to store tooltip object on element\n\nvar BV_POPOVER = '__BV_PopOver__'; // Valid event triggers\n\nvar validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Directive modifier test regular expressions. Pre-compile for performance\n\n};\nvar htmlRE = /^html$/;\nvar noFadeRE = /^nofade$/i;\nvar placementRE = /^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/;\nvar boundaryRE = /^(window|viewport|scrollParent)$/;\nvar delayRE = /^d\\d+$/;\nvar offsetRE = /^o-?\\d+$/;\nvar variantRE = /^v-.+$/; // Build a PopOver config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar popover_parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a basic config\n  var NAME = 'BPopover';\n  var config = {\n    delay: getComponentConfig(NAME, 'delay'),\n    boundary: String(getComponentConfig(NAME, 'boundary')),\n    boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0,\n    variant: getComponentConfig(NAME, 'variant'),\n    customClass: getComponentConfig(NAME, 'customClass') // Process bindings.value\n\n  };\n\n  if (isString(bindings.value)) {\n    // Value is popover content (html optionally supported)\n    config.content = bindings.value;\n  } else if (isFunction(bindings.value)) {\n    // Content generator function\n    config.content = bindings.value;\n  } else if (object_isObject(bindings.value)) {\n    // Value is config object, so merge\n    config = popover_objectSpread({}, config, {}, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  keys(bindings.modifiers).forEach(function (mod) {\n    if (htmlRE.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (noFadeRE.test(mod)) {\n      // no animation\n      config.animation = false;\n    } else if (placementRE.test(mod)) {\n      // placement of popover\n      config.placement = mod;\n    } else if (boundaryRE.test(mod)) {\n      // Boundary of popover\n      config.boundary = mod;\n    } else if (delayRE.test(mod)) {\n      // Delay value\n      var delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (offsetRE.test(mod)) {\n      // Offset value (negative allowed)\n      var offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    } else if (variantRE.test(mod)) {\n      // Variant\n      config.variant = mod.slice(2) || null;\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  var selectedTriggers = {}; // Parse current config object trigger\n\n  var triggers = isString(config.trigger) ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(function (trigger) {\n    if (validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  keys(validTriggers).forEach(function (trigger) {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = keys(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to focus\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update PopOver on our element\n\n\nvar popover_applyPopover = function applyPopover(el, bindings, vnode) {\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  } // Popper is required for PopOvers to work\n\n\n  if (!popper[\"a\" /* default */]) {\n    /* istanbul ignore next */\n    utils_warn('v-b-popover: Popper.js is required for PopOvers to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  var config = popover_parseBindings(bindings);\n\n  if (el[BV_POPOVER]) {\n    el[BV_POPOVER].updateConfig(config);\n  } else {\n    el[BV_POPOVER] = new popover_class(el, config, vnode.context);\n  }\n}; // Remove PopOver on our element\n\n\nvar removePopover = function removePopover(el) {\n  if (el[BV_POPOVER]) {\n    el[BV_POPOVER].destroy();\n    el[BV_POPOVER] = null;\n    delete el[BV_POPOVER];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar VBPopover = {\n  bind: function bind(el, bindings, vnode) {\n    popover_applyPopover(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode) {\n    popover_applyPopover(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      popover_applyPopover(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      popover_applyPopover(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el) {\n    removePopover(el);\n  }\n};\n/* harmony default export */ var popover_popover = (VBPopover);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/popover/index.js\n\n\n\nvar PopoverPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BPopover: BPopover\n  },\n  directives: {\n    VBPopover: VBPopover\n  }\n});\n\n/* harmony default export */ var components_popover = (PopoverPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/progress/progress-bar.js\n\n\n\n\n\n\n\n\n\nvar progress_bar_NAME = 'BProgressBar'; // @vue/component\n\nvar BProgressBar =\n/*#__PURE__*/\nvue.extend({\n  name: progress_bar_NAME,\n  mixins: [mixins_normalize_slot],\n  inject: {\n    bvProgress: {\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return {};\n      }\n    }\n  },\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    labelHtml: {\n      type: String\n    },\n    // $parent (this.bvProgress) prop values may take precedence over the following props\n    // Which is why they are defaulted to null\n    max: {\n      type: Number,\n      default: null\n    },\n    precision: {\n      type: Number,\n      default: null\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(progress_bar_NAME, 'variant');\n      }\n    },\n    striped: {\n      type: Boolean,\n      default: null\n    },\n    animated: {\n      type: Boolean,\n      default: null\n    },\n    showProgress: {\n      type: Boolean,\n      default: null\n    },\n    showValue: {\n      type: Boolean,\n      default: null\n    }\n  },\n  computed: {\n    progressBarClasses: function progressBarClasses() {\n      return [this.computedVariant ? \"bg-\".concat(this.computedVariant) : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];\n    },\n    progressBarStyles: function progressBarStyles() {\n      return {\n        width: 100 * (this.value / this.computedMax) + '%'\n      };\n    },\n    computedProgress: function computedProgress() {\n      var p = Math.pow(10, this.computedPrecision);\n      return Math.round(100 * p * this.value / this.computedMax) / p;\n    },\n    computedMax: function computedMax() {\n      // Prefer our max over parent setting\n      return isNumber(this.max) ? this.max : this.bvProgress.max || 100;\n    },\n    computedVariant: function computedVariant() {\n      // Prefer our variant over parent setting\n      return this.variant || this.bvProgress.variant;\n    },\n    computedPrecision: function computedPrecision() {\n      // Prefer our precision over parent setting\n      return isNumber(this.precision) ? this.precision : this.bvProgress.precision || 0;\n    },\n    computedStriped: function computedStriped() {\n      // Prefer our striped over parent setting\n      return isBoolean(this.striped) ? this.striped : this.bvProgress.striped || false;\n    },\n    computedAnimated: function computedAnimated() {\n      // Prefer our animated over parent setting\n      return isBoolean(this.animated) ? this.animated : this.bvProgress.animated || false;\n    },\n    computedShowProgress: function computedShowProgress() {\n      // Prefer our showProgress over parent setting\n      return isBoolean(this.showProgress) ? this.showProgress : this.bvProgress.showProgress || false;\n    },\n    computedShowValue: function computedShowValue() {\n      // Prefer our showValue over parent setting\n      return isBoolean(this.showValue) ? this.showValue : this.bvProgress.showValue || false;\n    }\n  },\n  render: function render(h) {\n    var childNodes = h(false);\n\n    if (this.hasNormalizedSlot('default')) {\n      childNodes = this.normalizeSlot('default');\n    } else if (this.label || this.labelHtml) {\n      childNodes = h('span', {\n        domProps: htmlOrText(this.labelHtml, this.label)\n      });\n    } else if (this.computedShowProgress) {\n      childNodes = this.computedProgress.toFixed(this.computedPrecision);\n    } else if (this.computedShowValue) {\n      childNodes = this.value.toFixed(this.computedPrecision);\n    }\n\n    return h('div', {\n      staticClass: 'progress-bar',\n      class: this.progressBarClasses,\n      style: this.progressBarStyles,\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': '0',\n        'aria-valuemax': this.computedMax.toString(),\n        'aria-valuenow': this.value.toFixed(this.computedPrecision)\n      }\n    }, [childNodes]);\n  }\n});\n/* harmony default export */ var progress_bar = (BProgressBar);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/progress/progress.js\n\n\n\n\n\nvar progress_NAME = 'BProgress'; // @vue/component\n\nvar BProgress =\n/*#__PURE__*/\nvue.extend({\n  name: progress_NAME,\n  mixins: [mixins_normalize_slot],\n  provide: function provide() {\n    return {\n      bvProgress: this\n    };\n  },\n  props: {\n    // These props can be inherited via the child b-progress-bar(s)\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(progress_NAME, 'variant');\n      }\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    animated: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: null\n    },\n    precision: {\n      type: Number,\n      default: 0\n    },\n    showProgress: {\n      type: Boolean,\n      default: false\n    },\n    showValue: {\n      type: Boolean,\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    // This prop is not inherited by child b-progress-bar(s)\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: {\n    progressHeight: function progressHeight() {\n      return {\n        height: this.height || null\n      };\n    }\n  },\n  render: function render(h) {\n    var childNodes = this.normalizeSlot('default');\n\n    if (!childNodes) {\n      childNodes = h(BProgressBar, {\n        props: {\n          value: this.value,\n          max: this.max,\n          precision: this.precision,\n          variant: this.variant,\n          animated: this.animated,\n          striped: this.striped,\n          showProgress: this.showProgress,\n          showValue: this.showValue\n        }\n      });\n    }\n\n    return h('div', {\n      class: ['progress'],\n      style: this.progressHeight\n    }, [childNodes]);\n  }\n});\n/* harmony default export */ var progress = (BProgress);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/progress/index.js\n\n\n\nvar ProgressPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BProgress: BProgress,\n    BProgressBar: BProgressBar\n  }\n});\n\n/* harmony default export */ var components_progress = (ProgressPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/spinner/spinner.js\n\n\n\n\n\n\nvar spinner_NAME = 'BSpinner'; // @vue/component\n\nvar BSpinner =\n/*#__PURE__*/\nvue.extend({\n  name: spinner_NAME,\n  functional: true,\n  props: {\n    type: {\n      type: String,\n      default: 'border' // SCSS currently supports 'border' or 'grow'\n\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(spinner_NAME, 'variant');\n      }\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    role: {\n      type: String,\n      default: 'status'\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    }\n  },\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {};\n    var label = normalize_slot_normalizeSlot('label', {}, $scopedSlots, $slots) || props.label;\n\n    if (label) {\n      label = h('span', {\n        staticClass: 'sr-only'\n      }, label);\n    }\n\n    return h(props.tag, lib_esm_a(data, {\n      attrs: {\n        role: label ? props.role || 'status' : null,\n        'aria-hidden': label ? null : 'true'\n      },\n      class: (_class = {}, Object(defineProperty[\"a\" /* default */])(_class, \"spinner-\".concat(props.type), Boolean(props.type)), Object(defineProperty[\"a\" /* default */])(_class, \"spinner-\".concat(props.type, \"-sm\"), props.small), Object(defineProperty[\"a\" /* default */])(_class, \"text-\".concat(props.variant), Boolean(props.variant)), _class)\n    }), [label || h(false)]);\n  }\n});\n/* harmony default export */ var spinner = (BSpinner);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/spinner/index.js\n\n\nvar SpinnerPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BSpinner: BSpinner\n  }\n});\n\n/* harmony default export */ var components_spinner = (SpinnerPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/startcase.js\n\n\n/**\n * Converts a string, including strings in camelCase or snake_case, into Start Case (a variant\n * of Title Case where all words start with a capital letter), it keeps original single quote\n * and hyphen in the word.\n *\n * Copyright (c) 2017 Compass (MIT)\n * https://github.com/UrbanCompass/to-start-case\n * @author Zhuoyuan Zhang <https://github.com/drawyan>\n * @author Wei Wang <https://github.com/onlywei>\n *\n *\n *   'management_companies' to 'Management Companies'\n *   'managementCompanies' to 'Management Companies'\n *   `hell's kitchen` to `Hell's Kitchen`\n *   `co-op` to `Co-op`\n *\n * @param {String} str\n * @returns {String}\n */\nvar startCase = function startCase(str) {\n  return str.replace(/_/g, ' ').replace(/([a-z])([A-Z])/g, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(/(\\s|^)(\\w)/g, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n};\n\n/* harmony default export */ var startcase = (startCase);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/constants.js\n// Constants used by table helpers\n// Object of item keys that should be ignored for headers and stringification and filter events\nvar IGNORED_FIELD_KEYS = {\n  _rowVariant: true,\n  _cellVariants: true,\n  _showDetails: true // Filter CSS Selector for click/dblclick/etc events\n  // If any of these selectors match the clicked element, we ignore the event\n\n};\nvar EVENT_FILTER = ['a', 'a *', // include content inside links\n'button', 'button *', // include content inside buttons\n'input:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'textarea:not(.disabled):not([disabled])', '[role=\"link\"]', '[role=\"link\"] *', '[role=\"button\"]', '[role=\"button\"] *', '[tabindex]:not(.disabled):not([disabled])'].join(',');\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/normalize-fields.js\n\n\n\n\n\n\n\nfunction normalize_fields_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction normalize_fields_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { normalize_fields_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { normalize_fields_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n // Private function to massage field entry into common object format\n\nvar normalize_fields_processField = function processField(key, value) {\n  var field = null;\n\n  if (isString(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if (isFunction(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if (object_isObject(value)) {\n    field = normalize_fields_objectSpread({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalize_fields_normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if (isArray(origFields)) {\n    // Normalize array Form\n    origFields.filter(function (f) {\n      return f;\n    }).forEach(function (f) {\n      if (isString(f)) {\n        fields.push({\n          key: f,\n          label: startcase(f)\n        });\n      } else if (object_isObject(f) && f.key && isString(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(normalize_fields_objectSpread({}, f));\n      } else if (object_isObject(f) && keys(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = keys(f)[0];\n        var field = normalize_fields_processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && object_isObject(origFields) && keys(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    keys(origFields).forEach(function (key) {\n      var field = normalize_fields_processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && isArray(items) && items.length > 0) {\n    var sample = items[0];\n    keys(sample).forEach(function (k) {\n      if (!IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: startcase(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = isString(f.label) ? f.label : startcase(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\n/* harmony default export */ var normalize_fields = (normalize_fields_normalizeFields);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-items.js\n\n\n\n/* harmony default export */ var mixin_items = ({\n  props: {\n    items: {\n      // Provider mixin adds in `Function` type\n      type: Array,\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    fields: {\n      // Object format is deprecated and should be avoided\n      type: [Array, Object],\n      default: null\n    },\n    primaryKey: {\n      // Primary key for record.\n      // If provided the value in each row must be unique!!!\n      type: String,\n      default: null\n    },\n    value: {\n      // v-model for retrieving the current displayed rows\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      // Our local copy of the items. Must be an array\n      localItems: isArray(this.items) ? this.items.slice() : []\n    };\n  },\n  computed: {\n    computedFields: function computedFields() {\n      // We normalize fields into an array of objects\n      // [ { key:..., label:..., ...}, {...}, ..., {..}]\n      return normalize_fields(this.fields, this.localItems);\n    },\n    computedFieldsObj: function computedFieldsObj() {\n      // Fields as a simple lookup hash object\n      // Mainly for formatter lookup and scopedSlots for convenience\n      return this.computedFields.reduce(function (obj, f) {\n        obj[f.key] = f;\n        return obj;\n      }, {});\n    },\n    computedItems: function computedItems() {\n      // Fallback if various mixins not provided\n      return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems || []).slice();\n    },\n    context: function context() {\n      // Current state of sorting, filtering and pagination props/values\n      return {\n        filter: this.localFilter,\n        sortBy: this.localSortBy,\n        sortDesc: this.localSortDesc,\n        perPage: parseInt(this.perPage, 10) || 0,\n        currentPage: parseInt(this.currentPage, 10) || 1,\n        apiUrl: this.apiUrl\n      };\n    }\n  },\n  watch: {\n    items: function items(newItems) {\n      /* istanbul ignore else */\n      if (isArray(newItems)) {\n        // Set localItems/filteredItems to a copy of the provided array\n        this.localItems = newItems.slice();\n      } else if (isUndefined(newItems) || isNull(newItems)) {\n        /* istanbul ignore next */\n        this.localItems = [];\n      }\n    },\n    // Watch for changes on computedItems and update the v-model\n    computedItems: function computedItems(newVal) {\n      this.$emit('input', newVal);\n    },\n    // Watch for context changes\n    context: function context(newVal, oldVal) {\n      // Emit context info for external paging/filtering/sorting handling\n      if (!loose_equal(newVal, oldVal)) {\n        this.$emit('context-changed', newVal);\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Initially update the v-model of displayed items\n    this.$emit('input', this.computedItems);\n  },\n  methods: {\n    // Method to get the formatter method for a given field key\n    getFieldFormatter: function getFieldFormatter(key) {\n      var fieldsObj = this.computedFieldsObj;\n      var field = fieldsObj[key];\n      var parent = this.$parent;\n      var formatter = field && field.formatter;\n\n      if (isString(formatter) && isFunction(parent[formatter])) {\n        formatter = parent[formatter];\n      } else if (!isFunction(formatter)) {\n        formatter = undefined;\n      } // Return formatter function or undefined if none\n\n\n      return formatter;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/sanitize-row.js\n\n // Return a copy of a row after all reserved fields have been filtered out\n// TODO: add option to specify which fields to include\n\nfunction sanitizeRow(row) {\n  return keys(row).reduce(function (obj, key) {\n    // Ignore special fields that start with _\n    if (!IGNORED_FIELD_KEYS[key]) {\n      obj[key] = row[key];\n    }\n\n    return obj;\n  }, {});\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/stringify-object-values.js\n\n // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Primitives (numbers/strings) are returned as-is\n// Null and undefined values are filtered out\n// Dates are converted to their native string format\n//\n\nfunction stringifyObjectValues(val) {\n  if (isUndefined(val) || isNull(val)) {\n    /* istanbul ignore next */\n    return '';\n  }\n\n  if (val instanceof Object && !(val instanceof Date)) {\n    // Arrays are also object, and keys just returns the array indexes\n    // Date objects we convert to strings\n    return keys(val).sort()\n    /* sort to prevent SSR issues on pre-rendered sorted tables */\n    .filter(function (v) {\n      return !isUndefined(v) && !isNull(v);\n    })\n    /* ignore undefined/null values */\n    .map(function (k) {\n      return stringifyObjectValues(val[k]);\n    }).join(' ');\n  }\n\n  return String(val);\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/stringify-record-values.js\n\n // Stringifies the values of a record, ignoring any special top level field keys\n// TODO: add option to strigify formatted/scopedSlot items, and only specific fields\n\nfunction stringifyRecordValues(row) {\n  /* istanbul ignore else */\n  if (row instanceof Object) {\n    return stringifyObjectValues(sanitizeRow(row));\n  } else {\n    /* istanbul ignore next */\n    return '';\n  }\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-filtering.js\n\n\n\n\n\n\n\nvar DEPRECATION_MSG = 'Supplying a function to prop \"filter\" is deprecated. Use \"filter-function\" instead.';\n/* harmony default export */ var mixin_filtering = ({\n  props: {\n    filter: {\n      // Passing a function to filter is deprecated and should be avoided\n      type: [String, RegExp, Object, Array, Function],\n      default: null,\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecation: DEPRECATION_MSG\n    },\n    filterFunction: {\n      type: Function,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      // Flag for displaying which empty slot to show and some event triggering\n      isFiltered: false\n    };\n  },\n  computed: {\n    localFiltering: function localFiltering() {\n      return this.hasProvider ? !!this.noProviderFiltering : true;\n    },\n    // For watching changes to `filteredItems` vs `localItems`\n    filteredCheck: function filteredCheck() {\n      return {\n        filteredItems: this.filteredItems,\n        localItems: this.localItems,\n        localFilter: this.localFilter\n      };\n    },\n    // Sanitized/normalized version of filter prop\n    localFilter: function localFilter() {\n      // Deprecate setting prop filter to a function\n      // `localFilterFn` will contain the correct function ref\n      if (isFunction(this.filter)) {\n        /* istanbul ignore next */\n        return '';\n      } // Using internal filter function, which only accepts string or RegExp\n\n\n      if (this.localFiltering && !isFunction(this.filterFunction) && !(isString(this.filter) || isRegExp(this.filter))) {\n        return '';\n      } // Could be a string, object or array, as needed by external filter function\n      // We use `cloneDeep` to ensure we have a new copy of an object or array\n      // without Vue reactive observers\n\n\n      return clone_deep(this.filter);\n    },\n    // Sanitized/normalize filter-function prop\n    localFilterFn: function localFilterFn() {\n      var filterFn = this.filterFunction;\n      var filter = this.filter; // Prefer `filterFn` prop\n\n      if (isFunction(filterFn)) {\n        return filterFn;\n      } // Deprecate setting `filter` prop to a function\n\n\n      if (isFunction(filter)) {\n        /* istanbul ignore next */\n        utils_warn(\"b-table: \".concat(DEPRECATION_MSG));\n        /* istanbul ignore next */\n\n        return filter;\n      } // No `filterFunction`, so signal to use internal filter function\n\n\n      return null;\n    },\n    // Returns the records in `localItems` that match the filter criteria\n    // Returns the original `localItems` array if not sorting\n    filteredItems: function filteredItems() {\n      var items = this.localItems || []; // Resolve the filtering function, when requested\n      // We prefer the provided filtering function and fallback to the internal one\n      // When no filtering criteria is specified the filtering factories will return `null`\n\n      var filterFn = null;\n\n      if (this.localFiltering) {\n        var criteria = this.localFilter;\n        filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria);\n      } // We only do local filtering when requested and there are records to filter\n\n\n      if (filterFn && items.length > 0) {\n        return items.filter(filterFn);\n      } // Otherwise return all items\n\n\n      return items;\n    }\n  },\n  watch: {\n    // Watch for changes to the filter criteria and filtered items vs localItems).\n    // And set visual state and emit events as required\n    filteredCheck: function filteredCheck(_ref) {\n      var filteredItems = _ref.filteredItems,\n          localItems = _ref.localItems,\n          localFilter = _ref.localFilter;\n      // Determine if the dataset is filtered or not\n      var isFiltered = false;\n\n      if (!localFilter) {\n        // If filter criteria is falsey\n        isFiltered = false;\n      } else if (loose_equal(localFilter, []) || loose_equal(localFilter, {})) {\n        // If filter criteria is an empty array or object\n        isFiltered = false;\n      } else if (localFilter) {\n        // If filter criteria is truthy\n        isFiltered = true;\n      }\n\n      if (isFiltered) {\n        this.$emit('filtered', filteredItems, filteredItems.length);\n      }\n\n      this.isFiltered = isFiltered;\n    },\n    isFiltered: function isFiltered(newVal, oldVal) {\n      if (newVal === false && oldVal === true) {\n        // We need to emit a filtered event if isFiltered transitions from true to\n        // false so that users can update their pagination controls.\n        this.$emit('filtered', this.localItems, this.localItems.length);\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set the initial filtered state.\n    // In a nextTick so that we trigger a filtered event if needed\n    this.$nextTick(function () {\n      _this.isFiltered = Boolean(_this.localFilter);\n    });\n  },\n  methods: {\n    // Filter Function factories\n    filterFnFactory: function filterFnFactory(filterFn, criteria) {\n      // Wrapper factory for external filter functions.\n      // Wrap the provided filter-function and return a new function.\n      // Returns null if no filter-function defined or if criteria is falsey.\n      // Rather than directly grabbing this.computedLocalFilterFn or this.filterFunction\n      // we have it passed, so that the caller computed prop will be reactive to changes\n      // in the original filter-function (as this routine is a method)\n      if (!filterFn || !isFunction(filterFn) || !criteria || loose_equal(criteria, []) || loose_equal(criteria, {})) {\n        return null;\n      } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n      var fn = function fn(item) {\n        // Generated function returns true if the criteria matches part\n        // of the serialized data, otherwise false\n        return filterFn(item, criteria);\n      }; // Return the wrapped function\n\n\n      return fn;\n    },\n    defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {\n      // Generates the default filter function, using the given filter criteria\n      if (!criteria || !(isString(criteria) || isRegExp(criteria))) {\n        // Built in filter can only support strings or RegExp criteria (at the moment)\n        return null;\n      } // Build the regexp needed for filtering\n\n\n      var regexp = criteria;\n\n      if (isString(regexp)) {\n        // Escape special RegExp characters in the string and convert contiguous\n        // whitespace to \\s+ matches\n        var pattern = criteria.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/[\\s\\uFEFF\\xA0]+/g, '\\\\s+'); // Build the RegExp (no need for global flag, as we only need\n        // to find the value once in the string)\n\n        regexp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n      } // Generate the wrapped filter test function to use\n\n\n      var fn = function fn(item) {\n        // This searches all row values (and sub property values) in the entire (excluding\n        // special _ prefixed keys), because we convert the record to a space-separated\n        // string containing all the value properties (recursively), even ones that are\n        // not visible (not specified in this.fields).\n        //\n        // TODO: Enable searching on formatted fields and scoped slots\n        // TODO: Should we filter only on visible fields (i.e. ones in this.fields) by default?\n        // TODO: Allow for searching on specific fields/key, this could be combined with the previous TODO\n        // TODO: Give stringifyRecordValues extra options for filtering (i.e. passing the\n        //       fields definition and a reference to $scopedSlots)\n        //\n        // Generated function returns true if the criteria matches part of\n        // the serialized data, otherwise false\n        // We set lastIndex = 0 on regex in case someone uses the /g global flag\n        regexp.lastIndex = 0;\n        return regexp.test(stringifyRecordValues(item));\n      }; // Return the generated function\n\n\n      return fn;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/utils/stable-sort.js\n/*\n * Consistent and stable sort function across JavaScript platforms\n *\n * Inconsistent sorts can cause SSR problems between client and server\n * such as in <b-table> if sortBy is applied to the data on server side render.\n * Chrome and V8 native sorts are inconsistent/unstable\n *\n * This function uses native sort with fallback to index compare when the a and b\n * compare returns 0\n *\n * Algorithm based on:\n * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645\n *\n * @param {array} array to sort\n * @param {function} sort compare function\n * @return {array}\n */\nvar stableSort = function stableSort(array, compareFn) {\n  // Using `.bind(compareFn)` on the wrapped anonymous function improves\n  // performance by avoiding the function call setup. We don't use an arrow\n  // function here as it binds `this` to the `stableSort` context rather than\n  // the `compareFn` context, which wouldn't give us the performance increase.\n  return array.map(function (a, index) {\n    return [index, a];\n  }).sort(function (a, b) {\n    return this(a[1], b[1]) || a[0] - b[0];\n  }.bind(compareFn)).map(function (e) {\n    return e[1];\n  });\n};\n\n/* harmony default export */ var stable_sort = (stableSort);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/default-sort-compare.js\n\n\n // Default sort compare routine\n//\n// TODO: Add option to sort by multiple columns (tri-state per column,\n//       plus order of columns in sort)  where sortBy could be an array\n//       of objects [ {key: 'foo', sortDir: 'asc'}, {key:'bar', sortDir: 'desc'} ...]\n//       or an array of arrays [ ['foo','asc'], ['bar','desc'] ]\n//       Multisort will most likely be handled in mixin-sort.js by\n//       calling this method for each sortBy\n\nfunction defaultSortCompare(a, b, sortBy, formatter, localeOpts, locale) {\n  var aa = utils_get(a, sortBy, '');\n  var bb = utils_get(b, sortBy, '');\n\n  if (isFunction(formatter)) {\n    aa = formatter(aa, sortBy, a);\n    bb = formatter(bb, sortBy, b);\n  }\n\n  aa = isUndefined(aa) || isNull(aa) ? '' : aa;\n  bb = isUndefined(bb) || isNull(bb) ? '' : bb;\n\n  if (isDate(aa) && isDate(bb) || isNumber(aa) && isNumber(bb)) {\n    // Special case for comparing dates and numbers\n    // Internally dates are compared via their epoch number values\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  } else {\n    // Do localized string comparison\n    return stringifyObjectValues(aa).localeCompare(stringifyObjectValues(bb), locale, localeOpts);\n  }\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-sorting.js\n\n\n\n\n\n\n\nfunction mixin_sorting_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_sorting_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_sorting_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_sorting_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n/* harmony default export */ var mixin_sorting = ({\n  props: {\n    sortBy: {\n      type: String,\n      default: ''\n    },\n    sortDesc: {\n      // To Do: Make this tri-state: true, false, null\n      type: Boolean,\n      default: false\n    },\n    sortDirection: {\n      // This prop is named incorrectly.\n      // It should be initialSortDirection\n      // As it is a bit misleading (not to mention screws up\n      // the Aria Label on the headers)\n      type: String,\n      default: 'asc',\n      validator: function validator(direction) {\n        return arrayIncludes(['asc', 'desc', 'last'], direction);\n      }\n    },\n    sortCompare: {\n      type: Function,\n      default: null\n    },\n    sortCompareOptions: {\n      // Supported localCompare options, see `options` section of:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n      type: Object,\n      default: function _default() {\n        return {\n          numeric: true\n        };\n      }\n    },\n    sortCompareLocale: {\n      type: String // default: undefined\n\n    },\n    noSortReset: {\n      // Another prop that should have had a better name.\n      // It should be noSortClear (on non-sortable headers).\n      // We will need to make sure the documentation is clear on what\n      // this prop does (as well as in the code for future reference)\n      type: Boolean,\n      default: false\n    },\n    labelSortAsc: {\n      type: String,\n      default: 'Click to sort Ascending'\n    },\n    labelSortDesc: {\n      type: String,\n      default: 'Click to sort Descending'\n    },\n    labelSortClear: {\n      type: String,\n      default: 'Click to clear sorting'\n    },\n    noLocalSorting: {\n      type: Boolean,\n      default: false\n    },\n    noFooterSorting: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localSortBy: this.sortBy || '',\n      localSortDesc: this.sortDesc || false\n    };\n  },\n  computed: {\n    localSorting: function localSorting() {\n      return this.hasProvider ? !!this.noProviderSorting : !this.noLocalSorting;\n    },\n    isSortable: function isSortable() {\n      return this.computedFields.some(function (f) {\n        return f.sortable;\n      });\n    },\n    sortedItems: function sortedItems() {\n      // Sorts the filtered items and returns a new array of the sorted items\n      // or the original items array if not sorted.\n      var items = (this.filteredItems || this.localItems || []).slice();\n      var sortBy = this.localSortBy;\n      var sortDesc = this.localSortDesc;\n      var sortCompare = this.sortCompare;\n      var localSorting = this.localSorting;\n\n      var sortOptions = mixin_sorting_objectSpread({}, this.sortCompareOptions, {\n        usage: 'sort'\n      });\n\n      var sortLocale = this.sortCompareLocale || undefined;\n\n      if (sortBy && localSorting) {\n        var formatter = this.getFieldFormatter(sortBy); // stableSort returns a new array, and leaves the original array intact\n\n        return stable_sort(items, function (a, b) {\n          var result = null;\n\n          if (isFunction(sortCompare)) {\n            // Call user provided sortCompare routine\n            result = sortCompare(a, b, sortBy, sortDesc, formatter, sortOptions, sortLocale);\n          }\n\n          if (isUndefined(result) || isNull(result) || result === false) {\n            // Fallback to built-in defaultSortCompare if sortCompare\n            // is not defined or returns null/false\n            result = defaultSortCompare(a, b, sortBy, formatter, sortOptions, sortLocale);\n          } // Negate result if sorting in descending order\n\n\n          return (result || 0) * (sortDesc ? -1 : 1);\n        });\n      }\n\n      return items;\n    }\n  },\n  watch: {\n    isSortable: function isSortable(newVal, oldVal)\n    /* istanbul ignore next: pain in the butt to test */\n    {\n      if (newVal) {\n        if (this.isSortable) {\n          this.$on('head-clicked', this.handleSort);\n        }\n      } else {\n        this.$off('head-clicked', this.handleSort);\n      }\n    },\n    sortDesc: function sortDesc(newVal, oldVal) {\n      if (newVal === this.localSortDesc) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortDesc = newVal || false;\n    },\n    sortBy: function sortBy(newVal, oldVal) {\n      if (newVal === this.localSortBy) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortBy = newVal || '';\n    },\n    // Update .sync props\n    localSortDesc: function localSortDesc(newVal, oldVal) {\n      // Emit update to sort-desc.sync\n      if (newVal !== oldVal) {\n        this.$emit('update:sortDesc', newVal);\n      }\n    },\n    localSortBy: function localSortBy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:sortBy', newVal);\n      }\n    }\n  },\n  created: function created() {\n    if (this.isSortable) {\n      this.$on('head-clicked', this.handleSort);\n    }\n  },\n  methods: {\n    // Handlers\n    // Need to move from thead-mixin\n    handleSort: function handleSort(key, field, evt, isFoot) {\n      var _this = this;\n\n      if (!this.isSortable) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (isFoot && this.noFooterSorting) {\n        return;\n      } // TODO: make this tri-state sorting\n      // cycle desc => asc => none => desc => ...\n\n\n      var sortChanged = false;\n\n      var toggleLocalSortDesc = function toggleLocalSortDesc() {\n        var sortDirection = field.sortDirection || _this.sortDirection;\n\n        if (sortDirection === 'asc') {\n          _this.localSortDesc = false;\n        } else if (sortDirection === 'desc') {\n          _this.localSortDesc = true;\n        } else {// sortDirection === 'last'\n          // Leave at last sort direction from previous column\n        }\n      };\n\n      if (field.sortable) {\n        if (key === this.localSortBy) {\n          // Change sorting direction on current column\n          this.localSortDesc = !this.localSortDesc;\n        } else {\n          // Start sorting this column ascending\n          this.localSortBy = key; // this.localSortDesc = false\n\n          toggleLocalSortDesc();\n        }\n\n        sortChanged = true;\n      } else if (this.localSortBy && !this.noSortReset) {\n        this.localSortBy = '';\n        toggleLocalSortDesc();\n        sortChanged = true;\n      }\n\n      if (sortChanged) {\n        // Sorting parameters changed\n        this.$emit('sort-changed', this.context);\n      }\n    },\n    // methods to compute classes and attrs for thead>th cells\n    sortTheadThClasses: function sortTheadThClasses(key, field, isFoot) {\n      return {// No Classes for sorting currently...\n        // All styles targeted using aria-* attrs\n      };\n    },\n    sortTheadThAttrs: function sortTheadThAttrs(key, field, isFoot) {\n      if (!this.isSortable || isFoot && this.noFooterSorting) {\n        // No attributes if not a sortable table\n        return {};\n      }\n\n      var sortable = field.sortable;\n      var ariaLabel = '';\n\n      if ((!field.label || !field.label.trim()) && !field.headerTitle) {\n        // In case field's label and title are empty/blank, we need to\n        // add a hint about what the column is about for non-sighted users.\n        // This is duplicated code from tbody-row mixin, but we need it\n        // here as well, since we overwrite the original aria-label.\n\n        /* istanbul ignore next */\n        ariaLabel = startcase(key);\n      } // The correctness of these labels is very important for screen-reader users.\n\n\n      var ariaLabelSorting = '';\n\n      if (sortable) {\n        if (this.localSortBy === key) {\n          // currently sorted sortable column.\n          ariaLabelSorting = this.localSortDesc ? this.labelSortAsc : this.labelSortDesc;\n        } else {\n          // Not currently sorted sortable column.\n          // Not using nested ternary's here for clarity/readability\n          // Default for ariaLabel\n          ariaLabelSorting = this.localSortDesc ? this.labelSortDesc : this.labelSortAsc; // Handle sortDirection setting\n\n          var sortDirection = this.sortDirection || field.sortDirection;\n\n          if (sortDirection === 'asc') {\n            ariaLabelSorting = this.labelSortAsc;\n          } else if (sortDirection === 'desc') {\n            ariaLabelSorting = this.labelSortDesc;\n          }\n        }\n      } else if (!this.noSortReset) {\n        // Non sortable column\n        ariaLabelSorting = this.localSortBy ? this.labelSortClear : '';\n      } // Assemble the aria-label attribute value\n\n\n      ariaLabel = [ariaLabel.trim(), ariaLabelSorting.trim()].filter(Boolean).join(': '); // Assemble the aria-sort attribute value\n\n      var ariaSort = sortable && this.localSortBy === key ? this.localSortDesc ? 'descending' : 'ascending' : sortable ? 'none' : null; // Return the attributes\n      // (All the above just to get these two values)\n\n      return {\n        'aria-label': ariaLabel || null,\n        'aria-sort': ariaSort\n      };\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-pagination.js\n\n/* harmony default export */ var mixin_pagination = ({\n  props: {\n    perPage: {\n      type: [Number, String],\n      default: 0\n    },\n    currentPage: {\n      type: [Number, String],\n      default: 1\n    }\n  },\n  computed: {\n    localPaging: function localPaging() {\n      return this.hasProvider ? !!this.noProviderPaging : true;\n    },\n    paginatedItems: function paginatedItems() {\n      var items = this.sortedItems || this.filteredItems || this.localItems || [];\n      var currentPage = Math.max(parseInt(this.currentPage, 10) || 1, 1);\n      var perPage = Math.max(parseInt(this.perPage, 10) || 0, 0); // Apply local pagination\n\n      if (this.localPaging && !!perPage) {\n        // Grab the current page of data (which may be past filtered items limit)\n        items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\n      } // Return the items to display in the table\n\n\n      return items;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-caption.js\n\n/* harmony default export */ var mixin_caption = ({\n  props: {\n    caption: {\n      type: String,\n      default: null\n    },\n    captionHtml: {\n      type: String\n    },\n    captionTop: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    captionClasses: function captionClasses() {\n      return {\n        'b-table-caption-top': this.captionTop\n      };\n    },\n    captionId: function captionId() {\n      // Even though this.safeId looks like a method, it is a computed prop\n      // that returns a new function if the underlying ID changes\n      return this.isStacked ? this.safeId('_caption_') : null;\n    }\n  },\n  methods: {\n    renderCaption: function renderCaption() {\n      var h = this.$createElement; // Build the caption\n\n      var $captionSlot = this.normalizeSlot('table-caption', {});\n      var $caption = h(false);\n\n      if ($captionSlot || this.caption || this.captionHtml) {\n        var data = {\n          key: 'caption',\n          class: this.captionClasses,\n          attrs: {\n            id: this.captionId\n          }\n        };\n\n        if (!$captionSlot) {\n          data.domProps = htmlOrText(this.captionHtml, this.caption);\n        }\n\n        $caption = h('caption', data, [$captionSlot]);\n      }\n\n      return $caption;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-colgroup.js\n/* harmony default export */ var mixin_colgroup = ({\n  methods: {\n    renderColgroup: function renderColgroup() {\n      var h = this.$createElement;\n      var fields = this.computedFields;\n      var $colgroup = h(false);\n\n      if (this.hasNormalizedSlot('table-colgroup')) {\n        $colgroup = h('colgroup', {\n          key: 'colgroup'\n        }, [this.normalizeSlot('table-colgroup', {\n          columns: fields.length,\n          fields: fields\n        })]);\n      }\n\n      return $colgroup;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/filter-event.js\n\n // Returns true of we should ignore the click/dbclick/keypress event\n// Avoids having the user need to use @click.stop on the form control\n\nfunction filterEvent(evt) {\n  if (!evt || !evt.target) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var el = evt.target;\n\n  if (el.tagName === 'TD' || el.tagName === 'TH' || el.tagName === 'TR' || el.disabled) {\n    // Shortut all the following tests for efficiency\n    return false;\n  }\n\n  if (closest('.dropdown-menu', el)) {\n    // Click was in a dropdown menu, so ignore\n    return true;\n  }\n\n  var label = el.tagName === 'LABEL' ? el : closest('label', el);\n\n  if (label && label.control && !label.control.disabled) {\n    // If the label's form control is not disabled then we don't propagate evt\n    return true;\n  } // Else check to see if the event target matches one of the selectors in the event filter\n  // i.e. anchors, non disabled inputs, etc. Return true if we should ignore the event.\n\n\n  return matches(el, EVENT_FILTER);\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/text-selection-active.js\n\n\n\n// Helper to determine if a there is an active text selection on the document page.\n// Used to filter out click events caused by the mouse up at end of selection\n//\n// Accepts an element as only argument to test to see if selection overlaps or is\n// contained within the element\n\nfunction textSelectionActive() {\n  var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  var win = window;\n  /* istanbul ignore if: JSDOM doesn't support getSelection */\n\n  if (win && win.getSelection && win.getSelection().toString() !== '' && isElement(el)) {\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n    var sel = win.getSelection();\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n\n    return sel.containsNode ? sel.containsNode(el, true) : false;\n  } else {\n    return false;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-thead.js\n\n\n\n\n\n\n\nfunction mixin_thead_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_thead_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_thead_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_thead_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n/* harmony default export */ var mixin_thead = ({\n  props: {\n    headVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BTable', 'headVariant');\n      }\n    },\n    theadClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    theadTrClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    headClasses: function headClasses() {\n      return [this.headVariant ? 'thead-' + this.headVariant : '', this.theadClass];\n    }\n  },\n  methods: {\n    fieldClasses: function fieldClasses(field) {\n      // header field (th) classes\n      return [field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];\n    },\n    headClicked: function headClicked(evt, field, isFoot) {\n      if (this.stopIfBusy && this.stopIfBusy(evt)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(evt)) {\n        // clicked on a non-disabled control so ignore\n        return;\n      } else if (textSelectionActive(this.$el)) {\n        // User is selecting text, so ignore\n\n        /* istanbul ignore next: JSDOM doesn't support getSelection() */\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.$emit('head-clicked', field.key, field, evt, isFoot);\n    },\n    renderThead: function renderThead() {\n      var _this = this;\n\n      var isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var h = this.$createElement;\n      var fields = this.computedFields || [];\n\n      if (this.isStacked === true || fields.length === 0) {\n        // In always stacked mode, we don't bother rendering the head/foot.\n        // Or if no field headings (empty table)\n        return h(false);\n      } // Helper function to generate a field TH cell\n\n\n      var makeCell = function makeCell(field, colIndex) {\n        var ariaLabel = null;\n\n        if (!field.label.trim() && !field.headerTitle) {\n          // In case field's label and title are empty/blank\n          // We need to add a hint about what the column is about for non-sighted users\n\n          /* istanbul ignore next */\n          ariaLabel = startcase(field.key);\n        }\n\n        var hasHeadClickListener = _this.$listeners['head-clicked'] || _this.isSortable;\n        var handlers = {};\n\n        if (hasHeadClickListener) {\n          handlers.click = function (evt) {\n            _this.headClicked(evt, field, isFoot);\n          };\n\n          handlers.keydown = function (evt) {\n            var keyCode = evt.keyCode;\n\n            if (keyCode === key_codes.ENTER || keyCode === key_codes.SPACE) {\n              _this.headClicked(evt, field, isFoot);\n            }\n          };\n        }\n\n        var sortAttrs = _this.isSortable ? _this.sortTheadThAttrs(field.key, field, isFoot) : {};\n        var sortClass = _this.isSortable ? _this.sortTheadThClasses(field.key, field, isFoot) : null;\n        var data = {\n          key: field.key,\n          class: [_this.fieldClasses(field), sortClass],\n          style: field.thStyle || {},\n          attrs: mixin_thead_objectSpread({\n            // We only add a tabindex of 0 if there is a head-clicked listener\n            tabindex: hasHeadClickListener ? '0' : null,\n            abbr: field.headerAbbr || null,\n            title: field.headerTitle || null,\n            role: 'columnheader',\n            scope: 'col',\n            'aria-colindex': String(colIndex + 1),\n            'aria-label': ariaLabel\n          }, sortAttrs),\n          on: handlers\n        };\n        var fieldScope = {\n          label: field.label,\n          column: field.key,\n          field: field\n        };\n        var slot = isFoot && _this.hasNormalizedSlot(\"FOOT_\".concat(field.key)) ? _this.normalizeSlot(\"FOOT_\".concat(field.key), fieldScope) : _this.normalizeSlot(\"HEAD_\".concat(field.key), fieldScope);\n\n        if (!slot) {\n          data.domProps = htmlOrText(field.labelHtml);\n        }\n\n        return h('th', data, slot || field.label);\n      }; // Generate the array of TH cells\n\n\n      var $cells = fields.map(makeCell).filter(function (th) {\n        return th;\n      }); // Genrate the row(s)\n\n      var $trs = [];\n\n      if (isFoot) {\n        $trs.push(h('tr', {\n          class: this.tfootTrClass,\n          attrs: {\n            role: 'row'\n          }\n        }, $cells));\n      } else {\n        var scope = {\n          columns: fields.length,\n          fields: fields\n        };\n        $trs.push(this.normalizeSlot('thead-top', scope) || h(false));\n        $trs.push(h('tr', {\n          class: this.theadTrClass,\n          attrs: {\n            role: 'row'\n          }\n        }, $cells));\n      }\n\n      return h(isFoot ? 'tfoot' : 'thead', {\n        key: isFoot ? 'tfoot' : 'thead',\n        class: isFoot ? this.footClasses : this.headClasses,\n        attrs: {\n          role: 'rowgroup'\n        }\n      }, $trs);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-tfoot.js\n\n/* harmony default export */ var mixin_tfoot = ({\n  props: {\n    footClone: {\n      type: Boolean,\n      default: false\n    },\n    footVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BTable', 'footVariant');\n      }\n    },\n    tfootClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    tfootTrClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    footClasses: function footClasses() {\n      var variant = this.footVariant || this.headVariant || null;\n      return [variant ? \"thead-\".concat(variant) : '', this.tfootClass];\n    }\n  },\n  methods: {\n    renderTfoot: function renderTfoot() {\n      var h = this.$createElement; // Passing true to renderThead will make it render a tfoot\n\n      return this.footClone ? this.renderThead(true) : h(false);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-tbody-row.js\n\n\n\n\n\n\n\nfunction mixin_tbody_row_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_tbody_row_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_tbody_row_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_tbody_row_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n/* harmony default export */ var mixin_tbody_row = ({\n  props: {\n    tbodyTrClass: {\n      type: [String, Array, Function],\n      default: null\n    }\n  },\n  methods: {\n    // Methods for computing classes, attributes and styles for table cells\n    tdClasses: function tdClasses(field, item) {\n      var cellVariant = '';\n\n      if (item._cellVariants && item._cellVariants[field.key]) {\n        cellVariant = \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._cellVariants[field.key]);\n      }\n\n      return [field.variant && !cellVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(field.variant) : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];\n    },\n    tdAttrs: function tdAttrs(field, item, colIndex) {\n      var attrs = {\n        role: 'cell',\n        'aria-colindex': String(colIndex + 1)\n      };\n\n      if (field.isRowHeader) {\n        attrs.scope = 'row';\n        attrs.role = 'rowheader';\n      }\n\n      if (this.isStacked) {\n        // Generate the \"header cell\" label content in stacked mode\n        attrs['data-label'] = field.label;\n      }\n\n      return mixin_tbody_row_objectSpread({}, attrs, {}, this.getTdValues(item, field.key, field.tdAttr, {}));\n    },\n    rowClasses: function rowClasses(item) {\n      return [item._rowVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._rowVariant) : '', isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, 'row') : this.tbodyTrClass];\n    },\n    getTdValues: function getTdValues(item, key, tdValue, defValue) {\n      var parent = this.$parent;\n\n      if (tdValue) {\n        var value = utils_get(item, key, '');\n\n        if (isFunction(tdValue)) {\n          return tdValue(value, key, item);\n        } else if (isString(tdValue) && isFunction(parent[tdValue])) {\n          return parent[tdValue](value, key, item);\n        }\n\n        return tdValue;\n      }\n\n      return defValue;\n    },\n    // Method to get the value for a field\n    getFormattedValue: function getFormattedValue(item, field) {\n      var key = field.key;\n      var formatter = this.getFieldFormatter(key);\n      var value = utils_get(item, key, null);\n\n      if (isFunction(formatter)) {\n        value = formatter(value, key, item);\n      }\n\n      return isUndefined(value) || isNull(value) ? '' : value;\n    },\n    tbodyRowKeydown: function tbodyRowKeydown(evt, item, rowIndex) {\n      var keyCode = evt.keyCode;\n      var target = evt.target;\n      var trs = this.$refs.itemRows;\n\n      if (this.stopIfBusy && this.stopIfBusy(evt)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (!(target && target.tagName === 'TR' && target === document.activeElement)) {\n        // Ignore if not the active tr element\n        return;\n      } else if (target.tabIndex !== 0) {\n        // Ignore if not focusable\n\n        /* istanbul ignore next */\n        return;\n      } else if (trs && trs.length === 0) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var index = trs.indexOf(target);\n\n      if (keyCode === key_codes.ENTER || keyCode === key_codes.SPACE) {\n        evt.stopPropagation();\n        evt.preventDefault(); // We also allow enter/space to trigger a click (when row is focused)\n        // We translate to a row-clicked event\n\n        this.rowClicked(evt, item, rowIndex);\n      } else if (arrayIncludes([key_codes.UP, key_codes.DOWN, key_codes.HOME, key_codes.END], keyCode)) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        var shift = evt.shiftKey;\n\n        if (keyCode === key_codes.HOME || shift && keyCode === key_codes.UP) {\n          // Focus first row\n          trs[0].focus();\n        } else if (keyCode === key_codes.END || shift && keyCode === key_codes.DOWN) {\n          // Focus last row\n          trs[trs.length - 1].focus();\n        } else if (keyCode === key_codes.UP && index > 0) {\n          // Focus previous row\n          trs[index - 1].focus();\n        } else if (keyCode === key_codes.DOWN && index < trs.length - 1) {\n          // Focus next row\n          trs[index + 1].focus();\n        }\n      }\n    },\n    // Row event handlers\n    rowClicked: function rowClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(e)) {\n        // clicked on a non-disabled control so ignore\n        return;\n      } else if (textSelectionActive(this.$el)) {\n        // User is selecting text, so ignore\n\n        /* istanbul ignore next: JSDOM doesn't support getSelection() */\n        return;\n      }\n\n      this.$emit('row-clicked', item, index, e);\n    },\n    middleMouseRowClicked: function middleMouseRowClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-middle-clicked', item, index, e);\n    },\n    rowDblClicked: function rowDblClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(e)) {\n        // clicked on a non-disabled control so ignore\n\n        /* istanbul ignore next: event filtering already tested via click handler */\n        return;\n      }\n\n      this.$emit('row-dblclicked', item, index, e);\n    },\n    rowHovered: function rowHovered(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-hovered', item, index, e);\n    },\n    rowUnhovered: function rowUnhovered(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-unhovered', item, index, e);\n    },\n    rowContextmenu: function rowContextmenu(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-contextmenu', item, index, e);\n    },\n    // Render helpers\n    renderTbodyRowCell: function renderTbodyRowCell(field, colIndex, item, rowIndex) {\n      var _this = this;\n\n      var h = this.$createElement; // Renders a TD or TH for a row's field\n\n      var $scoped = this.$scopedSlots;\n      var detailsSlot = $scoped['row-details'];\n      var formatted = this.getFormattedValue(item, field);\n      var data = {\n        // For the Vue key, we concatenate the column index and\n        // field key (as field keys can be duplicated)\n        key: \"row-\".concat(rowIndex, \"-cell-\").concat(colIndex, \"-\").concat(field.key),\n        class: this.tdClasses(field, item),\n        attrs: this.tdAttrs(field, item, colIndex)\n      };\n\n      var toggleDetailsFn = function toggleDetailsFn() {\n        if (detailsSlot) {\n          _this.$set(item, '_showDetails', !item._showDetails);\n        }\n      };\n\n      var slotScope = {\n        item: item,\n        index: rowIndex,\n        field: field,\n        unformatted: utils_get(item, field.key, ''),\n        value: formatted,\n        toggleDetails: toggleDetailsFn,\n        detailsShowing: Boolean(item._showDetails)\n      };\n\n      if (this.selectedRows) {\n        // Add in rowSelected scope property if selectable rows supported\n        slotScope.rowSelected = Boolean(this.selectedRows[rowIndex]);\n      }\n\n      var $childNodes = $scoped[field.key] ? $scoped[field.key](slotScope) : to_string(formatted);\n\n      if (this.isStacked) {\n        // We wrap in a DIV to ensure rendered as a single cell when visually stacked!\n        $childNodes = [h('div', {}, [$childNodes])];\n      } // Render either a td or th cell\n\n\n      return h(field.isRowHeader ? 'th' : 'td', data, [$childNodes]);\n    },\n    renderTbodyRow: function renderTbodyRow(item, rowIndex) {\n      var _this2 = this;\n\n      // Renders an item's row (or rows if details supported)\n      var h = this.$createElement;\n      var $scoped = this.$scopedSlots;\n      var fields = this.computedFields;\n      var tableStriped = this.striped;\n      var hasRowClickHandler = this.$listeners['row-clicked'] || this.selectable;\n      var $detailsSlot = $scoped['row-details'];\n      var rowShowDetails = Boolean(item._showDetails && $detailsSlot); // We can return more than one TR if rowDetails enabled\n\n      var $rows = []; // Details ID needed for aria-describedby when details showing\n\n      var detailsId = rowShowDetails ? this.safeId(\"_details_\".concat(rowIndex, \"_\")) : null;\n\n      var toggleDetailsFn = function toggleDetailsFn() {\n        if ($detailsSlot) {\n          _this2.$set(item, '_showDetails', !item._showDetails);\n        }\n      }; // For each item data field in row\n\n\n      var $tds = fields.map(function (field, colIndex) {\n        return _this2.renderTbodyRowCell(field, colIndex, item, rowIndex);\n      }); // Calculate the row number in the dataset (indexed from 1)\n\n      var ariaRowIndex = null;\n\n      if (this.currentPage && this.perPage && this.perPage > 0) {\n        ariaRowIndex = String((this.currentPage - 1) * this.perPage + rowIndex + 1);\n      } // Create a unique :key to help ensure that sub components are re-rendered rather than\n      // re-used, which can cause issues. If a primary key is not provided we use the rendered\n      // rows index within the tbody.\n      // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410\n\n\n      var primaryKey = this.primaryKey;\n      var rowKey = primaryKey && !isUndefined(item[primaryKey]) && !isNull(item[primaryKey]) ? to_string(item[primaryKey]) : String(rowIndex); // If primary key is provided, use it to generate a unique ID on each tbody > tr\n      // In the format of '{tableId}__row_{primaryKeyValue}'\n\n      var rowId = primaryKey && !isUndefined(item[primaryKey]) && !isNull(item[primaryKey]) ? this.safeId(\"_row_\".concat(item[primaryKey])) : null;\n      var handlers = {};\n\n      if (hasRowClickHandler) {\n        handlers['click'] = function (evt) {\n          _this2.rowClicked(evt, item, rowIndex);\n        };\n\n        handlers['keydown'] = function (evt) {\n          _this2.tbodyRowKeydown(evt, item, rowIndex);\n        };\n      } // Selctable classes and attributes\n\n\n      var selectableClasses = this.selectableRowClasses ? this.selectableRowClasses(rowIndex) : {};\n      var selectableAttrs = this.selectableRowAttrs ? this.selectableRowAttrs(rowIndex) : {}; // Add the item row\n\n      $rows.push(h('tr', {\n        key: \"__b-table-row-\".concat(rowKey, \"__\"),\n        ref: 'itemRows',\n        refInFor: true,\n        class: [this.rowClasses(item), selectableClasses, {\n          'b-table-has-details': rowShowDetails\n        }],\n        attrs: mixin_tbody_row_objectSpread({\n          id: rowId,\n          tabindex: hasRowClickHandler ? '0' : null,\n          'data-pk': rowId ? String(item[primaryKey]) : null,\n          'aria-describedby': detailsId,\n          'aria-owns': detailsId,\n          'aria-rowindex': ariaRowIndex,\n          role: 'row'\n        }, selectableAttrs),\n        on: mixin_tbody_row_objectSpread({}, handlers, {\n          // TODO: Instantiate the following handlers only if we have registered\n          //       listeners i.e. this.$listeners['row-middle-clicked'], etc.\n          auxclick: function auxclick(evt) {\n            if (evt.which === 2) {\n              _this2.middleMouseRowClicked(evt, item, rowIndex);\n            }\n          },\n          contextmenu: function contextmenu(evt) {\n            _this2.rowContextmenu(evt, item, rowIndex);\n          },\n          // Note: these events are not accessibility friendly!\n          dblclick: function dblclick(evt) {\n            _this2.rowDblClicked(evt, item, rowIndex);\n          },\n          mouseenter: function mouseenter(evt) {\n            _this2.rowHovered(evt, item, rowIndex);\n          },\n          mouseleave: function mouseleave(evt) {\n            _this2.rowUnhovered(evt, item, rowIndex);\n          }\n        })\n      }, $tds)); // Row Details slot\n\n      if (rowShowDetails) {\n        var tdAttrs = {\n          colspan: String(fields.length),\n          role: 'cell'\n        };\n        var trAttrs = {\n          id: detailsId,\n          role: 'row' // Render the details slot\n\n        };\n        var $details = h('td', {\n          attrs: tdAttrs\n        }, [$detailsSlot({\n          item: item,\n          index: rowIndex,\n          fields: fields,\n          toggleDetails: toggleDetailsFn\n        })]); // Add a hidden row to keep table row striping consistent when details showing\n\n        if (tableStriped) {\n          $rows.push(h('tr', {\n            key: \"__b-table-details-\".concat(rowIndex, \"-stripe__\"),\n            staticClass: 'd-none',\n            attrs: {\n              'aria-hidden': 'true',\n              role: 'presentation'\n            }\n          }));\n        } // Add the actual details row\n\n\n        $rows.push(h('tr', {\n          key: \"__b-table-details-\".concat(rowIndex, \"__\"),\n          staticClass: 'b-table-details',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, 'row-details') : this.tbodyTrClass],\n          attrs: trAttrs\n        }, [$details]));\n      } else if ($detailsSlot) {\n        // Only add the placeholder if a the table has a row-details slot defined (but not shown)\n        $rows.push(h(false));\n\n        if (tableStriped) {\n          // add extra placeholder if table is striped\n          $rows.push(h(false));\n        }\n      } // Return the row(s)\n\n\n      return $rows;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-tbody.js\n\n\n\n\n\n\n\nfunction mixin_tbody_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_tbody_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_tbody_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_tbody_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n/* harmony default export */ var mixin_tbody = ({\n  mixins: [mixin_tbody_row],\n  props: {\n    tbodyClass: {\n      type: [String, Array],\n      default: null\n    },\n    tbodyTransitionProps: {\n      type: Object // default: undefined\n\n    },\n    tbodyTransitionHandlers: {\n      type: Object // default: undefined\n\n    }\n  },\n  methods: {\n    renderTbody: function renderTbody() {\n      var _this = this;\n\n      // Render the tbody element and children\n      var h = this.$createElement;\n      var items = this.computedItems; // Prepare the tbody rows\n\n      var $rows = []; // Add the item data rows or the busy slot\n\n      var $busy = this.renderBusy ? this.renderBusy() : null;\n\n      if ($busy) {\n        // If table is busy and a busy slot, then return only the busy \"row\" indicator\n        $rows.push($busy);\n      } else {\n        // Table isn't busy, or we don't have a busy slot\n        // Add static Top Row slot (hidden in visibly stacked mode as we can't control data-label attr)\n        $rows.push(this.renderTopRow ? this.renderTopRow() : h(false)); // render the rows\n\n        items.forEach(function (item, rowIndex) {\n          // Render the individual item row (rows if details slot)\n          $rows.push(_this.renderTbodyRow(item, rowIndex));\n        }); // Empty Items / Empty Filtered Row slot (only shows if items.length < 1)\n\n        $rows.push(this.renderEmpty ? this.renderEmpty() : h(false)); // Static bottom row slot (hidden in visibly stacked mode as we can't control data-label attr)\n\n        $rows.push(this.renderBottomRow ? this.renderBottomRow() : h(false));\n      } // If tbody transition enabled\n\n\n      var isTransGroup = this.tbodyTransitionProps || this.tbodyTransitionHandlers;\n      var tbodyProps = {};\n      var tbodyOn = {};\n\n      if (isTransGroup) {\n        tbodyOn = this.tbodyTransitionHandlers || {};\n        tbodyProps = mixin_tbody_objectSpread({}, this.tbodyTransitionProps || {}, {\n          tag: 'tbody'\n        });\n      } // Assemble rows into the tbody\n\n\n      var $tbody = h(isTransGroup ? 'transition-group' : 'tbody', {\n        props: tbodyProps,\n        on: tbodyOn,\n        class: [this.tbodyClass],\n        attrs: {\n          role: 'rowgroup'\n        }\n      }, $rows); // Return the assembled tbody\n\n      return $tbody;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-empty.js\n\n\n/* harmony default export */ var mixin_empty = ({\n  props: {\n    showEmpty: {\n      type: Boolean,\n      default: false\n    },\n    emptyText: {\n      type: String,\n      default: 'There are no records to show'\n    },\n    emptyHtml: {\n      type: String\n    },\n    emptyFilteredText: {\n      type: String,\n      default: 'There are no records matching your request'\n    },\n    emptyFilteredHtml: {\n      type: String\n    }\n  },\n  methods: {\n    renderEmpty: function renderEmpty() {\n      var h = this.$createElement;\n      var items = this.computedItems;\n      var $empty;\n\n      if (this.showEmpty && (!items || items.length === 0) && !(this.computedBusy && this.hasNormalizedSlot('table-busy'))) {\n        $empty = this.normalizeSlot(this.isFiltered ? 'emptyfiltered' : 'empty', {\n          emptyFilteredHtml: this.emptyFilteredHtml,\n          emptyFilteredText: this.emptyFilteredText,\n          emptyHtml: this.emptyHtml,\n          emptyText: this.emptyText,\n          fields: this.computedFields,\n          // Not sure why this is included, as it will always be an empty array\n          items: this.computedItems\n        });\n\n        if (!$empty) {\n          $empty = h('div', {\n            class: ['text-center', 'my-2'],\n            domProps: this.isFiltered ? htmlOrText(this.emptyFilteredHtml, this.emptyFilteredText) : htmlOrText(this.emptyHtml, this.emptyText)\n          });\n        }\n\n        $empty = h('td', {\n          attrs: {\n            colspan: String(this.computedFields.length),\n            role: 'cell'\n          }\n        }, [h('div', {\n          attrs: {\n            role: 'alert',\n            'aria-live': 'polite'\n          }\n        }, [$empty])]);\n        $empty = h('tr', {\n          key: this.isFiltered ? '_b-table-empty-filtered-row_' : '_b-table-empty-row_',\n          staticClass: 'b-table-empty-row',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-empty') : this.tbodyTrClass],\n          attrs: {\n            role: 'row'\n          }\n        }, [$empty]);\n      }\n\n      return $empty || h(false);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-top-row.js\n\n/* harmony default export */ var mixin_top_row = ({\n  methods: {\n    renderTopRow: function renderTopRow() {\n      var h = this.$createElement; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\n      // If in always stacked mode, we don't bother rendering the row\n\n      if (!this.hasNormalizedSlot('top-row') || this.isStacked === true) {\n        return h(false);\n      }\n\n      var fields = this.computedFields;\n      return h('tr', {\n        key: 'top-row',\n        staticClass: 'b-table-top-row',\n        class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-top') : this.tbodyTrClass],\n        attrs: {\n          role: 'row'\n        }\n      }, [this.normalizeSlot('top-row', {\n        columns: fields.length,\n        fields: fields\n      })]);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-bottom-row.js\n\n/* harmony default export */ var mixin_bottom_row = ({\n  methods: {\n    renderBottomRow: function renderBottomRow() {\n      var h = this.$createElement; // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)\n      // If in always stacked mode, we don't bother rendering the row\n\n      if (!this.hasNormalizedSlot('bottom-row') || this.isStacked === true) {\n        return h(false);\n      }\n\n      var fields = this.computedFields;\n      return h('tr', {\n        key: '__b-table-bottom-row__',\n        staticClass: 'b-table-bottom-row',\n        class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-bottom') : this.tbodyTrClass],\n        attrs: {\n          role: 'row'\n        }\n      }, this.normalizeSlot('bottom-row', {\n        columns: fields.length,\n        fields: fields\n      }));\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-busy.js\n\n/* harmony default export */ var mixin_busy = ({\n  props: {\n    busy: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localBusy: false\n    };\n  },\n  computed: {\n    computedBusy: function computedBusy() {\n      return this.busy || this.localBusy;\n    }\n  },\n  watch: {\n    localBusy: function localBusy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:busy', newVal);\n      }\n    }\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy: function stopIfBusy(evt) {\n      if (this.computedBusy) {\n        // If table is busy (via provider) then don't propagate\n        evt.preventDefault();\n        evt.stopPropagation();\n        return true;\n      }\n\n      return false;\n    },\n    // Renter the busy indicator or return null if not busy\n    renderBusy: function renderBusy() {\n      var h = this.$createElement; // Return a busy indicator row, or null if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot('table-busy')) {\n        // Show the busy slot\n        var trAttrs = {\n          role: this.isStacked ? 'row' : null\n        };\n        var tdAttrs = {\n          colspan: String(this.computedFields.length),\n          role: this.isStacked ? 'cell' : null\n        };\n        return h('tr', {\n          key: 'table-busy-slot',\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'table-busy') : this.tbodyTrClass],\n          attrs: trAttrs\n        }, [h('td', {\n          attrs: tdAttrs\n        }, [this.normalizeSlot('table-busy', {})])]);\n      } else {\n        // We return null here so that we can determine if we need to\n        // render the table items rows or not.\n        return null;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-selectable.js\n\n\n\n\n\n/* harmony default export */ var mixin_selectable = ({\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    selectMode: {\n      type: String,\n      default: 'multi'\n    },\n    selectedVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BTable', 'selectedVariant');\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var selectable = this.selectable;\n      var isSelecting = selectable && this.selectedRows && this.selectedRows.some(Boolean);\n      return _ref = {\n        'b-table-selectable': selectable\n      }, Object(defineProperty[\"a\" /* default */])(_ref, \"b-table-select-\".concat(this.selectMode), selectable), Object(defineProperty[\"a\" /* default */])(_ref, 'b-table-selecting', isSelecting), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      return {\n        'aria-multiselectable': this.selectableIsMultiSelect\n      };\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      if (this.selectable) {\n        return arrayIncludes(['range', 'multi'], this.selectMode) ? 'true' : 'false';\n      } else {\n        return null;\n      }\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newVal, oldVal) {\n      // Reset for selectable\n      // TODO: Should selectedLastClicked be reset here?\n      //       As changes to _showDetails would trigger it to reset\n      this.selectedLastRow = -1;\n      var equal = false;\n\n      if (this.selectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length;\n\n        for (var i = 0; equal && i < newVal.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = loose_equal(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newVal, oldVal) {\n      this.clearSelected();\n      this.setSelectionHandlers(newVal);\n    },\n    selectMode: function selectMode(newVal, oldVal) {\n      this.clearSelected();\n    },\n    selectedRows: function selectedRows(_selectedRows, oldVal) {\n      var _this = this;\n\n      if (this.selectable && !loose_equal(_selectedRows, oldVal)) {\n        var items = []; // forEach skips over non-existant indicies (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit('row-selected', items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers\n    if (this.selectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    isRowSelected: function isRowSelected(idx) {\n      return Boolean(this.selectedRows[idx]);\n    },\n    selectableRowClasses: function selectableRowClasses(idx) {\n      var rowSelected = this.isRowSelected(idx);\n      var base = this.dark ? 'bg' : 'table';\n      var variant = this.selectedVariant;\n      return Object(defineProperty[\"a\" /* default */])({\n        'b-table-row-selected': this.selectable && rowSelected\n      }, \"\".concat(base, \"-\").concat(variant), this.selectable && rowSelected && variant);\n    },\n    selectableRowAttrs: function selectableRowAttrs(idx) {\n      return {\n        'aria-selected': !this.selectable ? null : this.isRowSelected(idx) ? 'true' : 'false'\n      };\n    },\n    clearSelected: function clearSelected() {\n      var hasSelection = this.selectedRows.reduce(function (prev, v) {\n        return prev || v;\n      }, false);\n\n      if (hasSelection) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = [];\n      }\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method]('filtered', this.clearSelected);\n      this[method]('context-changed', this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, evt) {\n      /* istanbul ignore if: should never happen */\n      if (!this.selectable) {\n        // Don't do anything if table is not in selectable mode\n\n        /* istanbul ignore next: should never happen */\n        this.clearSelected();\n        /* istanbul ignore next: should never happen */\n\n        return;\n      }\n\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index];\n      var mode = this.selectMode; // Note 'multi' mode needs no special handling\n\n      if (mode === 'single') {\n        selectedRows = [];\n      } else if (mode === 'range') {\n        if (this.selectedLastRow > -1 && evt.shiftKey) {\n          // range\n          for (var idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(evt.ctrlKey || evt.metaKey)) {\n            // clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          this.selectedLastRow = selected ? index : -1;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-provider.js\n\n\n\n\n\n\n\n\nfunction mixin_provider_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_provider_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_provider_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_provider_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n/* harmony default export */ var mixin_provider = ({\n  mixins: [listen_on_root],\n  props: {\n    // Prop override(s)\n    items: {\n      // Adds in 'Function' support\n      type: [Array, Function],\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    // Additional props\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    apiUrl: {\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    hasProvider: function hasProvider() {\n      return this.items instanceof Function;\n    },\n    providerTriggerContext: function providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      var ctx = {\n        apiUrl: this.apiUrl,\n        filter: null,\n        sortBy: null,\n        sortDesc: null,\n        perPage: null,\n        currentPage: null\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return mixin_provider_objectSpread({}, ctx);\n    }\n  },\n  watch: {\n    // Provider update triggering\n    items: function items(newVal, oldVal) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || newVal instanceof Function) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n    providerTriggerContext: function providerTriggerContext(newVal, oldVal) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!loose_equal(newVal, oldVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Call the items provider if necessary\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot('bv::refresh::table', function (id) {\n      if (id === _this.id || id === _this) {\n        _this.refresh();\n      }\n    });\n  },\n  methods: {\n    refresh: function refresh() {\n      // Public Method: Force a refresh of the provider function\n      this.$off('refreshed', this.refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on('refreshed', this.refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = isArray(this.items) ? this.items.slice() : [];\n        }\n      }\n    },\n    // Provider related methods\n    _providerSetLocal: function _providerSetLocal(items) {\n      this.localItems = isArray(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit('refreshed'); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot('bv::table::refreshed', this.id);\n      }\n    },\n    _providerUpdate: function _providerUpdate() {\n      // Refresh the provider function items.\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        var _this2 = this;\n\n        try {\n          // Call provider function passing it the context and optional callback\n          var data = this.items(this.context, this._providerSetLocal);\n\n          if (data && data.then && isFunction(data.then)) {\n            // Provider returned Promise\n            data.then(function (items) {\n              // Provider resolved with items\n              _this2._providerSetLocal(items);\n            });\n          } else if (isArray(data)) {\n            // Provider returned Array data\n            this._providerSetLocal(data);\n          } else if (this.items.length !== 2) {\n            // Check number of arguments provider function requested\n            // Provider not using callback (didn't request second argument), so we clear\n            // busy state as most likely there was an error in the provider function\n\n            /* istanbul ignore next */\n            utils_warn(\"b-table provider function didn't request callback and did not return a promise or data\");\n            /* istanbul ignore next */\n\n            this.localBusy = false;\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          utils_warn(\"b-table provider function error [\".concat(e.name, \"] \").concat(e.message));\n          this.localBusy = false;\n          this.$off('refreshed', this.refresh);\n        }\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/helpers/mixin-table-renderer.js\n\n\n\n\n\n\n\n\n\nfunction mixin_table_renderer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction mixin_table_renderer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mixin_table_renderer_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mixin_table_renderer_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Main `<table>` render mixin\n// Which indlues all main table stlying options\n/* harmony default export */ var mixin_table_renderer = ({\n  // Don't place ATTRS on root element automatically, as table could be wrapped in responsive div\n  inheritAttrs: false,\n  props: {\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    borderless: {\n      type: Boolean,\n      default: false\n    },\n    outlined: {\n      type: Boolean,\n      default: false\n    },\n    dark: {\n      type: Boolean,\n      default: false\n    },\n    hover: {\n      type: Boolean,\n      default: false\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    responsive: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: [Boolean, String],\n      default: false\n    },\n    tableClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    // Layout related computed props\n    isStacked: function isStacked() {\n      return this.stacked === '' ? true : this.stacked;\n    },\n    isResponsive: function isResponsive() {\n      var responsive = this.responsive === '' ? true : this.responsive;\n      return this.isStacked ? false : responsive;\n    },\n    responsiveClass: function responsiveClass() {\n      return this.isResponsive === true ? 'table-responsive' : this.isResponsive ? \"table-responsive-\".concat(this.responsive) : '';\n    },\n    tableClasses: function tableClasses() {\n      return [// User supplied classes\n      this.tableClass, // Styling classes\n      Object(defineProperty[\"a\" /* default */])({\n        'table-striped': this.striped,\n        'table-hover': this.hover && this.computedItems.length > 0 && !this.computedBusy,\n        'table-dark': this.dark,\n        'table-bordered': this.bordered,\n        'table-borderless': this.borderless,\n        'table-sm': this.small,\n        border: this.outlined,\n        // The following are b-table custom styles\n        'b-table-fixed': this.fixed,\n        'b-table-stacked': this.stacked === true || this.stacked === ''\n      }, \"b-table-stacked-\".concat(this.stacked), this.stacked !== true && this.stacked), // Selectable classes\n      this.selectableTableClasses];\n    },\n    tableAttrs: function tableAttrs() {\n      // Preserve user supplied aria-describedby, if provided in $attrs\n      var adb = [(this.$attrs || {})['aria-describedby'], this.captionId].filter(Boolean).join(' ') || null;\n      var items = this.computedItems;\n      var fields = this.computedFields;\n      var selectableAttrs = this.selectableTableAttrs || {};\n      return mixin_table_renderer_objectSpread({\n        // We set aria-rowcount before merging in $attrs, in case user has supplied their own\n        'aria-rowcount': this.filteredItems && this.filteredItems.length > items.length ? String(this.filteredItems.length) : null\n      }, this.$attrs, {\n        // Now we can override any $attrs here\n        id: this.safeId(),\n        role: this.isStacked ? 'table' : null,\n        'aria-busy': this.computedBusy ? 'true' : 'false',\n        'aria-colcount': String(fields.length),\n        'aria-describedby': adb\n      }, selectableAttrs);\n    }\n  },\n  render: function render(h) {\n    // Build the caption (from caption mixin)\n    var $caption = this.renderCaption ? this.renderCaption() : null; // Build the colgroup\n\n    var $colgroup = this.renderColgroup ? this.renderColgroup() : null; // Build the thead\n\n    var $thead = this.renderThead(); // Build the tfoot\n\n    var $tfoot = this.renderTfoot(); // Build the tbody\n\n    var $tbody = this.renderTbody(); // Assemble table\n\n    var $table = h('table', {\n      key: 'b-table',\n      staticClass: 'table b-table',\n      class: this.tableClasses,\n      attrs: this.tableAttrs\n    }, [$caption, $colgroup, $thead, $tfoot, $tbody].filter(Boolean)); // Add responsive wrapper if needed and return table\n\n    return this.isResponsive ? h('div', {\n      key: 'b-table-responsive',\n      class: this.responsiveClass\n    }, [$table]) : $table;\n  }\n});\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/table.js\n // Mixins\n\n\n // Table helper Mixins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Main table renderer mixin\n\n // b-table component definition\n// @vue/component\n\nvar BTable =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTable',\n  // Order of mixins is important!\n  // They are merged from first to last, followed by this component.\n  mixins: [// Required Mixins\n  mixins_id, mixins_normalize_slot, mixin_items, mixin_table_renderer, mixin_thead, mixin_tfoot, mixin_tbody, // Features Mixins\n  mixin_filtering, mixin_sorting, mixin_pagination, mixin_caption, mixin_colgroup, mixin_selectable, mixin_empty, mixin_top_row, mixin_bottom_row, mixin_busy, mixin_provider] // render function provided by table-renderer mixin\n\n});\n/* harmony default export */ var table = (BTable);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/table-lite.js\n // Mixins\n\n\n // Table helper Mixins\n\n\n\n\n\n\n // Main table renderer mixin\n\n // b-table-lite component definition\n// @vue/component\n\nvar BTableLite =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTableLite',\n  // Order of mixins is important!\n  // They are merged from first to last, followed by this component.\n  mixins: [// Required mixins\n  mixins_id, mixins_normalize_slot, mixin_items, mixin_table_renderer, mixin_thead, mixin_tfoot, mixin_tbody, // Features Mixins\n  // These are pretty lightweight, and are useful for plain tables\n  mixin_caption, mixin_colgroup] // render function provided by table-renderer mixin\n\n});\n/* harmony default export */ var table_lite = (BTableLite);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/table/index.js\n\n\n\nvar TablePlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BTable: BTable,\n    BTableLite: BTableLite\n  }\n});\n\n/* harmony default export */ var components_table = (TablePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/tabs/tabs.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction tabs_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction tabs_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tabs_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tabs_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n // -- Constants --\n\nvar navProps = object_omit(nav_props, ['tabs', 'isNavBar']); // -- Utils --\n// Filter function to filter out disabled tabs\n\nvar notDisabled = function notDisabled(tab) {\n  return !tab.disabled;\n}; // --- Helper components ---\n// @vue/component\n\n\nvar BTabButtonHelper =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTabButtonHelper',\n  inject: {\n    bvTabs: {\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return {};\n      }\n    }\n  },\n  props: {\n    // Reference to the child <b-tab> instance\n    tab: {\n      default: null\n    },\n    tabs: {\n      type: Array,\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    controls: {\n      type: String,\n      default: null\n    },\n    tabIndex: {\n      type: Number,\n      default: null\n    },\n    posInSet: {\n      type: Number,\n      default: null\n    },\n    setSize: {\n      type: Number,\n      default: null\n    },\n    noKeyNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    focus: function focus() {\n      if (this.$refs && this.$refs.link && this.$refs.link.focus) {\n        this.$refs.link.focus();\n      }\n    },\n    handleEvt: function handleEvt(evt) {\n      function stop() {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n\n      if (this.tab.disabled) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var type = evt.type;\n      var key = evt.keyCode;\n      var shift = evt.shiftKey;\n\n      if (type === 'click') {\n        stop();\n        this.$emit('click', evt);\n      } else if (type === 'keydown' && !this.noKeyNav && key === key_codes.SPACE) {\n        // In keynav mode, SPACE press will also trigger a click/select\n        stop();\n        this.$emit('click', evt);\n      } else if (type === 'keydown' && !this.noKeyNav) {\n        // For keyboard navigation\n        if (key === key_codes.UP || key === key_codes.LEFT || key === key_codes.HOME) {\n          stop();\n\n          if (shift || key === key_codes.HOME) {\n            this.$emit('first', evt);\n          } else {\n            this.$emit('prev', evt);\n          }\n        } else if (key === key_codes.DOWN || key === key_codes.RIGHT || key === key_codes.END) {\n          stop();\n\n          if (shift || key === key_codes.END) {\n            this.$emit('last', evt);\n          } else {\n            this.$emit('next', evt);\n          }\n        }\n      }\n    }\n  },\n  render: function render(h) {\n    var link = h(BLink, {\n      ref: 'link',\n      staticClass: 'nav-link',\n      class: [{\n        active: this.tab.localActive && !this.tab.disabled,\n        disabled: this.tab.disabled\n      }, this.tab.titleLinkClass, // Apply <b-tabs> `activeNavItemClass` styles when the tab is active\n      this.tab.localActive ? this.bvTabs.activeNavItemClass : null],\n      props: {\n        href: this.tab.href,\n        // To be deprecated to always be '#'\n        disabled: this.tab.disabled\n      },\n      attrs: {\n        role: 'tab',\n        id: this.id,\n        // Roving tab index when keynav enabled\n        tabindex: this.tabIndex,\n        'aria-selected': this.tab.localActive && !this.tab.disabled ? 'true' : 'false',\n        'aria-setsize': this.setSize,\n        'aria-posinset': this.posInSet,\n        'aria-controls': this.controls\n      },\n      on: {\n        click: this.handleEvt,\n        keydown: this.handleEvt\n      }\n    }, [this.tab.normalizeSlot('title') || this.tab.title]);\n    return h('li', {\n      staticClass: 'nav-item',\n      class: [this.tab.titleItemClass],\n      attrs: {\n        role: 'presentation'\n      }\n    }, [link]);\n  }\n}); // @vue/component\n\nvar BTabs =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTabs',\n  mixins: [mixins_id, mixins_normalize_slot],\n  provide: function provide() {\n    return {\n      bvTabs: this\n    };\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: tabs_objectSpread({}, navProps, {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    card: {\n      type: Boolean,\n      default: false\n    },\n    bottom: {\n      type: Boolean,\n      default: false\n    },\n    end: {\n      // Synonym for 'bottom'\n      type: Boolean,\n      default: false\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    noNavStyle: {\n      type: Boolean,\n      default: false\n    },\n    noKeyNav: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      // This prop is sniffed by the <b-tab> child\n      type: Boolean,\n      default: false\n    },\n    contentClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    navClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    navWrapperClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    activeNavItemClass: {\n      // Only applied to the currently active <b-nav-item>\n      type: [String, Array, Object],\n      default: null\n    },\n    activeTabClass: {\n      // Only applied to the currently active <b-tab>\n      // This prop is sniffed by the <b-tab> child\n      type: [String, Array, Object],\n      default: null\n    },\n    value: {\n      // v-model\n      type: Number,\n      default: null\n    }\n  }),\n  data: function data() {\n    var tabIdx = parseInt(this.value, 10);\n    tabIdx = isNaN(tabIdx) ? -1 : tabIdx;\n    return {\n      // Index of current tab\n      currentTab: tabIdx,\n      // Array of direct child <b-tab> instances, in DOM order\n      tabs: [],\n      // Array of child instances registered (for triggering reactive updates)\n      registeredTabs: [],\n      // Flag to know if we are mounted or not\n      isMounted: false\n    };\n  },\n  computed: {\n    fade: function fade() {\n      // This computed prop is sniffed by the tab child\n      return !this.noFade;\n    },\n    navStyle: function navStyle() {\n      return this.pills ? 'pills' : 'tabs';\n    },\n    localNavClass: function localNavClass() {\n      var classes = [];\n\n      if (this.card) {\n        if (this.vertical) {\n          classes.push('card-header', 'h-100', 'border-bottom-0', 'rounded-0');\n        } else {\n          classes.push(\"card-header-\".concat(this.navStyle));\n        }\n      }\n\n      return [].concat(classes, [this.navClass]);\n    }\n  },\n  watch: {\n    currentTab: function currentTab(val, old) {\n      var index = -1; // Ensure only one tab is active at most\n\n      this.tabs.forEach(function (tab, idx) {\n        if (val === idx && !tab.disabled) {\n          tab.localActive = true;\n          index = idx;\n        } else {\n          tab.localActive = false;\n        }\n      }); // Update the v-model\n\n      this.$emit('input', index);\n    },\n    value: function value(val, old) {\n      if (val !== old) {\n        val = parseInt(val, 10);\n        val = isNaN(val) ? -1 : val;\n        old = parseInt(old, 10) || 0;\n        var tabs = this.tabs;\n\n        if (tabs[val] && !tabs[val].disabled) {\n          this.currentTab = val;\n        } else {\n          // Try next or prev tabs\n          if (val < old) {\n            this.previousTab();\n          } else {\n            this.nextTab();\n          }\n        }\n      }\n    },\n    registeredTabs: function registeredTabs(newVal, oldVal) {\n      var _this = this;\n\n      // Each b-tab will register/unregister itself.\n      // We use this to detect when tabs are added/removed\n      // to trigger the update of the tabs.\n      this.$nextTick(function () {\n        requestAF(function () {\n          _this.updateTabs();\n        });\n      });\n    },\n    tabs: function tabs(newVal, oldVal) {\n      var _this2 = this;\n\n      // If tabs added, removed, or re-ordered, we emit a `changed` event.\n      // We use `tab._uid` instead of `tab.safeId()`, as the later is changed\n      // in a nextTick if no explicit ID is provided, causing duplicate emits.\n      if (!loose_equal(newVal.map(function (t) {\n        return t._uid;\n      }), oldVal.map(function (t) {\n        return t._uid;\n      }))) {\n        // In a nextTick to ensure currentTab has been set first.\n        this.$nextTick(function () {\n          // We emit shallow copies of the new and old arrays of tabs, to\n          // prevent users from potentially mutating the internal arrays.\n          _this2.$emit('changed', newVal.slice(), oldVal.slice());\n        });\n      }\n    },\n    isMounted: function isMounted(newVal, oldVal) {\n      var _this3 = this;\n\n      // Trigger an update after mounted.  Needed for tabs inside lazy modals.\n      if (newVal) {\n        requestAF(function () {\n          _this3.updateTabs();\n        });\n      } // Enable or disable the observer\n\n\n      this.setObserver(newVal);\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n\n    var tabIdx = parseInt(this.value, 10);\n    this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n    this._bvObserver = null; // For SSR and to make sure only a single tab is shown on mount\n    // We wrap this in a `$nextTick()` to ensure the child tabs have been created\n\n    this.$nextTick(function () {\n      _this4.updateTabs();\n    });\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    // Call `updateTabs()` just in case...\n    this.updateTabs();\n    this.$nextTick(function () {\n      // Flag we are now mounted and to switch to DOM for tab probing.\n      // As this.$slots.default appears to lie about component instances\n      // after b-tabs is destroyed and re-instantiated.\n      // And this.$children does not respect DOM order.\n      _this5.isMounted = true;\n    });\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    this.isMounted = false;\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    var _this6 = this;\n\n    var tabIdx = parseInt(this.value, 10);\n    this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n    this.$nextTick(function () {\n      _this6.updateTabs();\n\n      _this6.isMounted = true;\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.isMounted = false;\n  },\n  destroyed: function destroyed() {\n    // Ensure no references to child instances exist\n    this.tabs = [];\n  },\n  methods: {\n    registerTab: function registerTab(tab) {\n      var _this7 = this;\n\n      if (!arrayIncludes(this.registeredTabs, tab)) {\n        this.registeredTabs.push(tab);\n        tab.$once('hook:destroyed', function () {\n          _this7.unregisterTab(tab);\n        });\n      }\n    },\n    unregisterTab: function unregisterTab(tab) {\n      this.registeredTabs = this.registeredTabs.slice().filter(function (t) {\n        return t !== tab;\n      });\n    },\n    setObserver: function setObserver(on) {\n      // DOM observer is needed to detect changes in order of tabs\n      if (on) {\n        // Make sure no existing observer running\n        this.setObserver(false);\n        var self = this;\n        /* istanbul ignore next: difficult to test mutation observer in JSDOM */\n\n        var handler = function handler() {\n          // We delay the update to ensure that `tab.safeId()` has\n          // updated with the final ID value.\n          self.$nextTick(function () {\n            requestAF(function () {\n              self.updateTabs();\n            });\n          });\n        }; // Watch for changes to <b-tab> sub components\n\n\n        this._bvObserver = observe_dom(this.$refs.tabsContainer, handler, {\n          childList: true,\n          subtree: false,\n          attributes: true,\n          attributeFilter: ['id']\n        });\n      } else {\n        if (this._bvObserver && this._bvObserver.disconnect) {\n          this._bvObserver.disconnect();\n        }\n\n        this._bvObserver = null;\n      }\n    },\n    getTabs: function getTabs() {\n      // We use registeredTabs as the source of truth for child tab components. And we\n      // filter out any BTab components that are extended BTab with a root child BTab.\n      // https://github.com/bootstrap-vue/bootstrap-vue/issues/3260\n      var tabs = this.registeredTabs.filter(function (tab) {\n        return tab.$children.filter(function (t) {\n          return t._isTab;\n        }).length === 0;\n      }); // DOM Order of Tabs\n\n      var order = [];\n\n      if (this.isMounted && tabs.length > 0) {\n        // We rely on the DOM when mounted to get the 'true' order of the b-tab children.\n        // querySelectorAll(...) always returns elements in document order, regardless of\n        // order specified in the selector.\n        var selector = tabs.map(function (tab) {\n          return \"#\".concat(tab.safeId());\n        }).join(', ');\n        order = dom_selectAll(selector, this.$el).map(function (el) {\n          return el.id;\n        }).filter(Boolean);\n      } // Stable sort keeps the original order if not found in the\n      // `order` array, which will be an empty array before mount.\n\n\n      return stable_sort(tabs, function (a, b) {\n        return order.indexOf(a.safeId()) - order.indexOf(b.safeId());\n      });\n    },\n    // Update list of <b-tab> children\n    updateTabs: function updateTabs() {\n      // Probe tabs\n      var tabs = this.getTabs(); // Find *last* active non-disabled tab in current tabs\n      // We trust tab state over currentTab, in case tabs were added/removed/re-ordered\n\n      var tabIndex = tabs.indexOf(tabs.slice().reverse().find(function (tab) {\n        return tab.localActive && !tab.disabled;\n      })); // Else try setting to currentTab\n\n      if (tabIndex < 0) {\n        var currentTab = this.currentTab;\n\n        if (currentTab >= tabs.length) {\n          // Handle last tab being removed, so find the last non-disabled tab\n          tabIndex = tabs.indexOf(tabs.slice().reverse().find(notDisabled));\n        } else if (tabs[currentTab] && !tabs[currentTab].disabled) {\n          // Current tab is not disabled\n          tabIndex = currentTab;\n        }\n      } // Else find *first* non-disabled tab in current tabs\n\n\n      if (tabIndex < 0) {\n        tabIndex = tabs.indexOf(tabs.find(notDisabled));\n      } // Set the current tab state to active\n\n\n      tabs.forEach(function (tab, idx) {\n        // tab.localActive = idx === tabIndex && !tab.disabled\n        tab.localActive = false;\n      });\n\n      if (tabs[tabIndex]) {\n        tabs[tabIndex].localActive = true;\n      } // Update the array of tab children\n\n\n      this.tabs = tabs; // Set the currentTab index (can be -1 if no non-disabled tabs)\n\n      this.currentTab = tabIndex;\n    },\n    // Find a button that controls a tab, given the tab reference\n    // Returns the button vm instance\n    getButtonForTab: function getButtonForTab(tab) {\n      return (this.$refs.buttons || []).find(function (btn) {\n        return btn.tab === tab;\n      });\n    },\n    // Force a button to re-render it's content, given a <b-tab> instance\n    // Called by <b-tab> on `update()`\n    updateButton: function updateButton(tab) {\n      var button = this.getButtonForTab(tab);\n\n      if (button && button.$forceUpdate) {\n        button.$forceUpdate();\n      }\n    },\n    // Activate a tab given a <b-tab> instance\n    // Also accessed by <b-tab>\n    activateTab: function activateTab(tab) {\n      var result = false;\n\n      if (tab) {\n        var index = this.tabs.indexOf(tab);\n\n        if (!tab.disabled && index > -1) {\n          result = true;\n          this.currentTab = index;\n        }\n      }\n\n      if (!result) {\n        // Couldn't set tab, so ensure v-model is set to `this.currentTab`\n\n        /* istanbul ignore next: should rarely happen */\n        this.$emit('input', this.currentTab);\n      }\n\n      return result;\n    },\n    // Deactivate a tab given a <b-tab> instance\n    // Accessed by <b-tab>\n    deactivateTab: function deactivateTab(tab) {\n      if (tab) {\n        // Find first non-disabled tab that isn't the one being deactivated\n        // If no tabs are available, then don't deactivate current tab\n        return this.activateTab(this.tabs.filter(function (t) {\n          return t !== tab;\n        }).find(notDisabled));\n      } else {\n        // No tab specified\n\n        /* istanbul ignore next: should never happen */\n        return false;\n      }\n    },\n    // Focus a tab button given it's <b-tab> instance\n    focusButton: function focusButton(tab) {\n      var _this8 = this;\n\n      // Wrap in `$nextTick()` to ensure DOM has completed rendering/updating before focusing\n      this.$nextTick(function () {\n        var button = _this8.getButtonForTab(tab);\n\n        if (button && button.focus) {\n          button.focus();\n        }\n      });\n    },\n    // Emit a click event on a specified <b-tab> component instance\n    emitTabClick: function emitTabClick(tab, evt) {\n      if (evt && evt instanceof Event && tab && tab.$emit && !tab.disabled) {\n        tab.$emit('click', evt);\n      }\n    },\n    // Click handler\n    clickTab: function clickTab(tab, evt) {\n      this.activateTab(tab);\n      this.emitTabClick(tab, evt);\n    },\n    // Move to first non-disabled tab\n    firstTab: function firstTab(focus) {\n      var tab = this.tabs.find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n    // Move to previous non-disabled tab\n    previousTab: function previousTab(focus) {\n      var currentIndex = Math.max(this.currentTab, 0);\n      var tab = this.tabs.slice(0, currentIndex).reverse().find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n    // Move to next non-disabled tab\n    nextTab: function nextTab(focus) {\n      var currentIndex = Math.max(this.currentTab, -1);\n      var tab = this.tabs.slice(currentIndex + 1).find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n    // Move to last non-disabled tab\n    lastTab: function lastTab(focus) {\n      var tab = this.tabs.slice().reverse().find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    }\n  },\n  render: function render(h) {\n    var _this9 = this;\n\n    var tabs = this.tabs; // Currently active tab\n\n    var activeTab = tabs.find(function (tab) {\n      return tab.localActive && !tab.disabled;\n    }); // Tab button to allow focusing when no active tab found (keynav only)\n\n    var fallbackTab = tabs.find(function (tab) {\n      return !tab.disabled;\n    }); // For each <b-tab> found create the tab buttons\n\n    var buttons = tabs.map(function (tab, index) {\n      var tabIndex = null; // Ensure at least one tab button is focusable when keynav enabled (if possible)\n\n      if (!_this9.noKeyNav) {\n        // Buttons are not in tab index unless active, or a fallback tab\n        tabIndex = -1;\n\n        if (activeTab === tab || !activeTab && fallbackTab === tab) {\n          // Place tab button in tab sequence\n          tabIndex = null;\n        }\n      }\n\n      return h(BTabButtonHelper, {\n        key: tab._uid || index,\n        ref: 'buttons',\n        // Needed to make `this.$refs.buttons` an array\n        refInFor: true,\n        props: {\n          tab: tab,\n          tabs: tabs,\n          id: tab.controlledBy || (_this9.tab && _this9.tab.safeId ? _this9.tab.safeId(\"_BV_tab_button_\") : null),\n          controls: _this9.tab && _this9.tab.safeId ? _this9.tab.safeId() : null,\n          tabIndex: tabIndex,\n          setSize: tabs.length,\n          posInSet: index + 1,\n          noKeyNav: _this9.noKeyNav\n        },\n        on: {\n          click: function click(evt) {\n            _this9.clickTab(tab, evt);\n          },\n          first: _this9.firstTab,\n          prev: _this9.previousTab,\n          next: _this9.nextTab,\n          last: _this9.lastTab\n        }\n      });\n    }); // Nav\n\n    var nav = h(BNav, {\n      ref: 'nav',\n      class: this.localNavClass,\n      attrs: {\n        role: 'tablist',\n        id: this.safeId('_BV_tab_controls_')\n      },\n      props: {\n        fill: this.fill,\n        justified: this.justified,\n        align: this.align,\n        tabs: !this.noNavStyle && !this.pills,\n        pills: !this.noNavStyle && this.pills,\n        vertical: this.vertical,\n        small: this.small\n      }\n    }, [buttons, this.normalizeSlot('tabs')]);\n    nav = h('div', {\n      key: 'bv-tabs-nav',\n      class: [{\n        'card-header': this.card && !this.vertical && !(this.end || this.bottom),\n        'card-footer': this.card && !this.vertical && (this.end || this.bottom),\n        'col-auto': this.vertical\n      }, this.navWrapperClass]\n    }, [nav]);\n    var empty = h(false);\n\n    if (!tabs || tabs.length === 0) {\n      empty = h('div', {\n        key: 'bv-empty-tab',\n        class: ['tab-pane', 'active', {\n          'card-body': this.card\n        }]\n      }, this.normalizeSlot('empty'));\n    } // Main content section\n\n\n    var content = h('div', {\n      ref: 'tabsContainer',\n      key: 'bv-tabs-container',\n      staticClass: 'tab-content',\n      class: [{\n        col: this.vertical\n      }, this.contentClass],\n      attrs: {\n        id: this.safeId('_BV_tab_container_')\n      }\n    }, concat(this.normalizeSlot('default'), empty)); // Render final output\n\n    return h(this.tag, {\n      staticClass: 'tabs',\n      class: {\n        row: this.vertical,\n        'no-gutters': this.vertical && this.card\n      },\n      attrs: {\n        id: this.safeId()\n      }\n    }, [this.end || this.bottom ? content : h(false), [nav], this.end || this.bottom ? h(false) : content]);\n  }\n});\n/* harmony default export */ var tabs_tabs = (BTabs);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/tabs/tab.js\n\n\n\n\n\nvar tab_DEPRECATED_MSG = 'Setting prop \"href\" is deprecated. Use the <b-nav> component instead.'; // @vue/component\n\nvar BTab =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTab',\n  mixins: [mixins_id, mixins_normalize_slot],\n  inject: {\n    bvTabs: {\n      default: function _default() {\n        return {\n          // Don't set a tab index if not rendered inside <b-tabs>\n          noKeyNav: true\n        };\n      }\n    }\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    buttonId: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    titleItemClass: {\n      // Sniffed by tabs.js and added to nav 'li.nav-item'\n      type: [String, Array, Object],\n      default: null\n    },\n    titleLinkClass: {\n      // Sniffed by tabs.js and added to nav 'a.nav-link'\n      type: [String, Array, Object],\n      default: null\n    },\n    headHtml: {\n      // Is this actually ever used?\n      type: String,\n      default: null\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    noBody: {\n      type: Boolean,\n      default: false\n    },\n    href: {\n      // This should be deprecated, as tabs are not navigation (URL) based\n      // <b-nav> + <b-card> + <router-view>/<nuxt-child> should be used instead\n      // We don't support router-links here\n      type: String,\n      default: '#',\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecated: tab_DEPRECATED_MSG\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localActive: this.active && !this.disabled,\n      show: false\n    };\n  },\n  computed: {\n    tabClasses: function tabClasses() {\n      return [{\n        active: this.localActive,\n        disabled: this.disabled,\n        'card-body': this.bvTabs.card && !this.noBody\n      }, // Apply <b-tabs> `activeTabClass` styles when this tab is active\n      this.localActive ? this.bvTabs.activeTabClass : null];\n    },\n    controlledBy: function controlledBy() {\n      return this.buttonId || this.safeId('__BV_tab_button__');\n    },\n    computedNoFade: function computedNoFade() {\n      return !(this.bvTabs.fade || false);\n    },\n    computedLazy: function computedLazy() {\n      return this.bvTabs.lazy || this.lazy;\n    },\n    _isTab: function _isTab() {\n      // For parent sniffing of child\n      return true;\n    }\n  },\n  watch: {\n    localActive: function localActive(newVal, oldVal) {\n      // Make 'active' prop work with `.sync` modifier\n      this.$emit('update:active', newVal);\n    },\n    active: function active(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        if (newVal) {\n          // If activated post mount\n          this.activate();\n        } else {\n          if (!this.deactivate()) {\n            // Tab couldn't be deactivated, so we reset the synced active prop\n            // Deactivation will fail if no other tabs to activate\n            this.$emit('update:active', this.localActive);\n          }\n        }\n      }\n    },\n    disabled: function disabled(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        if (newVal && this.localActive && this.bvTabs.firstTab) {\n          this.localActive = false;\n          this.bvTabs.firstTab();\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Inform b-tabs of our presence\n    this.registerTab(); // Initially show on mount if active and not disabled\n\n    this.show = this.localActive; // Deprecate use of `href` prop\n\n    if (this.href && this.href !== '#') {\n      /* istanbul ignore next */\n      utils_warn(\"b-tab: \".concat(tab_DEPRECATED_MSG));\n    }\n  },\n  updated: function updated() {\n    // Force the tab button content to update (since slots are not reactive)\n    // Only done if we have a title slot, as the title prop is reactive\n    if (this.hasNormalizedSlot('title') && this.bvTabs.updateButton) {\n      this.bvTabs.updateButton(this);\n    }\n  },\n  destroyed: function destroyed() {\n    // inform b-tabs of our departure\n    this.unregisterTab();\n  },\n  methods: {\n    // Private methods\n    registerTab: function registerTab() {\n      // Inform `b-tabs` of our presence\n      this.bvTabs.registerTab && this.bvTabs.registerTab(this);\n    },\n    unregisterTab: function unregisterTab() {\n      // Inform `b-tabs` of our departure\n      this.bvTabs.unregisterTab && this.bvTabs.unregisterTab(this);\n    },\n    // Public methods\n    activate: function activate() {\n      if (this.bvTabs.activateTab && !this.disabled) {\n        return this.bvTabs.activateTab(this);\n      } else {\n        // Not inside a <b-tabs> component or tab is disabled\n        return false;\n      }\n    },\n    deactivate: function deactivate() {\n      if (this.bvTabs.deactivateTab && this.localActive) {\n        return this.bvTabs.deactivateTab(this);\n      } else {\n        // Not inside a <b-tabs> component or not active to begin with\n        return false;\n      }\n    }\n  },\n  render: function render(h) {\n    var content = h(this.tag, {\n      ref: 'panel',\n      staticClass: 'tab-pane',\n      class: this.tabClasses,\n      directives: [{\n        name: 'show',\n        rawName: 'v-show',\n        value: this.localActive,\n        expression: 'localActive'\n      }],\n      attrs: {\n        role: 'tabpanel',\n        id: this.safeId(),\n        tabindex: this.localActive && !this.bvTabs.noKeyNav ? '-1' : null,\n        'aria-hidden': this.localActive ? 'false' : 'true',\n        'aria-labelledby': this.controlledBy || null\n      }\n    }, // Render content lazily if requested\n    [this.localActive || !this.computedLazy ? this.normalizeSlot('default') : h(false)]);\n    return h(bv_transition, {\n      props: {\n        mode: 'out-in',\n        noFade: this.computedNoFade\n      }\n    }, [content]);\n  }\n});\n/* harmony default export */ var tabs_tab = (BTab);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/tabs/index.js\n\n\n\nvar TabsPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BTabs: BTabs,\n    BTab: BTab\n  }\n});\n\n/* harmony default export */ var components_tabs = (TabsPlugin);\n// EXTERNAL MODULE: ./node_modules/portal-vue/dist/portal-vue.common.js\nvar portal_vue_common = __webpack_require__(44);\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/toast/toaster.js\n\n\n\n\n\n // --- Constants ---\n\nvar toaster_NAME = 'BToaster';\nvar toaster_props = {\n  name: {\n    type: String,\n    required: true\n  },\n  ariaLive: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(toaster_NAME, 'ariaLive');\n    }\n  },\n  ariaAtomic: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(toaster_NAME, 'ariaAtomic');\n    } // Allowed: 'true' or 'false' or null\n\n  },\n  role: {\n    // Aria role\n    type: String,\n    default: function _default() {\n      return getComponentConfig(toaster_NAME, 'role');\n    }\n    /*\n    transition: {\n      type: [Boolean, String, Object],\n      default: false\n    }\n    */\n\n  } // @vue/component\n\n};\nvar DefaultTransition =\n/*#__PURE__*/\nvue.extend({\n  data: function data() {\n    return {\n      // Transition classes base name\n      name: 'b-toaster'\n    };\n  },\n  methods: {\n    onAfterEnter: function onAfterEnter(el) {\n      var _this = this;\n\n      // Handle bug where enter-to class is not removed.\n      // Bug is related to portal-vue and transition-groups.\n      requestAF(function () {\n        removeClass(el, \"\".concat(_this.name, \"-enter-to\")); // The *-move class is also stuck on elements that moved,\n        // but there are no javascript hooks to handle after move.\n      });\n    }\n  },\n  render: function render(h) {\n    return h('transition-group', {\n      props: {\n        tag: 'div',\n        name: this.name\n      },\n      on: {\n        afterEnter: this.onAfterEnter\n      }\n    }, this.$slots.default);\n  }\n}); // @vue/component\n\nvar BToaster =\n/*#__PURE__*/\nvue.extend({\n  name: toaster_NAME,\n  props: toaster_props,\n  data: function data() {\n    return {\n      // We don't render on SSR or if a an existing target found\n      doRender: false,\n      dead: false,\n      // Toaster names cannot change once created\n      staticName: this.name\n    };\n  },\n  beforeMount: function beforeMount() {\n    var _this2 = this;\n\n    this.staticName = this.name;\n    /* istanbul ignore if */\n\n    if (portal_vue_common[\"Wormhole\"].hasTarget(this.staticName)) {\n      utils_warn(\"b-toaster: A <portal-target> with name '\".concat(this.name, \"' already exists in the document.\"));\n      this.dead = true;\n    } else {\n      this.doRender = true;\n      this.$once('hook:beforeDestroy', function () {\n        // Let toasts made with `this.$bvToast.toast()` know that this toaster\n        // is being destroyed and should should also destroy/hide themselves\n        _this2.$root.$emit('bv::toaster::destroyed', _this2.staticName);\n      });\n    }\n  },\n  destroyed: function destroyed() {\n    // Remove from DOM if needed\n\n    /* istanbul ignore next: difficult to test */\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  },\n  render: function render(h) {\n    var $toaster = h('div', {\n      class: ['d-none', {\n        'b-dead-toaster': this.dead\n      }]\n    });\n\n    if (this.doRender) {\n      var $target = h(portal_vue_common[\"PortalTarget\"], {\n        staticClass: 'b-toaster-slot',\n        props: {\n          name: this.staticName,\n          multiple: true,\n          tag: 'div',\n          slim: false,\n          // transition: this.transition || DefaultTransition\n          transition: DefaultTransition\n        }\n      });\n      $toaster = h('div', {\n        staticClass: 'b-toaster',\n        class: [this.staticName],\n        attrs: {\n          id: this.staticName,\n          role: this.role || null,\n          // Fallback to null to make sure attribute doesn't exist\n          'aria-live': this.ariaLive,\n          'aria-atomic': this.ariaAtomic\n        }\n      }, [$target]);\n    }\n\n    return $toaster;\n  }\n});\n/* harmony default export */ var toast_toaster = (BToaster);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/toast/toast.js\n\n\n\n\n\n\n\n\nfunction toast_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction toast_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { toast_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { toast_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n // --- Constants ---\n\nvar toast_NAME = 'BToast';\nvar MIN_DURATION = 1000;\nvar toast_EVENT_OPTIONS = {\n  passive: true,\n  capture: false // --- Props ---\n\n};\nvar toast_props = {\n  id: {\n    // Even though the ID prop is provided by idMixin, we\n    // add it here for $bvToast props filtering\n    type: String,\n    default: null\n  },\n  title: {\n    type: String,\n    default: null\n  },\n  toaster: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'toaster');\n    }\n  },\n  visible: {\n    type: Boolean,\n    default: false\n  },\n  variant: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'variant');\n    }\n  },\n  isStatus: {\n    // Switches role to 'status' and aria-live to 'polite'\n    type: Boolean,\n    default: false\n  },\n  appendToast: {\n    type: Boolean,\n    default: false\n  },\n  noAutoHide: {\n    type: Boolean,\n    default: false\n  },\n  autoHideDelay: {\n    type: [Number, String],\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'autoHideDelay');\n    }\n  },\n  noCloseButton: {\n    type: Boolean,\n    default: false\n  },\n  noFade: {\n    type: Boolean,\n    default: false\n  },\n  noHoverPause: {\n    type: Boolean,\n    default: false\n  },\n  solid: {\n    type: Boolean,\n    default: false\n  },\n  toastClass: {\n    type: [String, Object, Array],\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'toastClass');\n    }\n  },\n  headerClass: {\n    type: [String, Object, Array],\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'headerClass');\n    }\n  },\n  bodyClass: {\n    type: [String, Object, Array],\n    default: function _default() {\n      return getComponentConfig(toast_NAME, 'bodyClass');\n    }\n  },\n  href: {\n    type: String,\n    default: null\n  },\n  to: {\n    type: [String, Object],\n    default: null\n  },\n  static: {\n    // Render the toast in place, rather than in a portal-target\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nvar BToast =\n/*#__PURE__*/\nvue.extend({\n  name: toast_NAME,\n  mixins: [mixins_id, listen_on_root, mixins_normalize_slot],\n  inheritAttrs: false,\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: toast_props,\n  data: function data() {\n    return {\n      isMounted: false,\n      doRender: false,\n      localShow: false,\n      isTransitioning: false,\n      isHiding: false,\n      order: 0,\n      timer: null,\n      dismissStarted: 0,\n      resumeDismiss: 0\n    };\n  },\n  computed: {\n    bToastClasses: function bToastClasses() {\n      return Object(defineProperty[\"a\" /* default */])({\n        'b-toast-solid': this.solid,\n        'b-toast-append': this.appendToast,\n        'b-toast-prepend': !this.appendToast\n      }, \"b-toast-\".concat(this.variant), this.variant);\n    },\n    slotScope: function slotScope() {\n      return {\n        hide: this.hide\n      };\n    },\n    computedDuration: function computedDuration() {\n      // Minimum supported duration is 1 second\n      return Math.max(parseInt(this.autoHideDelay, 10) || 0, MIN_DURATION);\n    },\n    computedToaster: function computedToaster() {\n      return String(this.toaster);\n    },\n    transitionHandlers: function transitionHandlers() {\n      return {\n        beforeEnter: this.onBeforeEnter,\n        afterEnter: this.onAfterEnter,\n        beforeLeave: this.onBeforeLeave,\n        afterLeave: this.onAfterLeave\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      newVal ? this.show() : this.hide();\n    },\n    localShow: function localShow(newVal) {\n      if (newVal !== this.visible) {\n        this.$emit('change', newVal);\n      }\n    },\n    toaster: function toaster(newVal)\n    /* istanbul ignore next */\n    {\n      var _this = this;\n\n      // If toaster target changed, make sure toaster exists\n      this.$nextTick(function () {\n        return _this.ensureToaster;\n      });\n    },\n    static: function _static(newVal)\n    /* istanbul ignore next */\n    {\n      // If static changes to true, and the toast is showing,\n      // ensure the toaster target exists\n      if (newVal && this.localShow) {\n        this.ensureToaster();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.isMounted = true;\n    this.$nextTick(function () {\n      if (_this2.visible) {\n        requestAF(function () {\n          _this2.show();\n        });\n      }\n    }); // Listen for global $root show events\n\n    this.listenOnRoot('bv::show::toast', function (id) {\n      if (id === _this2.safeId()) {\n        _this2.show();\n      }\n    }); // Listen for global $root hide events\n\n    this.listenOnRoot('bv::hide::toast', function (id) {\n      if (!id || id === _this2.safeId()) {\n        _this2.hide();\n      }\n    }); // Make sure we hide when toaster is destroyed\n\n    /* istanbul ignore next: difficult to test */\n\n    this.listenOnRoot('bv::toaster::destroyed', function (toaster) {\n      if (toaster === _this2.computedToaster) {\n        _this2.hide();\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.clearDismissTimer();\n  },\n  methods: {\n    show: function show() {\n      var _this3 = this;\n\n      if (!this.localShow) {\n        this.ensureToaster();\n        var showEvt = this.buildEvent('show');\n        this.emitEvent(showEvt);\n        this.dismissStarted = this.resumeDismiss = 0;\n        this.order = Date.now() * (this.appendToast ? 1 : -1);\n        this.isHiding = false;\n        this.doRender = true;\n        this.$nextTick(function () {\n          // We show the toast after we have rendered the portal and b-toast wrapper\n          // so that screen readers will properly announce the toast\n          requestAF(function () {\n            _this3.localShow = true;\n          });\n        });\n      }\n    },\n    hide: function hide() {\n      var _this4 = this;\n\n      if (this.localShow) {\n        var hideEvt = this.buildEvent('hide');\n        this.emitEvent(hideEvt);\n        this.setHoverHandler(false);\n        this.dismissStarted = this.resumeDismiss = 0;\n        this.clearDismissTimer();\n        this.isHiding = true;\n        requestAF(function () {\n          _this4.localShow = false;\n        });\n      }\n    },\n    buildEvent: function buildEvent(type) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new bv_event_class(type, toast_objectSpread({\n        cancelable: false,\n        target: this.$el || null,\n        relatedTarget: null\n      }, opts, {\n        vueTarget: this,\n        componentId: this.safeId()\n      }));\n    },\n    emitEvent: function emitEvent(bvEvt) {\n      var type = bvEvt.type;\n      this.$root.$emit(\"bv::toast:\".concat(type), bvEvt);\n      this.$emit(type, bvEvt);\n    },\n    ensureToaster: function ensureToaster() {\n      if (this.static) {\n        return;\n      }\n\n      if (!portal_vue_common[\"Wormhole\"].hasTarget(this.computedToaster)) {\n        var div = document.createElement('div');\n        document.body.appendChild(div);\n        var toaster = new BToaster({\n          parent: this.$root,\n          propsData: {\n            name: this.computedToaster\n          }\n        });\n        toaster.$mount(div);\n      }\n    },\n    startDismissTimer: function startDismissTimer() {\n      this.clearDismissTimer();\n\n      if (!this.noAutoHide) {\n        this.timer = setTimeout(this.hide, this.resumeDismiss || this.computedDuration);\n        this.dismissStarted = Date.now();\n        this.resumeDismiss = 0;\n      }\n    },\n    clearDismissTimer: function clearDismissTimer() {\n      clearTimeout(this.timer);\n      this.timer = null;\n    },\n    setHoverHandler: function setHoverHandler(on) {\n      var method = on ? eventOn : eventOff;\n      method(this.$refs.btoast, 'mouseenter', this.onPause, toast_EVENT_OPTIONS);\n      method(this.$refs.btoast, 'mouseleave', this.onUnPause, toast_EVENT_OPTIONS);\n    },\n    onPause: function onPause(evt) {\n      // Determine time remaining, and then pause timer\n      if (this.noAutoHide || this.noHoverPause || !this.timer || this.resumeDismiss) {\n        return;\n      }\n\n      var passed = Date.now() - this.dismissStarted;\n\n      if (passed > 0) {\n        this.clearDismissTimer();\n        this.resumeDismiss = Math.max(this.computedDuration - passed, MIN_DURATION);\n      }\n    },\n    onUnPause: function onUnPause(evt) {\n      // Restart timer with max of time remaining or 1 second\n      if (this.noAutoHide || this.noHoverPause || !this.resumeDismiss) {\n        this.resumeDismiss = this.dismissStarted = 0;\n        return;\n      }\n\n      this.startDismissTimer();\n    },\n    onLinkClick: function onLinkClick() {\n      var _this5 = this;\n\n      // We delay the close to allow time for the\n      // browser to process the link click\n      this.$nextTick(function () {\n        requestAF(function () {\n          _this5.hide();\n        });\n      });\n    },\n    onBeforeEnter: function onBeforeEnter() {\n      this.isTransitioning = true;\n    },\n    onAfterEnter: function onAfterEnter() {\n      this.isTransitioning = false;\n      var hiddenEvt = this.buildEvent('shown');\n      this.emitEvent(hiddenEvt);\n      this.startDismissTimer();\n      this.setHoverHandler(true);\n    },\n    onBeforeLeave: function onBeforeLeave() {\n      this.isTransitioning = true;\n    },\n    onAfterLeave: function onAfterLeave() {\n      this.isTransitioning = false;\n      this.order = 0;\n      this.resumeDismiss = this.dismissStarted = 0;\n      var hiddenEvt = this.buildEvent('hidden');\n      this.emitEvent(hiddenEvt);\n      this.doRender = false;\n    },\n    makeToast: function makeToast(h) {\n      var _this6 = this;\n\n      // Render helper for generating the toast\n      // Assemble the header content\n      var $headerContent = [];\n      var $title = this.normalizeSlot('toast-title', this.slotScope);\n\n      if ($title) {\n        $headerContent.push($title);\n      } else if (this.title) {\n        $headerContent.push(h('strong', {\n          staticClass: 'mr-2'\n        }, this.title));\n      }\n\n      if (!this.noCloseButton) {\n        $headerContent.push(h(BButtonClose, {\n          staticClass: 'ml-auto mb-1',\n          on: {\n            click: function click(evt) {\n              _this6.hide();\n            }\n          }\n        }));\n      } // Assemble the header (if needed)\n\n\n      var $header = h(false);\n\n      if ($headerContent.length > 0) {\n        $header = h('header', {\n          staticClass: 'toast-header',\n          class: this.headerClass\n        }, $headerContent);\n      } // Toast body\n\n\n      var isLink = this.href || this.to;\n      var $body = h(isLink ? BLink : 'div', {\n        staticClass: 'toast-body',\n        class: this.bodyClass,\n        props: isLink ? {\n          to: this.to,\n          href: this.href\n        } : {},\n        on: isLink ? {\n          click: this.onLinkClick\n        } : {}\n      }, [this.normalizeSlot('default', this.slotScope) || h(false)]); // Build the toast\n\n      var $toast = h('div', {\n        key: \"toast-\".concat(this._uid),\n        ref: 'toast',\n        staticClass: 'toast',\n        class: this.toastClass,\n        attrs: toast_objectSpread({}, this.$attrs, {\n          tabindex: '0',\n          id: this.safeId()\n        })\n      }, [$header, $body]);\n      return $toast;\n    }\n  },\n  render: function render(h) {\n    if (!this.doRender || !this.isMounted) {\n      return h(false);\n    }\n\n    var name = \"b-toast-\".concat(this._uid);\n    return h(portal_vue_common[\"Portal\"], {\n      props: {\n        name: name,\n        to: this.computedToaster,\n        order: this.order,\n        slim: true,\n        disabled: this.static\n      }\n    }, [h('div', {\n      key: name,\n      ref: 'btoast',\n      staticClass: 'b-toast',\n      class: this.bToastClasses,\n      attrs: {\n        id: this.safeId('_toast_outer'),\n        role: this.isHiding ? null : this.isStatus ? 'status' : 'alert',\n        'aria-live': this.isHiding ? null : this.isStatus ? 'polite' : 'assertive',\n        'aria-atomic': this.isHiding ? null : 'true'\n      }\n    }, [h(bv_transition, {\n      props: {\n        noFade: this.noFade\n      },\n      on: this.transitionHandlers\n    }, [this.localShow ? this.makeToast(h) : h(false)])])]);\n  }\n});\n/* harmony default export */ var toast_toast = (BToast);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/toast/helpers/bv-toast.js\n\n\n\n\n\n\n\n\n\n\nfunction bv_toast_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction bv_toast_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bv_toast_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bv_toast_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Plugin for adding `$bvToast` property to all Vue instances\n */\n\n\n\n\n\n\n\n // --- Constants ---\n\nvar bv_toast_PROP_NAME = '$bvToast';\nvar bv_toast_PROP_NAME_PRIV = '_bv__toast'; // Base toast props that are allowed\n// Some may be ignored or overridden on some message boxes\n// Prop ID is allowed, but really only should be used for testing\n// We need to add it in explicitly as it comes from the `idMixin`\n\nvar bv_toast_BASE_PROPS = ['id'].concat(Object(toConsumableArray[\"a\" /* default */])(keys(object_omit(toast_props, ['static', 'visible'])))); // Map prop names to toast slot names\n\nvar bv_toast_propsToSlots = {\n  toastContent: 'default',\n  title: 'toast-title' // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n};\n\nvar bv_toast_filterOptions = function filterOptions(options) {\n  return bv_toast_BASE_PROPS.reduce(function (memo, key) {\n    if (!isUndefined(options[key])) {\n      memo[key] = options[key];\n    }\n\n    return memo;\n  }, {});\n}; // Method to install `$bvToast` VM injection\n\n\nvar bv_toast_plugin = function plugin(Vue) {\n  // Create a private sub-component constructor that\n  // extends BToast and self-destructs after hidden\n  // @vue/component\n  var BToastPop = Vue.extend({\n    name: 'BToastPop',\n    extends: BToast,\n    destroyed: function destroyed() {\n      // Make sure we not in document any more\n      if (this.$el && this.$el.parentNode) {\n        this.$el.parentNode.removeChild(this.$el);\n      }\n    },\n    mounted: function mounted() {\n      var self = this; // Self destruct handler\n\n      var handleDestroy = function handleDestroy() {\n        // Ensure the toast has been force hidden\n        self.localShow = false;\n        self.doRender = false;\n        self.$nextTick(function () {\n          self.$nextTick(function () {\n            // In a `requestAF()` to release control back to application\n            // and to allow the portal-target time to remove the content\n            requestAF(function () {\n              self.$destroy();\n            });\n          });\n        });\n      }; // Self destruct if parent destroyed\n\n\n      this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n      this.$once('hidden', handleDestroy); // Self destruct when toaster is destroyed\n\n      this.listenOnRoot('bv::toaster::destroyed', function (toaster) {\n        /* istanbul ignore next: hard to test */\n        if (toaster === self.toaster) {\n          handleDestroy();\n        }\n      });\n    }\n  }); // Private method to generate the on-demand toast\n\n  var makeToast = function makeToast(props, $parent) {\n    if (warn_warnNotClient(bv_toast_PROP_NAME)) {\n      /* istanbul ignore next */\n      return;\n    } // Create an instance of `BToastPop` component\n\n\n    var toast = new BToastPop({\n      // We set parent as the local VM so these toasts can emit events on the\n      // app `$root`, and it ensures `BToast` is destroyed when parent is destroyed\n      parent: $parent,\n      propsData: bv_toast_objectSpread({}, bv_toast_filterOptions(getComponentConfig('BToast') || {}), {}, object_omit(props, keys(bv_toast_propsToSlots)), {\n        // Props that can't be overridden\n        static: false,\n        visible: true\n      })\n    }); // Convert certain props to slots\n\n    keys(bv_toast_propsToSlots).forEach(function (prop) {\n      var value = props[prop];\n\n      if (!isUndefined(value)) {\n        // Can be a string, or array of VNodes\n        if (prop === 'title' && isString(value)) {\n          // Special case for title if it is a string, we wrap in a <strong>\n          value = [$parent.$createElement('strong', {\n            class: 'mr-2'\n          }, value)];\n        }\n\n        toast.$slots[bv_toast_propsToSlots[prop]] = concat(value);\n      }\n    }); // Create a mount point (a DIV) and mount it (which triggers the show)\n\n    var div = document.createElement('div');\n    document.body.appendChild(div);\n    toast.$mount(div);\n  }; // Declare BvToast instance property class\n\n\n  var BvToast =\n  /*#__PURE__*/\n  function () {\n    function BvToast(vm) {\n      Object(classCallCheck[\"a\" /* default */])(this, BvToast);\n\n      // Assign the new properties to this instance\n      object_assign(this, {\n        _vm: vm,\n        _root: vm.$root\n      }); // Set these properties as read-only and non-enumerable\n\n      defineProperties(this, {\n        _vm: readonlyDescriptor(),\n        _root: readonlyDescriptor()\n      });\n    } // --- Public Instance methods ---\n    // Opens a user defined toast and returns immediately\n\n\n    Object(createClass[\"a\" /* default */])(BvToast, [{\n      key: \"toast\",\n      value: function toast(content) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!content || warn_warnNotClient(bv_toast_PROP_NAME)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        makeToast(bv_toast_objectSpread({}, bv_toast_filterOptions(options), {\n          toastContent: content\n        }), this._vm);\n      } // shows a `<b-toast>` component with the specified ID\n\n    }, {\n      key: \"show\",\n      value: function show(id) {\n        if (id) {\n          this._root.$emit('bv::show::toast', id);\n        }\n      } // Hide a toast with specified ID, or if not ID all toasts\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        this._root.$emit('bv::hide::toast', id);\n      }\n    }]);\n\n    return BvToast;\n  }(); // Add our instance mixin\n\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate() {\n      // Because we need access to `$root` for `$emits`, and VM for parenting,\n      // we have to create a fresh instance of `BvToast` for each VM\n      this[bv_toast_PROP_NAME_PRIV] = new BvToast(this);\n    }\n  }); // Define our read-only `$bvToast` instance property\n  // Placed in an if just in case in HMR mode\n\n  if (!Vue.prototype.hasOwnProperty(bv_toast_PROP_NAME)) {\n    object_defineProperty(Vue.prototype, bv_toast_PROP_NAME, {\n      get: function get() {\n        /* istanbul ignore next */\n        if (!this || !this[bv_toast_PROP_NAME_PRIV]) {\n          warn_warn(\"'\".concat(bv_toast_PROP_NAME, \"' must be accessed from a Vue instance 'this' context\"));\n        }\n\n        return this[bv_toast_PROP_NAME_PRIV];\n      }\n    });\n  }\n};\n\nvar BVToastPlugin =\n/*#__PURE__*/\npluginFactory({\n  plugins: {\n    plugin: bv_toast_plugin\n  }\n}); // Default export is the Plugin\n\n/* harmony default export */ var bv_toast = (BVToastPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/toast/index.js\n\n\n\n\nvar ToastPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BToast: BToast,\n    BToaster: BToaster\n  },\n  // $bvToast injection\n  plugins: {\n    BVToastPlugin: BVToastPlugin\n  }\n});\n\n/* harmony default export */ var components_toast = (ToastPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/tooltip/tooltip.js\n\n\n\n\n\n\n\n\n\nvar tooltip_NAME = 'BTooltip'; // @vue/component\n\nvar BTooltip =\n/*#__PURE__*/\nvue.extend({\n  name: tooltip_NAME,\n  mixins: [toolpop, mixins_normalize_slot],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    triggers: {\n      type: [String, Array],\n      default: 'hover focus'\n    },\n    placement: {\n      type: String,\n      default: 'top'\n    },\n    fallbackPlacement: {\n      type: [String, Array],\n      default: 'flip',\n      validator: function validator(value) {\n        return isArray(value) || arrayIncludes(['flip', 'clockwise', 'counterclockwise'], value);\n      }\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(tooltip_NAME, 'variant');\n      }\n    },\n    customClass: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(tooltip_NAME, 'customClass');\n      }\n    },\n    delay: {\n      type: [Number, Object, String],\n      default: function _default() {\n        return getComponentConfig(tooltip_NAME, 'delay');\n      }\n    },\n    boundary: {\n      // String: scrollParent, window, or viewport\n      // Element: element reference\n      type: [String, HTMLElement],\n      default: function _default() {\n        return getComponentConfig(tooltip_NAME, 'boundary');\n      }\n    },\n    boundaryPadding: {\n      type: Number,\n      default: function _default() {\n        return getComponentConfig(tooltip_NAME, 'boundaryPadding');\n      }\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  methods: {\n    createToolpop: function createToolpop() {\n      // getTarget is in toolpop mixin\n      var target = this.getTarget();\n      /* istanbul ignore else */\n\n      if (target) {\n        this._toolpop = new tooltip_class(target, this.getConfig(), this);\n      } else {\n        this._toolpop = null;\n        utils_warn(\"b-tooltip: 'target' element not found!\");\n      }\n\n      return this._toolpop;\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      class: ['d-none'],\n      style: {\n        display: 'none'\n      },\n      attrs: {\n        'aria-hidden': true\n      }\n    }, [h('div', {\n      ref: 'title'\n    }, this.normalizeSlot('default'))]);\n  }\n});\n/* harmony default export */ var tooltip = (BTooltip);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/tooltip/tooltip.js\n\n\n\n\n\n\n\n\nfunction tooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction tooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tooltip_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tooltip_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n // Key which we use to store tooltip object on element\n\nvar BV_TOOLTIP = '__BV_ToolTip__'; // Valid event triggers\n\nvar tooltip_validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Directive modifier test regular expressions. Pre-compile for performance\n\n};\nvar tooltip_htmlRE = /^html$/;\nvar tooltip_noFadeRE = /^nofade$/i;\nvar tooltip_placementRE = /^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/;\nvar tooltip_boundaryRE = /^(window|viewport|scrollParent)$/;\nvar tooltip_delayRE = /^d\\d+$/;\nvar tooltip_offsetRE = /^o-?\\d+$/;\nvar tooltip_variantRE = /^v-.+$/; // Build a ToolTip config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar tooltip_parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a basic config\n  var NAME = 'BTooltip';\n  var config = {\n    delay: getComponentConfig(NAME, 'delay'),\n    boundary: String(getComponentConfig(NAME, 'boundary')),\n    boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0,\n    variant: getComponentConfig(NAME, 'variant'),\n    customClass: getComponentConfig(NAME, 'customClass') // Process bindings.value\n\n  };\n\n  if (isString(bindings.value)) {\n    // Value is tooltip content (html optionally supported)\n    config.title = bindings.value;\n  } else if (isFunction(bindings.value)) {\n    // Title generator function\n    config.title = bindings.value;\n  } else if (object_isObject(bindings.value)) {\n    // Value is config object, so merge\n    config = tooltip_objectSpread({}, config, {}, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  keys(bindings.modifiers).forEach(function (mod) {\n    if (tooltip_htmlRE.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (tooltip_noFadeRE.test(mod)) {\n      // No animation\n      config.animation = false;\n    } else if (tooltip_placementRE.test(mod)) {\n      // Placement of tooltip\n      config.placement = mod;\n    } else if (tooltip_boundaryRE.test(mod)) {\n      // Boundary of tooltip\n      config.boundary = mod;\n    } else if (tooltip_delayRE.test(mod)) {\n      // Delay value\n      var delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (tooltip_offsetRE.test(mod)) {\n      // Offset value, negative allowed\n      var offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    } else if (tooltip_variantRE.test(mod)) {\n      // Variant\n      config.variant = mod.slice(2) || null;\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  var selectedTriggers = {}; // Parse current config object trigger\n\n  var triggers = isString(config.trigger) ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(function (trigger) {\n    if (tooltip_validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  keys(tooltip_validTriggers).forEach(function (trigger) {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = keys(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to 'focus'\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update ToolTip on our element\n\n\nvar tooltip_applyTooltip = function applyTooltip(el, bindings, vnode) {\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  if (!popper[\"a\" /* default */]) {\n    // Popper is required for ToolTips to work\n\n    /* istanbul ignore next */\n    utils_warn('v-b-tooltip: Popper.js is required for ToolTips to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  var config = tooltip_parseBindings(bindings);\n\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].updateConfig(config);\n  } else {\n    el[BV_TOOLTIP] = new tooltip_class(el, config, vnode.context);\n  }\n}; // Remove ToolTip on our element\n\n\nvar removeTooltip = function removeTooltip(el) {\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].destroy();\n    el[BV_TOOLTIP] = null;\n    delete el[BV_TOOLTIP];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar VBTooltip = {\n  bind: function bind(el, bindings, vnode) {\n    tooltip_applyTooltip(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode) {\n    tooltip_applyTooltip(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      tooltip_applyTooltip(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      tooltip_applyTooltip(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el) {\n    removeTooltip(el);\n  }\n};\n/* harmony default export */ var tooltip_tooltip = (VBTooltip);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/tooltip/index.js\n\n\n\nvar TooltipPlugin =\n/*#__PURE__*/\npluginFactory({\n  components: {\n    BTooltip: BTooltip\n  },\n  directives: {\n    VBTooltip: VBTooltip\n  }\n});\n\n/* harmony default export */ var components_tooltip = (TooltipPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/components/index.esm.js\n// Index file used for the main builds, which does not include legacy plugin names\n// Once es/ buld is removed, then this file will be renamed to index.js\n // Component group plugins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Main plugin to install all component group plugins\n\nvar componentsPlugin =\n/*#__PURE__*/\npluginFactory({\n  plugins: {\n    AlertPlugin: AlertPlugin,\n    BadgePlugin: BadgePlugin,\n    BreadcrumbPlugin: BreadcrumbPlugin,\n    ButtonPlugin: ButtonPlugin,\n    ButtonGroupPlugin: ButtonGroupPlugin,\n    ButtonToolbarPlugin: ButtonToolbarPlugin,\n    CardPlugin: CardPlugin,\n    CarouselPlugin: CarouselPlugin,\n    CollapsePlugin: CollapsePlugin,\n    DropdownPlugin: DropdownPlugin,\n    EmbedPlugin: EmbedPlugin,\n    FormPlugin: FormPlugin,\n    FormGroupPlugin: FormGroupPlugin,\n    FormCheckboxPlugin: FormCheckboxPlugin,\n    FormRadioPlugin: FormRadioPlugin,\n    FormInputPlugin: FormInputPlugin,\n    FormTextareaPlugin: FormTextareaPlugin,\n    FormFilePlugin: FormFilePlugin,\n    FormSelectPlugin: FormSelectPlugin,\n    ImagePlugin: ImagePlugin,\n    InputGroupPlugin: InputGroupPlugin,\n    JumbotronPlugin: JumbotronPlugin,\n    LayoutPlugin: LayoutPlugin,\n    LinkPlugin: LinkPlugin,\n    ListGroupPlugin: ListGroupPlugin,\n    MediaPlugin: MediaPlugin,\n    ModalPlugin: ModalPlugin,\n    NavPlugin: NavPlugin,\n    NavbarPlugin: NavbarPlugin,\n    PaginationPlugin: PaginationPlugin,\n    PaginationNavPlugin: PaginationNavPlugin,\n    PopoverPlugin: PopoverPlugin,\n    ProgressPlugin: ProgressPlugin,\n    SpinnerPlugin: SpinnerPlugin,\n    TablePlugin: TablePlugin,\n    TabsPlugin: TabsPlugin,\n    ToastPlugin: ToastPlugin,\n    TooltipPlugin: TooltipPlugin\n  }\n}); // Export named injection plugins\n// These two plugins are not directly included in the above installer, as they are\n// installed via the ModalPlugin and ToastPlugin respectively.\n\n\n // Export all individual components and component group plugins as named exports.\n// This is mainly for users who import individual components, directives or plugins.\n//\n// Webpack 4 has optimization difficulties with re-eport of re-exports, so\n// we import the components individulaly here for better tree shaking,\n//\n// Webpack v5 fixes the optimizations with re-export of re-exports so this\n// can be reverted back to `export * from './table'` when Webpack v5 is released.\n// https://github.com/webpack/webpack/pull/9203 (available in Webpack v5.0.0-alpha.15)\n// export * from './alert'\n\n\n // export * from './badge'\n\n\n // export * from './breadcrumb'\n\n\n\n // export * from './button'\n\n\n\n // export * from './button-group'\n\n\n // export * from './button-toolbar'\n\n\n // export * from './card'\n\n\n\n\n\n\n\n\n\n\n\n // export * from './carousel'\n\n\n\n // export * from './collapse'\n\n\n // export * from './dropdown'\n\n\n\n\n\n\n\n\n\n // export * from './embed'\n\n\n // export * from './form'\n\n\n\n\n\n\n // export * from './form-checkbox'\n\n\n\n // export * from './form-file'\n\n\n // export * from './form-group'\n\n\n // export * from './form-input'\n\n\n // export * from './form-radio'\n\n\n\n // export * from './form-select'\n\n\n // export * from './form-textarea'\n\n\n // export * from './image'\n\n\n\n // export * from './input-group'\n\n\n\n\n\n\n // export * from './jumbotron'\n\n\n // export * from './layout'\n\n\n\n\n\n // export * from './link'\n\n\n // export * from './list-group'\n\n\n\n // export * from './media'\n\n\n\n\n // export * from './modal'\n\n\n // export * from './nav'\n\n\n\n\n\n\n // export * from './navbar'\n\n\n\n\n\n // export * from './pagination'\n\n\n // export * from './pagination-nav'\n\n\n // export * from './popover'\n\n\n // export * from './progress'\n\n\n\n // export * from './spinner'\n\n\n // export * from './table'\n\n\n\n // export * from './tabs'\n\n\n\n // export * from './toast'\n\n\n\n // export * from './tooltip'\n\n\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/modal/index.js\n\n\nvar VBModalPlugin =\n/*#__PURE__*/\npluginFactory({\n  directives: {\n    VBModal: VBModal\n  }\n});\n\n/* harmony default export */ var directives_modal = (VBModalPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/popover/index.js\n\n\nvar VBPopoverPlugin =\n/*#__PURE__*/\npluginFactory({\n  directives: {\n    VBPopover: VBPopover\n  }\n});\n\n/* harmony default export */ var directives_popover = (VBPopoverPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/scrollspy/scrollspy.class.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction scrollspy_class_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction scrollspy_class_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { scrollspy_class_ownKeys(source, true).forEach(function (key) { Object(defineProperty[\"a\" /* default */])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { scrollspy_class_ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * ScrollSpy class definition\n */\n\n\n\n\n/*\n * Constants / Defaults\n */\n\nvar scrollspy_class_NAME = 'v-b-scrollspy';\nvar ACTIVATE_EVENT = 'bv::scrollspy::activate';\nvar Default = {\n  element: 'body',\n  offset: 10,\n  method: 'auto',\n  throttle: 75\n};\nvar DefaultType = {\n  element: '(string|element|component)',\n  offset: 'number',\n  method: 'string',\n  throttle: 'number'\n};\nvar scrollspy_class_ClassName = {\n  DROPDOWN_ITEM: 'dropdown-item',\n  ACTIVE: 'active'\n};\nvar scrollspy_class_Selector = {\n  ACTIVE: '.active',\n  NAV_LIST_GROUP: '.nav, .list-group',\n  NAV_LINKS: '.nav-link',\n  NAV_ITEMS: '.nav-item',\n  LIST_ITEMS: '.list-group-item',\n  DROPDOWN: '.dropdown, .dropup',\n  DROPDOWN_ITEMS: '.dropdown-item',\n  DROPDOWN_TOGGLE: '.dropdown-toggle'\n};\nvar OffsetMethod = {\n  OFFSET: 'offset',\n  POSITION: 'position' // HREFs must end with a hash followed by at least one non-hash character.\n  // HREFs in the links are assumed to point to non-external links.\n  // Comparison to the current page base URL is not performed!\n\n};\nvar HREF_REGEX = /^.*(#[^#]+)$/; // Transition Events\n\nvar scrollspy_class_TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd']; // Options for events\n\nvar scrollspy_class_EventOptions = {\n  passive: true,\n  capture: false\n  /*\n   * Utility Methods\n   */\n  // Better var type detection\n\n};\n\nfunction scrollspy_class_toType(obj)\n/* istanbul ignore next: not easy to test */\n{\n  return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n} // Check config properties for expected types\n\n\nfunction typeCheckConfig(componentName, config, configTypes)\n/* istanbul ignore next: not easy to test */\n{\n  for (var property in configTypes) {\n    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && isElement(value) ? 'element' : scrollspy_class_toType(value); // handle Vue instances\n\n      valueType = value && value._isVue ? 'component' : valueType;\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        /* istanbul ignore next */\n        utils_warn(\"\".concat(componentName, \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\"\"));\n      }\n    }\n  }\n}\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/* istanbul ignore next: not easy to test */\n\n\nvar scrollspy_class_ScrollSpy\n/* istanbul ignore next: not easy to test */\n=\n/*#__PURE__*/\nfunction () {\n  function ScrollSpy(element, config, $root) {\n    Object(classCallCheck[\"a\" /* default */])(this, ScrollSpy);\n\n    // The element we activate links in\n    this.$el = element;\n    this.$scroller = null;\n    this.$selector = [scrollspy_class_Selector.NAV_LINKS, scrollspy_class_Selector.LIST_ITEMS, scrollspy_class_Selector.DROPDOWN_ITEMS].join(',');\n    this.$offsets = [];\n    this.$targets = [];\n    this.$activeTarget = null;\n    this.$scrollHeight = 0;\n    this.$resizeTimeout = null;\n    this.$obs_scroller = null;\n    this.$obs_targets = null;\n    this.$root = $root || null;\n    this.$config = null;\n    this.updateConfig(config);\n  }\n\n  Object(createClass[\"a\" /* default */])(ScrollSpy, [{\n    key: \"updateConfig\",\n    value: function updateConfig(config, $root) {\n      if (this.$scroller) {\n        // Just in case out scroll element has changed\n        this.unlisten();\n        this.$scroller = null;\n      }\n\n      var cfg = scrollspy_class_objectSpread({}, this.constructor.Default, {}, config);\n\n      if ($root) {\n        this.$root = $root;\n      }\n\n      typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n      this.$config = cfg;\n\n      if (this.$root) {\n        var self = this;\n        this.$root.$nextTick(function () {\n          self.listen();\n        });\n      } else {\n        this.listen();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.unlisten();\n      clearTimeout(this.$resizeTimeout);\n      this.$resizeTimeout = null;\n      this.$el = null;\n      this.$config = null;\n      this.$scroller = null;\n      this.$selector = null;\n      this.$offsets = null;\n      this.$targets = null;\n      this.$activeTarget = null;\n      this.$scrollHeight = null;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this = this;\n\n      var scroller = this.getScroller();\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        eventOn(scroller, 'scroll', this, scrollspy_class_EventOptions);\n      }\n\n      eventOn(window, 'scroll', this, scrollspy_class_EventOptions);\n      eventOn(window, 'resize', this, scrollspy_class_EventOptions);\n      eventOn(window, 'orientationchange', this, scrollspy_class_EventOptions);\n      scrollspy_class_TransitionEndEvents.forEach(function (evtName) {\n        eventOn(window, evtName, _this, scrollspy_class_EventOptions);\n      });\n      this.setObservers(true); // Schedule a refresh\n\n      this.handleEvent('refresh');\n    }\n  }, {\n    key: \"unlisten\",\n    value: function unlisten() {\n      var _this2 = this;\n\n      var scroller = this.getScroller();\n      this.setObservers(false);\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        eventOff(scroller, 'scroll', this, scrollspy_class_EventOptions);\n      }\n\n      eventOff(window, 'scroll', this, scrollspy_class_EventOptions);\n      eventOff(window, 'resize', this, scrollspy_class_EventOptions);\n      eventOff(window, 'orientationchange', this, scrollspy_class_EventOptions);\n      scrollspy_class_TransitionEndEvents.forEach(function (evtName) {\n        eventOff(window, evtName, _this2, scrollspy_class_EventOptions);\n      });\n    }\n  }, {\n    key: \"setObservers\",\n    value: function setObservers(on) {\n      var _this3 = this;\n\n      // We observe both the scroller for content changes, and the target links\n      if (this.$obs_scroller) {\n        this.$obs_scroller.disconnect();\n        this.$obs_scroller = null;\n      }\n\n      if (this.$obs_targets) {\n        this.$obs_targets.disconnect();\n        this.$obs_targets = null;\n      }\n\n      if (on) {\n        this.$obs_targets = observe_dom(this.$el, function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          attributes: true,\n          attributeFilter: ['href']\n        });\n        this.$obs_scroller = observe_dom(this.getScroller(), function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          characterData: true,\n          attributes: true,\n          attributeFilter: ['id', 'style', 'class']\n        });\n      }\n    } // general event handler\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(evt) {\n      var type = isString(evt) ? evt : evt.type;\n      var self = this;\n\n      function resizeThrottle() {\n        if (!self.$resizeTimeout) {\n          self.$resizeTimeout = setTimeout(function () {\n            self.refresh();\n            self.process();\n            self.$resizeTimeout = null;\n          }, self.$config.throttle);\n        }\n      }\n\n      if (type === 'scroll') {\n        if (!this.$obs_scroller) {\n          // Just in case we are added to the DOM before the scroll target is\n          // We re-instantiate our listeners, just in case\n          this.listen();\n        }\n\n        this.process();\n      } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n        // Postpone these events by throttle time\n        resizeThrottle();\n      }\n    } // Refresh the list of target links on the element we are applied to\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this4 = this;\n\n      var scroller = this.getScroller();\n\n      if (!scroller) {\n        return;\n      }\n\n      var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n      var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n      var methodFn = method === OffsetMethod.POSITION ? position : dom_offset;\n      var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n      this.$offsets = [];\n      this.$targets = [];\n      this.$scrollHeight = this.getScrollHeight(); // Find all the unique link HREFs that we will control\n\n      dom_selectAll(this.$selector, this.$el) // Get HREF value\n      .map(function (link) {\n        return getAttr(link, 'href');\n      }) // Filter out HREFs that do not match our RegExp\n      .filter(function (href) {\n        return href && HREF_REGEX.test(href || '');\n      }) // Find all elements with ID that match HREF hash\n      .map(function (href) {\n        // Convert HREF into an ID (including # at beginning)\n        var id = href.replace(HREF_REGEX, '$1').trim();\n\n        if (!id) {\n          return null;\n        } // Find the element with the ID specified by id\n\n\n        var el = dom_select(id, scroller);\n\n        if (el && isVisible(el)) {\n          return {\n            offset: parseInt(methodFn(el).top, 10) + offsetBase,\n            target: id\n          };\n        }\n\n        return null;\n      }).filter(Boolean) // Sort them by their offsets (smallest first)\n      .sort(function (a, b) {\n        return a.offset - b.offset;\n      }) // record only unique targets/offsets\n      .reduce(function (memo, item) {\n        if (!memo[item.target]) {\n          _this4.$offsets.push(item.offset);\n\n          _this4.$targets.push(item.target);\n\n          memo[item.target] = true;\n        }\n\n        return memo;\n      }, {}); // Return this for easy chaining\n\n      return this;\n    } // Handle activating/clearing\n\n  }, {\n    key: \"process\",\n    value: function process() {\n      var scrollTop = this.getScrollTop() + this.$config.offset;\n      var scrollHeight = this.getScrollHeight();\n      var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n      if (this.$scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this.$targets[this.$targets.length - 1];\n\n        if (this.$activeTarget !== target) {\n          this.activate(target);\n        }\n\n        return;\n      }\n\n      if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n        this.$activeTarget = null;\n        this.clear();\n        return;\n      }\n\n      for (var i = this.$offsets.length; i--;) {\n        var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (isUndefined(this.$offsets[i + 1]) || scrollTop < this.$offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this.activate(this.$targets[i]);\n        }\n      }\n    }\n  }, {\n    key: \"getScroller\",\n    value: function getScroller() {\n      if (this.$scroller) {\n        return this.$scroller;\n      }\n\n      var scroller = this.$config.element;\n\n      if (!scroller) {\n        return null;\n      } else if (isElement(scroller.$el)) {\n        scroller = scroller.$el;\n      } else if (isString(scroller)) {\n        scroller = dom_select(scroller);\n      }\n\n      if (!scroller) {\n        return null;\n      }\n\n      this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n      return this.$scroller;\n    }\n  }, {\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      var scroller = this.getScroller();\n      return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n  }, {\n    key: \"getOffsetHeight\",\n    value: function getOffsetHeight() {\n      var scroller = this.getScroller();\n      return scroller === window ? window.innerHeight : getBCR(scroller).height;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(target) {\n      var _this5 = this;\n\n      this.$activeTarget = target;\n      this.clear(); // Grab the list of target links (<a href=\"{$target}\">)\n\n      var links = dom_selectAll(this.$selector // Split out the base selectors\n      .split(',') // Map to a selector that matches links with HREF ending in the ID (including '#')\n      .map(function (selector) {\n        return \"\".concat(selector, \"[href$=\\\"\").concat(target, \"\\\"]\");\n      }) // Join back into a single selector string\n      .join(','), this.$el);\n      links.forEach(function (link) {\n        if (hasClass(link, scrollspy_class_ClassName.DROPDOWN_ITEM)) {\n          // This is a dropdown item, so find the .dropdown-toggle and set it's state\n          var dropdown = closest(scrollspy_class_Selector.DROPDOWN, link);\n\n          if (dropdown) {\n            _this5.setActiveState(dom_select(scrollspy_class_Selector.DROPDOWN_TOGGLE, dropdown), true);\n          } // Also set this link's state\n\n\n          _this5.setActiveState(link, true);\n        } else {\n          // Set triggered link as active\n          _this5.setActiveState(link, true);\n\n          if (matches(link.parentElement, scrollspy_class_Selector.NAV_ITEMS)) {\n            // Handle nav-link inside nav-item, and set nav-item active\n            _this5.setActiveState(link.parentElement, true);\n          } // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n\n          var el = link;\n\n          while (el) {\n            el = closest(scrollspy_class_Selector.NAV_LIST_GROUP, el);\n            var sibling = el ? el.previousElementSibling : null;\n\n            if (sibling && matches(sibling, \"\".concat(scrollspy_class_Selector.NAV_LINKS, \", \").concat(scrollspy_class_Selector.LIST_ITEMS))) {\n              _this5.setActiveState(sibling, true);\n            } // Handle special case where nav-link is inside a nav-item\n\n\n            if (sibling && matches(sibling, scrollspy_class_Selector.NAV_ITEMS)) {\n              _this5.setActiveState(dom_select(scrollspy_class_Selector.NAV_LINKS, sibling), true); // Add active state to nav-item as well\n\n\n              _this5.setActiveState(sibling, true);\n            }\n          }\n        }\n      }); // Signal event to via $root, passing ID of activated target and reference to array of links\n\n      if (links && links.length > 0 && this.$root) {\n        this.$root.$emit(ACTIVATE_EVENT, target, links);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this6 = this;\n\n      dom_selectAll(\"\".concat(this.$selector, \", \").concat(scrollspy_class_Selector.NAV_ITEMS), this.$el).filter(function (el) {\n        return hasClass(el, scrollspy_class_ClassName.ACTIVE);\n      }).forEach(function (el) {\n        return _this6.setActiveState(el, false);\n      });\n    }\n  }, {\n    key: \"setActiveState\",\n    value: function setActiveState(el, active) {\n      if (!el) {\n        return;\n      }\n\n      if (active) {\n        addClass(el, scrollspy_class_ClassName.ACTIVE);\n      } else {\n        removeClass(el, scrollspy_class_ClassName.ACTIVE);\n      }\n    }\n  }], [{\n    key: \"Name\",\n    get: function get() {\n      return scrollspy_class_NAME;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }, {\n    key: \"DefaultType\",\n    get: function get() {\n      return DefaultType;\n    }\n  }]);\n\n  return ScrollSpy;\n}();\n\n/* harmony default export */ var scrollspy_class = (scrollspy_class_ScrollSpy);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/scrollspy/scrollspy.js\n\n\n\n // Key we use to store our instance\n\nvar BV_SCROLLSPY = '__BV_ScrollSpy__'; // Build a ScrollSpy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar scrollspy_parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  var config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  keys(bindings.modifiers).forEach(function (mod) {\n    if (/^\\d+$/.test(mod)) {\n      // Offset value\n      config.offset = parseInt(mod, 10);\n    } else if (/^(auto|position|offset)$/.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if (isString(bindings.value)) {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if (isNumber(bindings.value)) {\n    // Value is offset\n    config.offset = Math.round(bindings.value);\n  } else if (object_isObject(bindings.value)) {\n    // Value is config object\n    // Filter the object based on our supported config options\n    keys(bindings.value).filter(function (k) {\n      return Boolean(scrollspy_class.DefaultType[k]);\n    }).forEach(function (k) {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update ScrollSpy on our element\n\n\nvar scrollspy_applyScrollspy = function applyScrollspy(el, bindings, vnode)\n/* istanbul ignore next: not easy to test */\n{\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var config = scrollspy_parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new scrollspy_class(el, config, vnode.context.$root);\n  }\n}; // Remove ScrollSpy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nvar removeScrollspy = function removeScrollspy(el)\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar VBScrollspy = {\n  bind: function bind(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    scrollspy_applyScrollspy(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    scrollspy_applyScrollspy(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      scrollspy_applyScrollspy(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      scrollspy_applyScrollspy(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el)\n  /* istanbul ignore next: not easy to test */\n  {\n    removeScrollspy(el);\n  }\n};\n/* harmony default export */ var scrollspy = (VBScrollspy);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/scrollspy/index.js\n\n\nvar VBScrollspyPlugin =\n/*#__PURE__*/\npluginFactory({\n  directives: {\n    VBScrollspy: VBScrollspy\n  }\n});\n\n/* harmony default export */ var directives_scrollspy = (VBScrollspyPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/toggle/index.js\n\n\nvar VBTogglePlugin =\n/*#__PURE__*/\npluginFactory({\n  directives: {\n    VBToggle: VBToggle\n  }\n});\n\n/* harmony default export */ var directives_toggle = (VBTogglePlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/tooltip/index.js\n\n\nvar VBTooltipPlugin =\n/*#__PURE__*/\npluginFactory({\n  directives: {\n    VBTooltip: VBTooltip\n  }\n});\n\n/* harmony default export */ var directives_tooltip = (VBTooltipPlugin);\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/directives/index.esm.js\n// Index file used for the main builds, which does not include legacy plugin names\n// Once es/ buld is removed, then this file will be renamed to index.js\n\n\n\n\n\n // Main plugin for installing all directive plugins\n\nvar directivesPlugin =\n/*#__PURE__*/\npluginFactory({\n  plugins: {\n    VBModalPlugin: VBModalPlugin,\n    VBPopoverPlugin: VBPopoverPlugin,\n    VBScrollspyPlugin: VBScrollspyPlugin,\n    VBTogglePlugin: VBTogglePlugin,\n    VBTooltipPlugin: VBTooltipPlugin\n  }\n}); // Named exports of all directives (VB<Name>) and Plugins (VB<name>Plugin)\n// See src/compinents/index.esm.js for notes/comment\n// export * from './modal'\n\n\n // export * from './popover'\n\n\n // export * from './scrollspy'\n\n\n // export * from './toggle'\n\n\n // export * from './tooltip'\n\n\n\n// CONCATENATED MODULE: ./node_modules/bootstrap-vue/src/index.js\n/* unused harmony export BootstrapVue */\n/* unused harmony export install */\n/* unused concated harmony import componentsPlugin */\n/* unused concated harmony import BVModalPlugin */\n/* unused concated harmony import BVToastPlugin */\n/* unused concated harmony import AlertPlugin */\n/* unused concated harmony import BAlert */\n/* unused concated harmony import BadgePlugin */\n/* unused concated harmony import BBadge */\n/* unused concated harmony import BreadcrumbPlugin */\n/* unused concated harmony import BBreadcrumb */\n/* unused concated harmony import BBreadcrumbItem */\n/* unused concated harmony import ButtonPlugin */\n/* unused concated harmony import BButton */\n/* unused concated harmony import BButtonClose */\n/* unused concated harmony import ButtonGroupPlugin */\n/* unused concated harmony import BButtonGroup */\n/* unused concated harmony import ButtonToolbarPlugin */\n/* unused concated harmony import BButtonToolbar */\n/* unused concated harmony import CardPlugin */\n/* unused concated harmony import BCard */\n/* unused concated harmony import BCardBody */\n/* unused concated harmony import BCardFooter */\n/* unused concated harmony import BCardGroup */\n/* unused concated harmony import BCardHeader */\n/* unused concated harmony import BCardImg */\n/* unused concated harmony import BCardImgLazy */\n/* unused concated harmony import BCardSubTitle */\n/* unused concated harmony import BCardText */\n/* unused concated harmony import BCardTitle */\n/* unused concated harmony import CarouselPlugin */\n/* unused concated harmony import BCarousel */\n/* unused concated harmony import BCarouselSlide */\n/* unused concated harmony import CollapsePlugin */\n/* unused concated harmony import BCollapse */\n/* unused concated harmony import DropdownPlugin */\n/* unused concated harmony import BDropdown */\n/* unused concated harmony import BDropdownItem */\n/* unused concated harmony import BDropdownItemButton */\n/* unused concated harmony import BDropdownDivider */\n/* unused concated harmony import BDropdownForm */\n/* unused concated harmony import BDropdownGroup */\n/* unused concated harmony import BDropdownHeader */\n/* unused concated harmony import BDropdownText */\n/* unused concated harmony import EmbedPlugin */\n/* unused concated harmony import BEmbed */\n/* unused concated harmony import FormPlugin */\n/* unused concated harmony import BForm */\n/* unused concated harmony import BFormDatalist */\n/* unused concated harmony import BFormText */\n/* unused concated harmony import BFormInvalidFeedback */\n/* unused concated harmony import BFormValidFeedback */\n/* unused concated harmony import FormCheckboxPlugin */\n/* unused concated harmony import BFormCheckbox */\n/* unused concated harmony import BFormCheckboxGroup */\n/* unused concated harmony import FormFilePlugin */\n/* unused concated harmony import BFormFile */\n/* unused concated harmony import FormGroupPlugin */\n/* unused concated harmony import BFormGroup */\n/* unused concated harmony import FormInputPlugin */\n/* unused concated harmony import BFormInput */\n/* unused concated harmony import FormRadioPlugin */\n/* unused concated harmony import BFormRadio */\n/* unused concated harmony import BFormRadioGroup */\n/* unused concated harmony import FormSelectPlugin */\n/* unused concated harmony import BFormSelect */\n/* unused concated harmony import FormTextareaPlugin */\n/* unused concated harmony import BFormTextarea */\n/* unused concated harmony import ImagePlugin */\n/* unused concated harmony import BImg */\n/* unused concated harmony import BImgLazy */\n/* unused concated harmony import InputGroupPlugin */\n/* unused concated harmony import BInputGroup */\n/* unused concated harmony import BInputGroupAddon */\n/* unused concated harmony import BInputGroupAppend */\n/* unused concated harmony import BInputGroupPrepend */\n/* unused concated harmony import BInputGroupText */\n/* unused concated harmony import JumbotronPlugin */\n/* unused concated harmony import BJumbotron */\n/* unused concated harmony import LayoutPlugin */\n/* unused concated harmony import BContainer */\n/* unused concated harmony import BRow */\n/* unused concated harmony import BCol */\n/* unused concated harmony import BFormRow */\n/* unused concated harmony import LinkPlugin */\n/* unused concated harmony import BLink */\n/* unused concated harmony import ListGroupPlugin */\n/* unused concated harmony import BListGroup */\n/* unused concated harmony import BListGroupItem */\n/* unused concated harmony import MediaPlugin */\n/* unused concated harmony import BMedia */\n/* unused concated harmony import BMediaAside */\n/* unused concated harmony import BMediaBody */\n/* unused concated harmony import ModalPlugin */\n/* unused concated harmony import BModal */\n/* unused concated harmony import NavPlugin */\n/* unused concated harmony import BNav */\n/* unused concated harmony import BNavForm */\n/* unused concated harmony import BNavItem */\n/* unused concated harmony import BNavItemDropdown */\n/* unused concated harmony import BNavText */\n/* unused concated harmony import NavbarPlugin */\n/* unused concated harmony import BNavbar */\n/* unused concated harmony import BNavbarBrand */\n/* unused concated harmony import BNavbarNav */\n/* unused concated harmony import BNavbarToggle */\n/* unused concated harmony import PaginationPlugin */\n/* unused concated harmony import BPagination */\n/* unused concated harmony import PaginationNavPlugin */\n/* unused concated harmony import BPaginationNav */\n/* unused concated harmony import PopoverPlugin */\n/* unused concated harmony import BPopover */\n/* unused concated harmony import ProgressPlugin */\n/* unused concated harmony import BProgress */\n/* unused concated harmony import BProgressBar */\n/* unused concated harmony import SpinnerPlugin */\n/* unused concated harmony import BSpinner */\n/* unused concated harmony import TablePlugin */\n/* unused concated harmony import BTable */\n/* unused concated harmony import BTableLite */\n/* unused concated harmony import TabsPlugin */\n/* unused concated harmony import BTabs */\n/* unused concated harmony import BTab */\n/* unused concated harmony import ToastPlugin */\n/* unused concated harmony import BToast */\n/* unused concated harmony import BToaster */\n/* unused concated harmony import TooltipPlugin */\n/* unused concated harmony import BTooltip */\n/* unused concated harmony import directivesPlugin */\n/* unused concated harmony import VBModalPlugin */\n/* unused concated harmony import VBModal */\n/* unused concated harmony import VBPopoverPlugin */\n/* unused concated harmony import VBPopover */\n/* unused concated harmony import VBScrollspyPlugin */\n/* unused concated harmony import VBScrollspy */\n/* unused concated harmony import VBTogglePlugin */\n/* unused concated harmony import VBToggle */\n/* unused concated harmony import VBTooltipPlugin */\n/* unused concated harmony import VBTooltip */\n/* unused concated harmony import setConfig */\n\n\n\n\n // Named exports of all components and component group plugins\n\n // Named exports of all directives and directive group plugins\n\n // BootstrapVue installer\n\nvar src_install =\n/*#__PURE__*/\nplugins_installFactory({\n  plugins: {\n    componentsPlugin: componentsPlugin,\n    directivesPlugin: directivesPlugin\n  }\n}); // BootstrapVue plugin\n\nvar BootstrapVue =\n/*#__PURE__*/\n{\n  install: src_install,\n  // To be deprecated. not documented\n  setConfig: config_set_setConfig // Named exports for BvConfigPlugin and BootstrapVue\n\n};\n // Default export is the BootstrapVue plugin\n\n/* harmony default export */ var bootstrap_vue_src = __webpack_exports__[\"a\"] = (BootstrapVue);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///130\n")},167:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(168);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(52).default\nvar update = add(\"29755fa6\", content, true, {\"sourceMap\":false});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3M/ZWNiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUE0SDtBQUNsSiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLEVBQW1EO0FBQ3JFLDZDQUE2QyxrQkFBa0IiLCJmaWxlIjoiMTY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNS1vbmVPZi0xLTEhLi4vLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtb25lT2YtMS0yIS4vYm9vdHN0cmFwLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjI5NzU1ZmE2XCIsIGNvbnRlbnQsIHRydWUsIHtcInNvdXJjZU1hcFwiOmZhbHNlfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///167\n")},168:function(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(51)(false);\n// Module\nexports.push([module.i, \"/*!\\n * Bootstrap v4.3.1 (https://getbootstrap.com/)\\n * Copyright 2011-2019 The Bootstrap Authors\\n * Copyright 2011-2019 Twitter, Inc.\\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n */:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#007bff;--secondary:#6c757d;--success:#28a745;--info:#17a2b8;--warning:#ffc107;--danger:#dc3545;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,\\\"Helvetica Neue\\\",Arial,\\\"Noto Sans\\\",sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\",\\\"Noto Color Emoji\\\";--font-family-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\\\"Liberation Mono\\\",\\\"Courier New\\\",monospace}*,:after,:before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\\\"-1\\\"]:focus{outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{font-style:normal;line-height:inherit}address,dl,ol,ul{margin-bottom:1rem}dl,ol,ul{margin-top:0}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([tabindex]),a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto}figure{margin:0 0 1rem}img{border-style:none}img,svg{vertical-align:middle}svg{overflow:hidden}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}select{word-wrap:normal}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-weight:500;line-height:1.2}.h1,h1{font-size:2.5rem}.h2,h2{font-size:2rem}.h3,h3{font-size:1.75rem}.h4,h4{font-size:1.5rem}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:6rem}.display-1,.display-2{font-weight:300;line-height:1.2}.display-2{font-size:5.5rem}.display-3{font-size:4.5rem}.display-3,.display-4{font-weight:300;line-height:1.2}.display-4{font-size:3.5rem}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-inline,.list-unstyled{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#6c757d}.blockquote-footer:before{content:\\\"\\\\2014\\\\00A0\\\"}.img-fluid,.img-thumbnail{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#6c757d}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container{max-width:540px}}@media (min-width:768px){.container{max-width:720px}}@media (min-width:992px){.container{max-width:960px}}@media (min-width:1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-12,.col-auto,.col-lg,.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-auto,.col-md,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-md-auto,.col-sm,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-auto{position:relative;width:100%;padding-right:15px;padding-left:15px}.col{flex-basis:0;flex-grow:1;max-width:100%}.col-auto{flex:0 0 auto;width:auto;max-width:100%}.col-1{flex:0 0 8.333333%;max-width:8.333333%}.col-2{flex:0 0 16.666667%;max-width:16.666667%}.col-3{flex:0 0 25%;max-width:25%}.col-4{flex:0 0 33.333333%;max-width:33.333333%}.col-5{flex:0 0 41.666667%;max-width:41.666667%}.col-6{flex:0 0 50%;max-width:50%}.col-7{flex:0 0 58.333333%;max-width:58.333333%}.col-8{flex:0 0 66.666667%;max-width:66.666667%}.col-9{flex:0 0 75%;max-width:75%}.col-10{flex:0 0 83.333333%;max-width:83.333333%}.col-11{flex:0 0 91.666667%;max-width:91.666667%}.col-12{flex:0 0 100%;max-width:100%}.order-first{order:-1}.order-last{order:13}.order-0{order:0}.order-1{order:1}.order-2{order:2}.order-3{order:3}.order-4{order:4}.order-5{order:5}.order-6{order:6}.order-7{order:7}.order-8{order:8}.order-9{order:9}.order-10{order:10}.order-11{order:11}.order-12{order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{flex-basis:0;flex-grow:1;max-width:100%}.col-sm-auto{flex:0 0 auto;width:auto;max-width:100%}.col-sm-1{flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{flex:0 0 25%;max-width:25%}.col-sm-4{flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{flex:0 0 50%;max-width:50%}.col-sm-7{flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{flex:0 0 75%;max-width:75%}.col-sm-10{flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{flex:0 0 100%;max-width:100%}.order-sm-first{order:-1}.order-sm-last{order:13}.order-sm-0{order:0}.order-sm-1{order:1}.order-sm-2{order:2}.order-sm-3{order:3}.order-sm-4{order:4}.order-sm-5{order:5}.order-sm-6{order:6}.order-sm-7{order:7}.order-sm-8{order:8}.order-sm-9{order:9}.order-sm-10{order:10}.order-sm-11{order:11}.order-sm-12{order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{flex-basis:0;flex-grow:1;max-width:100%}.col-md-auto{flex:0 0 auto;width:auto;max-width:100%}.col-md-1{flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{flex:0 0 25%;max-width:25%}.col-md-4{flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{flex:0 0 50%;max-width:50%}.col-md-7{flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{flex:0 0 75%;max-width:75%}.col-md-10{flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{flex:0 0 100%;max-width:100%}.order-md-first{order:-1}.order-md-last{order:13}.order-md-0{order:0}.order-md-1{order:1}.order-md-2{order:2}.order-md-3{order:3}.order-md-4{order:4}.order-md-5{order:5}.order-md-6{order:6}.order-md-7{order:7}.order-md-8{order:8}.order-md-9{order:9}.order-md-10{order:10}.order-md-11{order:11}.order-md-12{order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{flex-basis:0;flex-grow:1;max-width:100%}.col-lg-auto{flex:0 0 auto;width:auto;max-width:100%}.col-lg-1{flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{flex:0 0 25%;max-width:25%}.col-lg-4{flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{flex:0 0 50%;max-width:50%}.col-lg-7{flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{flex:0 0 75%;max-width:75%}.col-lg-10{flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{flex:0 0 100%;max-width:100%}.order-lg-first{order:-1}.order-lg-last{order:13}.order-lg-0{order:0}.order-lg-1{order:1}.order-lg-2{order:2}.order-lg-3{order:3}.order-lg-4{order:4}.order-lg-5{order:5}.order-lg-6{order:6}.order-lg-7{order:7}.order-lg-8{order:8}.order-lg-9{order:9}.order-lg-10{order:10}.order-lg-11{order:11}.order-lg-12{order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{flex-basis:0;flex-grow:1;max-width:100%}.col-xl-auto{flex:0 0 auto;width:auto;max-width:100%}.col-xl-1{flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{flex:0 0 25%;max-width:25%}.col-xl-4{flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{flex:0 0 50%;max-width:50%}.col-xl-7{flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{flex:0 0 75%;max-width:75%}.col-xl-10{flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{flex:0 0 100%;max-width:100%}.order-xl-first{order:-1}.order-xl-last{order:13}.order-xl-0{order:0}.order-xl-1{order:1}.order-xl-2{order:2}.order-xl-3{order:3}.order-xl-4{order:4}.order-xl-5{order:5}.order-xl-6{order:6}.order-xl-7{order:7}.order-xl-8{order:8}.order-xl-9{order:9}.order-xl-10{order:10}.order-xl-11{order:11}.order-xl-12{order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.333333%}.offset-xl-2{margin-left:16.666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.333333%}.offset-xl-5{margin-left:41.666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.333333%}.offset-xl-8{margin-left:66.666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.333333%}.offset-xl-11{margin-left:91.666667%}}.table{width:100%;margin-bottom:1rem;color:#212529}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table-sm td,.table-sm th{padding:.3rem}.table-bordered,.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-borderless tbody+tbody,.table-borderless td,.table-borderless th,.table-borderless thead th{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{color:#212529;background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#b8daff}.table-primary tbody+tbody,.table-primary td,.table-primary th,.table-primary thead th{border-color:#7abaff}.table-hover .table-primary:hover,.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#9fcdff}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#d6d8db}.table-secondary tbody+tbody,.table-secondary td,.table-secondary th,.table-secondary thead th{border-color:#b3b7bb}.table-hover .table-secondary:hover,.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#c8cbcf}.table-success,.table-success>td,.table-success>th{background-color:#c3e6cb}.table-success tbody+tbody,.table-success td,.table-success th,.table-success thead th{border-color:#8fd19e}.table-hover .table-success:hover,.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b1dfbb}.table-info,.table-info>td,.table-info>th{background-color:#bee5eb}.table-info tbody+tbody,.table-info td,.table-info th,.table-info thead th{border-color:#86cfda}.table-hover .table-info:hover,.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#abdde5}.table-warning,.table-warning>td,.table-warning>th{background-color:#ffeeba}.table-warning tbody+tbody,.table-warning td,.table-warning th,.table-warning thead th{border-color:#ffdf7e}.table-hover .table-warning:hover,.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#ffe8a1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f5c6cb}.table-danger tbody+tbody,.table-danger td,.table-danger th,.table-danger thead th{border-color:#ed969e}.table-hover .table-danger:hover,.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f1b0b7}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-light tbody+tbody,.table-light td,.table-light th,.table-light thead th{border-color:#fbfcfc}.table-hover .table-light:hover,.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#95999c}.table-hover .table-dark:hover,.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th,.table-hover .table-active:hover,.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#fff;background-color:#343a40;border-color:#454d55}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#fff;background-color:#343a40}.table-dark td,.table-dark th,.table-dark thead th{border-color:#454d55}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:hsla(0,0%,100%,.05)}.table-dark.table-hover tbody tr:hover{color:#fff;background-color:hsla(0,0%,100%,.075)}@media (max-width:575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.form-control::-webkit-input-placeholder{color:#6c757d;opacity:1}.form-control::-moz-placeholder{color:#6c757d;opacity:1}.form-control:-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:1.25rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:.875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:.375rem;padding-bottom:.375rem;margin-bottom:0;line-height:1.5;color:#212529;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.5em + .5rem + 2px);padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.form-control-lg{height:calc(1.5em + 1rem + 2px);padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}select.form-control[multiple],select.form-control[size],textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:flex;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label{color:#6c757d}.form-check-label{margin-bottom:0}.form-check-inline{display:inline-flex;align-items:center;padding-left:0;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#28a745}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(40,167,69,.9);border-radius:.25rem}.form-control.is-valid,.was-validated .form-control:valid{border-color:#28a745;padding-right:calc(1.5em + .75rem);background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E\\\");background-repeat:no-repeat;background-position:100% calc(.375em + .1875rem);background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.form-control.is-valid~.valid-feedback,.form-control.is-valid~.valid-tooltip,.was-validated .form-control:valid~.valid-feedback,.was-validated .form-control:valid~.valid-tooltip{display:block}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-valid,.was-validated .custom-select:valid{border-color:#28a745;padding-right:calc((3em + 2.25rem)/4 + 1.75rem);background:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\\\") no-repeat right .75rem center/8px 10px,url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E\\\") #fff no-repeat center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem)}.custom-select.is-valid:focus,.was-validated .custom-select:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-select.is-valid~.valid-feedback,.custom-select.is-valid~.valid-tooltip,.form-control-file.is-valid~.valid-feedback,.form-control-file.is-valid~.valid-tooltip,.was-validated .custom-select:valid~.valid-feedback,.was-validated .custom-select:valid~.valid-tooltip,.was-validated .form-control-file:valid~.valid-feedback,.was-validated .form-control-file:valid~.valid-tooltip{display:block}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#28a745}.form-check-input.is-valid~.valid-feedback,.form-check-input.is-valid~.valid-tooltip,.was-validated .form-check-input:valid~.valid-feedback,.was-validated .form-check-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label:before,.was-validated .custom-control-input:valid~.custom-control-label:before{border-color:#28a745}.custom-control-input.is-valid~.valid-feedback,.custom-control-input.is-valid~.valid-tooltip,.was-validated .custom-control-input:valid~.valid-feedback,.was-validated .custom-control-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid:checked~.custom-control-label:before,.was-validated .custom-control-input:valid:checked~.custom-control-label:before{border-color:#34ce57;background-color:#34ce57}.custom-control-input.is-valid:focus~.custom-control-label:before,.was-validated .custom-control-input:valid:focus~.custom-control-label:before{box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-control-input.is-valid:focus:not(:checked)~.custom-control-label:before,.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-control-input:valid:focus:not(:checked)~.custom-control-label:before,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#28a745}.custom-file-input.is-valid~.valid-feedback,.custom-file-input.is-valid~.valid-tooltip,.was-validated .custom-file-input:valid~.valid-feedback,.was-validated .custom-file-input:valid~.valid-tooltip{display:block}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(220,53,69,.9);border-radius:.25rem}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:#dc3545;padding-right:calc(1.5em + .75rem);background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23dc3545' viewBox='-2 -2 7 7'%3E%3Cpath stroke='%23dc3545' d='M0 0l3 3m0-3L0 3'/%3E%3Ccircle r='.5'/%3E%3Ccircle cx='3' r='.5'/%3E%3Ccircle cy='3' r='.5'/%3E%3Ccircle cx='3' cy='3' r='.5'/%3E%3C/svg%3E\\\");background-repeat:no-repeat;background-position:100% calc(.375em + .1875rem);background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-invalid,.was-validated .custom-select:invalid{border-color:#dc3545;padding-right:calc((3em + 2.25rem)/4 + 1.75rem);background:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\\\") no-repeat right .75rem center/8px 10px,url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23dc3545' viewBox='-2 -2 7 7'%3E%3Cpath stroke='%23dc3545' d='M0 0l3 3m0-3L0 3'/%3E%3Ccircle r='.5'/%3E%3Ccircle cx='3' r='.5'/%3E%3Ccircle cy='3' r='.5'/%3E%3Ccircle cx='3' cy='3' r='.5'/%3E%3C/svg%3E\\\") #fff no-repeat center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem)}.custom-select.is-invalid:focus,.was-validated .custom-select:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.form-control-file.is-invalid~.invalid-feedback,.form-control-file.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip,.was-validated .form-control-file:invalid~.invalid-feedback,.was-validated .form-control-file:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#dc3545}.form-check-input.is-invalid~.invalid-feedback,.form-check-input.is-invalid~.invalid-tooltip,.was-validated .form-check-input:invalid~.invalid-feedback,.was-validated .form-check-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label:before,.was-validated .custom-control-input:invalid~.custom-control-label:before{border-color:#dc3545}.custom-control-input.is-invalid~.invalid-feedback,.custom-control-input.is-invalid~.invalid-tooltip,.was-validated .custom-control-input:invalid~.invalid-feedback,.was-validated .custom-control-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid:checked~.custom-control-label:before,.was-validated .custom-control-input:invalid:checked~.custom-control-label:before{border-color:#e4606d;background-color:#e4606d}.custom-control-input.is-invalid:focus~.custom-control-label:before,.was-validated .custom-control-input:invalid:focus~.custom-control-label:before{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-control-input.is-invalid:focus:not(:checked)~.custom-control-label:before,.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-control-input:invalid:focus:not(:checked)~.custom-control-label:before,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#dc3545}.custom-file-input.is-invalid~.invalid-feedback,.custom-file-input.is-invalid~.invalid-tooltip,.was-validated .custom-file-input:invalid~.invalid-feedback,.was-validated .custom-file-input:invalid~.invalid-tooltip{display:block}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-inline{display:flex;flex-flow:row wrap;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{justify-content:center}.form-inline .form-group,.form-inline label{display:flex;align-items:center;margin-bottom:0}.form-inline .form-group{flex:0 0 auto;flex-flow:row wrap}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .custom-select,.form-inline .input-group{width:auto}.form-inline .form-check{display:flex;align-items:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;flex-shrink:0;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{align-items:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;color:#212529;text-align:center;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:#212529;text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.btn.disabled,.btn:disabled{opacity:.65}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}.btn-primary.focus,.btn-primary:focus{box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:not(:disabled):not(.disabled).active,.btn-primary:not(:disabled):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0062cc;border-color:#005cbf}.btn-primary:not(:disabled):not(.disabled).active:focus,.btn-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5a6268;border-color:#545b62}.btn-secondary.focus,.btn-secondary:focus{box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:not(:disabled):not(.disabled).active,.btn-secondary:not(:disabled):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#545b62;border-color:#4e555b}.btn-secondary:not(:disabled):not(.disabled).active:focus,.btn-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-success{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:hover{color:#fff;background-color:#218838;border-color:#1e7e34}.btn-success.focus,.btn-success:focus{box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:not(:disabled):not(.disabled).active,.btn-success:not(:disabled):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#1e7e34;border-color:#1c7430}.btn-success:not(:disabled):not(.disabled).active:focus,.btn-success:not(:disabled):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info.focus,.btn-info:focus{box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:not(:disabled):not(.disabled).active,.btn-info:not(:disabled):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not(:disabled):not(.disabled).active:focus,.btn-info:not(:disabled):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-warning{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#212529;background-color:#e0a800;border-color:#d39e00}.btn-warning.focus,.btn-warning:focus{box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-warning.disabled,.btn-warning:disabled{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:not(:disabled):not(.disabled).active,.btn-warning:not(:disabled):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#d39e00;border-color:#c69500}.btn-warning:not(:disabled):not(.disabled).active:focus,.btn-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#c82333;border-color:#bd2130}.btn-danger.focus,.btn-danger:focus{box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:not(:disabled):not(.disabled).active,.btn-danger:not(:disabled):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#bd2130;border-color:#b21f2d}.btn-danger:not(:disabled):not(.disabled).active:focus,.btn-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled).active,.btn-light:not(:disabled):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled).active:focus,.btn-light:not(:disabled):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled).active,.btn-dark:not(:disabled):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled).active:focus,.btn-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-outline-primary{color:#007bff;border-color:#007bff}.btn-outline-primary:hover{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#007bff;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled).active,.btn-outline-primary:not(:disabled):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-secondary{color:#6c757d;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#6c757d;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled).active,.btn-outline-secondary:not(:disabled):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-success{color:#28a745;border-color:#28a745}.btn-outline-success:hover{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#28a745;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled).active,.btn-outline-success:not(:disabled):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success:not(:disabled):not(.disabled).active:focus,.btn-outline-success:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-info{color:#17a2b8;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled).active,.btn-outline-info:not(:disabled):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:not(:disabled):not(.disabled).active:focus,.btn-outline-info:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-warning{color:#ffc107;border-color:#ffc107}.btn-outline-warning:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffc107;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled).active,.btn-outline-warning:not(:disabled):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-danger{color:#dc3545;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#dc3545;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled).active,.btn-outline-danger:not(:disabled):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-light{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled).active,.btn-outline-light:not(:disabled):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled).active:focus,.btn-outline-light:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled).active,.btn-outline-dark:not(:disabled):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#007bff;text-decoration:none}.btn-link:hover{color:#0056b3;text-decoration:underline}.btn-link.focus,.btn-link:focus{text-decoration:underline;box-shadow:none}.btn-link.disabled,.btn-link:disabled{color:#6c757d;pointer-events:none}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.dropdown,.dropleft,.dropright,.dropup{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";display:none}.dropleft .dropdown-toggle:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=top]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;flex:1 1 auto}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn-group:not(:first-child),.btn-group>.btn:not(:first-child){margin-left:-1px}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split:after,.dropright .dropdown-toggle-split:after,.dropup .dropdown-toggle-split:after{margin-left:0}.dropleft .dropdown-toggle-split:before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:-1px}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio],.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.custom-file,.input-group>.custom-select,.input-group>.form-control,.input-group>.form-control-plaintext{position:relative;flex:1 1 auto;width:1%;margin-bottom:0}.input-group>.custom-file+.custom-file,.input-group>.custom-file+.custom-select,.input-group>.custom-file+.form-control,.input-group>.custom-select+.custom-file,.input-group>.custom-select+.custom-select,.input-group>.custom-select+.form-control,.input-group>.form-control+.custom-file,.input-group>.form-control+.custom-select,.input-group>.form-control+.form-control,.input-group>.form-control-plaintext+.custom-file,.input-group>.form-control-plaintext+.custom-select,.input-group>.form-control-plaintext+.form-control{margin-left:-1px}.input-group>.custom-file .custom-file-input:focus~.custom-file-label,.input-group>.custom-select:focus,.input-group>.form-control:focus{z-index:3}.input-group>.custom-file .custom-file-input:focus{z-index:4}.input-group>.custom-select:not(:last-child),.input-group>.form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-select:not(:first-child),.input-group>.form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-file{display:flex;align-items:center}.input-group>.custom-file:not(:last-child) .custom-file-label,.input-group>.custom-file:not(:last-child) .custom-file-label:after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-append,.input-group-prepend{display:flex}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn:focus,.input-group-prepend .btn:focus{z-index:3}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;margin-bottom:0;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group-lg>.custom-select,.input-group-lg>.form-control:not(textarea){height:calc(1.5em + 1rem + 2px)}.input-group-lg>.custom-select,.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-sm>.custom-select,.input-group-sm>.form-control:not(textarea){height:calc(1.5em + .5rem + 2px)}.input-group-sm>.custom-select,.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-lg>.custom-select,.input-group-sm>.custom-select{padding-right:1.75rem}.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-append:not(:last-child)>.btn,.input-group>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.5rem;padding-left:1.5rem}.custom-control-inline{display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-label:before{color:#fff;border-color:#007bff;background-color:#007bff}.custom-control-input:focus~.custom-control-label:before{box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-control-input:focus:not(:checked)~.custom-control-label:before{border-color:#80bdff}.custom-control-input:not(:disabled):active~.custom-control-label:before{color:#fff;background-color:#b3d7ff;border-color:#b3d7ff}.custom-control-input:disabled~.custom-control-label{color:#6c757d}.custom-control-input:disabled~.custom-control-label:before{background-color:#e9ecef}.custom-control-label{position:relative;margin-bottom:0;vertical-align:top}.custom-control-label:before{pointer-events:none;background-color:#fff;border:1px solid #adb5bd}.custom-control-label:after,.custom-control-label:before{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:\\\"\\\"}.custom-control-label:after{background:no-repeat 50%/50% 50%}.custom-checkbox .custom-control-label:before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label:after{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/%3E%3C/svg%3E\\\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:before{border-color:#007bff;background-color:#007bff}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:after{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E\\\")}.custom-checkbox .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-checkbox .custom-control-input:disabled:indeterminate~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-radio .custom-control-label:before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label:after{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E\\\")}.custom-radio .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-switch{padding-left:2.25rem}.custom-switch .custom-control-label:before{left:-2.25rem;width:1.75rem;pointer-events:all;border-radius:.5rem}.custom-switch .custom-control-label:after{top:calc(.25rem + 2px);left:calc(-2.25rem + 2px);width:calc(1rem - 4px);height:calc(1rem - 4px);background-color:#adb5bd;border-radius:.5rem;transition:transform .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-switch .custom-control-label:after{transition:none}}.custom-switch .custom-control-input:checked~.custom-control-label:after{background-color:#fff;transform:translateX(.75rem)}.custom-switch .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-select{display:inline-block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem 1.75rem .375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;vertical-align:middle;background:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\\\") no-repeat right .75rem center/8px 10px;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size=\\\"1\\\"]){height:auto;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#6c757d;background-color:#e9ecef}.custom-select::-ms-expand{display:none}.custom-select-sm{height:calc(1.5em + .5rem + 2px);padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem}.custom-select-lg{height:calc(1.5em + 1rem + 2px);padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem}.custom-file{display:inline-block;margin-bottom:0}.custom-file,.custom-file-input{position:relative;width:100%;height:calc(1.5em + .75rem + 2px)}.custom-file-input{z-index:2;margin:0;opacity:0}.custom-file-input:focus~.custom-file-label{border-color:#80bdff;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-file-input:disabled~.custom-file-label{background-color:#e9ecef}.custom-file-input:lang(en)~.custom-file-label:after{content:\\\"Browse\\\"}.custom-file-input~.custom-file-label[data-browse]:after{content:attr(data-browse)}.custom-file-label{left:0;z-index:1;height:calc(1.5em + .75rem + 2px);font-weight:400;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label,.custom-file-label:after{position:absolute;top:0;right:0;padding:.375rem .75rem;line-height:1.5;color:#495057}.custom-file-label:after{bottom:0;z-index:3;display:block;height:calc(1.5em + .75rem);content:\\\"Browse\\\";background-color:#e9ecef;border-left:inherit;border-radius:0 .25rem .25rem 0}.custom-range{width:100%;height:1.4rem;padding:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:none}.custom-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-webkit-slider-thumb{transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#b3d7ff}.custom-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-moz-range-thumb{transition:none}}.custom-range::-moz-range-thumb:active{background-color:#b3d7ff}.custom-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:.2rem;margin-left:.2rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-ms-thumb{transition:none}}.custom-range::-ms-thumb:active{background-color:#b3d7ff}.custom-range::-ms-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:.5rem}.custom-range::-ms-fill-lower,.custom-range::-ms-fill-upper{background-color:#dee2e6;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px}.custom-range:disabled::-webkit-slider-thumb{background-color:#adb5bd}.custom-range:disabled::-webkit-slider-runnable-track{cursor:default}.custom-range:disabled::-moz-range-thumb{background-color:#adb5bd}.custom-range:disabled::-moz-range-track{cursor:default}.custom-range:disabled::-ms-thumb{background-color:#adb5bd}.custom-control-label:before,.custom-file-label,.custom-select{transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-control-label:before,.custom-file-label,.custom-select{transition:none}}.nav{display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#6c757d;pointer-events:none;cursor:default}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#007bff}.nav-fill .nav-item{flex:1 1 auto;text-align:center}.nav-justified .nav-item{flex-basis:0;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;padding:.5rem 1rem}.navbar,.navbar>.container,.navbar>.container-fluid{display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.3125rem;padding-bottom:.3125rem;margin-right:1rem;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\\\"\\\";background:no-repeat 50%;background-size:100% 100%}@media (max-width:575.98px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width:767.98px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width:991.98px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width:1199.98px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{flex-flow:row nowrap;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand,.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\\\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a,.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand,.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:hsla(0,0%,100%,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:hsla(0,0%,100%,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:hsla(0,0%,100%,.5);border-color:hsla(0,0%,100%,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\\\")}.navbar-dark .navbar-text{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-text a,.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:flex;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-body{flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem}.card-subtitle,.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-bottom:-.75rem;border-bottom:0}.card-header-pills,.card-header-tabs{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck{display:flex;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:flex;flex:1 0 0%;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:flex;flex-direction:column}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-moz-column-count:3;column-count:3;-webkit-column-gap:1.25rem;-moz-column-gap:1.25rem;grid-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion>.card{overflow:hidden}.accordion>.card:not(:first-of-type) .card-header:first-child{border-radius:0}.accordion>.card:not(:first-of-type):not(:last-of-type){border-bottom:0;border-radius:0}.accordion>.card:first-of-type{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion>.card:last-of-type{border-top-left-radius:0;border-top-right-radius:0}.accordion>.card .card-header{margin-bottom:-1px}.breadcrumb{display:flex;flex-wrap:wrap;padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:.5rem}.breadcrumb-item+.breadcrumb-item:before{display:inline-block;padding-right:.5rem;color:#6c757d;content:\\\"/\\\"}.breadcrumb-item+.breadcrumb-item:hover:before{text-decoration:underline;text-decoration:none}.breadcrumb-item.active{color:#6c757d}.pagination{display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#007bff;background-color:#fff;border:1px solid #dee2e6}.page-link:hover{z-index:2;color:#0056b3;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:2;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#007bff;border-color:#007bff}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.badge{transition:none}}a.badge:focus,a.badge:hover{text-decoration:none}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#007bff}a.badge-primary:focus,a.badge-primary:hover{color:#fff;background-color:#0062cc}a.badge-primary.focus,a.badge-primary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.badge-secondary{color:#fff;background-color:#6c757d}a.badge-secondary:focus,a.badge-secondary:hover{color:#fff;background-color:#545b62}a.badge-secondary.focus,a.badge-secondary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.badge-success{color:#fff;background-color:#28a745}a.badge-success:focus,a.badge-success:hover{color:#fff;background-color:#1e7e34}a.badge-success.focus,a.badge-success:focus{outline:0;box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.badge-info{color:#fff;background-color:#17a2b8}a.badge-info:focus,a.badge-info:hover{color:#fff;background-color:#117a8b}a.badge-info.focus,a.badge-info:focus{outline:0;box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.badge-warning{color:#212529;background-color:#ffc107}a.badge-warning:focus,a.badge-warning:hover{color:#212529;background-color:#d39e00}a.badge-warning.focus,a.badge-warning:focus{outline:0;box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.badge-danger{color:#fff;background-color:#dc3545}a.badge-danger:focus,a.badge-danger:hover{color:#fff;background-color:#bd2130}a.badge-danger.focus,a.badge-danger:focus{outline:0;box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.badge-light{color:#212529;background-color:#f8f9fa}a.badge-light:focus,a.badge-light:hover{color:#212529;background-color:#dae0e5}a.badge-light.focus,a.badge-light:focus{outline:0;box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.badge-dark{color:#fff;background-color:#343a40}a.badge-dark:focus,a.badge-dark:hover{color:#fff;background-color:#1d2124}a.badge-dark.focus,a.badge-dark:focus{outline:0;box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:4rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}.alert-primary hr{border-top-color:#9fcdff}.alert-primary .alert-link{color:#002752}.alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}.alert-secondary hr{border-top-color:#c8cbcf}.alert-secondary .alert-link{color:#202326}.alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}.alert-success hr{border-top-color:#b1dfbb}.alert-success .alert-link{color:#0b2e13}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}.alert-warning hr{border-top-color:#ffe8a1}.alert-warning .alert-link{color:#533f03}.alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}.alert-danger hr{border-top-color:#f1b0b7}.alert-danger .alert-link{color:#491217}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{0%{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{0%{background-position:1rem 0}to{background-position:0 0}}.progress{display:flex;height:1rem;overflow:hidden;font-size:.75rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:flex;flex-direction:column;justify-content:center;color:#fff;text-align:center;white-space:nowrap;background-color:#007bff;transition:width .6s ease}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}@media (prefers-reduced-motion:reduce){.progress-bar-animated{-webkit-animation:none;animation:none}}.media{display:flex;align-items:flex-start}.media-body{flex:1}.list-group{display:flex;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;pointer-events:none;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#007bff;border-color:#007bff}.list-group-horizontal{flex-direction:row}.list-group-horizontal .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}@media (min-width:576px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-sm .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-sm .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:768px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-md .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-md .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:992px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-lg .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-lg .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-xl .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-xl .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush .list-group-item:last-child{margin-bottom:-1px}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{margin-bottom:0;border-bottom:0}.list-group-item-primary{color:#004085;background-color:#b8daff}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{color:#004085;background-color:#9fcdff}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#004085;border-color:#004085}.list-group-item-secondary{color:#383d41;background-color:#d6d8db}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{color:#383d41;background-color:#c8cbcf}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#383d41;border-color:#383d41}.list-group-item-success{color:#155724;background-color:#c3e6cb}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{color:#155724;background-color:#b1dfbb}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#155724;border-color:#155724}.list-group-item-info{color:#0c5460;background-color:#bee5eb}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{color:#0c5460;background-color:#abdde5}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#856404;background-color:#ffeeba}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{color:#856404;background-color:#ffe8a1}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#856404;border-color:#856404}.list-group-item-danger{color:#721c24;background-color:#f5c6cb}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{color:#721c24;background-color:#f1b0b7}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#721c24;border-color:#721c24}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:hover{color:#000;text-decoration:none}.close:not(:disabled):not(.disabled):focus,.close:not(:disabled):not(.disabled):hover{opacity:.75}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}a.close.disabled{pointer-events:none}.toast{max-width:350px;overflow:hidden;font-size:.875rem;background-color:hsla(0,0%,100%,.85);background-clip:padding-box;border:1px solid rgba(0,0,0,.1);box-shadow:0 .25rem .75rem rgba(0,0,0,.1);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);opacity:0;border-radius:.25rem}.toast:not(:last-child){margin-bottom:.75rem}.toast.showing{opacity:1}.toast.show{display:block;opacity:1}.toast.hide{display:none}.toast-header{display:flex;align-items:center;padding:.25rem .75rem;color:#6c757d;background-color:hsla(0,0%,100%,.85);background-clip:padding-box;border-bottom:1px solid rgba(0,0,0,.05)}.toast-body{padding:.75rem}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;left:0;z-index:1050;display:none;width:100%;height:100%;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translateY(-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal-dialog-scrollable{display:flex;max-height:calc(100% - 1rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 1rem);overflow:hidden}.modal-dialog-scrollable .modal-footer,.modal-dialog-scrollable .modal-header{flex-shrink:0}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - 1rem)}.modal-dialog-centered:before{display:block;height:calc(100vh - 1rem);content:\\\"\\\"}.modal-dialog-centered.modal-dialog-scrollable{flex-direction:column;justify-content:center;height:100%}.modal-dialog-centered.modal-dialog-scrollable .modal-content{max-height:none}.modal-dialog-centered.modal-dialog-scrollable:before{content:none}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:flex;align-items:flex-start;justify-content:space-between;padding:1rem;border-bottom:1px solid #dee2e6;border-top-left-radius:.3rem;border-top-right-radius:.3rem}.modal-header .close{padding:1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;flex:1 1 auto;padding:1rem}.modal-footer{display:flex;align-items:center;justify-content:flex-end;padding:1rem;border-top:1px solid #dee2e6;border-bottom-right-radius:.3rem;border-bottom-left-radius:.3rem}.modal-footer>:not(:first-child){margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-scrollable{max-height:calc(100% - 3.5rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 3.5rem)}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-dialog-centered:before{height:calc(100vh - 3.5rem)}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{max-width:800px}}@media (min-width:1200px){.modal-xl{max-width:1140px}}[dir=ltr] .tooltip{text-align:left}[dir=rtl] .tooltip{text-align:right}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .arrow:before{position:absolute;content:\\\"\\\";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow:before,.bs-tooltip-top .arrow:before{top:0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow:before,.bs-tooltip-right .arrow:before{right:0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.bs-tooltip-bottom .arrow:before{bottom:0;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow:before,.bs-tooltip-left .arrow:before{left:0;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}[dir=ltr] .popover{text-align:left}[dir=rtl] .popover{text-align:right}.popover{top:0;left:0;z-index:1060;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover,.popover .arrow{position:absolute;display:block}.popover .arrow{width:1rem;height:.5rem;margin:0 .3rem}.popover .arrow:after,.popover .arrow:before{position:absolute;display:block;content:\\\"\\\";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:.5rem}.bs-popover-auto[x-placement^=top]>.arrow,.bs-popover-top>.arrow{bottom:calc(-.5rem + -1px)}.bs-popover-auto[x-placement^=top]>.arrow:before,.bs-popover-top>.arrow:before{bottom:0;border-width:.5rem .5rem 0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top]>.arrow:after,.bs-popover-top>.arrow:after{bottom:1px;border-width:.5rem .5rem 0;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:.5rem}.bs-popover-auto[x-placement^=right]>.arrow,.bs-popover-right>.arrow{left:calc(-.5rem + -1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=right]>.arrow:before,.bs-popover-right>.arrow:before{left:0;border-width:.5rem .5rem .5rem 0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right]>.arrow:after,.bs-popover-right>.arrow:after{left:1px;border-width:.5rem .5rem .5rem 0;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:.5rem}.bs-popover-auto[x-placement^=bottom]>.arrow,.bs-popover-bottom>.arrow{top:calc(-.5rem + -1px)}.bs-popover-auto[x-placement^=bottom]>.arrow:before,.bs-popover-bottom>.arrow:before{top:0;border-width:0 .5rem .5rem;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom]>.arrow:after,.bs-popover-bottom>.arrow:after{top:1px;border-width:0 .5rem .5rem;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header:before,.bs-popover-bottom .popover-header:before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:\\\"\\\";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:.5rem}.bs-popover-auto[x-placement^=left]>.arrow,.bs-popover-left>.arrow{right:calc(-.5rem + -1px);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=left]>.arrow:before,.bs-popover-left>.arrow:before{right:0;border-width:.5rem 0 .5rem .5rem;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left]>.arrow:after,.bs-popover-left>.arrow:after{right:1px;border-width:.5rem 0 .5rem .5rem;border-left-color:#fff}.popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:1rem;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner:after{display:block;clear:both;content:\\\"\\\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-right,.carousel-item-next:not(.carousel-item-left){transform:translateX(100%)}.active.carousel-item-left,.carousel-item-prev:not(.carousel-item-right){transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;transform:none}.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{z-index:0;opacity:0;transition:opacity 0s .6s}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:no-repeat 50%/100% 100%}.carousel-control-prev-icon{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5L4.25 4l2.5-2.5L5.25 0z'/%3E%3C/svg%3E\\\")}.carousel-control-next-icon{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5L3.75 4l-2.5 2.5L2.75 8l4-4-4-4z'/%3E%3C/svg%3E\\\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:15;display:flex;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{box-sizing:content-box;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators li{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}@-webkit-keyframes spinner-border{to{transform:rotate(1turn)}}@keyframes spinner-border{to{transform:rotate(1turn)}}.spinner-border{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;border:.25em solid;border-right:.25em solid transparent;border-radius:50%;-webkit-animation:spinner-border .75s linear infinite;animation:spinner-border .75s linear infinite}.spinner-border-sm{width:1rem;height:1rem;border-width:.2em}@-webkit-keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1}}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1}}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;background-color:currentColor;border-radius:50%;opacity:0;-webkit-animation:spinner-grow .75s linear infinite;animation:spinner-grow .75s linear infinite}.spinner-grow-sm{width:1rem;height:1rem}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#007bff!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#0062cc!important}.bg-secondary{background-color:#6c757d!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#545b62!important}.bg-success{background-color:#28a745!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#1e7e34!important}.bg-info{background-color:#17a2b8!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#117a8b!important}.bg-warning{background-color:#ffc107!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#d39e00!important}.bg-danger{background-color:#dc3545!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#bd2130!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #dee2e6!important}.border-top{border-top:1px solid #dee2e6!important}.border-right{border-right:1px solid #dee2e6!important}.border-bottom{border-bottom:1px solid #dee2e6!important}.border-left{border-left:1px solid #dee2e6!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#007bff!important}.border-secondary{border-color:#6c757d!important}.border-success{border-color:#28a745!important}.border-info{border-color:#17a2b8!important}.border-warning{border-color:#ffc107!important}.border-danger{border-color:#dc3545!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded-sm{border-radius:.2rem!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important}.rounded-right,.rounded-top{border-top-right-radius:.25rem!important}.rounded-bottom,.rounded-right{border-bottom-right-radius:.25rem!important}.rounded-bottom,.rounded-left{border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important}.rounded-lg{border-radius:.3rem!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:50rem!important}.rounded-0{border-radius:0!important}.clearfix:after{display:block;clear:both;content:\\\"\\\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}}@media print{.d-print-none{display:none!important}.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive:before{display:block;content:\\\"\\\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9:before{padding-top:42.857143%}.embed-responsive-16by9:before{padding-top:56.25%}.embed-responsive-4by3:before{padding-top:75%}.embed-responsive-1by1:before{padding-top:100%}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-fill{flex:1 1 auto!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}@media (min-width:576px){.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}}@media (min-width:768px){.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}@supports ((position:-webkit-sticky) or (position:sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075)!important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175)!important}.shadow-none{box-shadow:none!important}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.min-vw-100{min-width:100vw!important}.min-vh-100{min-height:100vh!important}.vw-100{width:100vw!important}.vh-100{height:100vh!important}.stretched-link:after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;pointer-events:auto;content:\\\"\\\";background-color:transparent}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:.25rem!important}.mt-1,.my-1{margin-top:.25rem!important}.mr-1,.mx-1{margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:.25rem!important}.m-2{margin:.5rem!important}.mt-2,.my-2{margin-top:.5rem!important}.mr-2,.mx-2{margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:.5rem!important}.m-3{margin:1rem!important}.mt-3,.my-3{margin-top:1rem!important}.mr-3,.mx-3{margin-right:1rem!important}.mb-3,.my-3{margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:1rem!important}.m-4{margin:1.5rem!important}.mt-4,.my-4{margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:1.5rem!important}.m-5{margin:3rem!important}.mt-5,.my-5{margin-top:3rem!important}.mr-5,.mx-5{margin-right:3rem!important}.mb-5,.my-5{margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:.25rem!important}.pt-1,.py-1{padding-top:.25rem!important}.pr-1,.px-1{padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:.25rem!important}.p-2{padding:.5rem!important}.pt-2,.py-2{padding-top:.5rem!important}.pr-2,.px-2{padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:.5rem!important}.p-3{padding:1rem!important}.pt-3,.py-3{padding-top:1rem!important}.pr-3,.px-3{padding-right:1rem!important}.pb-3,.py-3{padding-bottom:1rem!important}.pl-3,.px-3{padding-left:1rem!important}.p-4{padding:1.5rem!important}.pt-4,.py-4{padding-top:1.5rem!important}.pr-4,.px-4{padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:1.5rem!important}.p-5{padding:3rem!important}.pt-5,.py-5{padding-top:3rem!important}.pr-5,.px-5{padding-right:3rem!important}.pb-5,.py-5{padding-bottom:3rem!important}.pl-5,.px-5{padding-left:3rem!important}.m-n1{margin:-.25rem!important}.mt-n1,.my-n1{margin-top:-.25rem!important}.mr-n1,.mx-n1{margin-right:-.25rem!important}.mb-n1,.my-n1{margin-bottom:-.25rem!important}.ml-n1,.mx-n1{margin-left:-.25rem!important}.m-n2{margin:-.5rem!important}.mt-n2,.my-n2{margin-top:-.5rem!important}.mr-n2,.mx-n2{margin-right:-.5rem!important}.mb-n2,.my-n2{margin-bottom:-.5rem!important}.ml-n2,.mx-n2{margin-left:-.5rem!important}.m-n3{margin:-1rem!important}.mt-n3,.my-n3{margin-top:-1rem!important}.mr-n3,.mx-n3{margin-right:-1rem!important}.mb-n3,.my-n3{margin-bottom:-1rem!important}.ml-n3,.mx-n3{margin-left:-1rem!important}.m-n4{margin:-1.5rem!important}.mt-n4,.my-n4{margin-top:-1.5rem!important}.mr-n4,.mx-n4{margin-right:-1.5rem!important}.mb-n4,.my-n4{margin-bottom:-1.5rem!important}.ml-n4,.mx-n4{margin-left:-1.5rem!important}.m-n5{margin:-3rem!important}.mt-n5,.my-n5{margin-top:-3rem!important}.mr-n5,.mx-n5{margin-right:-3rem!important}.mb-n5,.my-n5{margin-bottom:-3rem!important}.ml-n5,.mx-n5{margin-left:-3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-n1{margin:-.25rem!important}.mt-sm-n1,.my-sm-n1{margin-top:-.25rem!important}.mr-sm-n1,.mx-sm-n1{margin-right:-.25rem!important}.mb-sm-n1,.my-sm-n1{margin-bottom:-.25rem!important}.ml-sm-n1,.mx-sm-n1{margin-left:-.25rem!important}.m-sm-n2{margin:-.5rem!important}.mt-sm-n2,.my-sm-n2{margin-top:-.5rem!important}.mr-sm-n2,.mx-sm-n2{margin-right:-.5rem!important}.mb-sm-n2,.my-sm-n2{margin-bottom:-.5rem!important}.ml-sm-n2,.mx-sm-n2{margin-left:-.5rem!important}.m-sm-n3{margin:-1rem!important}.mt-sm-n3,.my-sm-n3{margin-top:-1rem!important}.mr-sm-n3,.mx-sm-n3{margin-right:-1rem!important}.mb-sm-n3,.my-sm-n3{margin-bottom:-1rem!important}.ml-sm-n3,.mx-sm-n3{margin-left:-1rem!important}.m-sm-n4{margin:-1.5rem!important}.mt-sm-n4,.my-sm-n4{margin-top:-1.5rem!important}.mr-sm-n4,.mx-sm-n4{margin-right:-1.5rem!important}.mb-sm-n4,.my-sm-n4{margin-bottom:-1.5rem!important}.ml-sm-n4,.mx-sm-n4{margin-left:-1.5rem!important}.m-sm-n5{margin:-3rem!important}.mt-sm-n5,.my-sm-n5{margin-top:-3rem!important}.mr-sm-n5,.mx-sm-n5{margin-right:-3rem!important}.mb-sm-n5,.my-sm-n5{margin-bottom:-3rem!important}.ml-sm-n5,.mx-sm-n5{margin-left:-3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-n1{margin:-.25rem!important}.mt-md-n1,.my-md-n1{margin-top:-.25rem!important}.mr-md-n1,.mx-md-n1{margin-right:-.25rem!important}.mb-md-n1,.my-md-n1{margin-bottom:-.25rem!important}.ml-md-n1,.mx-md-n1{margin-left:-.25rem!important}.m-md-n2{margin:-.5rem!important}.mt-md-n2,.my-md-n2{margin-top:-.5rem!important}.mr-md-n2,.mx-md-n2{margin-right:-.5rem!important}.mb-md-n2,.my-md-n2{margin-bottom:-.5rem!important}.ml-md-n2,.mx-md-n2{margin-left:-.5rem!important}.m-md-n3{margin:-1rem!important}.mt-md-n3,.my-md-n3{margin-top:-1rem!important}.mr-md-n3,.mx-md-n3{margin-right:-1rem!important}.mb-md-n3,.my-md-n3{margin-bottom:-1rem!important}.ml-md-n3,.mx-md-n3{margin-left:-1rem!important}.m-md-n4{margin:-1.5rem!important}.mt-md-n4,.my-md-n4{margin-top:-1.5rem!important}.mr-md-n4,.mx-md-n4{margin-right:-1.5rem!important}.mb-md-n4,.my-md-n4{margin-bottom:-1.5rem!important}.ml-md-n4,.mx-md-n4{margin-left:-1.5rem!important}.m-md-n5{margin:-3rem!important}.mt-md-n5,.my-md-n5{margin-top:-3rem!important}.mr-md-n5,.mx-md-n5{margin-right:-3rem!important}.mb-md-n5,.my-md-n5{margin-bottom:-3rem!important}.ml-md-n5,.mx-md-n5{margin-left:-3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-n1{margin:-.25rem!important}.mt-lg-n1,.my-lg-n1{margin-top:-.25rem!important}.mr-lg-n1,.mx-lg-n1{margin-right:-.25rem!important}.mb-lg-n1,.my-lg-n1{margin-bottom:-.25rem!important}.ml-lg-n1,.mx-lg-n1{margin-left:-.25rem!important}.m-lg-n2{margin:-.5rem!important}.mt-lg-n2,.my-lg-n2{margin-top:-.5rem!important}.mr-lg-n2,.mx-lg-n2{margin-right:-.5rem!important}.mb-lg-n2,.my-lg-n2{margin-bottom:-.5rem!important}.ml-lg-n2,.mx-lg-n2{margin-left:-.5rem!important}.m-lg-n3{margin:-1rem!important}.mt-lg-n3,.my-lg-n3{margin-top:-1rem!important}.mr-lg-n3,.mx-lg-n3{margin-right:-1rem!important}.mb-lg-n3,.my-lg-n3{margin-bottom:-1rem!important}.ml-lg-n3,.mx-lg-n3{margin-left:-1rem!important}.m-lg-n4{margin:-1.5rem!important}.mt-lg-n4,.my-lg-n4{margin-top:-1.5rem!important}.mr-lg-n4,.mx-lg-n4{margin-right:-1.5rem!important}.mb-lg-n4,.my-lg-n4{margin-bottom:-1.5rem!important}.ml-lg-n4,.mx-lg-n4{margin-left:-1.5rem!important}.m-lg-n5{margin:-3rem!important}.mt-lg-n5,.my-lg-n5{margin-top:-3rem!important}.mr-lg-n5,.mx-lg-n5{margin-right:-3rem!important}.mb-lg-n5,.my-lg-n5{margin-bottom:-3rem!important}.ml-lg-n5,.mx-lg-n5{margin-left:-3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-n1{margin:-.25rem!important}.mt-xl-n1,.my-xl-n1{margin-top:-.25rem!important}.mr-xl-n1,.mx-xl-n1{margin-right:-.25rem!important}.mb-xl-n1,.my-xl-n1{margin-bottom:-.25rem!important}.ml-xl-n1,.mx-xl-n1{margin-left:-.25rem!important}.m-xl-n2{margin:-.5rem!important}.mt-xl-n2,.my-xl-n2{margin-top:-.5rem!important}.mr-xl-n2,.mx-xl-n2{margin-right:-.5rem!important}.mb-xl-n2,.my-xl-n2{margin-bottom:-.5rem!important}.ml-xl-n2,.mx-xl-n2{margin-left:-.5rem!important}.m-xl-n3{margin:-1rem!important}.mt-xl-n3,.my-xl-n3{margin-top:-1rem!important}.mr-xl-n3,.mx-xl-n3{margin-right:-1rem!important}.mb-xl-n3,.my-xl-n3{margin-bottom:-1rem!important}.ml-xl-n3,.mx-xl-n3{margin-left:-1rem!important}.m-xl-n4{margin:-1.5rem!important}.mt-xl-n4,.my-xl-n4{margin-top:-1.5rem!important}.mr-xl-n4,.mx-xl-n4{margin-right:-1.5rem!important}.mb-xl-n4,.my-xl-n4{margin-bottom:-1.5rem!important}.ml-xl-n4,.mx-xl-n4{margin-left:-1.5rem!important}.m-xl-n5{margin:-3rem!important}.mt-xl-n5,.my-xl-n5{margin-top:-3rem!important}.mr-xl-n5,.mx-xl-n5{margin-right:-3rem!important}.mb-xl-n5,.my-xl-n5{margin-bottom:-3rem!important}.ml-xl-n5,.mx-xl-n5{margin-left:-3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.text-monospace{font-family:SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace!important}.text-justify{text-align:justify!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-lighter{font-weight:lighter!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-weight-bolder{font-weight:bolder!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#007bff!important}a.text-primary:focus,a.text-primary:hover{color:#0056b3!important}.text-secondary{color:#6c757d!important}a.text-secondary:focus,a.text-secondary:hover{color:#494f54!important}.text-success{color:#28a745!important}a.text-success:focus,a.text-success:hover{color:#19692c!important}.text-info{color:#17a2b8!important}a.text-info:focus,a.text-info:hover{color:#0f6674!important}.text-warning{color:#ffc107!important}a.text-warning:focus,a.text-warning:hover{color:#ba8b00!important}.text-danger{color:#dc3545!important}a.text-danger:focus,a.text-danger:hover{color:#a71d2a!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#cbd3da!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#121416!important}.text-body{color:#212529!important}.text-muted{color:#6c757d!important}.text-black-50{color:rgba(0,0,0,.5)!important}.text-white-50{color:hsla(0,0%,100%,.5)!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.text-decoration-none{text-decoration:none!important}.text-break{word-break:break-word!important;word-wrap:break-word!important}.text-reset{color:inherit!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,:after,:before{text-shadow:none!important;box-shadow:none!important}a:not(.btn){text-decoration:underline}abbr[title]:after{content:\\\" (\\\" attr(title) \\\")\\\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #adb5bd;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}.container,body{min-width:992px!important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #dee2e6!important}.table-dark{color:inherit}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#dee2e6}.table .thead-dark th{color:inherit;border-color:#dee2e6}}\", \"\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n")},169:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(170);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(52).default\nvar update = add(\"2c955d46\", content, true, {\"sourceMap\":false});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwLXZ1ZS9kaXN0L2Jvb3RzdHJhcC12dWUuY3NzPzZlNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsR0FBMEg7QUFDaEosNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxFQUFnRDtBQUNsRSw2Q0FBNkMsa0JBQWtCIiwiZmlsZSI6IjE2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtb25lT2YtMS0xIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LW9uZU9mLTEtMiEuL2Jvb3RzdHJhcC12dWUuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMmM5NTVkNDZcIiwgY29udGVudCwgdHJ1ZSwge1wic291cmNlTWFwXCI6ZmFsc2V9KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n")},170:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(51)(false);\n// Module\nexports.push([module.i, "@charset \\"UTF-8\\";\\n/*!\\n * BootstrapVue Custom CSS (https://bootstrap-vue.js.org)\\n */@media (max-width:575.98px){.bv-d-xs-down-none{display:none!important}}@media (max-width:767.98px){.bv-d-sm-down-none{display:none!important}}@media (max-width:991.98px){.bv-d-md-down-none{display:none!important}}@media (max-width:1199.98px){.bv-d-lg-down-none{display:none!important}}.bv-d-xl-down-none{display:none!important}.card-img-left{border-top-left-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-img-right{border-top-right-radius:calc(.25rem - 1px);border-bottom-right-radius:calc(.25rem - 1px)}.dropdown.dropleft .dropdown-toggle.dropdown-toggle-no-caret:before,.dropdown:not(.dropleft) .dropdown-toggle.dropdown-toggle-no-caret:after{display:none!important}.dropdown.b-dropdown .b-dropdown-form{display:inline-block;padding:.25rem 1.5rem;width:100%;clear:both;font-weight:400}.dropdown.b-dropdown .b-dropdown-form:focus{outline:1px dotted!important;outline:5px auto -webkit-focus-ring-color!important}.dropdown.b-dropdown .b-dropdown-form.disabled,.dropdown.b-dropdown .b-dropdown-form:disabled{outline:0!important;color:#6c757d;pointer-events:none}.b-dropdown-text{display:inline-block;padding:.25rem 1.5rem;margin-bottom:0;width:100%;clear:both;font-weight:lighter}.input-group>.input-group-append:last-child>.btn-group:not(:last-child):not(.dropdown-toggle)>.btn,.input-group>.input-group-append:not(:last-child)>.btn-group>.btn,.input-group>.input-group-prepend>.btn-group>.btn{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn-group>.btn,.input-group>.input-group-prepend:first-child>.btn-group:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.btn-group>.btn{border-top-left-radius:0;border-bottom-left-radius:0}.form-control.is-invalid,.form-control.is-valid,.was-validated .form-control:invalid,.was-validated .form-control:valid{background-position:right calc(.375em + .1875rem) center}input[type=color].form-control{height:calc(1.5em + .75rem + 2px);padding:.125rem .25rem}.input-group-sm input[type=color].form-control,input[type=color].form-control.form-control-sm{height:calc(1.5em + .5rem + 2px);padding:.125rem .25rem}.input-group-lg input[type=color].form-control,input[type=color].form-control.form-control-lg{height:calc(1.5em + 1rem + 2px);padding:.125rem .25rem}input[type=color].form-control:disabled{background-color:#adb5bd;opacity:.65}.input-group>.custom-range{position:relative;flex:1 1 auto;width:1%;margin-bottom:0}.input-group>.custom-file+.custom-range,.input-group>.custom-range+.custom-file,.input-group>.custom-range+.custom-range,.input-group>.custom-range+.custom-select,.input-group>.custom-range+.form-control,.input-group>.custom-range+.form-control-plaintext,.input-group>.custom-select+.custom-range,.input-group>.form-control+.custom-range,.input-group>.form-control-plaintext+.custom-range{margin-left:-1px}.input-group>.custom-range:focus{z-index:3}.input-group>.custom-range:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-range:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-range{padding:0 .75rem;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;height:calc(1.5em + .75rem + 2px);border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.input-group>.custom-range{transition:none}}.input-group>.custom-range:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.input-group>.custom-range:disabled,.input-group>.custom-range[readonly]{background-color:#e9ecef}.input-group-lg>.custom-range{height:calc(1.5em + 1rem + 2px);padding:0 1rem;border-radius:.3rem}.input-group-sm>.custom-range{height:calc(1.5em + .5rem + 2px);padding:0 .5rem;border-radius:.2rem}.input-group .custom-range.is-valid,.was-validated .input-group .custom-range:valid{border-color:#28a745}.input-group .custom-range.is-valid:focus,.was-validated .input-group .custom-range:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-range.is-valid:focus::-webkit-slider-thumb,.was-validated .custom-range:valid:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #9be7ac}.custom-range.is-valid:focus::-moz-range-thumb,.was-validated .custom-range:valid:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #9be7ac}.custom-range.is-valid:focus::-ms-thumb,.was-validated .custom-range:valid:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #9be7ac}.custom-range.is-valid::-webkit-slider-thumb,.was-validated .custom-range:valid::-webkit-slider-thumb{background-color:#28a745;background-image:none}.custom-range.is-valid::-webkit-slider-thumb:active,.was-validated .custom-range:valid::-webkit-slider-thumb:active{background-color:#9be7ac;background-image:none}.custom-range.is-valid::-webkit-slider-runnable-track,.was-validated .custom-range:valid::-webkit-slider-runnable-track{background-color:rgba(40,167,69,.35)}.custom-range.is-valid::-moz-range-thumb,.was-validated .custom-range:valid::-moz-range-thumb{background-color:#28a745;background-image:none}.custom-range.is-valid::-moz-range-thumb:active,.was-validated .custom-range:valid::-moz-range-thumb:active{background-color:#9be7ac;background-image:none}.custom-range.is-valid::-moz-range-track,.was-validated .custom-range:valid::-moz-range-track{background:rgba(40,167,69,.35)}.custom-range.is-valid~.valid-feedback,.custom-range.is-valid~.valid-tooltip,.was-validated .custom-range:valid~.valid-feedback,.was-validated .custom-range:valid~.valid-tooltip{display:block}.custom-range.is-valid::-ms-thumb,.was-validated .custom-range:valid::-ms-thumb{background-color:#28a745;background-image:none}.custom-range.is-valid::-ms-thumb:active,.was-validated .custom-range:valid::-ms-thumb:active{background-color:#9be7ac;background-image:none}.custom-range.is-valid::-ms-track-lower,.custom-range.is-valid::-ms-track-upper,.was-validated .custom-range:valid::-ms-track-lower,.was-validated .custom-range:valid::-ms-track-upper{background:rgba(40,167,69,.35)}.input-group .custom-range.is-invalid,.was-validated .input-group .custom-range:invalid{border-color:#dc3545}.input-group .custom-range.is-invalid:focus,.was-validated .input-group .custom-range:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-range.is-invalid:focus::-webkit-slider-thumb,.was-validated .custom-range:invalid:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #f6cdd1}.custom-range.is-invalid:focus::-moz-range-thumb,.was-validated .custom-range:invalid:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #f6cdd1}.custom-range.is-invalid:focus::-ms-thumb,.was-validated .custom-range:invalid:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem #f6cdd1}.custom-range.is-invalid::-webkit-slider-thumb,.was-validated .custom-range:invalid::-webkit-slider-thumb{background-color:#dc3545;background-image:none}.custom-range.is-invalid::-webkit-slider-thumb:active,.was-validated .custom-range:invalid::-webkit-slider-thumb:active{background-color:#f6cdd1;background-image:none}.custom-range.is-invalid::-webkit-slider-runnable-track,.was-validated .custom-range:invalid::-webkit-slider-runnable-track{background-color:rgba(220,53,69,.35)}.custom-range.is-invalid::-moz-range-thumb,.was-validated .custom-range:invalid::-moz-range-thumb{background-color:#dc3545;background-image:none}.custom-range.is-invalid::-moz-range-thumb:active,.was-validated .custom-range:invalid::-moz-range-thumb:active{background-color:#f6cdd1;background-image:none}.custom-range.is-invalid::-moz-range-track,.was-validated .custom-range:invalid::-moz-range-track{background:rgba(220,53,69,.35)}.custom-range.is-invalid~.invalid-feedback,.custom-range.is-invalid~.invalid-tooltip,.was-validated .custom-range:invalid~.invalid-feedback,.was-validated .custom-range:invalid~.invalid-tooltip{display:block}.custom-range.is-invalid::-ms-thumb,.was-validated .custom-range:invalid::-ms-thumb{background-color:#dc3545;background-image:none}.custom-range.is-invalid::-ms-thumb:active,.was-validated .custom-range:invalid::-ms-thumb:active{background-color:#f6cdd1;background-image:none}.custom-range.is-invalid::-ms-track-lower,.custom-range.is-invalid::-ms-track-upper,.was-validated .custom-range:invalid::-ms-track-lower,.was-validated .custom-range:invalid::-ms-track-upper{background:rgba(220,53,69,.35)}.modal-backdrop{opacity:.5}.b-popover-primary.popover{background-color:#cce5ff;border-color:#b8daff}.b-popover-primary.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-primary.bs-popover-top>.arrow:before{border-top-color:#b8daff}.b-popover-primary.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-primary.bs-popover-top>.arrow:after{border-top-color:#cce5ff}.b-popover-primary.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-primary.bs-popover-right>.arrow:before{border-right-color:#b8daff}.b-popover-primary.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-primary.bs-popover-right>.arrow:after{border-right-color:#cce5ff}.b-popover-primary.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-primary.bs-popover-bottom>.arrow:before{border-bottom-color:#b8daff}.b-popover-primary.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-primary.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-primary.bs-popover-bottom .popover-header:before,.b-popover-primary.bs-popover-bottom>.arrow:after{border-bottom-color:#bdddff}.b-popover-primary.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-primary.bs-popover-left>.arrow:before{border-left-color:#b8daff}.b-popover-primary.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-primary.bs-popover-left>.arrow:after{border-left-color:#cce5ff}.b-popover-primary .popover-header{color:#212529;background-color:#bdddff;border-bottom-color:#a3d0ff}.b-popover-primary .popover-body{color:#004085}.b-popover-secondary.popover{background-color:#e2e3e5;border-color:#d6d8db}.b-popover-secondary.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-secondary.bs-popover-top>.arrow:before{border-top-color:#d6d8db}.b-popover-secondary.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-secondary.bs-popover-top>.arrow:after{border-top-color:#e2e3e5}.b-popover-secondary.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-secondary.bs-popover-right>.arrow:before{border-right-color:#d6d8db}.b-popover-secondary.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-secondary.bs-popover-right>.arrow:after{border-right-color:#e2e3e5}.b-popover-secondary.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-secondary.bs-popover-bottom>.arrow:before{border-bottom-color:#d6d8db}.b-popover-secondary.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-secondary.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-secondary.bs-popover-bottom .popover-header:before,.b-popover-secondary.bs-popover-bottom>.arrow:after{border-bottom-color:#dadbde}.b-popover-secondary.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-secondary.bs-popover-left>.arrow:before{border-left-color:#d6d8db}.b-popover-secondary.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-secondary.bs-popover-left>.arrow:after{border-left-color:#e2e3e5}.b-popover-secondary .popover-header{color:#212529;background-color:#dadbde;border-bottom-color:#ccced2}.b-popover-secondary .popover-body{color:#383d41}.b-popover-success.popover{background-color:#d4edda;border-color:#c3e6cb}.b-popover-success.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-success.bs-popover-top>.arrow:before{border-top-color:#c3e6cb}.b-popover-success.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-success.bs-popover-top>.arrow:after{border-top-color:#d4edda}.b-popover-success.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-success.bs-popover-right>.arrow:before{border-right-color:#c3e6cb}.b-popover-success.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-success.bs-popover-right>.arrow:after{border-right-color:#d4edda}.b-popover-success.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-success.bs-popover-bottom>.arrow:before{border-bottom-color:#c3e6cb}.b-popover-success.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-success.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-success.bs-popover-bottom .popover-header:before,.b-popover-success.bs-popover-bottom>.arrow:after{border-bottom-color:#c9e8d1}.b-popover-success.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-success.bs-popover-left>.arrow:before{border-left-color:#c3e6cb}.b-popover-success.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-success.bs-popover-left>.arrow:after{border-left-color:#d4edda}.b-popover-success .popover-header{color:#212529;background-color:#c9e8d1;border-bottom-color:#b7e1c1}.b-popover-success .popover-body{color:#155724}.b-popover-info.popover{background-color:#d1ecf1;border-color:#bee5eb}.b-popover-info.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-info.bs-popover-top>.arrow:before{border-top-color:#bee5eb}.b-popover-info.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-info.bs-popover-top>.arrow:after{border-top-color:#d1ecf1}.b-popover-info.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-info.bs-popover-right>.arrow:before{border-right-color:#bee5eb}.b-popover-info.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-info.bs-popover-right>.arrow:after{border-right-color:#d1ecf1}.b-popover-info.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-info.bs-popover-bottom>.arrow:before{border-bottom-color:#bee5eb}.b-popover-info.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-info.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-info.bs-popover-bottom .popover-header:before,.b-popover-info.bs-popover-bottom>.arrow:after{border-bottom-color:#c5e7ed}.b-popover-info.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-info.bs-popover-left>.arrow:before{border-left-color:#bee5eb}.b-popover-info.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-info.bs-popover-left>.arrow:after{border-left-color:#d1ecf1}.b-popover-info .popover-header{color:#212529;background-color:#c5e7ed;border-bottom-color:#b2dfe7}.b-popover-info .popover-body{color:#0c5460}.b-popover-warning.popover{background-color:#fff3cd;border-color:#ffeeba}.b-popover-warning.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-warning.bs-popover-top>.arrow:before{border-top-color:#ffeeba}.b-popover-warning.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-warning.bs-popover-top>.arrow:after{border-top-color:#fff3cd}.b-popover-warning.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-warning.bs-popover-right>.arrow:before{border-right-color:#ffeeba}.b-popover-warning.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-warning.bs-popover-right>.arrow:after{border-right-color:#fff3cd}.b-popover-warning.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-warning.bs-popover-bottom>.arrow:before{border-bottom-color:#ffeeba}.b-popover-warning.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-warning.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-warning.bs-popover-bottom .popover-header:before,.b-popover-warning.bs-popover-bottom>.arrow:after{border-bottom-color:#ffefbe}.b-popover-warning.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-warning.bs-popover-left>.arrow:before{border-left-color:#ffeeba}.b-popover-warning.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-warning.bs-popover-left>.arrow:after{border-left-color:#fff3cd}.b-popover-warning .popover-header{color:#212529;background-color:#ffefbe;border-bottom-color:#ffe9a4}.b-popover-warning .popover-body{color:#856404}.b-popover-danger.popover{background-color:#f8d7da;border-color:#f5c6cb}.b-popover-danger.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-danger.bs-popover-top>.arrow:before{border-top-color:#f5c6cb}.b-popover-danger.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-danger.bs-popover-top>.arrow:after{border-top-color:#f8d7da}.b-popover-danger.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-danger.bs-popover-right>.arrow:before{border-right-color:#f5c6cb}.b-popover-danger.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-danger.bs-popover-right>.arrow:after{border-right-color:#f8d7da}.b-popover-danger.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-danger.bs-popover-bottom>.arrow:before{border-bottom-color:#f5c6cb}.b-popover-danger.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-danger.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-danger.bs-popover-bottom .popover-header:before,.b-popover-danger.bs-popover-bottom>.arrow:after{border-bottom-color:#f6cace}.b-popover-danger.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-danger.bs-popover-left>.arrow:before{border-left-color:#f5c6cb}.b-popover-danger.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-danger.bs-popover-left>.arrow:after{border-left-color:#f8d7da}.b-popover-danger .popover-header{color:#212529;background-color:#f6cace;border-bottom-color:#f2b4ba}.b-popover-danger .popover-body{color:#721c24}.b-popover-light.popover{background-color:#fefefe;border-color:#fdfdfe}.b-popover-light.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-light.bs-popover-top>.arrow:before{border-top-color:#fdfdfe}.b-popover-light.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-light.bs-popover-top>.arrow:after{border-top-color:#fefefe}.b-popover-light.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-light.bs-popover-right>.arrow:before{border-right-color:#fdfdfe}.b-popover-light.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-light.bs-popover-right>.arrow:after{border-right-color:#fefefe}.b-popover-light.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-light.bs-popover-bottom>.arrow:before{border-bottom-color:#fdfdfe}.b-popover-light.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-light.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-light.bs-popover-bottom .popover-header:before,.b-popover-light.bs-popover-bottom>.arrow:after{border-bottom-color:#f6f6f6}.b-popover-light.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-light.bs-popover-left>.arrow:before{border-left-color:#fdfdfe}.b-popover-light.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-light.bs-popover-left>.arrow:after{border-left-color:#fefefe}.b-popover-light .popover-header{color:#212529;background-color:#f6f6f6;border-bottom-color:#eaeaea}.b-popover-light .popover-body{color:#818182}.b-popover-dark.popover{background-color:#d6d8d9;border-color:#c6c8ca}.b-popover-dark.bs-popover-auto[x-placement^=top]>.arrow:before,.b-popover-dark.bs-popover-top>.arrow:before{border-top-color:#c6c8ca}.b-popover-dark.bs-popover-auto[x-placement^=top]>.arrow:after,.b-popover-dark.bs-popover-top>.arrow:after{border-top-color:#d6d8d9}.b-popover-dark.bs-popover-auto[x-placement^=right]>.arrow:before,.b-popover-dark.bs-popover-right>.arrow:before{border-right-color:#c6c8ca}.b-popover-dark.bs-popover-auto[x-placement^=right]>.arrow:after,.b-popover-dark.bs-popover-right>.arrow:after{border-right-color:#d6d8d9}.b-popover-dark.bs-popover-auto[x-placement^=bottom]>.arrow:before,.b-popover-dark.bs-popover-bottom>.arrow:before{border-bottom-color:#c6c8ca}.b-popover-dark.bs-popover-auto[x-placement^=bottom] .popover-header:before,.b-popover-dark.bs-popover-auto[x-placement^=bottom]>.arrow:after,.b-popover-dark.bs-popover-bottom .popover-header:before,.b-popover-dark.bs-popover-bottom>.arrow:after{border-bottom-color:#ced0d2}.b-popover-dark.bs-popover-auto[x-placement^=left]>.arrow:before,.b-popover-dark.bs-popover-left>.arrow:before{border-left-color:#c6c8ca}.b-popover-dark.bs-popover-auto[x-placement^=left]>.arrow:after,.b-popover-dark.bs-popover-left>.arrow:after{border-left-color:#d6d8d9}.b-popover-dark .popover-header{color:#212529;background-color:#ced0d2;border-bottom-color:#c1c4c5}.b-popover-dark .popover-body{color:#1b1e21}.table.b-table.b-table-fixed{table-layout:fixed}.table.b-table[aria-busy=true]{opacity:.55}.table.b-table>tbody>tr.b-table-details>td{border-top:none!important}.table.b-table>caption{caption-side:bottom}.table.b-table>caption.b-table-caption-top{caption-side:top!important}.table.b-table>tfoot>tr>th[aria-sort],.table.b-table>thead>tr>th[aria-sort]{cursor:pointer}.table.b-table>tfoot>tr>th[aria-sort]:before,.table.b-table>thead>tr>th[aria-sort]:before{display:inline-block;float:right;margin-left:.5em;width:.5em;font-size:inherit;line-height:inherit;opacity:.4;content:\\"↕\\";speak:none}.table.b-table>tfoot>tr>th[aria-sort][aria-sort=ascending]:before,.table.b-table>thead>tr>th[aria-sort][aria-sort=ascending]:before{opacity:1;content:\\"↓\\"}.table.b-table>tfoot>tr>th[aria-sort][aria-sort=descending]:before,.table.b-table>thead>tr>th[aria-sort][aria-sort=descending]:before{opacity:1;content:\\"↑\\"}@media (max-width:575.98px){.table.b-table.b-table-stacked-sm{display:block;width:100%}.table.b-table.b-table-stacked-sm>caption,.table.b-table.b-table-stacked-sm>tbody,.table.b-table.b-table-stacked-sm>tbody>tr,.table.b-table.b-table-stacked-sm>tbody>tr>td{display:block}.table.b-table.b-table-stacked-sm>tfoot,.table.b-table.b-table-stacked-sm>tfoot>tr.b-table-bottom-row,.table.b-table.b-table-stacked-sm>tfoot>tr.b-table-top-row,.table.b-table.b-table-stacked-sm>thead,.table.b-table.b-table-stacked-sm>thead>tr.b-table-bottom-row,.table.b-table.b-table-stacked-sm>thead>tr.b-table-top-row{display:none}.table.b-table.b-table-stacked-sm>caption{caption-side:top!important}.table.b-table.b-table-stacked-sm>tbody>tr>[data-label]:before{content:attr(data-label);display:inline-block;width:40%;float:left;text-align:right;word-wrap:break-word;font-weight:700;font-style:normal;padding:0;margin:0}.table.b-table.b-table-stacked-sm>tbody>tr>[data-label]:after{display:block;clear:both;content:\\"\\"}.table.b-table.b-table-stacked-sm>tbody>tr>[data-label]>div{display:inline-block;width:60%;padding:0 0 0 1rem;margin:0}.table.b-table.b-table-stacked-sm>tbody>tr.bottom-row,.table.b-table.b-table-stacked-sm>tbody>tr.top-row{display:none}.table.b-table.b-table-stacked-sm>tbody>tr>:first-child{border-top-width:3px}}@media (max-width:767.98px){.table.b-table.b-table-stacked-md{display:block;width:100%}.table.b-table.b-table-stacked-md>caption,.table.b-table.b-table-stacked-md>tbody,.table.b-table.b-table-stacked-md>tbody>tr,.table.b-table.b-table-stacked-md>tbody>tr>td{display:block}.table.b-table.b-table-stacked-md>tfoot,.table.b-table.b-table-stacked-md>tfoot>tr.b-table-bottom-row,.table.b-table.b-table-stacked-md>tfoot>tr.b-table-top-row,.table.b-table.b-table-stacked-md>thead,.table.b-table.b-table-stacked-md>thead>tr.b-table-bottom-row,.table.b-table.b-table-stacked-md>thead>tr.b-table-top-row{display:none}.table.b-table.b-table-stacked-md>caption{caption-side:top!important}.table.b-table.b-table-stacked-md>tbody>tr>[data-label]:before{content:attr(data-label);display:inline-block;width:40%;float:left;text-align:right;word-wrap:break-word;font-weight:700;font-style:normal;padding:0;margin:0}.table.b-table.b-table-stacked-md>tbody>tr>[data-label]:after{display:block;clear:both;content:\\"\\"}.table.b-table.b-table-stacked-md>tbody>tr>[data-label]>div{display:inline-block;width:60%;padding:0 0 0 1rem;margin:0}.table.b-table.b-table-stacked-md>tbody>tr.bottom-row,.table.b-table.b-table-stacked-md>tbody>tr.top-row{display:none}.table.b-table.b-table-stacked-md>tbody>tr>:first-child{border-top-width:3px}}@media (max-width:991.98px){.table.b-table.b-table-stacked-lg{display:block;width:100%}.table.b-table.b-table-stacked-lg>caption,.table.b-table.b-table-stacked-lg>tbody,.table.b-table.b-table-stacked-lg>tbody>tr,.table.b-table.b-table-stacked-lg>tbody>tr>td{display:block}.table.b-table.b-table-stacked-lg>tfoot,.table.b-table.b-table-stacked-lg>tfoot>tr.b-table-bottom-row,.table.b-table.b-table-stacked-lg>tfoot>tr.b-table-top-row,.table.b-table.b-table-stacked-lg>thead,.table.b-table.b-table-stacked-lg>thead>tr.b-table-bottom-row,.table.b-table.b-table-stacked-lg>thead>tr.b-table-top-row{display:none}.table.b-table.b-table-stacked-lg>caption{caption-side:top!important}.table.b-table.b-table-stacked-lg>tbody>tr>[data-label]:before{content:attr(data-label);display:inline-block;width:40%;float:left;text-align:right;word-wrap:break-word;font-weight:700;font-style:normal;padding:0;margin:0}.table.b-table.b-table-stacked-lg>tbody>tr>[data-label]:after{display:block;clear:both;content:\\"\\"}.table.b-table.b-table-stacked-lg>tbody>tr>[data-label]>div{display:inline-block;width:60%;padding:0 0 0 1rem;margin:0}.table.b-table.b-table-stacked-lg>tbody>tr.bottom-row,.table.b-table.b-table-stacked-lg>tbody>tr.top-row{display:none}.table.b-table.b-table-stacked-lg>tbody>tr>:first-child{border-top-width:3px}}@media (max-width:1199.98px){.table.b-table.b-table-stacked-xl{display:block;width:100%}.table.b-table.b-table-stacked-xl>caption,.table.b-table.b-table-stacked-xl>tbody,.table.b-table.b-table-stacked-xl>tbody>tr,.table.b-table.b-table-stacked-xl>tbody>tr>td{display:block}.table.b-table.b-table-stacked-xl>tfoot,.table.b-table.b-table-stacked-xl>tfoot>tr.b-table-bottom-row,.table.b-table.b-table-stacked-xl>tfoot>tr.b-table-top-row,.table.b-table.b-table-stacked-xl>thead,.table.b-table.b-table-stacked-xl>thead>tr.b-table-bottom-row,.table.b-table.b-table-stacked-xl>thead>tr.b-table-top-row{display:none}.table.b-table.b-table-stacked-xl>caption{caption-side:top!important}.table.b-table.b-table-stacked-xl>tbody>tr>[data-label]:before{content:attr(data-label);display:inline-block;width:40%;float:left;text-align:right;word-wrap:break-word;font-weight:700;font-style:normal;padding:0;margin:0}.table.b-table.b-table-stacked-xl>tbody>tr>[data-label]:after{display:block;clear:both;content:\\"\\"}.table.b-table.b-table-stacked-xl>tbody>tr>[data-label]>div{display:inline-block;width:60%;padding:0 0 0 1rem;margin:0}.table.b-table.b-table-stacked-xl>tbody>tr.bottom-row,.table.b-table.b-table-stacked-xl>tbody>tr.top-row{display:none}.table.b-table.b-table-stacked-xl>tbody>tr>:first-child{border-top-width:3px}}.table.b-table.b-table-stacked{display:block;width:100%}.table.b-table.b-table-stacked>caption,.table.b-table.b-table-stacked>tbody,.table.b-table.b-table-stacked>tbody>tr,.table.b-table.b-table-stacked>tbody>tr>td{display:block}.table.b-table.b-table-stacked>tfoot,.table.b-table.b-table-stacked>tfoot>tr.b-table-bottom-row,.table.b-table.b-table-stacked>tfoot>tr.b-table-top-row,.table.b-table.b-table-stacked>thead,.table.b-table.b-table-stacked>thead>tr.b-table-bottom-row,.table.b-table.b-table-stacked>thead>tr.b-table-top-row{display:none}.table.b-table.b-table-stacked>caption{caption-side:top!important}.table.b-table.b-table-stacked>tbody>tr>[data-label]:before{content:attr(data-label);display:inline-block;width:40%;float:left;text-align:right;word-wrap:break-word;font-weight:700;font-style:normal;padding:0;margin:0}.table.b-table.b-table-stacked>tbody>tr>[data-label]:after{display:block;clear:both;content:\\"\\"}.table.b-table.b-table-stacked>tbody>tr>[data-label]>div{display:inline-block;width:60%;padding:0 0 0 1rem;margin:0}.table.b-table.b-table-stacked>tbody>tr.bottom-row,.table.b-table.b-table-stacked>tbody>tr.top-row{display:none}.table.b-table.b-table-stacked>tbody>tr>:first-child{border-top-width:3px}.table.b-table.b-table-selectable>tbody>tr{cursor:pointer}.table.b-table.b-table-selectable.b-table-selecting.b-table-select-range>tbody>tr{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.b-toast{display:block;position:relative;max-width:350px;-webkit-backface-visibility:hidden;backface-visibility:hidden;background-clip:padding-box;z-index:1;border-radius:.25rem}.b-toast:not(:last-child){margin-bottom:.75rem}.b-toast.b-toast-solid .toast{background-color:#fff}.b-toast .toast{opacity:1}.b-toast .toast.fade:not(.show){opacity:0}.b-toast .toast .toast-body{display:block}.b-toast-primary .toast{background-color:rgba(230,242,255,.85);border-color:rgba(184,218,255,.85);color:#004085}.b-toast-primary .toast .toast-header{color:#004085;background-color:rgba(204,229,255,.85);border-bottom-color:rgba(184,218,255,.85)}.b-toast-primary.b-toast-solid .toast{background-color:#e6f2ff}.b-toast-secondary .toast{background-color:rgba(239,240,241,.85);border-color:rgba(214,216,219,.85);color:#383d41}.b-toast-secondary .toast .toast-header{color:#383d41;background-color:rgba(226,227,229,.85);border-bottom-color:rgba(214,216,219,.85)}.b-toast-secondary.b-toast-solid .toast{background-color:#eff0f1}.b-toast-success .toast{background-color:rgba(230,245,233,.85);border-color:rgba(195,230,203,.85);color:#155724}.b-toast-success .toast .toast-header{color:#155724;background-color:rgba(212,237,218,.85);border-bottom-color:rgba(195,230,203,.85)}.b-toast-success.b-toast-solid .toast{background-color:#e6f5e9}.b-toast-info .toast{background-color:rgba(229,244,247,.85);border-color:rgba(190,229,235,.85);color:#0c5460}.b-toast-info .toast .toast-header{color:#0c5460;background-color:rgba(209,236,241,.85);border-bottom-color:rgba(190,229,235,.85)}.b-toast-info.b-toast-solid .toast{background-color:#e5f4f7}.b-toast-warning .toast{background-color:rgba(255,249,231,.85);border-color:rgba(255,238,186,.85);color:#856404}.b-toast-warning .toast .toast-header{color:#856404;background-color:rgba(255,243,205,.85);border-bottom-color:rgba(255,238,186,.85)}.b-toast-warning.b-toast-solid .toast{background-color:#fff9e7}.b-toast-danger .toast{background-color:rgba(252,237,238,.85);border-color:rgba(245,198,203,.85);color:#721c24}.b-toast-danger .toast .toast-header{color:#721c24;background-color:rgba(248,215,218,.85);border-bottom-color:rgba(245,198,203,.85)}.b-toast-danger.b-toast-solid .toast{background-color:#fcedee}.b-toast-light .toast{background-color:hsla(0,0%,100%,.85);border-color:rgba(253,253,254,.85);color:#818182}.b-toast-light .toast .toast-header{color:#818182;background-color:hsla(0,0%,99.6%,.85);border-bottom-color:rgba(253,253,254,.85)}.b-toast-light.b-toast-solid .toast{background-color:#fff}.b-toast-dark .toast{background-color:rgba(227,229,229,.85);border-color:rgba(198,200,202,.85);color:#1b1e21}.b-toast-dark .toast .toast-header{color:#1b1e21;background-color:rgba(214,216,217,.85);border-bottom-color:rgba(198,200,202,.85)}.b-toast-dark.b-toast-solid .toast{background-color:#e3e5e5}.b-toaster{z-index:1100}.b-toaster .b-toaster-slot{position:relative;display:block}.b-toaster .b-toaster-slot:empty{display:none!important}.b-toaster.b-toaster-bottom-center,.b-toaster.b-toaster-bottom-full,.b-toaster.b-toaster-bottom-left,.b-toaster.b-toaster-bottom-right,.b-toaster.b-toaster-top-center,.b-toaster.b-toaster-top-full,.b-toaster.b-toaster-top-left,.b-toaster.b-toaster-top-right{position:fixed;left:.5rem;right:.5rem;margin:0;padding:0;height:0;overflow:visible}.b-toaster.b-toaster-bottom-center .b-toaster-slot,.b-toaster.b-toaster-bottom-full .b-toaster-slot,.b-toaster.b-toaster-bottom-left .b-toaster-slot,.b-toaster.b-toaster-bottom-right .b-toaster-slot,.b-toaster.b-toaster-top-center .b-toaster-slot,.b-toaster.b-toaster-top-full .b-toaster-slot,.b-toaster.b-toaster-top-left .b-toaster-slot,.b-toaster.b-toaster-top-right .b-toaster-slot{position:absolute;max-width:350px;width:100%;left:0;right:0;padding:0;margin:0}.b-toaster.b-toaster-bottom-full .b-toaster-slot,.b-toaster.b-toaster-bottom-full .b-toaster-slot .b-toast,.b-toaster.b-toaster-bottom-full .b-toaster-slot .toast,.b-toaster.b-toaster-top-full .b-toaster-slot,.b-toaster.b-toaster-top-full .b-toaster-slot .b-toast,.b-toaster.b-toaster-top-full .b-toaster-slot .toast{width:100%;max-width:100%}.b-toaster.b-toaster-top-center,.b-toaster.b-toaster-top-full,.b-toaster.b-toaster-top-left,.b-toaster.b-toaster-top-right{top:0}.b-toaster.b-toaster-top-center .b-toaster-slot,.b-toaster.b-toaster-top-full .b-toaster-slot,.b-toaster.b-toaster-top-left .b-toaster-slot,.b-toaster.b-toaster-top-right .b-toaster-slot{top:.5rem}.b-toaster.b-toaster-bottom-center,.b-toaster.b-toaster-bottom-full,.b-toaster.b-toaster-bottom-left,.b-toaster.b-toaster-bottom-right{bottom:0}.b-toaster.b-toaster-bottom-center .b-toaster-slot,.b-toaster.b-toaster-bottom-full .b-toaster-slot,.b-toaster.b-toaster-bottom-left .b-toaster-slot,.b-toaster.b-toaster-bottom-right .b-toaster-slot{bottom:.5rem}.b-toaster.b-toaster-bottom-center .b-toaster-slot,.b-toaster.b-toaster-bottom-right .b-toaster-slot,.b-toaster.b-toaster-top-center .b-toaster-slot,.b-toaster.b-toaster-top-right .b-toaster-slot{margin-left:auto}.b-toaster.b-toaster-bottom-center .b-toaster-slot,.b-toaster.b-toaster-bottom-left .b-toaster-slot,.b-toaster.b-toaster-top-center .b-toaster-slot,.b-toaster.b-toaster-top-left .b-toaster-slot{margin-right:auto}.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-enter-active,.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-move,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-enter-active,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-move,.b-toaster.b-toaster-top-left .b-toast.b-toaster-enter-active,.b-toaster.b-toaster-top-left .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-top-left .b-toast.b-toaster-move,.b-toaster.b-toaster-top-right .b-toast.b-toaster-enter-active,.b-toaster.b-toaster-top-right .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-top-right .b-toast.b-toaster-move{transition:transform .175s}.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-enter-active .toast.fade,.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-enter-to .toast.fade,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-enter-active .toast.fade,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-enter-to .toast.fade,.b-toaster.b-toaster-top-left .b-toast.b-toaster-enter-active .toast.fade,.b-toaster.b-toaster-top-left .b-toast.b-toaster-enter-to .toast.fade,.b-toaster.b-toaster-top-right .b-toast.b-toaster-enter-active .toast.fade,.b-toaster.b-toaster-top-right .b-toast.b-toaster-enter-to .toast.fade{transition-delay:.175s}.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-top-left .b-toast.b-toaster-leave-active,.b-toaster.b-toaster-top-right .b-toast.b-toaster-leave-active{position:absolute;transition-delay:.175s}.b-toaster.b-toaster-bottom-left .b-toast.b-toaster-leave-active .toast.fade,.b-toaster.b-toaster-bottom-right .b-toast.b-toaster-leave-active .toast.fade,.b-toaster.b-toaster-top-left .b-toast.b-toaster-leave-active .toast.fade,.b-toaster.b-toaster-top-right .b-toast.b-toaster-leave-active .toast.fade{transition-delay:0s}.tooltip.b-tooltip-primary.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-primary.bs-tooltip-top .arrow:before{border-top-color:#007bff}.tooltip.b-tooltip-primary.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-primary.bs-tooltip-right .arrow:before{border-right-color:#007bff}.tooltip.b-tooltip-primary.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-primary.bs-tooltip-bottom .arrow:before{border-bottom-color:#007bff}.tooltip.b-tooltip-primary.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-primary.bs-tooltip-left .arrow:before{border-left-color:#007bff}.tooltip.b-tooltip-primary .tooltip-inner{color:#fff;background-color:#007bff}.tooltip.b-tooltip-secondary.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-secondary.bs-tooltip-top .arrow:before{border-top-color:#6c757d}.tooltip.b-tooltip-secondary.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-secondary.bs-tooltip-right .arrow:before{border-right-color:#6c757d}.tooltip.b-tooltip-secondary.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-secondary.bs-tooltip-bottom .arrow:before{border-bottom-color:#6c757d}.tooltip.b-tooltip-secondary.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-secondary.bs-tooltip-left .arrow:before{border-left-color:#6c757d}.tooltip.b-tooltip-secondary .tooltip-inner{color:#fff;background-color:#6c757d}.tooltip.b-tooltip-success.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-success.bs-tooltip-top .arrow:before{border-top-color:#28a745}.tooltip.b-tooltip-success.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-success.bs-tooltip-right .arrow:before{border-right-color:#28a745}.tooltip.b-tooltip-success.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-success.bs-tooltip-bottom .arrow:before{border-bottom-color:#28a745}.tooltip.b-tooltip-success.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-success.bs-tooltip-left .arrow:before{border-left-color:#28a745}.tooltip.b-tooltip-success .tooltip-inner{color:#fff;background-color:#28a745}.tooltip.b-tooltip-info.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-info.bs-tooltip-top .arrow:before{border-top-color:#17a2b8}.tooltip.b-tooltip-info.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-info.bs-tooltip-right .arrow:before{border-right-color:#17a2b8}.tooltip.b-tooltip-info.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-info.bs-tooltip-bottom .arrow:before{border-bottom-color:#17a2b8}.tooltip.b-tooltip-info.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-info.bs-tooltip-left .arrow:before{border-left-color:#17a2b8}.tooltip.b-tooltip-info .tooltip-inner{color:#fff;background-color:#17a2b8}.tooltip.b-tooltip-warning.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-warning.bs-tooltip-top .arrow:before{border-top-color:#ffc107}.tooltip.b-tooltip-warning.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-warning.bs-tooltip-right .arrow:before{border-right-color:#ffc107}.tooltip.b-tooltip-warning.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-warning.bs-tooltip-bottom .arrow:before{border-bottom-color:#ffc107}.tooltip.b-tooltip-warning.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-warning.bs-tooltip-left .arrow:before{border-left-color:#ffc107}.tooltip.b-tooltip-warning .tooltip-inner{color:#212529;background-color:#ffc107}.tooltip.b-tooltip-danger.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-danger.bs-tooltip-top .arrow:before{border-top-color:#dc3545}.tooltip.b-tooltip-danger.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-danger.bs-tooltip-right .arrow:before{border-right-color:#dc3545}.tooltip.b-tooltip-danger.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-danger.bs-tooltip-bottom .arrow:before{border-bottom-color:#dc3545}.tooltip.b-tooltip-danger.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-danger.bs-tooltip-left .arrow:before{border-left-color:#dc3545}.tooltip.b-tooltip-danger .tooltip-inner{color:#fff;background-color:#dc3545}.tooltip.b-tooltip-light.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-light.bs-tooltip-top .arrow:before{border-top-color:#f8f9fa}.tooltip.b-tooltip-light.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-light.bs-tooltip-right .arrow:before{border-right-color:#f8f9fa}.tooltip.b-tooltip-light.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-light.bs-tooltip-bottom .arrow:before{border-bottom-color:#f8f9fa}.tooltip.b-tooltip-light.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-light.bs-tooltip-left .arrow:before{border-left-color:#f8f9fa}.tooltip.b-tooltip-light .tooltip-inner{color:#212529;background-color:#f8f9fa}.tooltip.b-tooltip-dark.bs-tooltip-auto[x-placement^=top] .arrow:before,.tooltip.b-tooltip-dark.bs-tooltip-top .arrow:before{border-top-color:#343a40}.tooltip.b-tooltip-dark.bs-tooltip-auto[x-placement^=right] .arrow:before,.tooltip.b-tooltip-dark.bs-tooltip-right .arrow:before{border-right-color:#343a40}.tooltip.b-tooltip-dark.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.tooltip.b-tooltip-dark.bs-tooltip-bottom .arrow:before{border-bottom-color:#343a40}.tooltip.b-tooltip-dark.bs-tooltip-auto[x-placement^=left] .arrow:before,.tooltip.b-tooltip-dark.bs-tooltip-left .arrow:before{border-left-color:#343a40}.tooltip.b-tooltip-dark .tooltip-inner{color:#fff;background-color:#343a40}", ""]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///170\n')},30:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.15.0\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(42)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},44:function(module,exports,__webpack_require__){"use strict";eval("\n /*! \n  * portal-vue © Thorsten Lünborg, 2019 \n  * \n  * Version: 2.1.5\n  * \n  * LICENCE: MIT \n  * \n  * https://github.com/linusborg/portal-vue\n  * \n */\n\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Vue = _interopDefault(__webpack_require__(7));\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar inBrowser = typeof window !== 'undefined';\nfunction freeze(item) {\n  if (Array.isArray(item) || _typeof(item) === 'object') {\n    return Object.freeze(item);\n  }\n\n  return item;\n}\nfunction combinePassengers(transports) {\n  var slotProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return transports.reduce(function (passengers, transport) {\n    var temp = transport.passengers[0];\n    var newPassengers = typeof temp === 'function' ? temp(slotProps) : transport.passengers;\n    return passengers.concat(newPassengers);\n  }, []);\n}\nfunction stableSort(array, compareFn) {\n  return array.map(function (v, idx) {\n    return [idx, v];\n  }).sort(function (a, b) {\n    return compareFn(a[1], b[1]) || a[0] - b[0];\n  }).map(function (c) {\n    return c[1];\n  });\n}\nfunction pick(obj, keys) {\n  return keys.reduce(function (acc, key) {\n    if (obj.hasOwnProperty(key)) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nvar transports = {};\nvar targets = {};\nvar sources = {};\nvar Wormhole = Vue.extend({\n  data: function data() {\n    return {\n      transports: transports,\n      targets: targets,\n      sources: sources,\n      trackInstances: inBrowser\n    };\n  },\n  methods: {\n    open: function open(transport) {\n      if (!inBrowser) return;\n      var to = transport.to,\n          from = transport.from,\n          passengers = transport.passengers,\n          _transport$order = transport.order,\n          order = _transport$order === void 0 ? Infinity : _transport$order;\n      if (!to || !from || !passengers) return;\n      var newTransport = {\n        to: to,\n        from: from,\n        passengers: freeze(passengers),\n        order: order\n      };\n      var keys = Object.keys(this.transports);\n\n      if (keys.indexOf(to) === -1) {\n        Vue.set(this.transports, to, []);\n      }\n\n      var currentIndex = this.$_getTransportIndex(newTransport); // Copying the array here so that the PortalTarget change event will actually contain two distinct arrays\n\n      var newTransports = this.transports[to].slice(0);\n\n      if (currentIndex === -1) {\n        newTransports.push(newTransport);\n      } else {\n        newTransports[currentIndex] = newTransport;\n      }\n\n      this.transports[to] = stableSort(newTransports, function (a, b) {\n        return a.order - b.order;\n      });\n    },\n    close: function close(transport) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var to = transport.to,\n          from = transport.from;\n      if (!to || !from) return;\n\n      if (!this.transports[to]) {\n        return;\n      }\n\n      if (force) {\n        this.transports[to] = [];\n      } else {\n        var index = this.$_getTransportIndex(transport);\n\n        if (index >= 0) {\n          // Copying the array here so that the PortalTarget change event will actually contain two distinct arrays\n          var newTransports = this.transports[to].slice(0);\n          newTransports.splice(index, 1);\n          this.transports[to] = newTransports;\n        }\n      }\n    },\n    registerTarget: function registerTarget(target, vm, force) {\n      if (!inBrowser) return;\n\n      if (this.trackInstances && !force && this.targets[target]) {\n        console.warn(\"[portal-vue]: Target \".concat(target, \" already exists\"));\n      }\n\n      this.$set(this.targets, target, Object.freeze([vm]));\n    },\n    unregisterTarget: function unregisterTarget(target) {\n      this.$delete(this.targets, target);\n    },\n    registerSource: function registerSource(source, vm, force) {\n      if (!inBrowser) return;\n\n      if (this.trackInstances && !force && this.sources[source]) {\n        console.warn(\"[portal-vue]: source \".concat(source, \" already exists\"));\n      }\n\n      this.$set(this.sources, source, Object.freeze([vm]));\n    },\n    unregisterSource: function unregisterSource(source) {\n      this.$delete(this.sources, source);\n    },\n    hasTarget: function hasTarget(to) {\n      return !!(this.targets[to] && this.targets[to][0]);\n    },\n    hasSource: function hasSource(to) {\n      return !!(this.sources[to] && this.sources[to][0]);\n    },\n    hasContentFor: function hasContentFor(to) {\n      return !!this.transports[to] && !!this.transports[to].length;\n    },\n    // Internal\n    $_getTransportIndex: function $_getTransportIndex(_ref) {\n      var to = _ref.to,\n          from = _ref.from;\n\n      for (var i in this.transports[to]) {\n        if (this.transports[to][i].from === from) {\n          return +i;\n        }\n      }\n\n      return -1;\n    }\n  }\n});\nvar wormhole = new Wormhole(transports);\n\nvar _id = 1;\nvar Portal = Vue.extend({\n  name: 'portal',\n  props: {\n    disabled: {\n      type: Boolean\n    },\n    name: {\n      type: String,\n      default: function _default() {\n        return String(_id++);\n      }\n    },\n    order: {\n      type: Number,\n      default: 0\n    },\n    slim: {\n      type: Boolean\n    },\n    slotProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    tag: {\n      type: String,\n      default: 'DIV'\n    },\n    to: {\n      type: String,\n      default: function _default() {\n        return String(Math.round(Math.random() * 10000000));\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      wormhole.registerSource(_this.name, _this);\n    });\n  },\n  mounted: function mounted() {\n    if (!this.disabled) {\n      this.sendUpdate();\n    }\n  },\n  updated: function updated() {\n    if (this.disabled) {\n      this.clear();\n    } else {\n      this.sendUpdate();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    wormhole.unregisterSource(this.name);\n    this.clear();\n  },\n  watch: {\n    to: function to(newValue, oldValue) {\n      oldValue && oldValue !== newValue && this.clear(oldValue);\n      this.sendUpdate();\n    }\n  },\n  methods: {\n    clear: function clear(target) {\n      var closer = {\n        from: this.name,\n        to: target || this.to\n      };\n      wormhole.close(closer);\n    },\n    normalizeSlots: function normalizeSlots() {\n      return this.$scopedSlots.default ? [this.$scopedSlots.default] : this.$slots.default;\n    },\n    normalizeOwnChildren: function normalizeOwnChildren(children) {\n      return typeof children === 'function' ? children(this.slotProps) : children;\n    },\n    sendUpdate: function sendUpdate() {\n      var slotContent = this.normalizeSlots();\n\n      if (slotContent) {\n        var transport = {\n          from: this.name,\n          to: this.to,\n          passengers: _toConsumableArray(slotContent),\n          order: this.order\n        };\n        wormhole.open(transport);\n      } else {\n        this.clear();\n      }\n    }\n  },\n  render: function render(h) {\n    var children = this.$slots.default || this.$scopedSlots.default || [];\n    var Tag = this.tag;\n\n    if (children && this.disabled) {\n      return children.length <= 1 && this.slim ? this.normalizeOwnChildren(children)[0] : h(Tag, [this.normalizeOwnChildren(children)]);\n    } else {\n      return this.slim ? h() : h(Tag, {\n        class: {\n          'v-portal': true\n        },\n        style: {\n          display: 'none'\n        },\n        key: 'v-portal-placeholder'\n      });\n    }\n  }\n});\n\nvar PortalTarget = Vue.extend({\n  name: 'portalTarget',\n  props: {\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    slim: {\n      type: Boolean,\n      default: false\n    },\n    slotProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    transition: {\n      type: [String, Object, Function]\n    }\n  },\n  data: function data() {\n    return {\n      transports: wormhole.transports,\n      firstRender: true\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      wormhole.registerTarget(_this.name, _this);\n    });\n  },\n  watch: {\n    ownTransports: function ownTransports() {\n      this.$emit('change', this.children().length > 0);\n    },\n    name: function name(newVal, oldVal) {\n      /**\r\n       * TODO\r\n       * This should warn as well ...\r\n       */\n      wormhole.unregisterTarget(oldVal);\n      wormhole.registerTarget(newVal, this);\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    if (this.transition) {\n      this.$nextTick(function () {\n        // only when we have a transition, because it causes a re-render\n        _this2.firstRender = false;\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    wormhole.unregisterTarget(this.name);\n  },\n  computed: {\n    ownTransports: function ownTransports() {\n      var transports = this.transports[this.name] || [];\n\n      if (this.multiple) {\n        return transports;\n      }\n\n      return transports.length === 0 ? [] : [transports[transports.length - 1]];\n    },\n    passengers: function passengers() {\n      return combinePassengers(this.ownTransports, this.slotProps);\n    }\n  },\n  methods: {\n    // can't be a computed prop because it has to \"react\" to $slot changes.\n    children: function children() {\n      return this.passengers.length !== 0 ? this.passengers : this.$scopedSlots.default ? this.$scopedSlots.default(this.slotProps) : this.$slots.default || [];\n    },\n    // can't be a computed prop because it has to \"react\" to this.children().\n    noWrapper: function noWrapper() {\n      var noWrapper = this.slim && !this.transition;\n\n      if (noWrapper && this.children().length > 1) {\n        console.warn('[portal-vue]: PortalTarget with `slim` option received more than one child element.');\n      }\n\n      return noWrapper;\n    }\n  },\n  render: function render(h) {\n    var noWrapper = this.noWrapper();\n    var children = this.children();\n    var Tag = this.transition || this.tag;\n    return noWrapper ? children[0] : this.slim && !Tag ? h() : h(Tag, {\n      props: {\n        // if we have a transition component, pass the tag if it exists\n        tag: this.transition && this.tag ? this.tag : undefined\n      },\n      class: {\n        'vue-portal-target': true\n      }\n    }, children);\n  }\n});\n\nvar _id$1 = 0;\nvar portalProps = ['disabled', 'name', 'order', 'slim', 'slotProps', 'tag', 'to'];\nvar targetProps = ['multiple', 'transition'];\nvar MountingPortal = Vue.extend({\n  name: 'MountingPortal',\n  inheritAttrs: false,\n  props: {\n    append: {\n      type: [Boolean, String]\n    },\n    bail: {\n      type: Boolean\n    },\n    mountTo: {\n      type: String,\n      required: true\n    },\n    // Portal\n    disabled: {\n      type: Boolean\n    },\n    // name for the portal\n    name: {\n      type: String,\n      default: function _default() {\n        return 'mounted_' + String(_id$1++);\n      }\n    },\n    order: {\n      type: Number,\n      default: 0\n    },\n    slim: {\n      type: Boolean\n    },\n    slotProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    tag: {\n      type: String,\n      default: 'DIV'\n    },\n    // name for the target\n    to: {\n      type: String,\n      default: function _default() {\n        return String(Math.round(Math.random() * 10000000));\n      }\n    },\n    // Target\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    targetSlim: {\n      type: Boolean\n    },\n    targetSlotProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    targetTag: {\n      type: String,\n      default: 'div'\n    },\n    transition: {\n      type: [String, Object, Function]\n    }\n  },\n  created: function created() {\n    if (typeof document === 'undefined') return;\n    var el = document.querySelector(this.mountTo);\n\n    if (!el) {\n      console.error(\"[portal-vue]: Mount Point '\".concat(this.mountTo, \"' not found in document\"));\n      return;\n    }\n\n    var props = this.$props; // Target already exists\n\n    if (wormhole.targets[props.name]) {\n      if (props.bail) {\n        console.warn(\"[portal-vue]: Target \".concat(props.name, \" is already mounted.\\n        Aborting because 'bail: true' is set\"));\n      } else {\n        this.portalTarget = wormhole.targets[props.name];\n      }\n\n      return;\n    }\n\n    var append = props.append;\n\n    if (append) {\n      var type = typeof append === 'string' ? append : 'DIV';\n      var mountEl = document.createElement(type);\n      el.appendChild(mountEl);\n      el = mountEl;\n    } // get props for target from $props\n    // we have to rename a few of them\n\n\n    var _props = pick(this.$props, targetProps);\n\n    _props.slim = this.targetSlim;\n    _props.tag = this.targetTag;\n    _props.slotProps = this.targetSlotProps;\n    _props.name = this.to;\n    this.portalTarget = new PortalTarget({\n      el: el,\n      parent: this.$parent || this,\n      propsData: _props\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    var target = this.portalTarget;\n\n    if (this.append) {\n      var el = target.$el;\n      el.parentNode.removeChild(el);\n    }\n\n    target.$destroy();\n  },\n  render: function render(h) {\n    if (!this.portalTarget) {\n      console.warn(\"[portal-vue] Target wasn't mounted\");\n      return h();\n    } // if there's no \"manual\" scoped slot, so we create a <Portal> ourselves\n\n\n    if (!this.$scopedSlots.manual) {\n      var props = pick(this.$props, portalProps);\n      return h(Portal, {\n        props: props,\n        attrs: this.$attrs,\n        on: this.$listeners,\n        scopedSlots: this.$scopedSlots\n      }, this.$slots.default);\n    } // else, we render the scoped slot\n\n\n    var content = this.$scopedSlots.manual({\n      to: this.to\n    }); // if user used <template> for the scoped slot\n    // content will be an array\n\n    if (Array.isArray(content)) {\n      content = content[0];\n    }\n\n    if (!content) return h();\n    return content;\n  }\n});\n\nfunction install(Vue$$1) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Vue$$1.component(options.portalName || 'Portal', Portal);\n  Vue$$1.component(options.portalTargetName || 'PortalTarget', PortalTarget);\n  Vue$$1.component(options.MountingPortalName || 'MountingPortal', MountingPortal);\n}\n\nvar index = {\n  install: install\n};\n\nexports.default = index;\nexports.Portal = Portal;\nexports.PortalTarget = PortalTarget;\nexports.MountingPortal = MountingPortal;\nexports.Wormhole = wormhole;\n//# sourceMappingURL=portal-vue.common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n")},51:function(module,exports,__webpack_require__){"use strict";eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMsZ0JBQWdCO0FBQ3ZELE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7OztBQUdKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxvQkFBb0I7QUFDbkMsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxjQUFjO0FBQ25FO0FBQ0EiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n")},52:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n")},6:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return hasWindowSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return hasDocumentSupport; });\n/* unused harmony export hasNavigatorSupport */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return hasPromiseSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return hasMutationObserverSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return isBrowser; });\n/* unused harmony export userAgent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return isJSDOM; });\n/* unused harmony export isIE */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return hasPassiveEventSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return hasTouchSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return hasPointerEventSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return hasIntersectionObserverSupport; });\n/* unused harmony export getEnv */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getNoWarn; });\n/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * Utilities to get information about the current environment\n */\n// --- Constants ---\nvar hasWindowSupport = typeof window !== 'undefined';\nvar hasDocumentSupport = typeof document !== 'undefined';\nvar hasNavigatorSupport = typeof navigator !== 'undefined';\nvar hasPromiseSupport = typeof Promise !== 'undefined';\nvar hasMutationObserverSupport = typeof MutationObserver !== 'undefined' || typeof WebKitMutationObserver !== 'undefined' || typeof MozMutationObserver !== 'undefined';\nvar isBrowser = hasWindowSupport && hasDocumentSupport && hasNavigatorSupport; // Browser type sniffing\n\nvar userAgent = isBrowser ? window.navigator.userAgent.toLowerCase() : '';\nvar isJSDOM = userAgent.indexOf('jsdom') > 0;\nvar isIE = /msie|trident/.test(userAgent); // Determine if the browser supports the option passive for events\n\nvar hasPassiveEventSupport = function () {\n  var passiveEventSupported = false;\n\n  if (isBrowser) {\n    try {\n      var options = {\n        get passive() {\n          // This function will be called when the browser\n          // attempts to access the passive property.\n\n          /* istanbul ignore next: will never be called in JSDOM */\n          passiveEventSupported = true;\n        }\n\n      };\n      window.addEventListener('test', options, options);\n      window.removeEventListener('test', options, options);\n    } catch (err) {\n      /* istanbul ignore next: will never be called in JSDOM */\n      passiveEventSupported = false;\n    }\n  }\n\n  return passiveEventSupported;\n}();\nvar hasTouchSupport = isBrowser && ('ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0);\nvar hasPointerEventSupport = isBrowser && Boolean(window.PointerEvent || window.MSPointerEvent);\nvar hasIntersectionObserverSupport = isBrowser && 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && // Edge 15 and UC Browser lack support for `isIntersecting`\n// but we an use intersectionRatio > 0 instead\n// 'isIntersecting' in window.IntersectionObserverEntry.prototype &&\n'intersectionRatio' in window.IntersectionObserverEntry.prototype; // --- Getters ---\n\nvar getEnv = function getEnv(key) {\n  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var env = typeof process !== 'undefined' && process ? process.env || {} : {};\n\n  if (!key) {\n    /* istanbul ignore next */\n    return env;\n  }\n\n  return env[key] || fallback;\n};\nvar getNoWarn = function getNoWarn() {\n  return getEnv('BOOTSTRAP_VUE_NO_WARN');\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(124)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwLXZ1ZS9zcmMvdXRpbHMvZW52LmpzPzBiYWUiXSwibmFtZXMiOlsiaGFzV2luZG93U3VwcG9ydCIsIndpbmRvdyIsImhhc0RvY3VtZW50U3VwcG9ydCIsImRvY3VtZW50IiwiaGFzTmF2aWdhdG9yU3VwcG9ydCIsIm5hdmlnYXRvciIsImhhc1Byb21pc2VTdXBwb3J0IiwiUHJvbWlzZSIsImhhc011dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0IiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiaXNCcm93c2VyIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJpc0pTRE9NIiwiaW5kZXhPZiIsImlzSUUiLCJ0ZXN0IiwiaGFzUGFzc2l2ZUV2ZW50U3VwcG9ydCIsInBhc3NpdmVFdmVudFN1cHBvcnRlZCIsIm9wdGlvbnMiLCJwYXNzaXZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlcnIiLCJoYXNUb3VjaFN1cHBvcnQiLCJkb2N1bWVudEVsZW1lbnQiLCJtYXhUb3VjaFBvaW50cyIsImhhc1BvaW50ZXJFdmVudFN1cHBvcnQiLCJCb29sZWFuIiwiUG9pbnRlckV2ZW50IiwiTVNQb2ludGVyRXZlbnQiLCJoYXNJbnRlcnNlY3Rpb25PYnNlcnZlclN1cHBvcnQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IiwicHJvdG90eXBlIiwiZ2V0RW52Iiwia2V5IiwiZmFsbGJhY2siLCJlbnYiLCJwcm9jZXNzIiwiZ2V0Tm9XYXJuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7OztBQUlBO0FBRU8sSUFBTUEsZ0JBQWdCLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUEzQztBQUNBLElBQU1DLGtCQUFrQixHQUFHLE9BQU9DLFFBQVAsS0FBb0IsV0FBL0M7QUFDQSxJQUFNQyxtQkFBbUIsR0FBRyxPQUFPQyxTQUFQLEtBQXFCLFdBQWpEO0FBQ0EsSUFBTUMsaUJBQWlCLEdBQUcsT0FBT0MsT0FBUCxLQUFtQixXQUE3QztBQUNBLElBQU1DLDBCQUEwQixHQUNyQyxPQUFPQyxnQkFBUCxLQUE0QixXQUE1QixJQUNBLE9BQU9DLHNCQUFQLEtBQWtDLFdBRGxDLElBRUEsT0FBT0MsbUJBQVAsS0FBK0IsV0FIMUI7QUFLQSxJQUFNQyxTQUFTLEdBQUdaLGdCQUFnQixJQUFJRSxrQkFBcEIsSUFBMENFLG1CQUE1RCxDLENBRVA7O0FBQ08sSUFBTVMsU0FBUyxHQUFHRCxTQUFTLEdBQUdYLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQlEsU0FBakIsQ0FBMkJDLFdBQTNCLEVBQUgsR0FBOEMsRUFBekU7QUFFQSxJQUFNQyxPQUFPLEdBQUdGLFNBQVMsQ0FBQ0csT0FBVixDQUFrQixPQUFsQixJQUE2QixDQUE3QztBQUNBLElBQU1DLElBQUksR0FBRyxlQUFlQyxJQUFmLENBQW9CTCxTQUFwQixDQUFiLEMsQ0FFUDs7QUFDTyxJQUFNTSxzQkFBc0IsR0FBSSxZQUFNO0FBQzNDLE1BQUlDLHFCQUFxQixHQUFHLEtBQTVCOztBQUNBLE1BQUlSLFNBQUosRUFBZTtBQUNiLFFBQUk7QUFDRixVQUFNUyxPQUFPLEdBQUc7QUFDZCxZQUFJQyxPQUFKLEdBQWM7QUFDWjtBQUNBOztBQUNBO0FBQ0FGLCtCQUFxQixHQUFHLElBQXhCO0FBQ0Q7O0FBTmEsT0FBaEI7QUFRQW5CLFlBQU0sQ0FBQ3NCLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDRixPQUFoQyxFQUF5Q0EsT0FBekM7QUFDQXBCLFlBQU0sQ0FBQ3VCLG1CQUFQLENBQTJCLE1BQTNCLEVBQW1DSCxPQUFuQyxFQUE0Q0EsT0FBNUM7QUFDRCxLQVhELENBV0UsT0FBT0ksR0FBUCxFQUFZO0FBQ1o7QUFDQUwsMkJBQXFCLEdBQUcsS0FBeEI7QUFDRDtBQUNGOztBQUNELFNBQU9BLHFCQUFQO0FBQ0QsQ0FwQnFDLEVBQS9CO0FBc0JBLElBQU1NLGVBQWUsR0FDMUJkLFNBQVMsS0FBSyxrQkFBa0JULFFBQVEsQ0FBQ3dCLGVBQTNCLElBQThDdEIsU0FBUyxDQUFDdUIsY0FBVixHQUEyQixDQUE5RSxDQURKO0FBR0EsSUFBTUMsc0JBQXNCLEdBQ2pDakIsU0FBUyxJQUFJa0IsT0FBTyxDQUFDN0IsTUFBTSxDQUFDOEIsWUFBUCxJQUF1QjlCLE1BQU0sQ0FBQytCLGNBQS9CLENBRGY7QUFHQSxJQUFNQyw4QkFBOEIsR0FDekNyQixTQUFTLElBQ1QsMEJBQTBCWCxNQUQxQixJQUVBLCtCQUErQkEsTUFGL0IsSUFHQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUJBLE1BQU0sQ0FBQ2lDLHlCQUFQLENBQWlDQyxTQVBuRCxDLENBU1A7O0FBRU8sSUFBTUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBQ0MsR0FBRCxFQUEwQjtBQUFBLE1BQXBCQyxRQUFvQix1RUFBVCxJQUFTO0FBQzlDLE1BQU1DLEdBQUcsR0FBRyxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxPQUFsQyxHQUE0Q0EsT0FBTyxDQUFDRCxHQUFSLElBQWUsRUFBM0QsR0FBZ0UsRUFBNUU7O0FBQ0EsTUFBSSxDQUFDRixHQUFMLEVBQVU7QUFDUjtBQUNBLFdBQU9FLEdBQVA7QUFDRDs7QUFDRCxTQUFPQSxHQUFHLENBQUNGLEdBQUQsQ0FBSCxJQUFZQyxRQUFuQjtBQUNELENBUE07QUFTQSxJQUFNRyxTQUFTLEdBQUcsU0FBWkEsU0FBWTtBQUFBLFNBQU1MLE1BQU0sQ0FBQyx1QkFBRCxDQUFaO0FBQUEsQ0FBbEIsQyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVdGlsaXRpZXMgdG8gZ2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGVudmlyb25tZW50XG4gKi9cblxuLy8gLS0tIENvbnN0YW50cyAtLS1cblxuZXhwb3J0IGNvbnN0IGhhc1dpbmRvd1N1cHBvcnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuZXhwb3J0IGNvbnN0IGhhc0RvY3VtZW50U3VwcG9ydCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbmV4cG9ydCBjb25zdCBoYXNOYXZpZ2F0b3JTdXBwb3J0ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbmV4cG9ydCBjb25zdCBoYXNQcm9taXNlU3VwcG9ydCA9IHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJ1xuZXhwb3J0IGNvbnN0IGhhc011dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ID1cbiAgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnIHx8XG4gIHR5cGVvZiBXZWJLaXRNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyB8fFxuICB0eXBlb2YgTW96TXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCdcblxuZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9IGhhc1dpbmRvd1N1cHBvcnQgJiYgaGFzRG9jdW1lbnRTdXBwb3J0ICYmIGhhc05hdmlnYXRvclN1cHBvcnRcblxuLy8gQnJvd3NlciB0eXBlIHNuaWZmaW5nXG5leHBvcnQgY29uc3QgdXNlckFnZW50ID0gaXNCcm93c2VyID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSA6ICcnXG5cbmV4cG9ydCBjb25zdCBpc0pTRE9NID0gdXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPiAwXG5leHBvcnQgY29uc3QgaXNJRSA9IC9tc2llfHRyaWRlbnQvLnRlc3QodXNlckFnZW50KVxuXG4vLyBEZXRlcm1pbmUgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIG9wdGlvbiBwYXNzaXZlIGZvciBldmVudHNcbmV4cG9ydCBjb25zdCBoYXNQYXNzaXZlRXZlbnRTdXBwb3J0ID0gKCgpID0+IHtcbiAgbGV0IHBhc3NpdmVFdmVudFN1cHBvcnRlZCA9IGZhbHNlXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBicm93c2VyXG4gICAgICAgICAgLy8gYXR0ZW1wdHMgdG8gYWNjZXNzIHRoZSBwYXNzaXZlIHByb3BlcnR5LlxuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiB3aWxsIG5ldmVyIGJlIGNhbGxlZCBpbiBKU0RPTSAqL1xuICAgICAgICAgIHBhc3NpdmVFdmVudFN1cHBvcnRlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHdpbGwgbmV2ZXIgYmUgY2FsbGVkIGluIEpTRE9NICovXG4gICAgICBwYXNzaXZlRXZlbnRTdXBwb3J0ZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFzc2l2ZUV2ZW50U3VwcG9ydGVkXG59KSgpXG5cbmV4cG9ydCBjb25zdCBoYXNUb3VjaFN1cHBvcnQgPVxuICBpc0Jyb3dzZXIgJiYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKVxuXG5leHBvcnQgY29uc3QgaGFzUG9pbnRlckV2ZW50U3VwcG9ydCA9XG4gIGlzQnJvd3NlciAmJiBCb29sZWFuKHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgd2luZG93Lk1TUG9pbnRlckV2ZW50KVxuXG5leHBvcnQgY29uc3QgaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTdXBwb3J0ID1cbiAgaXNCcm93c2VyICYmXG4gICdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmXG4gICdJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5JyBpbiB3aW5kb3cgJiZcbiAgLy8gRWRnZSAxNSBhbmQgVUMgQnJvd3NlciBsYWNrIHN1cHBvcnQgZm9yIGBpc0ludGVyc2VjdGluZ2BcbiAgLy8gYnV0IHdlIGFuIHVzZSBpbnRlcnNlY3Rpb25SYXRpbyA+IDAgaW5zdGVhZFxuICAvLyAnaXNJbnRlcnNlY3RpbmcnIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSAmJlxuICAnaW50ZXJzZWN0aW9uUmF0aW8nIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZVxuXG4vLyAtLS0gR2V0dGVycyAtLS1cblxuZXhwb3J0IGNvbnN0IGdldEVudiA9IChrZXksIGZhbGxiYWNrID0gbnVsbCkgPT4ge1xuICBjb25zdCBlbnYgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2VzcyA/IHByb2Nlc3MuZW52IHx8IHt9IDoge31cbiAgaWYgKCFrZXkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiBlbnZcbiAgfVxuICByZXR1cm4gZW52W2tleV0gfHwgZmFsbGJhY2tcbn1cblxuZXhwb3J0IGNvbnN0IGdldE5vV2FybiA9ICgpID0+IGdldEVudignQk9PVFNUUkFQX1ZVRV9OT19XQVJOJylcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")}}]);